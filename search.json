[{"title":"CF1477E - Nezzar and Tournaments","url":"/articles/2021/05/21/fe60afd6.html","content":"# CF1477E - Nezzar and Tournaments\n\n### 题目大意\n\n有两队人$a_i,i\\in[1,n],b_j,j\\in[1,m]$，现在把他们放在一起排成一行$c_i$\n\n顺次给每个人计分，初始$s_0=k$\n\n$s_i=\\max\\{0,s_{i-1}+c_i-c_{\\max\\{i-1,1\\} } \\}$\n\n现在要最大化每个$a_i$所在位置的$s_i$之和 与 $b_i$所在$s_i$之和 的差\n\n支持修改和对于不同$k$查询\n\n<br>\n\n### 分析\n\n考虑$k=0$简单情况\n\n1.若$s_i$不清零，则$s_i=c_i-lst$，其中$lst$表示上一个被清零位置的$c_j$\n\n2.$s_i$清零，则$c_i<lst$\n\n容易发现，$\\displaystyle s_i=c_i-\\min_{j\\leq i} \\{ c_j\\}$\n\n<br>\n\n那么对于含$k$的情况，类似可以得到\n\n$\\displaystyle s_i=k-c_1+c_i+\\max\\{0,c_1-k-\\min_{j\\leq i} \\{c_j\\} \\}$\n\n假设我们固定了一个$c_1$，现在考虑对于剩下的$a_i,b_j$排出一个最优的排列\n\n容易发现，$k-c_1+c_i$的贡献时固定的，只有前缀最小值会影响答案\n\n我们希望对于$b_i$，前缀最小值较大，$a_i$反之\n\n那么容易发现可以先降序排列$b_j$，再正序排列$a_i$\n\n此时$b_{\\min}$可以贡献给$a_i$的前缀最小值，同时$b_j$的前缀最小值能够取到最大\n\n<br>\n\n此时，不妨设$c_1=t$，$\\min\\{a_i,b_i\\}=Min$\n\n在$\\min\\{c_j\\}=c_1$时，$\\max$里的东西没有贡献，故可以得到\n\n1.对于每个$a_i$，若它没有被放在$c_1$，则贡献$k-t+a_i+\\max\\{0,t-k-Min\\}$\n\n2.对于每个$b_i$（不特殊考虑第一个），则贡献$-(k-t+b_i+\\max\\{0,t-k-b_i\\})$（忽略最小值为$t$的情况）\n\n则最终式子为\n\n$\\displaystyle f(t)=(n-[t\\in a_i])\\cdot  \\max\\{0,t-k-Min\\}-\\sum \\max\\{0,t-k-b_i\\}+(m-n)t+C$\n\n其中$C=(n-m)k+\\sum a_i-\\sum b_i$\n\n容易发现$f(t)$是关于$t$的分段一次函数，根据斜率变化情况分析，极值位置仅$O(1)$个\n\n那么对于$a_i$作为$t$和$b_j$作为$t$的情况，分别计算$f(t)$的极值位置\n\n极值位置需要一个$k$大查询和$\\text{lower_bound}$\n\n计算$f(t)$需要一个前缀查询\n\n我用$\\text{BIT}$充当平衡树来维护，复杂度为$O((n+m+q)\\log 10^6)$\n\n```cpp\nconst int N=1e6+10,INF=1e9+10;\n\nint n,m,q;\nint a[N],b[N];\nstruct BIT{\n\tll s[N];\n\tint c[N],n;\n\tvoid Init(int m){ n=m; }\n\tvoid Add(int p,int x,int y){\n\t\tp++;\n\t\twhile(p<N) s[p]+=x,c[p]+=y,p+=p&-p;\n\t}\n\tll Que(int p){\n\t\tp++;\n\t\tif(p<=0) return 0;\n\t\tll sum=0,cnt=0,t=p-1;\n\t\twhile(p) sum+=s[p],cnt+=c[p],p-=p&-p;\n\t\treturn t*cnt-sum;\n\t}\n\tint Rank(int p){\n\t\tif(p<0) return 0; // 一些奇怪的边界特判 ，防止查询越界\n\t\tp++,cmin(p,N-1);\n\t\tint res=0;\n\t\twhile(p) res+=c[p],p-=p&-p;\n\t\treturn res;\n\t}\n\tint Kth(int k){ // 注意一定要避免找到并不存在的数值\n\t\tcmin(k,n),cmax(k,1);\n\t\tint p=0;\n\t\tdrep(i,19,0) if(p+(1<<i)<N && c[p+(1<<i)]<k) k-=c[p+=1<<i];\n\t\treturn p;\n\t}\n\tint Prev(int x) { return Kth(Rank(x)); }\n\tint Next(int x) { return Kth(min(n,Rank(x)+1)); }\n} A,B;\n\nll delta;\nvoid AddA(int x,int k){\n\tdelta+=x*k;\n\tA.Add(x,x*k,k);\n}\nvoid AddB(int x,int k){\n\tdelta-=x*k;\n\tB.Add(x,x*k,k);\n}\n\nll QueA(ll k){\n\tll Min=min(A.Kth(1),B.Kth(1));\n\tauto F=[&](ll t){ return (n-1)*max(0ll,t-k-Min)-B.Que(t-k)+(m-n)*t; };\n\tll ans=max(F(A.Kth(1)),F(A.Kth(n)));\n\tint p=B.Kth(m-1)+k;\n\tcmax(ans,F(A.Prev(p))),cmax(ans,F(A.Next(p)));\n\treturn ans;\n}\n\nll QueB(ll k){\n\tll Min=min(A.Kth(1),B.Kth(1));\n\tauto F=[&](ll t){ return n*max(0ll,t-k-Min)-B.Que(t-k)+(m-n)*t; };\n\tll ans=max(F(B.Kth(1)),F(B.Kth(m)));\n\tint p=B.Kth(m)+k;\n\tcmax(ans,F(B.Prev(p))),cmax(ans,F(B.Next(p)));\n\treturn ans;\n}\n\nll Que(ll k){\n\treturn max(QueA(k),QueB(k))+delta+(n-m)*k;\n}\n\nint main(){\n\tn=rd(),m=rd(),q=rd(),A.Init(n),B.Init(m);\n\trep(i,1,n) AddA(a[i]=rd(),1);\n\trep(i,1,m) AddB(b[i]=rd(),1);\n\twhile(q--) {\n\t\tint opt=rd();\n\t\tif(opt==1) {\n\t\t\tint x=rd(),y=rd();\n\t\t\tAddA(a[x],-1),AddA(a[x]=y,1);\n\t\t} else if(opt==2) {\n\t\t\tint x=rd(),y=rd();\n\t\t\tAddB(b[x],-1),AddB(b[x]=y,1);\n\t\t} else printf(\"%lld\\n\",Que(rd()));\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"下降幂多项式","url":"/articles/2021/05/20/15776de2.html","content":"# 下降幂多项式\n\n----------------------\n\n## 下降幂的定义\n\n下降幂$\\text{Falling Factorial}$\n\n下降幂多项式$\\text{Falling Factorial Polynomial}$下面简称$\\text{FFP}$\n\n$x$的$n$阶下降幂$x^{\\underline n}=\\prod_0^{n-1}(x-i) = \\frac{x!} {(x-n)!}$\n\n一个下降幂多项式$F(x)=\\sum a_ix^{\\underline i}$\n\n[学习了斯特林数或许对于下降幂的性质能够有所了解](https://www.cnblogs.com/chasedeath/p/14049870.html)\n\n<br>\n\n<br>\n\n-------\n\n### 快速求解$x^{\\underline n}$的展开形式\n\n$x^{\\underline{n} }=x(x-1)\\cdots (x-n+1)$\n\n考虑倍增求解，假设已知$F(x)=x^{\\underline{n} }$\n\n要求$G(x)=x^{\\underline{2n} }$\n\n显然$G(x)=F(x)F(x-n)$\n\n而{%raw%}$\\begin{aligned} F(x-n)=\\sum_{i=0}^{n} [x^i]F(x) \\cdot (x-n)^i\\end{aligned}${%endraw%}\n\n用一次卷积处理这个二项展开即可\n\n复杂度为$O(n\\log n)$\n\n<br>\n\n--------------------\n\n\n\n## FFP与其点值的$\\text{EGF}$\n\n点值的$\\text{EGF}$为{%raw%}$\\begin{aligned} EGF(F(x))=\\sum_0^{\\infty}\\frac{F(i)x^i } {i!}\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned}EGF(F(x))=\\sum_{i=0}^{\\infty}\\frac{x^i} {i!}\\sum_{j=0}^{n} \\frac{i!} {(i-j)!}\\cdot F_j\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned}EGF(F(x))=\\sum_{i=0}^{\\infty}x^i \\sum_{j=0}^{n} \\frac{1} {(i-j)!}\\cdot F_j\\end{aligned}${%endraw%}\n\n换一下顺序\n\n{%raw%}$\\begin{aligned}EGF(F(x))=\\sum_{i=0}^{n} F_i \\sum_{j=i}^{\\infty}\\frac{1} {(j-i)!} x^j\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned}EGF(F(x))=\\sum_{i=0}^{n} F_i \\cdot x^i \\sum_{j=0}^{\\infty}\\frac{1} {j!} x^j\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned}EGF(F(x))=\\sum_{i=0}^{n} F_i \\cdot x^i e^x\\end{aligned}${%endraw%}\n\n那么直接和$e^x$卷积就可以得到$F(x)$的$\\text{EGF}$\n\nTips: $e^x$直接带入展开式{%raw%}$\\begin{aligned} e^{ax}=\\sum_0^{\\infty}\\frac{(ax)^i} {i!} \\end {aligned}${%endraw%}\n\n如果要从$\\text{EGF}$得到$F(x)$\n\n{%raw%}$\\begin{aligned}EGF(F(x))=\\sum_{i=0}^{n} F_i \\cdot x^ie^x\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned} F_i=\\frac{EGF(F(x))} {x^ie^x} \\end{aligned}${%endraw%}\n\n那么就直接卷上$e^{-x}$就可以了\n\n即可以通过简单卷积完成$\\text{FFP} \\Longleftrightarrow \\text{EGF}$的转化\n\n<br>\n\n------\n\n## FFP卷积\n\n\n求出$\\text{EGF}$，然后点值对应相乘(注意乘完之后要补上一个$i!$)，最后再反求$F(x)$\n\n<br>\n\n<br>\n\n------------------------------\n\nTips: 下面的知识恐怕需要先学[多点求值/快速插值](https://www.cnblogs.com/chasedeath/p/13073178.html)\n\n## 多项式转FFP\n\n带入$0,\\cdots n-1$，多点求值得到$\\text{FFP}$点值的$EGF$，然后求得到$\\text{FFP}$\n\n\n\n<br>\n\n<br>\n\n-------\n\n## FFP转多项式\n\n求出$F(x)$的$EGF$，然后带入前$n$项的值，快速插值回来即可\n\n由于$x_i$是连续的，所以不需要再多点求值求解$\\prod\\frac{1} {x_i-x_j}$，可以直接阶乘得到\n\n<br>\n\n<br>\n\n## 关于上升幂\n\n$x^{\\overline n}=\\frac{(x+n-1)!} {(x-1)!}=x(x+1)(x+2)\\cdots(x+n-1)$\n\n容易发现的是$x^{\\overline n}=(-x)(-((-x)-1))(-((-x)-2))\\cdots (-(-x-(n-1)))=(-1)^n (-x)^{\\underline{n} }$\n\n所以上升幂多项式与普通多项式的转化 可以认为是上面的点值变成了$0,-1,\\cdots ,-(n-1)$，奇数项系数取反\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"CF1411F - the Thorny Path","url":"/articles/2021/05/20/8d2e7059.html","content":"# CF1411F - The Thorny Path\n\n### 题目大意\n\n给定一个置换$p_i$，求通过最少次交换$p_i,p_j$，使得最终的置换中所有置换环$size$乘积最大\n\n<br>\n\n### 分析\n\n一个常规结论：\n\n对于$n(n\\ge 3)$的拆分$n=\\sum_{i=1}^m a_i$，最大化$\\prod a_i$，最优情况下\n\n1.$n\\mod 3=0$，$a_i=3$\n\n2.$n\\mod 3=2$，$i<m,a_i=3 ; a_m=2$\n\n3.$n\\mod 3=1$，$i<m,a_i=3 ; a_m=4$或$i<m-1,a_i=3 ;a_{m-1}=a_m=2$\n\n[简要证明](https://www.cnblogs.com/chasedeath/p/14788379.html)\n\n<br>\n\n容易发现对于任意$n$，最终$a_i$的方案是$O(1)$的，设当前置换环为$b_i$，我们需要操作$b_i$变成$a_i$\n\n1.一次在同环交换可以分裂一个环\n\n2.一次异环交换合并两个环\n\n所以原问题实际上就是最少次数分裂合并$b_i$\n\n对于$n\\mod 3=0$或$n\\mod 3=2$的情况，如果当前$b_i\\ge 3$，可以一直不停分裂\n\n最终剩下的就是$b'_i=1$或者$b'_i=2$\n\n对于$n\\mod 3=2$的情况，优先从中取出一个2<或者由两个1合并得到一个2\n\n剩下的优先合并1和2，然后剩下的自己合并\n\n$n\\mod 3=1$同理，但是$a_i=4$的情况也不能分裂，需要拿出来特殊处理\n\n```cpp\nconst int N=1e6+10,P=1e9+7;\n\nint n,m;\nint Pow[N];\nint A[N],L[N],C,R[N],D;\nint vis[N];\n\nint Calc(int c1,int c2){\n\tint t=min(c1,c2),ans=t;\n\tc1-=t,c2-=t;\n\tif(c1) ans+=c1/3*2;\n\tif(c2) ans+=c2;\n\treturn ans;\n}\n\nint Calc(int c1,int c2,int c4){ return c4+Calc(c1+c4,c2); }\n\nint main(){\n\trep(i,*Pow=1,N-1) Pow[i]=1ll*Pow[i-1]*3%P;\n\trep(_,1,rd()) {\n\t\tn=rd();\n\t\trep(i,1,n) A[i]=rd(),vis[i]=0;\n\t\tC=0;\n\t\trep(i,1,n) if(!vis[i]) {\n\t\t\tint c=0;\n\t\t\tfor(int j=i;!vis[j];j=A[j]) c++,vis[j]=1;\n\t\t\tL[++C]=c;\n\t\t}\n\t\tif(n%3==0) {\n\t\t\tprintf(\"%d \",Pow[n/3]);\n\t\t\tint ans=0;\n\t\t\trep(i,1,C) {\n\t\t\t\twhile(L[i]>3) L[i]-=3,ans++;\n\t\t\t\tif(L[i]==3) L[i]=0;\n\t\t\t}\n\t\t\tint c1=0,c2=0;\n\t\t\trep(i,1,C) if(L[i]==1) c1++;\n\t\t\telse if(L[i]==2) c2++;\n\t\t\tans+=Calc(c1,c2);\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif(n%3==2) {\n\t\t\tprintf(\"%d \",Pow[n/3]*2%P);\n\t\t\tint cnt=n/3,ans=0;\n\t\t\trep(i,1,C) {\n\t\t\t\twhile(cnt && L[i]>3) L[i]-=3,cnt--,ans++;\n\t\t\t\tif(L[i]==3 && cnt) L[i]=0,cnt--;\n\t\t\t}\n\t\t\tint c1=0,c2=0;\n\t\t\trep(i,1,C) if(L[i]==1) c1++;\n\t\t\telse if(L[i]==2) c2++;\n\t\t\tif(c2) c2--;\n\t\t\telse c1-=2,ans++;\n\t\t\tans+=Calc(c1,c2);\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t\tcontinue;\n\t\t}\n\t\tprintf(\"%lld \",Pow[(n-4)/3]*4ll%P);\n\t\tint cnt=(n-4)/3,c3=0,ans=0;\n\t\trep(i,1,C) {\n\t\t\twhile(cnt && L[i]>4) L[i]-=3,cnt--,ans++;\n\t\t\tif(L[i]==3 && cnt) L[i]=0,cnt--;\n\t\t}\n\t\tint c1=0,c2=0,c4=0;\n\t\trep(i,1,C) if(L[i]==1) c1++;\n\t\telse if(L[i]==2) c2++;\n\t\telse if(L[i]==3) c3++;\n\t\telse if(L[i]==4) c4++;\n\t\tif(c3) ans++;\n\t\telse {\n\t\t\tint w=1e9;\n\t\t\tif(c4) cmin(w,Calc(c1,c2,c4-1));\n\t\t\tif(c1>=4) cmin(w,Calc(c1-4,c2,c4)+2);\n\t\t\tif(c2>=2) cmin(w,Calc(c1,c2-2,c4));\n\t\t\tif(c1>=2 && c2)  cmin(w,Calc(c1-2,c2-1,c4)+1);\n\t\t\tans+=w;\n\t\t}\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","Codeforces"],"categories":["题解"]},{"title":"[水]整数拆分积","url":"/articles/2021/05/20/69b2f79f.html","content":"# [水]整数拆分积\n\n这是一个常规~~（小学奥数）~~结论\n\n问题：对于$n(n\\ge 3)$，要求构造拆分$n=\\sum_{i=1}^m a_i$，最大化$\\prod a_i$\n\n最优情况下，满足\n\n1.$n\\mod 3=0$，$a_i=3$\n\n2.$n\\mod 3=2$，$i<m,a_i=3 ; a_m=2$\n\n3.$n\\mod 3=1$，$i<m,a_i=3 ; a_m=4$或$i<m-1,a_i=3 ;a_{m-1}=a_m=2$\n\n容易发现$a_i=2,a_i=4$的都是边界情况，我们只需要分析为何$a_i=3$能够最大化答案\n\n考虑由高维均值不等式  $\\displaystyle \\sqrt[m]{\\prod a_i}\\leq \\frac{\\sum a_i} {m}$\n\n$\\displaystyle \\prod a_i\\leq (\\frac{\\sum a_i} {m})^m$\n\n故知在$a_i$尽量平均时取到最值\n\n现在只需分析$a_i=x$在何时取到最值\n\n不妨用一个函数$g(x)=x^{\\frac{n} {x} }$来描述问题\n\n由于上标中的$n$不影响单调性，不妨分析$\\displaystyle f(x)=g^{\\frac{1} {n} }(x)=x^{\\frac{1} {x} }$\n\n$f(x)=e^{\\frac{\\ln x} {x} }$\n\n$f'(x)=e^{\\frac{\\ln x} {x} }\\cdot \\frac{1-\\ln x} {x^2}$\n\n容易发现$f(x)$在$x_0=e$处取极大值\n\n由于$x'\\in \\Z$，带入$f(2)\\approx 1.414,f(3)\\approx 1.442$\n\n故取$a_i=3$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["学习笔记"]},{"title":"CF1456E - XOR-Ranges","url":"/articles/2021/05/19/301596e8.html","content":"# CF1456E - XOR-ranges\n\n### 题目大意\n\n有$n$个二进制数$a_i\\in[L_i,R_i]$，给定每个二进制位的权值\n\n序列$a_i$的权值就是$a_i\\oplus a_{i+1}$二进制为权值之和\n\n求所有满足$a_i\\in[L_i,R_i]$的最小权值\n\n<br>\n\n### 分析\n\n显然需要我们考虑对于一个数进行 数位$dp$的过程\n\n从高位到低位，一个数要么最终都一直被限制着，要么在两个不同的位置分别解除了$L_i,R_i$的限制\n\n容易发现，$L_i,R_i$中某一个先被解除的限制一定是在第一个$\\text{bit}(L_{i},p)\\ne \\text{bit}(R_i,p)$的位置 （实际上是小于号）\n\n此后，选择的数一直跟着剩下的限制直到下一个位置解除\n\n不妨考虑$L_i,R_i$中限制时间较长的一个限制，设在$p$这一位解除，那么\n\n1.$\\exists k<p,\\text{bit}(L_i,k)\\ne \\text{bit}(R_i,k)$ \n\n2.如果是$R_i$，那么$\\text{bit}(R_i,p)=1,\\text{bit}(a_i,p)=0$\n\n如果是$L_i$，那么$\\text{bit}(R_i,p)=0,\\text{bit}(a_i,p)=1$\n\n如果最终每个数解除限制的位置如下\n\n![QQ截图20210519114449.png](https://i.loli.net/2021/05/19/CpxqPW7YDXjEmiz.png)\n\n考虑他们如何对于答案贡献\n\n对于每个二进制位，如果存在空白段，空白段的二进制可以跟随左边的段或者右边的段改变\n\n当左边和右边最邻近的两个数这一位不同，则产生贡献\n\n因此考虑依次扫描每一个二进制位，找到相邻可能产生贡献的$(a_l,a_r)$\n\n从低位到高位，这就是一个不断将$(a_l,a_r)$分裂为$(a_l,a_k),(a_k,a_r)$的过程\n\n也就是一个 **笛卡尔树上的区间dp**\n\n对于当前二进制位$p$和数对$a_l,a_r$，我们需要知道的是\n\n$a_l$是受到$L_l$还是$R_l$的限制，且是否$p$这一位它解除了限制 （因为解除贡献的这一位与$L_l / R_l$相反）\n\n$a_r$是同理\n\n转移可以直接进入下一个二进制位，计算$a_l,a_r$的贡献\n\n或者分裂区间枚举中点$k$，$a_k$恰好在这一位解除限制（或者$a_k$一直都没有解除限制，此时$p=0$）\n\n此时$L_k,R_k$必然满足前面提到的限制，并且根据$\\text{bit}(L_k,p)$和$\\text{bit}(R_k,p)$枚举$k$受到$L_k$或者$R_k$的限制\n\n```cpp\nconst int N=55;\n\nint n,k;\nll L[N][2],C[N];\nll dp[N][N][N][2][2][2][2];\nint bit(ll x,int p){ return (x>>p)&1; }\nll dfs(int p,int l,int r,int f,int x,int g,int y){\n\tif(p==k) return r-l==1?0:1e18;\n\tll &res=dp[p][l][r][f][x][g][y];\n\tif(~res) return res;\n\tres=dfs(p+1,l,r,f,0,g,0)+(l && r<=n && (x^y^bit(L[l][f]^L[r][g],p)))*C[p];\n\trep(k,l+1,r-1) {\n        // a[k] is limited all time\n\t\tif(!p) rep(j,0,1) cmin(res,dfs(p,l,k,f,x,j,0)+dfs(p,k,r,j,0,g,y));\n        // a[k] frees at p\n\t\tif((L[k][0]^L[k][1])>>(p+1)) { // L,R has some different bits before p\n\t\t\trep(j,0,1) if(bit(L[k][j],p)==j) \n\t\t\t\tcmin(res,dfs(p,l,k,f,x,j,1)+dfs(p,k,r,j,1,g,y));\n\t\t}\n\t}\n\treturn res;\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&k);\n\trep(i,1,n) rep(j,0,1) scanf(\"%lld\",L[i]+j);\n\trep(i,0,k-1) scanf(\"%lld\",C+i);\n\tmemset(dp,-1,sizeof dp);\n\tprintf(\"%lld\\n\",dfs(0,0,n+1,0,0,0,0));\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1452G - Game on Tree","url":"/articles/2021/05/18/54f0570a.html","content":"# CF1452G - Game On Tree\n\n### 题目大意\n\nA和B在树上Van游戏，每个人操作一些点\n\nA操作一个点$i$，B操作一个点集$a_j$\n\n每轮A,B分别进行操作，可以对于自己的**所有点**任意移动1步或0步\n\n在某一轮，当A的点碰到B的点时游戏结束\n\nA希望尽量迟结束，B希望尽量早结束\n\n给定B的初始点集$a_j$，对于A的每个初始点$i$判断多少轮结束\n\n<br>\n\n### 分析\n\n由于B的操作显然是不停向A收缩直到碰到\n\n那么可以广搜求出每个点原地不动时被B干掉的时间$F_i$\n\n那么考虑A的移动过程，每一步可以到达一个点$u$\n\n必须满足在第$i$步所在的点$u$，$F_u>i$，否则结束游戏\n\n对于初始节点$u$，不妨设最终结束的节点为$t$，我们希望一路跑到$t$然后站住不动，此时答案就是$F_t$\n\n而实际上，任何一个点$u$能够跑到$t$，等价于$dis(u,t)<F_t$\n\nProof:\n\n由最短路三角不等式可知\n\n$\\forall (u,v)\\in Tree, dis_{v}-1\\leq dis_u\\leq dis_{v}+1$\n\n即$dis_e$在树的路径上连续变化，不妨设移动路径为$p_i,i\\in[1,k],p_k=t,k\\leq F_t$\n\n若能在$F_t-1$的时间内到达$p_k$，那么必然能在$F_t-2$的时间内到达$p_{k-1}$\n\n进而归纳得到\n\n<br>\n\n那么问题变成了，对于每个点$u$，向周围$F_u-1$范围内的点对于$F_u$取$\\max$\n\n容易点分治处理，复杂度为$O(n\\log n)$\n\n```cpp\nconst int N=2e5+10,INF=1e9+10;\n\nint n,F[N],A[N];\nvector <int> G[N];\nqueue <int> que;\n\nint mi,rt,sz[N],vis[N];\nvoid FindRt(int n,int u,int f){\n\tint ma=0; sz[u]=1;\n\tfor(int v:G[u]) if(!vis[v] && v!=f) {\n\t\tFindRt(n,v,u),sz[u]+=sz[v];\n\t\tcmax(ma,sz[v]);\n\t}\n\tcmax(ma,n-sz[u]);\n\tif(mi>ma) mi=ma,rt=u;\n}\n\nint dep[N],id[N],c,s[N];\nvoid dfs(int u,int f){\n\tid[++c]=u;\n\tfor(int v:G[u]) if(v!=f && !vis[v]) {\n\t\tdep[v]=dep[u]+1;\n\t\tdfs(v,u);\n\t}\n}\nvoid Div(int n,int u){\n\tmi=1e9,FindRt(n,u,0),u=rt,vis[u]=1;\n\tc=0,dep[u]=0,dfs(u,0);\n\trep(i,0,c) s[i]=0;\n\trep(i,1,c) {\n\t\tint u=id[i];\n\t\tif(F[u]>dep[u]) cmax(s[min(c,F[u]-1-dep[u])],F[u]);\n\t}\n\tdrep(i,c-1,0) cmax(s[i],s[i+1]);\n\trep(i,1,c) cmax(A[id[i]],s[dep[id[i]]]);\n\tfor(int v:G[u]) if(!vis[v]) {\n\t\tif(sz[v]>sz[u]) sz[v]=n-sz[u];\n\t\tDiv(sz[v],v);\n\t}\n}\n\nint main(){\n\trep(i,2,n=rd()){\n\t\tint u=rd(),v=rd();\n\t\tG[u].pb(v),G[v].pb(u);\n\t}\n\trep(i,1,n) F[i]=-1;\n\trep(i,1,rd()) {\n\t\tint x=rd();\n\t\tF[x]=0,que.push(x);\n\t}\n\twhile(!que.empty()) {\n\t\tint u=que.front(); que.pop();\n\t\tfor(int v:G[u]) if(F[v]==-1) \n\t\t\tF[v]=F[u]+1,que.push(v);\n\t}\n\tDiv(n,1);\n\trep(i,1,n) printf(\"%d \",A[i]);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1051G - Distinctification","url":"/articles/2021/05/18/30c61159.html","content":"# CF1051G - Distinctification\n\n### 题目大意\n\n对于一个二元组集合$\\{(a_i,b_i)\\}$\n\n每次可以进行操作\n\n1.如果存在$a_i=a_j$，可以花费$b_i$代价$a_i$增加1\n\n2.如果存在$a_i=a_{j}+1$，可以花费$-b_i$代价使$a_i$减少1\n\n现在依次向集合插入$n$个二元组，求在所有时刻，对于当前的集合进行操作\n\n最终使得不存在$a_i=a_j$时的最小花费（可以为负）\n\n<br>\n\n### 分析\n\n容易发现对于给定的$a_i$集合，最终$a_i$的集合唯一固定\n\n具体的，每次插入一个数值$x$，如果出现重复就会不停将$x$向后推推推\n\n而事实上答案为$\\sum b_i\\cdot (a'_i-a_i)$，那么只需要最小化$\\sum b_ia'_i$\n\n容易发现在任意时刻，如果$[L,R]$内所有$a_i$都出现，就可以任意交换他们的$b_i$\n\n那么最终状态中每一个$a_i$连通块内，按照$b_i$从大到小排序即可\n\n每次插入一个元素维护连通块之间的合并以及求出$\\sum b_ia'_i$即可\n\n可以用启发式合并/线段树合并维护\n\n```cpp\nconst int N=4e5+10,M=N*19,INF=1e9+10;\n\nint n;\nint ls[M],rs[M],c[M],cnt;\nll s[M],ans[M];\nll Ans;\n\nint F[N],rt[N];\nint Find(int x){ return F[x]==x?x:F[x]=Find(F[x]); }\nvoid Up(int x){\n\tc[x]=c[ls[x]]+c[rs[x]],s[x]=s[ls[x]]+s[rs[x]];\n\tans[x]=ans[ls[x]]+ans[rs[x]]+c[rs[x]]*s[ls[x]];\n}\nvoid Upd(int &p,int l,int r,int x){\n\tif(!p) p=++cnt;\n\tif(l==r) { c[p]=1,s[p]=x; return; }\n\tint mid=(l+r)>>1;\n\tx<=mid?Upd(ls[p],l,mid,x):Upd(rs[p],mid+1,r,x);\n\tUp(p);\n}\nint Union(int x,int y,int l=1,int r=n){\n\tif(!x||!y) return x|y;\n\tint mid=(l+r)>>1;\n\tls[x]=Union(ls[x],ls[y],l,mid),rs[x]=Union(rs[x],rs[y],mid+1,r);\n\treturn Up(x),x;\n}\n\nvoid Add(int x,int k){\n\tx=Find(x);\n\tAns+=k*(x*s[rt[x]]+ans[rt[x]]);\n}\n\nint main(){\n\tn=rd();\n\trep(i,1,n){\n\t\tint x=rd(),y=rd();\n\t\tAns-=1ll*x*y;\n\t\tint f=Find(x);\n\t\tif(!f) f=F[x]=x;\n\t\telse Add(f,-1),F[f+c[rt[f]]]=f;\n\t\tUpd(rt[f],1,n,y);\n\t\twhile(x=Find(x),y=Find(x-1)) {\n\t\t\tAdd(y,-1);\n\t\t\tF[x]=x-1;\n\t\t\trt[y]=Union(rt[y],rt[x]);\n\t\t}\n\t\twhile(x=Find(x),y=Find(x+c[rt[x]])) {\n\t\t\tAdd(y,-1);\n\t\t\tF[x+c[rt[x]]]=x;\n\t\t\trt[x]=Union(rt[x],rt[y]);\n\t\t}\n\t\tAdd(x,1),printf(\"%lld\\n\",Ans);\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","Codeforces"],"categories":["题解"]},{"title":"PKUSC2021游记","url":"/articles/2021/05/17/a8924e44.html","content":"# PKUSC2021游记\n\n#### 前言\n\n~~上次PKUWC体验~~\n\n~~结果今年没有WC~~\n\n<br>\n\n### Day 0\n\n余姚还是比较近的嘛，5个小时~~就~~到了\n\n~~在车上吃了一个榴莲千层有点饱啊~~\n\n入住mj酒店，然鹅机房队伍人数是奇数，于是乎...\n\n（qy是不是也在这个酒店里）\n\n~~为毛这个浴室正对着床，还是非全遮挡的玻璃设计~~\n\n~~诶什么时候酒店都禁止发放洗漱用品了~~\n\n~~不管了不管了先滑~~\n\n<br>\n\n### Day 1\n\n#### 凌晨\n\n诶天好像亮了...\n\n~~...这么大个人连睡觉拉窗帘都不会...~~\n\n诶怎么才5点，再睡一会~~~\n\n6点：f**k睡不着起来high！！\n\n7点：进食时间\n\n#### 上午\n\n这个酒店最近很忙啊。。\n\n一个房间都不能连着住还得更替一下吗。。。\n\n三人入住套间~~~\n\n分离的 1大床 + 2小床 + 2空调 + 2 洗手台！！\n\n这样的房间给我来一打！！\n\n<br>\n\n~~进入正题~~\n\n报道+试机。。。。\n\n完了昨晚+今早打了~~一小会儿~~音游，脖子居然有~~一点点~~受不了\n\n徒步到达余姚中学...\n\n唉，这个校门咋了个这么nb\n\n排队登记.....名单上怎么半天找不到我自己....\n\n~~哦！原来那张不是浙江的~~\n\n上手先让我们来看一看机子的配置\n\ni3-8700U 嗯.\n\nWin10 64bit 嗯.\n\nDev-cpp 嗯.\n\nVisual Basic,UltraEdit,Photoshop 嗯？\n\n嗯？没别的了？？？？\n\nwoc 我上次用Dev-Cpp什么时候的事了\n\n![土拨鼠100x.jpg](https://i.loli.net/2021/05/16/kwjg51WMiltUohf.jpg)\n\n......龟速码板子中.....\n\n哇试机还有两道题目,开openjudge.cn！\n\nT1 嗯....\n\nT2 嗯....\n\n~~完了试机题目看起来好难啊，我是不是完蛋了~~\n\n<br>\n\n#### 下午\n\n~~这怎么没有午休时间的~~\n\n~~还是好晕~~\n\n#### -30+min\n\n贴座位表啦\n\n~~一万只健壮神仙堵着看，我咋办~~\n\n#### -10min\n\n......Dev-Cpp板子板子板子......\n\n~~痛苦啊！！~~\n\n敲到一半，发现同桌的\"板子\"似乎特别长？\n\n~~旁边似乎是一个神仙，感觉很熟悉但是我并不认识的神仙~~\n\n然后我看到一行这样的代码\n\n```cpp\nconst int mod = 998244353;\n```\n\nok ，明白，那我也敲一下\n\nNTTNTTNTT\n\n#### 0+++min\n\n~~九条可怜九条可怜九条可怜九条可怜九条可怜九条可怜九条可怜九条可怜~~\n\nT1\n\n嗯，看起来可能是签到题？\n\n矩阵矩阵\n\n<br>\n\nT2\n\n~~逛gai~~\n\n画图画图！！分析分析！！\n\n我的草稿纸在跳舞！！\n\n![IMG_4237.JPG](https://i.loli.net/2021/05/16/eIUV59ngDqRfO8a.jpg)\n\n算了先开T3\n\n<br>\n\nT3 \n\n德 州 扑 克 儿\n\n德 州 扑 克 儿\n\n德 州 扑 克 儿\n\n啊 啊 啊 啊 啊\n\n![土拨鼠100x.jpg](https://i.loli.net/2021/05/16/kwjg51WMiltUohf.jpg)\n\n仔细分析，看起来$s=2,s=3$就是大模拟\n\n~~真棒！！！！~~\n\nline 30: hash(int *a){\n\nline 50:}\n\nline 60: calc(int *a){\n\nline 120: }\n\nline 130: Solves3(){\n\nline 170:}\n\n....\n\n终于写完第一档分了！！\n\n样例: ok ok\n\n提交: wa ？？\n\n仔细观察，修改：wa ？？？\n\n仔细观察，修改×2：wa ？？？\n\n仔细读题：\n\n还是好奇怪为什么poker会有一个按照字典序比较大小的阶段，真是怪了\n\n要不改成数值试一下\n\n提交：pass subtask1\n\n？？？？？？？？？？\n\n暴力修改。。。\n\n提交： TLE Subtask2\n\n![土拨鼠100x.jpg](https://i.loli.net/2021/05/16/kwjg51WMiltUohf.jpg)\n\n稍加优化:79pts get\n\n~~下面这21分不要也罢！！~~\n\n<br>\n\nT2 again\n\n一样的草稿纸，一样的折线图\n\n每次操作好像会删除若干个谷，把若个峰复制一份？\n\n均摊均摊\n\n数据结构数据结构\n\n**封装封装**！！\n\ndebugging......................\n\n#### 17:00\n\n~~啊妈妈我终于过了~~\n\n~~让我们荡起双桨，小船儿推~~ 停停停\n\n认真思考T3...\n\n认真思考T3...\n\n认真思考T3...\n\n可以，感性理解一波这个状压代码写不完，那不如\n\n~~让我们荡起双桨，小船儿推~~ 停停停\n\n诶某张纸上好像说D:\\ \\software里面有点东西，不知道是什么\n\ngviminstaller.exe\n\n![蜂蜜浏览器_吐血.jpg](https://i.loli.net/2021/05/16/CnRJTkK3xgMNXhp.jpg)\n\n测试新配置..........\n\n<br>\n\n#### 出考场\n\n同桌：为毛我T3过不了第二档分！！\n\n我：？？？？\n\n机房同志：我T2 两个log 交满了过不去\n\n机房同志：我T2 根号log 交满了过不去\n\n机房同志：我 Splay T了\n\n我：？？？？ 是我运气好？？？？\n\n~~看来我用Dev-Cpp打的分数居然非常非常高？？~~\n\n下面是自行进食时间。。。。\n\n三人正在前往KFC。。。\n\n订购2个汉堡，两个鸡块桶.... ~~（被大佬请客了~~\n\n~~诶三个人吃两个全家桶吗~~\n\n~~看来事实验证了人的胃可以自由扩张5倍~~\n\n<br>\n\n### 晚上\n\n~~这nm吃得太饱了~~\n\n电视：正在播放夺宝奇兵2\n\n我们：这什么邪教仪式我去  ~~邪教蛊惑人心~~\n\n#### time ????\n\n旁边：快帮我看看这个笔记本电源线怎么插不进去\n\n我：？？插？？？怎么线头软绵绵的\n\n旁边：完了怎么有一股烧焦的味道\n\n...\n\n<br>\n\n奇了怪了，今天怎么一整晚教练没来查房？？\n\n<br>\n\n### Day2\n\n7:00 醒，真棒！\n\n7:30吃饭，真棒！\n\n8:00集合，7:50才出宾馆，真棒！\n\n飞奔\n\n#### 早上\n\n合影+参观？？\n\n进校门看到一个巨大的~~铁架台~~，转头已经是密匝匝的人群，看来来对时候了\n\n组织人员：\n\n180+的最后一排！\n\n175+的倒数第二排！\n\n.....\n\n各位领导第一排！\n\n我们：为什么我们教练没在第一排？\n\n前面：哦你们教练昨天喝高了还没醒\n\n纳尼！！\n\n组织人员：\n\n人到齐了吗！！！\n\n~~怎么还多空了一排~~\n\n所有人前进一排！！！\n\n（场外又走来一个人）同学你去第三排\n\n大家看镜头！！再来一次！！\n\n好的，接下来我们坐公交车去梦麟校区！\n\n<br>\n\n#### 抵达梦麟校区\n\n参观大厅+领导讲话\n\n![IMG_4238.JPG](https://i.loli.net/2021/05/16/j8JDOQyBAkeKmz2.jpg)\n\n参观NOI试场\n\n![IMG_4239.JPG](https://i.loli.net/2021/05/16/y1xFzgKn5o2LjYN.jpg)\n\n参观寝室？？？？？？？？？？\n\n![IMG_4240.JPG](https://i.loli.net/2021/05/16/Mqx3ZyL6KP98Qdb.jpg)\n\n带队老师：同学们上二楼！！没关系看一下看一下\n\n我们：？~~s~~？~~s~~？~~狂~~？~~喜~~？\n\n<br>\n\n公交车返回...... 北京时间10:10 \n\n老师：同学们食堂在这里！！自己打啊\n\n我：？？\n\n别人：gogogo！！\n\n同行的人：太早了去买点饮料吧\n\n于是出校买饮料\n\n![e253a74bd11373f0537b8e73a90f4bfbfaed04a2.jpg](https://i.loli.net/2021/05/16/jJqQlRhY8KMtBby.jpg)\n\n~~成功绕过一整条街~~\n\n我们 。。回来了。。。\n\n#### 中午\n\n11:50了，怎么楼下还空的\n\n诶好像座位表贴出来了，今天没有堵门神仙了\n\n#### 20min\n\n目睹qy坐在考场门口的台阶上看qq\n\n~~谁去问一下他昨天AK了没有~~\n\n#### -15min\n\n这次知道要可以用gvim了....\n\n看向前面：VSCode？？帅啊！！\n\n#### 0+++min\n\nT1\n\n删边加边删边加边删边加边删边加边\n\ndp换根dp换根dp换根dp换根\n\n.....\n\n1h later....我终于过了。。\n\nT2\n\n这是什么奇怪的贪心+数据结构题\n\n不管了先贪心\n\n尝试1..... ~~样例好强~~\n\n尝试2..... ~~第一个数据好强~~\n\n值域dp..... 喜提11分\n\n尝试3.....\n\n.....\n\n尝试x....\n\n~~算了先看看T3~~\n\nT3\n\n昨天都打牌了，今天总是一个常规一点的防AK题吧（~~反正都不会写~~\n\n哇$n\\leq 50,m,k\\leq 150$难道这是签到题\n\n嗯Day2 T3怎么可能是签到题？\n\n仔细观察。。。\n\n> [0,m]内随机的**实数**\n\n连续型概率dp耶！\n\n连续型概率dp耶！\n\n连续型概率dp耶！\n\n![蜂蜜浏览器_吐血.jpg](https://i.loli.net/2021/05/16/CnRJTkK3xgMNXhp.jpg)\n\n容斥尝试....\n\ndp尝试....\n\n二元函数积分...\n\n.....\n\n$n=3$手动积分中。。。喜提10pts\n\n$n=4$手动积分中。。。喜提20pts\n\n痛苦草稿$\\downarrow $\n\n![IMG_4245.JPG](https://i.loli.net/2021/05/17/UnZ6A5QSlqbNOud.jpg)\n\n<br>\n\nT2 again\n\n我不行了，试了一堆垃圾贪心~~（后来发现似乎有一个是对的，但是我写挂了）~~\n\n不如试一下倒着贪心吧。。。\n\n40pts get...\n\n溜了溜了\n\nT3 again\n\n尝试2元分段函数积分中.....\n\n交换元。。\n\n平移元。。\n\n积分。。\n\n居然还要考虑两个元的大小关系！！\n\n~~好的我放弃了~~\n\n~~gvim无法拯救我，要不下次挑战一下别的~~\n\n<br>\n\n#### 出考场\n\n160我没了...\n\n~~教练终于又出现了!!~~\n\n教练坚持要合影一下\n\n~~结果直接赶走了其他教练~~\n\n成就达成：在科技楼前面合影\n\n昨天是KFC，今天是金拱门！\n\n然鹅同行三人有一个已经坐上动车溜了\n\n订购麦旋风，汉堡，鸡块桶....~~（又被大佬请客了~~\n\n<br>\n\n#### 晚上\n\n明天只有面试和颁奖，那 ~~今夜不眠不休！~~\n\n~~能卡在一个画面整整4小时，宾馆的电视真是惊人~~\n\n~~笔记本太la什么干不得，居然开始推gal了~~\n\n1:30am.....我不行了我不行了......\n\n<br>\n\n### Day3\n\n8:00公布面试名单，但是8:30才开始....~~那不如多滑一会儿~~\n\n8:00出发，突然开始下小雨 ，然鹅有伞的同志已经溜了...... ~~冲冲冲~~\n\n8:10抵达，为什么门口看起来也不是很热闹...\n\n嗯，似乎发生了什么奇怪的事\n\n![蜂蜜浏览器_IMG_4242.jpg](https://i.loli.net/2021/05/17/iKHXJe6uT9pjZCv.jpg)\n\n~~这都可以，居然白来了~~\n\n出校门，大雨..... ~~撒腿就跑~~\n\n嗯有人叫我？哇学弟offer了free打的ride\n\n#### 10mins later...\n\n教练on QQ: 四楼机房\n\n我：？？？？\n\n~~中途下车飞回去~~\n\n#### 10:20\n\n我终于回来了.... 小滑一会儿\n\n#### 11:20\n\n为什么他们还没回来\n\n~~有点撑不住，躺下再睡一会儿~~\n\n门铃适时响起.....\n\n#### 11:40\n\n这总到饭点了吧\n\n~~前天KFC，昨天金拱门，那今天是不是必胜客/华莱士什么的~~\n\n于是我们吃外卖\n\n于是我们吃...黄焖鸡\n\n![蜂蜜浏览器_IMG_4244.jpg](https://i.loli.net/2021/05/17/FzkJsHPuhUv6qri.jpg)\n\n<br>\n\n#### 2:00p.m.\n\n~~原来酒店还可以这么迟退房~~\n\n#### 2:10p.m.\n\n提前进入会场，看到zyy来拷课件\n\n~~表示几乎没见过神仙，所以基本都不认识~~\n\n#### 3:20++p.m.\n\n领导发话结束，zyy上场：\n\n\"不是所有题都是我出的，不要都找我喷\"\n\n![QQ图片20210506190147.jpg](https://i.loli.net/2021/05/06/zQSNb6mCwdJqFs3.jpg)\n\nD1T1  ... ~~1e9 tlog t您确定能过吗~~\n\nD1T2  ... ~~好多神奇算法~~\n\nzyy: 两个log 应该当场是可能过的\n\nD1T3  ...\n\nzyy: 这题不是我出的\n\n~~果然不是人写的~~\n\nzyy: 复杂度，复杂度玄学，但是出题人说能过。为什么能过，我也不知道。\n\n？？\n\nD2T1 ~~您把换根dp讲的好轻巧~~\n\nD2T2 ... ~~结论说太快了没听懂~~\n\nD2T3 ... \n\n~~果然有积分做法~~\n\n还可以按照小数部分的顺序dp啊\n\nzyy: 考场上有人写了这个暴力，然后clock()sleep()把数据骗出来，是唯一一个过了的人\n\nzyy: 我觉得他真的很强\n\ntql tql orz orz\n\n<br>\n\n#### 颁奖\n\n老师：人有点多，分机房发吧\n\n2号机房...3号机房...4号机房...5号机房...\n\n剩下的去我的左手边...\n\n~~楼下机房：为什么楼上都发好了下面这么慢~~\n\n#### 4:20p.m.\n\n~~提前开溜~~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["游记"]},{"title":"个人简介&博客阅览帮助&?","url":"/articles/2021/05/17/2c66e6d.html","content":"# 个人简介&博客阅览帮助&?\n\n这是一个悲惨的蒟蒻ZJOIer的博客，目前正在打Cu的边缘努力挣扎\n\n不善口胡，~~擅长套简~~单的模板题~~\n\n写过一点点多项式板板题，然鹅并没有任何用处\n\n没看过concrete 数学\n\n没有语文功底\n\n很少打[CodeForces](https://codeforces.com/profile/chasedeath)，[CodeChef](https://www.codechef.com/users/chasedeath)，[Topcoder](https://www.topcoder.com/members/chasedeath)，[AtCoder](https://atcoder.jp/users/chasedeath)\n\n#### 代码环境：\n\nDev-Cpp ×     Emacs ×         VSCode ×\n\nvim √              gvim √\n\nWindows √    Linux √\n\n\n\n~~文章书写的时间跨度非常长，所以前面的可能不像是一个人写的~~\n\n如果有出现很sb的错误，请@评论区 or qq 2946316707 \n\n#### 板子问题:\n\nrep/drep是两端闭区间的循环,reg是register,erep是前向星遍历\n\nll:long long\n\null:unsigned long long\n\nu64:uint64_t=unsigned long long\n\nu32:uint32_t=unsigned\n\ni64:int64_t=long long\n\ni32:int32_t=int\n\nPii: pair <int,int>\n\nMod1,Mod2是加减法取模\n\ncmin,cmax=checkmin,checkmax\n\n由于本人变量名比较随意，经常出现::，这个是访问主函数外(也就是空命名空间)的变量\n\n代码中可能出现的$\\text{[..](..){ } }$是C++11+的lambda语句\n\n代码中可能出现的模板在这里\n\nfor(.. : ..)是容器完全遍历，需要C++11\n\n模板用到了default template，以及可能出现别的问题，因此编译需要C++11\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef double db;\ntypedef unsigned long long ull;\ntypedef pair <int,int> Pii;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\n\n```\n\n\n\n# 阅读帮助\n\n常用的，阅读帮助\n\n$\\forall,\\exists$任意，存在\n\n$\\oplus$ oplus 异或\n\n$[\\text{Logical Expression}]$艾弗森括号，根据其中逻辑表达式的真伪，值为1/0\n\n$\\overline{x}\\underline{x}$上升幂下降幂\n\n$\\lfloor x\\rfloor$ 向下取整\n\n$\\lceil x\\rceil$ 向上取整\n\n$|S|$ 集合大小，或者是矩阵行列式\n\n$[x^i]f(x)$ 多项式$f(x)$的$x^i$一项的系数\n\n$f^{(i)}(x)$ 对$f(x)$求$i$阶导\n\n组合数的几种形式{%raw%}$\\begin{aligned}C(n,m),C_n^m,\\binom{n} {m}\\end{aligned}${%endraw%}\n\n第一类斯特林数$\\begin{bmatrix}n\\\\m\\end{bmatrix}$\n\n第二类斯特林数$\\begin{Bmatrix}n\\\\m\\end{Bmatrix}$\n\n\n\n\n\n\n\n$$ \\ $$\n\n$$ \\  $$\n\n$$ \\ $$\n\n$$ \\ $$\n\n下面是给自己写Markdown/LaTex用的\n\n## 字符\n\n$\\alpha$ alpha \n\n$\\beta$ beta \n\n$\\theta$ theta\n\n$\\Theta$ Theta (这个才是时间复杂度的标准符号)\n\n$\\varphi$ varphi (常表示欧拉函数)\n\n$\\phi$ phi\n\n$\\Phi$ phi (磁通量?)\n\n$\\lambda$ lambda\n\n$\\mu$ mu\n\n$\\omega$ omega (常表示单位根)\n\n$\\Omega$ \n\n$\\zeta$ zeta (常表示黎曼函数)\n\n## 表达情形\n\n表示推导关系\n\n$\\leftarrow$ leftarrow \n\n$\\Leftarrow$ Leftarrow \n\n$\\longleftarrow$ longleftarrow \n\n$\\Longleftarrow$ Longleftarrow \n\n右箭头同理，双向改为leftright即可\n\n$\\Leftrightarrow$ Leftrightarrow 常表示等价\n\n$\\not\\ $ 非 not 这个符号是加在下一个字符上面的\n\n$\\forall$ forall 任意\n\n$\\exists\\nexists$  exists,nexists 存在\n\n\n\n## 逻辑运算\n\n$\\and$ and 与\n\n$\\or$ or 或\n\n$\\oplus$ oplus 异或\n\n$\\overline x$ 非(较少见)\n\n$[x]$ 艾弗森括号，其中$x$为一个逻辑表达式，其值为true:1 , false:0\n\n$\\ne$ ne \n\n$\\le \\ge$ le,ge \n\n## 显示与简单运算\n\n> A 引用，在行首直接加'>'即可\n\n**加粗** ** ... **\n\n~~删除线~~ ~~ .. ~~ \n\n$\\sim \\tilde {AB} \\widetilde{AB}$ \\sim , \\tilde {AB} ,\\widetilde{AB} 波浪线\n\n$\\underline{AB}$ underline\n\n$\\overline{AB}$ overline\n\n$\\hat {AB}$ hat \n\n$\\widehat{AB}$ widehat \n\n$\\dot {A}$ dot\n\n$\\ddot A$ ddot\n\n$\\dddot A$ dddot\n\n$a^b$ a^{b} 上标\n\n$a_b$ a_{b} 下标\n\n$\\frac{a} {b}$  frac{ } { }  分数 cfrac{ } { }打开分数\n\n$\\sum_{i=a}^b$ sum_{ }^{ } 求和\n\n$\\prod_{i=a}^{b}$ prod_{ }^{ } 求积\n\n$\\int$ int 积分\n\n$\\iint$ iint\n\n这几个可以通过双美刀$$  $$ \n\n或者设置环境调节解析程度{%raw%}$\\text{\\begin{aligned}..\\end{aligned} }${%endraw%} (这个是对齐环境)\n\n或者\\displaystyle 来完成打开的显示模式\n\n分段函数\n\n{%raw%}$f(x)=\\left\\lbrace\\begin{aligned} 1 && b\\\\ 123 && d\\end{aligned}\\right.${%endraw%}\n\n{%raw%}$\\text{f(x)\\left \\lbrace\\begin{aligned} 1 && b \\\\ 123 && d \\end{aligned}\\right.}${%endraw%}\n\n\n\n$\\cdot$ cdot 点乘\n\n$\\cdots$ cdots省略号\n\n$\\times$ times 乘\n\n\n\n$\\lfloor x\\rfloor$ lfloor ,rfloor 向下取整\n\n$\\lceil x\\rceil$ lceil,rceil 向上取整\n\n$x^{\\overline n}$ overline {n} 上升幂\n\n$x^{\\underline{n} }$ underline{n} 下降幂\n\n\n\n## 集合关系\n\n$\\in$ in 元素属于集合\n\n$\\notin$ notin 不属于\n\n$\\subset$ sub/subset 子集\n\n$\\sube$ sube 子集或相等\n\n$\\subseteqq$ subseteqq子集或相等\n\n$\\subsetneq$ subneq 真子集\n\n$\\subsetneqq$ subneqq 真子集\n\n$\\supset$ supset 父集\n\n$\\supe$ supe父集或相等\n\n$\\supseteqq$ supseteqq 父集或相等\n\n$\\supsetneq$ supsetneq 真父集\n\n$\\supsetneqq$ supsetneqq 真父集\n\n## 集合运算\n\n$\\empty$ empty 空集\n\n$\\{ \\}\\lbrace\\rbrace$ 反斜杠+{ }或\\lbrace\\rbrace 大括号\n\n$|S|$ 集合大小\n\n$\\cup$ cup 并\n\n$\\cap$ cap 交\n\n$\\bigcup$ bigcup\n\n$\\bigcap$ bigcap\n\n$A \\setminus B$ setminus A-B，集合减操作\n\n$\\mathbb{ABCDE}$ mathbb{ABCDE} \n\n$\\Delta \\bigoplus $ Delta bigoplus 对称差(?)，通常直接用异或代替\n\n## 函数/多项式\n\n$f'(x)$ 求导\n\n$f^{(i)}(x)$求i阶导\n\n$[x^i]f(x)$第$i$项\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「USACO 2021 US Open Platinum」Routing Schemes","url":"/articles/2021/05/13/4dfec51.html","content":"# 「USACO 2021 US Open Platinum」Routing Schemes\n\n## $K=0$\n\n此时，我们只需要求合法的匹配路径数量，并且一个路径是从小到大的\n\n由于题目保证一定存在合法路径，从$1$到$n$考虑每一条$(u,v),(v>u)$\n\n我们可以看成是很多个$S$在路径上被从$1-n$不断地推过去\n\n设一个点的入度为\n\n$ind_v=\\sum_{(u,v)} 1+[v为S]$\n\n$outd_u=\\sum_{(u,v)} 1+[u为R]$\n\n每次到达一个点，必然有其$ind_u=outd_u$，即推进来的$S$个数恰好等于出边个数\n\n此时合法的分配这$outd_u$个$S$的方案数就是$outd_u!$\n\n直接求$\\prod outd_i!$即可\n\n<br>\n\n## $K=1$\n\n存在反边的图看起来十分难处理，不妨直接把反边断掉\n\n假设断掉前包含环的路径为 $S_1\\rightarrow a\\rightarrow b\\rightarrow R_1 (a>b)$\n\n则断掉后的路径变成$S_1\\rightarrow a$，$b\\rightarrow R$\n\n不妨将在$a$上额外添加一个$R$，在$b$上额外添加一个$S$\n\n此时，新的问题又只包含$(u,v)(u<v)$，同$K=0$求解\n\n理想情况下，新问题中的所有方案均可以通过将$a,b$相接还原\n\n但是显然如果最终方案上$b\\rightarrow a$相接就会成环\n\n所以需要额外$dp$出包含$b\\rightarrow a$的非法方案\n\n考虑用类似$K=0$的办法，我们扫描每个$i$将$S$向后推\n\n令$dp_i$表示当前$dp$的路径最后一个点是$i$的方案数\n\n我们希望结束点是$a$，开始点是$b$\n\n此时依次推过去$i$，此时只有$dp_{j},j\\ge i$的情况是合法的\n\n考虑$j=i$时，需要为$j$找一个归宿$k$，或者判定$j=a$时结束路径\n\n此时，相当于在原图上使$outd_i$减少了$1$\n\n得到转移$dp_k\\leftarrow dp_j\\cdot (outd_i-1)!$\n\n当$j>i$时，不需要考虑$j$的变化\n\n得到转移$dp_j\\leftarrow dp_j\\cdot outd_i!$\n\n<br>\n\n## $K=2$\n\n有了$K=1$的铺垫，想必这里十分简单\n\n设反边为$(a,b),(c,d)$，显然加入两组$S,R$\n\n考虑新图上什么样的情况是不合法的\n\n1.$b\\rightarrow a$\n\n2.$d\\rightarrow c$\n\n注意1,2是有交的\n\n3.$b\\rightarrow c\\rightarrow d\\rightarrow a$\n\n环交错扭在一起，这种情况比较容易漏掉\n\n稍微容斥一下即可\n\n复杂度分析：\n\n扫描每个$i$时，$dp_{x,y}$中满足$x=i$或$y=i$的有$O(n)$个，转移每个需要$O(n)$时间\n\n扫描每个$i$时，$dp_{x,y}$中满足$x=i$且$y=i$的有$O(1)$个，转移每个需要$O(n^2)$时间\n\n因此复杂度为$O(n^3)$，常数不算太大\n\n<br>\n\n```cpp\nconst int N=110,P=1e9+7;\n\nint n,k,J[N];\nchar s[N];\nint G[N][N];\n\nnamespace pt1{\n\tvoid Solve(){\n\t\tint ans=1;\n\t\trep(i,1,n) ans=1ll*ans*J[deg[i]]%P;\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n\nint deg[N];\nint Calc1(int a,int b){\n\tstatic int dp[N];\n\t// calculate stategies that contain b->a\n\tmemset(dp,0,sizeof dp);\n\tdp[b]=1;\n\trep(i,1,n) {\n\t\tdrep(j,n+1,i) if(dp[j]) {\n\t\t\tif(j==i) {\n\t\t\t\tif(i==a) dp[n+1]=(dp[n+1]+1ll*J[deg[i]-1]*dp[j])%P;\n\t\t\t\telse {\n\t\t\t\t\trep(k,i+1,n) if(G[i][k]) dp[k]=(dp[k]+1ll*J[deg[i]-1]*dp[j])%P;\n\t\t\t\t}\n\t\t\t} else dp[j]=1ll*dp[j]*J[deg[i]]%P;\n\t\t}\n\t}\n\treturn dp[n+1];\n}\n\nint Calc2(int a,int b,int c,int d){\n\t// calculate strategies that contain both b->a,d->c\n\tstatic int dp[N][N];\n\tmemset(dp,0,sizeof dp),dp[b][d]=1;\n\trep(i,1,n) {\n\t\tdrep(x,n+1,i) drep(y,n+1,i) if(dp[x][y]) {\n\t\t\tint t=1ll*dp[x][y]*J[deg[i]-(x==i)-(y==i)]%P;\n\t\t\tif(x!=i && y!=i) { dp[x][y]=t; continue; }\n\t\t\tif(x!=i) {\n\t\t\t\tif(y==c) dp[x][n+1]+=t,Mod1(dp[x][n+1]);\n\t\t\t\telse rep(j,i+1,n) if(G[i][j]) dp[x][j]+=t,Mod1(dp[x][j]);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(y!=i) {\n\t\t\t\tif(x==a) dp[n+1][y]+=t,Mod1(dp[n+1][y]);\n\t\t\t\telse rep(j,i+1,n) if(G[i][j]) dp[j][y]+=t,Mod1(dp[j][y]);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(x==a) {\n\t\t\t\tif(y==c) dp[n+1][n+1]+=t,Mod1(dp[n+1][n+1]);\n\t\t\t\telse rep(j,i+1,n) if(G[i][j]) dp[n+1][j]+=t,Mod1(dp[n+1][j]);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif(y==c) {\n\t\t\t\trep(j,i+1,n) if(G[i][j]) dp[j][n+1]+=t,Mod1(dp[j][n+1]);\n\t\t\t} else {\n\t\t\t\trep(j,i+1,n) if(G[i][j]) rep(k,i+1,n) if(G[i][k] && j!=k) dp[j][k]+=t,Mod1(dp[j][k]);\n\t\t\t}\n\t\t}\n\t}\n\treturn dp[n+1][n+1];\n}\nnamespace pt2{\n\tvoid Solve(){\n\t\tint a=-1,b=-1;\n\t\trep(i,1,n) rep(j,1,i-1) if(G[i][j]) a=i,b=j;\n\t\tint ans=1;\n\t\trep(i,1,n) ans=1ll*ans*J[deg[i]]%P;\n\t\tans-=Calc1(a,b),Mod2(ans);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n\nnamespace pt3{\n\tvoid Solve(){\n\t\tint a=-1,b=-1,c=-1,d=-1;\n\t\trep(i,1,n) rep(j,1,i-1) if(G[i][j]) {\n\t\t\tif(a==-1) a=i,b=j;\n\t\t\telse c=i,d=j;\n\t\t}\n\t\tint ans=1;\n\t\trep(i,1,n) ans=1ll*ans*J[deg[i]]%P;\n\t\tans-=Calc1(a,b),Mod2(ans);\n\t\tans-=Calc1(c,d),Mod2(ans);\n\t\tans+=Calc2(a,b,c,d),Mod1(ans);\n\t\tans-=Calc2(c,b,a,d),Mod2(ans);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n\nint main(){\n\trep(i,*J=1,N-1) J[i]=1ll*J[i-1]*i%P;\n\trep(_,1,rd()) {\n\t\tn=rd(),k=rd(),scanf(\"%s\",s+1);\n\t\trep(i,1,n) rep(j,1,n) scanf(\"%1d\",G[i]+j);\n\t\trep(i,1,n) {\n\t\t\tdeg[i]=s[i]=='R';\n\t\t\trep(j,1,n) deg[i]+=G[i][j];\n\t\t}\n\t\tif(k==0) pt1::Solve();\n\t\telse if(k==1) pt2::Solve();\n\t\telse pt3::Solve();\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","USACO"],"categories":["题解"]},{"title":"「USACO 2021 US Open Platinum」Balanced Subsets","url":"/articles/2021/05/13/2d2aef2a.html","content":"# 「USACO 2021 US Open Platinum」Balanced Subsets\n\n考虑题目给出的定义对应怎样的图形，显然是一个凸的封闭图形\n\n不妨通过左右边线描述，从上到下\n\n1.左边线先左移再右移\n\n2.右边线先右移再左移\n\n不妨直接令$dp_{i,l,r,f1,f2}$表示当前第$i$行，当前左右边线为$l,r(l\\leq r,\\forall j\\in[l,r],a_{i,j}=G)$\n\n$f1,f2$表示当前左右边线处于左移还是右移状态\n\n以左边线为例，定义右移开始的时刻为第一个$l>l'$的时刻\n\n容易得到转移，是一个前/后缀和的形式\n\n那么对于$[l,r]$两维分别做前缀和，然后$O(n^3)$转移即可\n\n注意转移过程中要确保$[l',r'],[l,r]$有交\n\n~~以下是暴力二维前缀和+手艹9种转移的代码~~![QQ图片20210506190147.jpg](https://i.loli.net/2021/05/06/zQSNb6mCwdJqFs3.jpg)\n\n```cpp\nconst int N=170,P=1e9+7;\n\nint n;\nint c[N];\nchar s[N];\nint dp[N][N][2][2];\nint F[N][N][2][2];\nint S(int a,int b,int x1,int x2,int y1,int y2){\n\tx1--,y1--;\n\treturn (0ll+F[x2][y2][a][b]-F[x1][y2][a][b]-F[x2][y1][a][b]+F[x1][y1][a][b])%P;\n}\n\nint main(){\n\tn=rd();\n\tint ans=0;\n\trep(i,1,n) {\n\t\tscanf(\"%s\",s+1);\n\t\trep(j,1,n) c[j]=c[j-1]+(s[j]=='G');\n\t\tmemset(F,0,sizeof F);\n\t\trep(i,1,n) rep(j,1,n) rep(a,0,1) rep(b,0,1) {\n\t\t\tF[i][j][a][b]=(0ll+F[i-1][j][a][b]+F[i][j-1][a][b]-F[i-1][j-1][a][b]+dp[i][j][a][b])%P;\n\t\t}\n\t\tmemset(dp,0,sizeof dp);\n\t\trep(l,1,n) rep(r,l,n) if(c[r]-c[l-1]==r-l+1) {\n\t\t\t(dp[l][r][0][0]+=S(0,0,l,r,l,r))%=P;\n\t\t\t(dp[l][r][1][0]+=S(0,0,1,l-1,l,r))%=P;\n\t\t\t(dp[l][r][0][1]+=S(0,0,l,r,r+1,n))%=P;\n\t\t\t(dp[l][r][1][1]+=S(0,0,1,l-1,r+1,n))%=P;\n\t\n\t\t\t(dp[l][r][0][1]+=S(0,1,l,r,r,n))%=P;\n\t\t\t(dp[l][r][1][1]+=S(0,1,1,l-1,r,n))%=P;\n\t\t\t\n\t\t\t(dp[l][r][1][0]+=S(1,0,1,l,l,r))%=P;\n\t\t\t(dp[l][r][1][1]+=S(1,0,1,l,r+1,n))%=P;\n\t\t\t\n\t\t\t(dp[l][r][1][1]+=S(1,1,1,l,r,n))%=P;\n\t\t}\n\t\trep(l,1,n) rep(r,l,n) if(c[r]-c[l-1]==r-l+1) dp[l][r][0][0]++;\n\t\trep(l,1,n) rep(r,l,n) rep(a,0,1) rep(b,0,1) if(dp[l][r][a][b]) \n\t\t\tans=(ans+dp[l][r][a][b])%P;\n\t}\n\tMod2(ans),printf(\"%d\\n\",ans);\n}\n```","tags":["Atcoder","USACO"],"categories":["题解"]},{"title":"「USACO 2021 US Open Platinum」United Cows of Farmer John","url":"/articles/2021/05/13/13490733.html","content":"# 「USACO 2021 US Open Platinum」United Cows of Farmer John\n\n考虑依次枚举右端点$i$，计算左边合法的方案数，设一个数$x$上次出现的位置为$lst_x$\n\n则$i$能够作为右端点的区间就是$[lst_{a_i}+1,i-2]$\n\n考虑什么样的位置可以作为左端点，显然这个点在$[1,i]$中是最后一次出现\n\n我们将不妨这样的点权值设为$w_i=1$\n\n考虑一个点作为中间点贡献怎样的区间，同样的，这个点在$[1,i]$中是最后一次出现\n\n并且，能够贡献的区间$>$上一次出现的位置$lst_x$\n\n这个中间点能够匹配的左端点个数就是$\\displaystyle \\sum_{k=lst_{a_j}+1}^{j-1} w_k$\n\n现在我们要用数据结构动态修改某一个位置的$w_i$，增减$[lst_{a_j}+1,j-1]$的区间，查询$[lst_{a_i}+1,i-2]$\n\n不妨再为一个点增加点权$t_i$，此时我们要维护的操作\n\n1.单点修改$w_i$\n\n2.区间修改$t_i$\n\n3.求$w_it_i$区间和\n\n在线段树上每个节点维护$w_i$之和，$w_it_i$之和，可以标记永久化$t_i$\n\n具体实现参考代码~~（实际写得很丑）~~\n\n```cpp\nconst int N=2e5+10,INF=1e9+10;\n\n\nint n;\nint lst[N],lst2[N],cnt;\nll s1[N<<2],s2[N<<2];\nint t[N<<2];\n// s1表示w之和，s2表示区间内部t[i]*w[i]之和，t[i]现在是永久化的标记\nvoid Up(int p){\n\ts2[p]=s2[p<<1]+s2[p<<1|1];\n\ts1[p]=s1[p<<1]+s1[p<<1|1]+s2[p]*t[p];\n}\nvoid Upd(int p,int l,int r,int x){\n\tif(l==r) {\n\t\ts2[p]^=1,s1[p]=t[p]*s2[p];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tx<=mid?Upd(p<<1,l,mid,x):Upd(p<<1|1,mid+1,r,x);\n\tUp(p);\n}\n\nvoid Upd(int p,int l,int r,int ql,int qr,int x){\n\tif(ql>qr) return;\n\tif(ql<=l && r<=qr) {\n\t\tt[p]+=x,s1[p]+=x*s2[p];\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(ql<=mid) Upd(p<<1,l,mid,ql,qr,x);\n\tif(qr>mid) Upd(p<<1|1,mid+1,r,ql,qr,x);\n\tUp(p);\n}\n\nstruct Node{\n\tll x,y;\n\tNode(ll x=0,ll y=0):x(x),y(y){  }\n\tNode operator + (const Node __) { return Node(x+__.x,y+__.y); }\n};\nNode Que(int p,int l,int r,int ql,int qr){\n\tif(ql>qr) return Node();\n\tif(ql<=l && r<=qr) return Node(s1[p],s2[p]);\n\tint mid=(l+r)>>1; Node res;\n\tif(ql<=mid) res=res+Que(p<<1,l,mid,ql,qr);\n\tif(qr>mid) res=res+Que(p<<1|1,mid+1,r,ql,qr);\n\tres.x+=res.y*t[p];\n\treturn res;\n}\n\nint main(){\n\tn=rd();\n\tll ans=0;\n\trep(i,1,n) {\n\t\tint x=rd();\n\t\tif(lst[x]) {\n\t\t\tUpd(1,1,n,lst[x]),cnt--;\n\t\t\tUpd(1,1,n,lst2[x]+1,lst[x],-1);\n\t\t}\n\t\tNode t=Que(1,1,n,lst[x]+1,i-2);\n\t\tans+=t.x;\n\t\tUpd(1,1,n,i),cnt++,Upd(1,1,n,lst[x]+1,i-1,1);\n\t\tlst2[x]=lst[x],lst[x]=i;\n\t}\n\tprintf(\"%lld\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","USACO"],"categories":["题解"]},{"title":"CF715E - Complete the Permutations","url":"/articles/2021/05/12/268c9698.html","content":"# CF715E - Complete the Permutations\n\n### 题目大意\n\n对于两个排列$p,q$，令$p\\rightarrow q$代价为通过交换使得$p$变成$q$的最小步数\n\n现在部分给定了$p$和$q$，求所有情况下，$p\\rightarrow q=i,i\\in[0,n-1]$的排列组数目\n\n<br>\n\n### 分析\n\n排列变换显然要放到置换环上考虑，考虑两个排列之间的变换有多种等价的方式\n\n不妨认为连的边就是$p_i\\rightarrow q_i$，最终操作步数就是$n-$置换环的个数\n\n对于已经确定的部分，能够确定的边可以直接连，能够确定的链可以缩成点\n\n那么最终，图上只剩下三种待定的边\n\n$0\\rightarrow 0,0\\rightarrow x,x\\rightarrow 0$，其中$0\\rightarrow x,x\\rightarrow 0$表示一条出现了一半的边\n\nps: 如果有$0\\rightarrow x\\rightarrow 0$，那么直接缩成一个$0\\rightarrow 0$看待\n\n不妨设这三种边个数分别为$A,B,C$，已经确定的环可以数出是$D$最后加入答案\n\n由于一个$A$由两边确定，实际上确定一个边组之后，排列$0\\rightarrow 0$的位置得到$A!$种方案，也可以最后加入答案\n\n考虑什么样的边可以接成环\n\n仅A:$0\\rightarrow 0,0\\rightarrow 0\\cdots$\n\n仅B: $0\\rightarrow x,0\\rightarrow x\\cdots$\n\n仅C: $x\\rightarrow 0,x\\rightarrow 0,\\cdots$\n\nA+B=A,$0\\rightarrow x+0\\rightarrow 0=0\\rightarrow 0$\n\nC+A=A,$0\\rightarrow 0+x\\rightarrow 0=0\\rightarrow 0$\n\n实际上，组合环的情况\n\nB前面要么是B要么是A，最终将A后面跟着的小弟B都缩在一起看待\n\nC后面要么是C要么是A，最终将A前面跟着的大哥C都缩在一起看待\n\n实际上B,C计算类似，我们能够得到一个计算思路\n\n将每个B,C加入组合环对于组合环缩点之后的点数无影响，那么可以将A,B,C分离计算\n\n那么考虑一个B要么在单纯的B环上要么在组合环上\n\n枚举有$i$个$B$在单纯B环上，构成$j$个环的方案数（当然要先组合数将$j$个点选出）\n\n这就是第一类斯特林数$\\begin{bmatrix}i\\\\j\\end{bmatrix}$，[参考](https://www.cnblogs.com/chasedeath/p/14049870.html)\n\n剩下的加入组合环中，考虑依次加入每个B，每个B可以接在B后面也可以接在A后面\n\n方案数即$A^{\\overline{B-i} }$，最终计算得到$G_i$表示B构成了i个单纯B环的方案数，复杂度为$O(n^2)$\n\n<br>\n\nA的贡献不需要将组合环和单纯A环分开考虑，直接就是$F_i=\\begin{bmatrix}A\\\\i\\end{bmatrix}$\n\n最后将三种点背包合并，加入前面提到的常量即可\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\nenum{N=300,P=998244353};\nint n;\nint p[N],q[N],pre[N],nxt[N],A,B,E,D;\nint F[N],G[N],H[N],V[N];\nint S[N][N],T[N][N],C[N][N];\nint main(){\n\tscanf(\"%d\",&n);\n\trep(i,1,n) pre[i]=nxt[i]=-1;\n\trep(i,**S=1,n) rep(j,1,i) S[i][j]=(S[i-1][j-1]+1ll*(i-1)*S[i-1][j])%P;\n\trep(i,0,n) rep(j,*T[i]=1,n) T[i][j]=1ll*T[i][j-1]*(i+j-1)%P;\n\trep(i,0,n) rep(j,*C[i]=1,i) C[i][j]=(C[i-1][j]+C[i-1][j-1])%P;\n\trep(i,1,n) scanf(\"%d\",p+i);\n\trep(i,1,n) {\n\t\tscanf(\"%d\",q+i);\n\t\tif(p[i] && q[i]) nxt[p[i]]=q[i],pre[q[i]]=p[i];\n\t\telse if(p[i]) nxt[p[i]]=0;\n\t\telse if(q[i]) pre[q[i]]=0;\n\t}\n\trep(i,1,n) if(pre[i]<=0) {\n\t\tint j=i;\n\t\tfor(;nxt[j]>0;j=nxt[j]) V[j]=1;\n\t\tV[j]=1;\n\t\tif(pre[i]==nxt[j]) A+=pre[i]==-1; // ==0 || ==-1 ,but we can't count 0 in \n\t\telse if(~pre[i]) B++;\n\t\telse E++;\n\t}\n\trep(i,1,n) if(!V[i]) {\n\t\tfor(int j=i;!V[j];j=nxt[j]) V[j]=1;\n\t\tD++;\n\t}\n\tint c=1;\n\trep(i,1,A) c=1ll*c*i%P;\n\trep(i,0,A) F[i]=1ll*c*S[A][i]%P;\n\trep(i,0,B) rep(j,0,i) G[j]=(G[j]+1ll*S[i][j]*T[A][B-i]%P*C[B][i])%P;\n\trep(i,0,E) rep(j,0,i) H[j]=(H[j]+1ll*S[i][j]*T[A][E-i]%P*C[E][i])%P;\n\t\n\trep(i,0,n) V[i]=0;\n\trep(i,0,A) rep(j,0,B) V[i+j+D]=(V[i+j+D]+1ll*F[i]*G[j])%P;\n\trep(i,0,n) F[i]=0;\n\trep(i,0,A+B+D) rep(j,0,E) F[n-i-j]=(F[n-i-j]+1ll*V[i]*H[j])%P;\n\trep(i,0,n-1) printf(\"%d \",F[i]);\n}\n```\n\n<br>\n\n### 进一步的优化？\n\n$F_i$的计算时标准的第一类斯特林数行，用倍增法求上升幂即可\n\n$\\displaystyle G(x)=\\sum_{i=0}^B A^{\\overline{B-i} }\\binom{B} {i} x^{\\overline{i} }$\n\n把系数拿出来，可以直接做一个上升幂多项式转普通多项式\n\n复杂度为$O(n\\log ^2n)$\n\n（听说可以$O(n\\log n)$~~但是我没有脑子只会套板子哈哈哈哈~~）\n\n\n\n<br>\n\n以下未上传！！！如果看到说明我在搞笑！！！看到叫我\n\n$\\displaystyle G_i=\\sum_{j=i}^B \\binom{B} {j}A^{\\overline{B-j} }\\cdot [x^j]\\frac{1} {i!}(-1)^i\\ln^i(1-x)$\n\n$\\displaystyle G_i=\\sum_{j=i}^B \\frac{B!} {j!(B-j)!}\\frac{(A+B-j-1)!} {(A-1)!}\\cdot [x^j]\\frac{1} {i!}(-1)^i\\ln^i(1-x)$\n\n$\\displaystyle G_i=\\frac{(-1)^iB!} {(A-1)!i!} \\sum_{j=i}^B \\frac{(A+B-j-1)!} {j!(B-j)!}\\cdot [x^j]\\ln^i(1-x)$\n\n由于对于每个$i$，$\\displaystyle \\sum_{j=i}^B \\frac{(A+B-j-1)!} {j!(B-j)!}$是常量，设\n\n$\\displaystyle \\varphi(x)=\\sum_{j=0}^B x^{-1-j} \\frac{(A+B-j-1)!} {j!(B-j)!}$(为什么是是$-1-j$会在下面出现)\n\n$\\displaystyle G_i=\\frac{(-1)^iB!} {(A-1)!i!} [x^{-1}] \\varphi(x)\\ln^i(1-x)$\n\n\n\n对比扩展拉格朗日反演的形式\n\n$\\displaystyle [x^n]H(G(x))=\\frac{1} {n}[x^{-1}]H'(x)(\\frac{1} {F(x)})^n$，其中$G(x)$为$F(x)$的复合逆\n\n得到$\\displaystyle H(x)=\\int \\varphi(x),F(x)=\\frac{1} {\\ln(1-x)}$\n\n从而得到$F(x)$的复合逆为$\\displaystyle 1-e^{x^{-1} }$\n\n现在要算$H(1-e^{x^{-1} })=\\sum$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","Codeforces"],"categories":["题解"]},{"title":"CF1503E - 2-Coloring","url":"/articles/2021/05/12/4187466f.html","content":" # CF1503E - 2-Coloring\n\n### 题目大意\n\n给定一个$n\\times m$网格图，给每个格子黑白染色，使得最终\n\n每行恰好只有一条黑色线段，每列恰好只有一条白色线段\n\n求方案数\n\n<br>\n\n### 分析\n\n~~这种东西当然是分析好情况就ok了~~\n\n大概分几种情况\n\n\n\n1.![QQ截图20210512171601.png](https://i.loli.net/2021/05/12/qATsLMa4jZ8yveI.png)\n\n2.![QQ截图20210512171647.png](https://i.loli.net/2021/05/12/crd4g5uHYIFAtye.png)\n\n3.![QQ截图20210512175626.png](https://i.loli.net/2021/05/12/Bud7vkfERjlGDzN.png)\n\n为什么要把第三种拿出来说呢，实际上第三种是1和2的交（黑白都是梯形，确信）\n\n那么枚举中间的分界线，根据中间相距最近的两个点的位置就能用组合数确定答案\n\n（虽然代码里不是组合数）\n\n前缀和优化即可$O(nm)$，注意两个梯形可以对称，所以最后答案*2\n\n```cpp\n\nconst int N=2030,INF=1e9+10,P=998244353;\n\nint n,m;\nint dp[N][N],ans;\n// dp[i][j]是i个，每个>=0且递增，最后一个<=j的方案数\nll F(int n,int m){\n\tif(m<0) return 0;\n\treturn m==0?1:(dp[n][m]-dp[n][m-1]+P)%P;\n}\nint S[N],T[N];\n\nvoid Calc(){\n\trep(i,1,n-1) {\n\t\tint s=0;\n\t\trep(j,1,m-1) {\n\t\t\ts=(s+1ll*F(j,i)*dp[m-j][i-1])%P;\n\t\t\tans=(ans+1ll*s*F(m-j,n-i)%P*dp[j][n-i-1])%P;\n\t\t}\n\t}\n}\n\nint main(){\n\tdp[0][0]=1;\n\trep(i,1,N-1){\n\t\trep(j,0,N-1) {\n\t\t\tif(j) dp[i-1][j]+=dp[i-1][j-1],Mod1(dp[i-1][j]);\n\t\t\tdp[i][j]=dp[i-1][j];\n\t\t}\n\t}\n\tn=rd(),m=rd();\n\tCalc(),swap(n,m),Calc();\n\trep(i,1,n-1) {\n\t\tint s=0;\n\t\trep(j,1,m-1) {\n\t\t\ts=1ll*F(j,i)*dp[m-j][i-1]%P;\n\t\t\tans=(ans-1ll*s*F(m-j,n-i)%P*dp[j][n-i-1])%P;\n\t\t}\n\t}\n\tMod2(ans);\n\tprintf(\"%d\\n\",ans*2%P);\n}\n\n```\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1392H - ZS Shuffles Cards","url":"/articles/2021/05/12/49ee0c99.html","content":"# CF1392H - ZS Shuffles Cards\n\n### 题目大意\n\n给定$n$张卡和$m$个终止符，初始时随机打乱成排列，每次操作选出最前面的卡$x$拿走\n\n1.如果$x$不是终止符，将$x$放入集合\n\n2.如果$x$是终止符，那么重新打乱$n+m$张卡\n\n求期望多少步$S$变成全集\n\n<br>\n\n### 分析\n\n令$dp_i$表示当前手上有$i$张不同卡时期望多少步结束\n\n按轮考虑，一轮期望操作次数固定，即\n\n$\\displaystyle \\frac{\\displaystyle \\sum _{i=0}^n \\binom{n+m-i-1} {m-1}(i+1)} {\\displaystyle \\binom{n+m} {m} }$\n\n现在考虑从$dp_{i+j}$转移过来，当前的牌可以分为三类\n\n1.手里有的\n\n2.手里没有的\n\n3.终止牌\n\n我们计算$dp_{i+j}$向$dp_i$转移时的概率，并不需要管1类卡，只需要考虑2,3类卡的相对顺序\n\n不妨直接忽略手里的$i$张卡，得到转移系数\n\n$dp_{i+j}\\rightarrow dp_i: \\cfrac{\\displaystyle \\binom{n-i-j-1} {m-1} } {\\displaystyle \\binom{n-i+m} {m} }$\n\n容易发现可以将$\\displaystyle dp_{i+j}\\binom{n-i-j-1} {m-1}$累和完成\n\n注意$dp_i$有向$dp_{i}$自己的转移，需要解一次方程，因此需要求逆元\n\n```cpp\nconst int N=4e6+10,P=998244353;\n\nint n,m;\nint I[N],J[N];\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint F[N];\nll C(int n,int m){ return 1ll*J[n]*I[m]%P*I[n-m]%P; }\nll IC(int n,int m){ return 1ll*I[n]*J[m]%P*J[n-m]%P; }\n\nint main(){\n\trep(i,*J=1,N-1) J[i]=1ll*J[i-1]*i%P;\n\tI[N-1]=qpow(J[N-1]);\n\tdrep(i,N-1,1) I[i-1]=1ll*I[i]*i%P; \n\tn=rd(),m=rd();\n\tll s=0,inv=IC(n+m,m),coef=0;\n\trep(i,0,n) coef=(coef+C(n+m-i-1,m-1)*(i+1))%P;\n\tcoef=coef*inv%P;\n\n\tdrep(i,n-1,0) {\n\t\tll p=C(n+m-i-1,m-1),t=IC(n-i+m,m);\n\t\tF[i]=(s*t%P+coef)%P*qpow(P+1-p*t%P)%P;\n\t\ts=(s+1ll*p*F[i])%P;\n\t}\n\tprintf(\"%d\\n\",F[0]);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"多项式与点值式","url":"/articles/2021/05/12/a8fd8b80.html","content":"# 多项式与点值式\n\n正常$\\text{DFT/IDFT}$是构造一个特殊的点值式，即$x_i=\\omega_{n}^i$\n\n如果能通过题目条件构造出来这样的点值，就可以直接$\\text{DFT/IDFT}$\n\n那如果不能的话。。。。。\n\n\n\n## 多项式多点求值\n\n一个多项式$F(x)$我们求它在$x_0,x_0,\\cdots x_{m-1}$上的点值\n\n核心是分治+多项式取模，因此常数很大\n\n对于当前分治区间$[l,r]\\in[0,m-1]$\n\n需要快速构造一个长度为$\\frac{r-l+1} {2}$的等价多项式进入分治区间\n\n令$G_{l,r}(x)=\\prod_l^r(1-x_i)$\n\n由于$G_{l,r(x_l)}=\\cdots=G_{l,r}(x_r)=0$\n\n所以可以将$F(x)$对于$G_{l,mid}(x)$和$G_{mid+1,r}(x)$分别取模之后得到两个等价式\n\n递归到$[l=r]$时，$F(x)$只剩下常数项\n\n需要被访问的$G(x)$可以预先跑一遍分治NTT求出\n\n那么复杂度就是$O(n\\log ^2n)$\n\n这种做法代码实现困难，而且常数非常大\n\n$$ \\ $$\n\n-------------\n\n\n\n## 多项式快速插值\n\n对于点对$(x_i,y_i)$\n\n多项式拉格朗日插值的式子是\n\n{%raw%}$$\\begin{aligned}F(x) = \\sum_{i=0}^{n-1} y_i \\prod_{i\\ne j} \\frac{x-x_j} {x_i-x_j}\\end{aligned}$${%endraw%}\n\n那么需要快速求出$\\prod \\frac{1} {x_i-x_j}$\n\n构造多项式$G(x)=\\prod (x-x_i)$\n\n那么$\\prod (x_i-x_j)=\\frac{G} {x-x_i}(x_i)$\n\n由于$G(x),x-x_i$在$x_i$上的点值均为$0$\n\n我们要求的多项式就是{%raw%}$\\begin{aligned} \\prod_{i\\ne j} (x_i-x_j) \\end{aligned}=\\frac{G(x)} {x-x_i}${%endraw%}\n\n即求出$\\frac{G} {x-x_i}(x_i)$\n\n分母分子均为$0$，所以带入洛必达法则{%raw%}$\\begin{aligned}\\frac{G} {x-x_i}(x_i)=\\frac{G'} {(x-x_i)'}(x_i)=G'(x_i)\\end{aligned}${%endraw%}\n\n那么求出$G'(x)$，然后多项式多点求值即可\n\n剩下那一部分的答案，可以简单地分治合并上来，$[l=r]$时，多项式是一个常数\n\n合并上来时\n\n$[l,mid]$的答案补上$\\prod_{mid+1}^r (x-x_i)$\n\n$[mid+1,r]$的答案补上$\\prod_{l}^{mid} (x-x_i)$\n\n即复杂度为$O(n\\log ^2n)$\n\n~~垃圾模板题卡常~~\n\n$$\\ $$\n\n$$ \\ $$\n\n## 应用转置原理对于多点求值的优化\n\n由于这个东西实在是太新了，所以没有什么文献可以看\n\n### 关于转置原理的前置定义\n\n矩阵的转置:\n\n对于$n\\cdot m$的矩阵$M$，它的转置$M^{T}$为交换行列坐标后得到的$m\\cdot n$的矩阵\n\n其满足运算性质:\n\n1.逆: ${(A^T)}^T=A$\n\n2.和:$(A+B)^T=A^T+B^T$\n\n3.**反积**:$(AB)^T=B^TA^T$\n\n初等矩阵:\n\n初等矩阵是指单位矩阵通过初等变换(交换行列，某一行(列)乘上$k$加到另一行(列)上，类似高斯消元)得到的矩阵\n\n对于计算$b=A\\cdot a$，其中$A$为矩阵，$a,b$为列向量\n\n考虑先计算$b'=A^T\\cdot a$\n\n出计算$b'$的过程，这可以分解成若干步操作（或说是初等矩阵）$E_1,E_2,\\cdots E_k$\n\n即$b'=E_1\\cdot E_2\\cdot E_3\\cdots E_k\\cdot a$\n\n将$E_i$倒序执行，并且每一步都换成原先操作的转置$E_i^T$，就能得到$A\\cdot a$\n\n即$b=E^T_k\\cdot E^T_{k-1}\\cdots E^T_1\\cdot a$\n\n<br>\n\n### 应用转置原理的优化核心\n\n如果把多项式系数视为列向量$F$，则可以把多项式多点求值的过程视为一个矩阵运算$M$\n\n为了便于描述，设要求的点值和多项式项数均为$n$\n\n设要求的点横坐标为$x_i$，则$M$是范德蒙德矩阵\n\n| $1$  | $x_0^1$ | $x_0^2$ | ...  |\n| ---- | ------- | ------- | ---- |\n| 1    | $x_1^1$ | $x_1^2$ | ...  |\n| 1    | $x_2^1$ | $x_2^2$ | ...  |\n| ...  |         |         |      |\n\n分析会发现我们要求的实际上是$b=M\\cdot F$（到底是谁对矩阵乘法有误解？）\n\n现在来将问题转置，先假装求$b'=M^T\\cdot F$\n\n| $1$     | 1       | 1       | ...  |\n| ------- | ------- | ------- | ---- |\n| $x_0^1$ | $x_1^1$ | $x_2^1$ | ...  |\n| $x_0^2$ | $x_1^2$ | $x_2^2$ | ...  |\n| ...     |         |         |      |\n\n实际$M^T\\cdot F$得到的结果用形式幂级数表示是\n\n$\\displaystyle\\sum F_i\\sum_{j=0}^{n-1}x_i^j\\equiv \\sum \\frac{F_i} {1-x_ix}\\pmod {x^n}$\n\n求$\\displaystyle M^T\\cdot F= \\sum \\frac{F_i} {1-x_ix}\\pmod {x^n}$\n\n可以用两次分治 $\\text{NTT}$ 解决，大致过程可以描述为\n\n1.将问题转化为求{%raw%}$\\begin{aligned} \\frac{\\sum F_i\\prod _{i\\ne j} {(1-x_jx)} } {\\prod (1-x_ix)}\\end{aligned} ${%endraw%}\n\n2.对于分治节点$[L,R]$，求得$T(L,R)=\\prod_{i=L}^R{(1-x_i)}$\n\n3.从下往上合并，每次合并答案为$A(L,R)=A(L,mid)\\cdot T(mid+1,R)+A(mid+1,R)\\cdot T(L,mid)$\n\n4.最后将答案$A(0,n-1)$除以$\\prod(1-x_ix)$\n\n$$\\ $$\n\n然后我们考虑把所有的操作都反过来并且换成转置，求得$M\\cdot F$\n\n因为过程中涉及到多项式卷积，设其转置运算为$\\oplus$\n\n我们知道普通的多项式卷积为$F(x)\\cdot  G(x)=\\sum_i\\sum_j [x^i]F(x)[x^j]G(x)x^{i+j}$\n\n则其转置为$mul^T(F(x),G(x))=F(x)\\oplus G(x)=\\sum_i\\sum_{j\\leq i} [x^i]F(x)[x^j]G(x)x^{i-j}$\n\n可以看到这个操作会导致多项式项数降低，若原先$F(x),G(x)$最高项为$n,m$，则转置卷积后最高项为$n-m$\n\n$$ \\ $$\n\n那么给出整个转置后的过程为\n\n1.在$F(x)$后面加上若干个$0$，求出$\\displaystyle A(0,n-1)=F(x) \\oplus \\frac{1} {\\prod(1-x_ix)}$的前$n$项\n\n2.对于每个分治节点，依然预处理$\\displaystyle T(L,R)=\\prod_{i=L}^R{(1-x_ix)}$\n\n3.从顶向下递归，向子节点下传\n\n$A(L,mid)= A(L,R)\\oplus T(mid+1,R)$\n\n$A(mid+1,R)= A(L,R)\\oplus T(L,mid)$\n\n递归到子节点时，只剩一项，即是每一个点值\n\n\n\n$$ \\ $$\n\n关于这个优化的效果:\n\n1.不需要写多项式除法和取模了!\n\n2.第二次分治的过程中调用的$mul^T$长度短一倍\n\n\n\n下面这份代码是优化过的版本，能快一倍左右，但关键还是代码短~~听说可以被卡常卡到1s跑1e6~~\n\n[Luogu Submission](https://www.luogu.com.cn/record/50577764)\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=1<<17,P=998244353;\ntypedef vector <int> V;\n\nint n,m;\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint w[N],Inv[N+1],rev[N];\nvoid Init(){\n\tw[N/2]=1;\n\tfor(int t=qpow(3,(P-1)/N),i=N/2+1;i<N;++i) w[i]=1ll*w[i-1]*t%P;\n\tdrep(i,N/2-1,1) w[i]=w[i<<1];\n\tInv[0]=Inv[1]=1;\n\trep(i,2,N) Inv[i]=1ll*(P-P/i)*Inv[P%i]%P;\n}\nint Init(int n) {\n\tint R=1,cc=-1;\n\twhile(R<n) R<<=1,cc++;\n\trep(i,1,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<cc);\n\treturn R;\n}\n\nvoid NTT(int n,V &A,int f){\n    ull a[N];\n\tif((int)A.size()<n) A.resize(n);\n\trep(i,0,n-1) a[i]=A[rev[i]];\n\tfor(int i=1;i<n;i<<=1) {\n\t\tint *e=w+i;\n\t\tfor(int l=0;l<n;l+=i*2) {\n\t\t\tfor(int j=l;j<l+i;++j) {\n\t\t\t\tint t=a[j+i]*e[j-l]%P;\n\t\t\t\ta[j+i]=a[j]+P-t;\n\t\t\t\ta[j]+=t;\n\t\t\t}\n\t\t}\n\t}\n\trep(i,0,n-1) A[i]=a[i]%P;\n\tif(f==-1) {\n\t\treverse(A.begin()+1,A.end());\n\t\trep(i,0,n-1) A[i]=1ll*A[i]*Inv[n]%P;\n\t}\n}\n\nV operator ~ (V F) {\n\tint n=F.size();\n\tif(n==1) return V{(int)qpow(F[0])};\n\tV G=F; G.resize((n+1)/2),G=~G;\n\tint R=Init(n*2);\n\tNTT(R,F,1),NTT(R,G,1);\n\trep(i,0,R-1) F[i]=(2-1ll*F[i]*G[i]%P+P)*G[i]%P;\n\tNTT(R,F,-1),F.resize(n);\n\treturn F;\n}\n\nV operator * (V A,V B) {\n\tint n=A.size()+B.size()-1,R=Init(n);\n\tNTT(R,A,1),NTT(R,B,1);\n\trep(i,0,R-1) A[i]=1ll*A[i]*B[i]%P;\n\tNTT(R,A,-1),A.resize(n);\n\treturn A;\n}\n\nV Evaluate(V F,V X){\n\tstatic int ls[N<<1],rs[N<<1],cnt;\n\tstatic V T[N<<1];\n\tstatic auto TMul=[&](V F,V G){\n\t\treverse(G.begin(),G.end());\n\t\tint n=F.size(),m=G.size(),R=Init(n);\n\t\tNTT(R,F,1),NTT(R,G,1);\n\t\trep(i,0,R-1) F[i]=1ll*F[i]*G[i]%P;\n\t\tNTT(R,F,-1); V T(n-m+1);\n\t\trep(i,0,n-m) T[i]=F[i+m-1];\n\t\treturn T;\n\t};\n\tstatic function <int(int,int)> Build=[&](int l,int r) {\n\t\tint u=++cnt; ls[u]=rs[u]=0;\n\t\tif(l==r) {\n\t\t\tT[u]=V{1,P-X[l]};\n\t\t\treturn u;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tls[u]=Build(l,mid),rs[u]=Build(mid+1,r);\n\t\tT[u]=T[ls[u]]*T[rs[u]];\n\t\treturn u;\n\t};\n\n\tint n=F.size(),m=X.size();\n\tcmax(n,m),F.resize(n),X.resize(n);\n\tcnt=0,Build(0,n-1);\n\n\tF.resize(n*2+1),T[1]=TMul(F,~T[1]);\n\tint p=0;\n\trep(i,1,cnt) if(ls[i]) {\n\t\tswap(T[ls[i]],T[rs[i]]);\n\t\tint R=Init(T[i].size()),n=T[i].size(),m1=T[ls[i]].size(),m2=T[rs[i]].size();\n\t\tNTT(R,T[i],1);\n\t\treverse(T[ls[i]].begin(),T[ls[i]].end()); reverse(T[rs[i]].begin(),T[rs[i]].end());\n\t\tNTT(R,T[ls[i]],1); NTT(R,T[rs[i]],1);\n\t\trep(j,0,R-1) {\n\t\t\tT[ls[i]][j]=1ll*T[ls[i]][j]*T[i][j]%P;\n\t\t\tT[rs[i]][j]=1ll*T[rs[i]][j]*T[i][j]%P;\n\t\t}\n\t\tNTT(R,T[ls[i]],-1); NTT(R,T[rs[i]],-1);\n\t\trep(j,0,n-m1) T[ls[i]][j]=T[ls[i]][j+m1-1];\n\t\tT[ls[i]].resize(n-m1+1);\n\t\trep(j,0,n-m2) T[rs[i]][j]=T[rs[i]][j+m2-1];\n\t\tT[rs[i]].resize(n-m2+1);\n\n\t\t//T[ls[i]]=TMul(T[i],T[ls[i]]); T[rs[i]]=TMul(T[i],T[rs[i]]);\n\t} else X[p++]=T[i][0];\n\tX.resize(m);\n\treturn X;\n}\n\nint main(){\n\tInit(),n=rd(),m=rd();\n\tV F(n+1),X(m);\n\trep(i,0,n) F[i]=rd();\n\trep(i,0,m-1) X[i]=rd();\n\tV Res=Evaluate(F,X);\n\tfor(int i:Res) printf(\"%d\\n\",i);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"CF1499G - Graph Coloring","url":"/articles/2021/05/11/24cd28ff.html","content":"# CF1499G - Graph Coloring\n\n### 题目大意\n\n有一个二分图，$m$条边，每条边可以选择为+1或者-1，表示两端的点权值$a_u,a_v\\pm 1$\n\n最终的权值总和是$\\sum |a_u|$\n\n现在要维护一个动态加边操作\n\n每次加边之后动态维护一个最优的方案最小化权值和，输出其$\\text{Hash}$和\n\n<br>\n\n### 分析\n\n容易发现在最优中方案$|a_u|\\leq 1$\n\n且一个点$a_u=\\pm 1$当且仅当$deg_u \\mod 2=1$\n\n在依次加入每条边的过程中，一旦出现环，显然环上的边经交错染色之后贡献可以忽略\n\n且奇点总是成对地出现，两个成对的奇点能够确定一条路径\n\n我们只需要在动态加边的过程中，维护对于这样奇点的路径以及环的交替染色即可\n\n注意：\n\n一个点可以被多条路径经过，但是在奇点成对地过程中\n\n我们只认为其中一条的端点是它\n\n<br>\n\n那么我们在路径两端记录这条路径，每次加入一条边之后，可能产生多条路径的合并\n\n而在实际实现的过程中，并没有必要把环从路径上删除\n\n假设当前得到路径$x\\rightarrow y$，加入一条边$y,z$且$z$在$x\\rightarrow y$上\n\n此时，我们直接认为新的路径端点就是$(x,z)$即可\n\n环的部分依然可以保留在路径上，跟随路径进行交替染色而不影响答案\n\n此时操作被简化为了合并两段交替路径（实际上就是在合并欧拉路径）\n\n可以用带权并查集维护\n\n```cpp\nconst int N=4e5+10,P=998244353;\n\nint n1,n2,m,w=1;\nint S[N][2],F[N],K[N],D[N];\nint Find(int x){\n\tif(F[x]==x) return F[x];\n\tint f=F[x]; F[x]=Find(F[x]);\n\tD[x]^=D[f];\n\treturn F[x];\n}\n\nint ans;\nvoid Uni(int x,int y){\n\tint fx=Find(x),fy=Find(y),d=D[x]^D[y]^1;\n\tif(fx==fy) return;\n\tif(d) {\n\t\tans-=S[fx][1],Mod2(ans);\n\t\tswap(S[fx][0],S[fx][1]);\n\t\tans+=S[fx][1],Mod1(ans);\n\t\tD[fx]=1;\n\t}\n\tF[fx]=fy; \n\trep(i,0,1) S[fy][i]+=S[fx][i],Mod1(S[fy][i]);\n}\nvoid Add(){\n\tint x=rd(),y=rd()+n1;\n\tw*=2,Mod1(w),S[++m][0]=w,F[m]=m;\n\tif(K[x]<K[y]) swap(x,y);\n\tif(!K[x]&&!K[y]) K[x]=K[y]=m;\n\telse if(!K[y]) Uni(K[x],m),K[x]=0,K[y]=m;\n\telse Uni(K[x],m),Uni(K[y],m),K[x]=K[y]=0;\n}\n\nint A[N],C;\n\nint main(){\n\tn1=rd(),n2=rd();\n\trep(_,1,rd()) Add();\n\trep(_,1,rd()) {\n\t\tif(rd()==1) Add(),printf(\"%d\\n\",ans),fflush(stdout);\n\t\telse {\n\t\t\tC=0;\n\t\t\trep(i,1,m) if(Find(i),D[i]==1) A[++C]=i;\n\t\t\tprintf(\"%d\\n\",C);\n\t\t\trep(i,1,C) printf(\"%d \",A[i]);\n\t\t\tputs(\"\"),fflush(stdout);\n\t\t}\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1288F - Red-Blue Graph","url":"/articles/2021/05/11/cb068eec.html","content":"# CF1288F - Red-Blue Graph\n\n### 题目大意\n\n给定一个二部图，每条边可以为红色/蓝色/无色，且一条边为红色需要付出$r$的代价，为蓝色需要$b$的代价\n\n每个点可以为红色/蓝色/无色\n\n1.如果该点为红色，则其所连的边中红色边边数 **严格大于** 蓝色边边数\n\n2.如果该点为蓝色，则其所连的边中蓝色边边数 **严格大于** 红色边边数\n\n求最小化代价满足上述限制\n\n<br>\n\n### 分析\n\n~~二分图果然和网络流密不可分~~\n\n考虑从奇怪的题目中归纳一个费用流模型\n\n用一个点的流量表示红色边-蓝色边的数量，将问题描述为\n\n1.一条边如果为红色，那么所关联的点从$S$强制得到$1$的流量\n\n2.一个边如果选蓝色，那么所关联的点强制向$T$流$1$的流量\n\n3.如果一个点为红色，那么它最终应该仍然有流量多\n\n那么强制这个点必须还能向$T$流$1$的流量，剩余随意\n\n4.如果一个点为蓝色，那么它最终应该仍然流量不足\n\n那么强制这个点必须从$S$得到$1$的流量，剩余随意\n\n然而这个模型无法解决一条边对于其两端点的决策\n\n<br>\n\n常见的处理二分图思路：考虑将右半边图红蓝反着建立\n\n此时令一条边对应的中继节点从$S$得到$2$的流量\n\n这个节点向左边的点流0，表示这条边选择蓝色\n\n这个节点向左边的点流1，表示这条边选择白色\n\n这个节点向左边的点流2，表示这条边选择红色\n\n同时将代价加入即可\n\n这样给每个点额外增加了一个基准偏移的流量，需要简单处理一下\n\n用代价为$-\\infty$的边表示这条边强制选择\n\n注意最终求出的是最小费用，而不是最大流\n\n```cpp\nconst int N=2e5+10,INF=1e9+10;\n\nint n1,n2,S,T,V,m,r,b;\nstruct Edge{\n\tint to,nxt,w,c;\n} e[N];\nint head[N],ecnt=1;\nvoid AddEdge(int u,int v,int w,int c){\n\te[++ecnt]=(Edge){v,head[u],w,c};\n\thead[u]=ecnt;\n}\nvoid Link(int u,int v,int w,int c){ AddEdge(u,v,w,c),AddEdge(v,u,0,-c); }\n\nll ans,dis[N];\nchar s[N];\nint inq[N],pre[N],w[N];\n\nint main(){\n\tn1=rd(),n2=rd(),m=rd(),r=rd(),b=rd(),S=n1+n2+1,T=S+1,V=T;\n\tscanf(\"%s\",s+1);\n\trep(i,1,n1) {\n\t\tif(s[i]=='R') Link(i,T,1,-INF),ans+=INF,Link(i,T,INF,0);\n\t\tif(s[i]=='B') Link(S,i,1,-INF),ans+=INF,Link(S,i,INF,0);\n\t\tif(s[i]=='U') Link(S,i,INF,0),Link(i,T,INF,0);\n\t}\n\tscanf(\"%s\",s+1);\n\trep(i,1,n2) {\n\t\tif(s[i]=='B') Link(i+n1,T,1,-INF),ans+=INF,Link(i+n1,T,INF,0);\n\t\tif(s[i]=='R') Link(S,i+n1,1,-INF),ans+=INF,Link(S,i+n1,INF,0);\n\t\tif(s[i]=='U') Link(S,i+n1,INF,0),Link(i+n1,T,INF,0);\n\t}\n\trep(i,1,m) {\n\t\tint u=rd(),v=rd()+n1;\n\t\tLink(S,++V,2,-INF),ans+=2*INF;\n\t\tLink(V,u,1,0),Link(V,v,1,0);\n\t\tLink(V,u,1,r),Link(V,v,1,b);\n\t\tLink(u,T,1,-INF),ans+=INF;\n\t\tLink(v,T,1,-INF),ans+=INF;\n\t}\n\twhile(1) {\n\t\tstatic queue <int> que;\n\t\trep(i,1,V) dis[i]=1e18;\n\t\tdis[S]=0,que.push(S),w[S]=INF;\n\t\twhile(!que.empty()) {\n\t\t\tint u=que.front(); que.pop();\n\t\t\tinq[u]=0;\n\t\t\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\t\t\tint v=e[i].to,c=e[i].c;\n\t\t\t\tif(!e[i].w || dis[v]<=dis[u]+c) continue;\n\t\t\t\tdis[v]=dis[u]+c,w[v]=min(e[i].w,w[u]),pre[v]=i;\n\t\t\t\tif(!inq[v]) que.push(v),inq[v]=1;\n\t\t\t}\n\t\t}\n\t\tif(dis[T]>0) break;\n\t\tint c=w[T]; ans+=dis[T]*c;\n\t\tfor(int u=T;u!=S;u=e[pre[u]^1].to) {\n\t\t\t//cout<<u<<endl;\n\t\t\te[pre[u]].w-=c,e[pre[u]^1].w+=c;\n\t\t}\n\t}\n\tif(ans>INF) puts(\"-1\");\n\telse {\n\t\tprintf(\"%lld\\n\",ans);\n\t\trep(u,T+1,T+m) {\n\t\t\tint c=0;\n\t\t\tfor(int i=head[u];i;i=e[i].nxt) if(e[i].to<=n1) c+=e[i^1].w;\n\t\t\tputchar(\"BUR\"[c]);\n\t\t}\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1491G - Switch and Flip","url":"/articles/2021/05/11/25b7427f.html","content":"# CF1491G - Switch and Flip\n\n### 题目大意\n\n有$n$个硬币，编号$1-n$，第$i$个位置上当前放了编号$a_i$的硬币\n\n每次交换$(a_i,a_j)i\\ne j$，且将硬币$a_i,a_j$翻转\n\n求方案使得最终使得$a_i=i$且每个硬币恰好为原先方向\n\n$n\\ge 3$，方案步数$\\leq n+1$\n\n<br>\n\n### 分析\n\n显然要先对于$a_i$求出置换环，步数$\\leq n+1$说明\n\n1.general的情况可以用$n$步解决$n$个点\n\n2.存在至多一个特殊情况要$n+1$步\n\n手玩发现我们无法$n$步解决一个大小为$n$的环\n\n但是如果环上恰好已经有两个硬币被翻过，那么可以\n\n![QQ截图20210511180918.png](https://i.loli.net/2021/05/11/sn6JEZuYdHgbl3D.png)\n\n图上点表示硬币编号，箭头所指是这个硬币应该在的位置\n\n我们从一个已经翻转的点开始，不断交换$i,a_i$上的硬币，会将$a_i$移动到到应该在的位置上\n\n同时下一个位置被翻转\n\n不断进行这个操作，直到这个点消去了半边环，遇到了下一个点也是被翻过的点\n\n此时再从下一个点开始将环的另外半边消去\n\n<br>\n\n那么考虑如何让一个环有两个已经翻转的点\n\n假设提取出了$c$个环，我们可以先尽量成对匹配两个环\n\n通过一次跨过环的交换操作合并两个大小$x,y$的环，同时生成两个翻转点\n\n然后进项上面的操作，需要$x+y-1$次，恰好一共$x+y$次\n\n<br>\n\n那么对于最后剩下的一个环\n\n1.如果前面已经有环被匹配过\n\n那么随便选择一个当前$a_i=i$的自环与其合并即可\n\n<br>\n\n2.整个图为一个大环\n\n先通过交换$1,a_1$将$a_1$弹出，然后$a_1$再和环上另外一个元素交换\n\n此时$a_1$变成未翻转状态，环又并成一个环+2个翻转点\n\n```cpp\nconst int N=2e5+10,INF=1e9+10;\n\nint n;\nint a[N],vis[N],b[N],c;\n\nint X[N],Y[N],C,col[N];\nvoid Swap(int x,int y){\n\tX[++C]=x,Y[C]=y;\n\tswap(a[x],a[y]),col[a[x]]^=1,col[a[y]]^=1;\n}\nvoid Solve(int i){ \n\twhile(!col[a[i]]) i=a[i];\n\twhile(!col[a[a[i]]]) Swap(i,a[i]);\n\ti=a[i];\n\twhile(i!=a[i]) Swap(i,a[i]);\n}\n\nint main(){\n\tn=rd();\n\trep(i,1,n) a[i]=rd();\n\trep(i,1,n) if(!vis[i]) {\n\t\tfor(int j=i;!vis[j];j=a[j]) vis[j]=1;\n\t\tb[++c]=i;\n\t}\n\tfor(int i=1;i<c;i+=2) {\n\t\tSwap(b[i],b[i+1]);\n\t\tSolve(b[i]);\n\t}\n\tif(c&1) {\n\t\tif(c==1) {\n\t\t\tint t=a[1];\n\t\t\tSwap(1,a[1]),Swap(t,a[1]);\n\t\t\tSolve(i);\n\t\t} else {\n\t\t\trep(i,1,n) if(a[i]==i) {\n\t\t\t\tSwap(i,b[c]);\n\t\t\t\tSolve(i);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",C);\n\trep(i,1,C) printf(\"%d %d\\n\",X[i],Y[i]);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1264E - Beautiful League","url":"/articles/2021/05/11/46af0e1d.html","content":"# CF1264E - Beautiful League\n\n### 题目大意\n\n给定一张竞赛图，其中一些边已经确定\n\n现在求确定剩余边的方向，使得最终图上三元环个数最大\n\n<br>\n\n### 分析\n\n~~三元问题着实难以处理~~\n\n考虑什么样的三个点$(x,y,z)$无法构成一个环：\n\n三个点恰好存在一个点$x$得到两条入边，即$x\\leftarrow y,x\\leftarrow z$\n\n此时无法构成环\n\n<br>\n\n于是问题转化为统计$x$的入度$ind_x$，减少的三元环个数就是$\\sum \\binom{ind_i} {2}$\n\n考虑用网络流计算答案，每一条边$(u,v)$可以选择从$S$流向$u$或者$v$\n\n一个点得到$i$的流量付出$\\binom{i} {2}$的代价流出$T$\n\n因此每个点向$T$连$n-1$条流量为$1$，代价分别为为$\\binom{j} {2}-\\binom{j-1} {2}$的边\n\n求满流最小费用即可，输出方案容易根据流量情况判断\n\n复杂度为$O(\\text{MCMF}(n^2,n^2))$ 或者$O(\\text{MCMF}(n,n^2))$\n\n```cpp\nconst int N=2e5+10,INF=1e9+10;\n\nint n,m,S,T,V;\nstruct Edge{\n\tint to,nxt,w,c;\n} e[N];\nint head[N],ecnt=1;\nvoid AddEdge(int u,int v,int w,int c){\n\te[++ecnt]=(Edge){v,head[u],w,c};\n\thead[u]=ecnt;\n}\nvoid Link(int u,int v,int w,int c){ AddEdge(u,v,w,c),AddEdge(v,u,0,-c); }\n\nint ans,dis[N];\nchar s[N];\nint inq[N],pre[N],w[N];\nint mk[110][110];\n\nint main(){\n\tn=rd(),m=rd(),S=n+1,T=V=S+1;\n\trep(i,1,n) rep(j,1,n-1) Link(i,T,1,j*(j-1)/2-(j-1)*(j-2)/2);\n\tmemset(mk,-1,sizeof mk);\n\twhile(m--) {\n\t\tint u=rd(),v=rd();\n\t\tif(u<v) mk[u][v]=1;\n\t\telse mk[v][u]=0;\n\t}\n\trep(i,1,n) rep(j,i+1,n) {\n\t\tLink(S,++V,1,0);\n\t\tif(mk[i][j]!=0) Link(V,j,1,0);\n\t\tif(mk[i][j]!=1) Link(V,i,1,0);\n\t}\n\twhile(1) {\n\t\tstatic queue <int> que;\n\t\trep(i,1,V) dis[i]=INF;\n\t\tdis[S]=0,que.push(S),w[S]=INF;\n\t\twhile(!que.empty()) {\n\t\t\tint u=que.front(); que.pop();\n\t\t\tinq[u]=0;\n\t\t\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\t\t\tint v=e[i].to,c=e[i].c;\n\t\t\t\tif(!e[i].w || dis[v]<=dis[u]+c) continue;\n\t\t\t\tdis[v]=dis[u]+c,w[v]=min(e[i].w,w[u]),pre[v]=i;\n\t\t\t\tif(!inq[v]) que.push(v),inq[v]=1;\n\t\t\t}\n\t\t}\n\t\tif(dis[T]==INF) break;\n\t\tint c=w[T]; ans+=dis[T]*c;\n\t\tfor(int u=T;u!=S;u=e[pre[u]^1].to) e[pre[u]].w-=c,e[pre[u]^1].w+=c;\n\t}\n\tmemset(mk,0,sizeof mk);\n\trep(a,1,n) rep(b,a+1,n) {\n\t\tint u=++T;\n\t\tfor(int i=head[u];i;i=e[i].nxt) if(e[i].to<=n && !e[i].w) {\n\t\t\tif(e[i].to==b) mk[a][b]=1;\n\t\t\telse mk[b][a]=1;\n\t\t}\n\t}\n\trep(i,1,n) {\n\t\trep(j,1,n) putchar(mk[i][j]+'0');\n\t\tputs(\"\");\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1187G - Gang Up","url":"/articles/2021/05/11/930769ac.html","content":"# CF1187G - Gang Up\n\n### 题目大意\n\n有$k$个人在一张无向图上往1走，可以选择在原地不动或者走一条边\n\n一个人在$x$时间到达目的地的代价是$c\\cdot x$，$c$是常数\n\n一条边同一时间被$x$个人经过的代价是$x^2\\cdot d$，$d$是常数\n\n最小化代价\n\n<br>\n\n### 分析\n\n无法贪心，无法最短路的题目，那就先试试网络流\n\n考虑将时间和位置压在一起建立节点，时间$\\leq n+k$\n\n$(t,u)\\rightarrow (t+1,u) $\n\n$(t,u)\\rightarrow (t+1,v)$\n\n在原地保持的边代价为$c$，流量$\\infty$\n\n在两点间移动的代价由于与个数有关，可以建立$k$条边\n\n每条代价是$d(i^2-(i-1)^2)+c=c+(2i-1)d$\n\n得到一个$O((n+k)n)$点数$O((n+k)m\\cdot k)$边数的图\n\n然后可以考虑依次将每个人加入流量\n\n但是实际上，并不需要显式地将所有边连出来跑网络流\n\n每次加入一个点看做一个带回撤的最短路问题，有效的边只有$(n+k)m$条\n\n因此复杂度为$O(k\\cdot \\text{SPFA}((n+k)n,(n+k)m))$\n\n```cpp\nconst int N=110,INF=1e9+10;\n\nint n,m,k,C,D;\nint a[N];\nstruct Edge{\n\tint to,nxt;\n} e[N<<1];\nint head[N],ecnt=1;\nvoid AddEdge(int u,int v){\n\te[++ecnt]=(Edge){v,head[u]};\n\thead[u]=ecnt;\n}\n\nint dis[N][N],pre[N][N],inq[N][N],G[N][N],W[N][N];\nstatic queue <Pii> que;\nvoid Upd(int x,int y,int d,int p){\n\tif(dis[x][y]>d) {\n\t\tdis[x][y]=d,pre[x][y]=p;\n\t\tif(!inq[x][y]) inq[x][y]=1,que.push(mp(x,y));\n\t}\n}\n\nint cnt[N][N];\n\nint main(){\n\tn=rd(),m=rd(),k=rd(),C=rd(),D=rd();\n\trep(i,1,k) a[i]=rd();\n\trep(i,1,m) {\n\t\tint u=rd(),v=rd();\n\t\tAddEdge(u,v),AddEdge(v,u);\n\t\trep(j,1,n+k) G[j][i*2]=G[j][i*2+1]=1;\n\t}\n\tint ans=0;\n\trep(_,1,k) {\n\t\tint u=a[_];\n\t\trep(i,1,n+k) rep(j,1,n) dis[i][j]=INF;\n\t\tdis[1][u]=0,que.push(mp(1,u));\n\t\tint tu=1,ti=-1,mi=1e9;\n\t\twhile(!que.empty()) {\n\t\t\tint t=que.front().first,u=que.front().second; que.pop();\n\t\t\tinq[t][u]=0;\n\t\t\tif(u==1 && dis[t][u]<mi) mi=dis[t][u],ti=t,tu=u;\n\t\t\tif(t>1 && W[t-1][u]) Upd(t-1,u,dis[t][u]-C,1001);\n\t\t\tif(t<n+k) Upd(t+1,u,dis[t][u]+C,1002);\n\t\t\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\t\t\tint v=e[i].to;\n\t\t\t\tif(G[t-1][i^1]>1) Upd(t-1,v,dis[t][u]-(G[t-1][i^1]-2)*D-C,-(i^1));\n\t\t\t\tif(t<n+k) Upd(t+1,v,dis[t][u]+G[t][i]*D+C,i);\n\t\t\t}\n\t\t}\n\t\tans+=mi;\n\t\twhile(tu!=u || ti!=1) {\n\t\t\tint t=pre[ti][tu];\n\t\t\tif(t==1001) --W[ti++][tu];\n\t\t\telse if(t==1002) W[--ti][tu]++;\n\t\t\telse if(t<0) G[ti][-t]-=2,tu=e[-t].to,ti++;\n\t\t\telse G[ti-1][t]+=2,tu=e[t^1].to,ti--;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"最小树形图 | 最小内向森林","url":"/articles/2021/05/11/65eb8d72.html","content":"# 最小树形图 | 最小内向森林\n\n## 最小树形图\n\n对于带权有向图$G=(V,E)$\n\n对于根$root$最小树形图为以$root$为根的外向树最小边权和\n\n### 有根树的树形图\n\n对于确定的$root$求最小树形图\n\n### 朱刘算法\n\n核心:\n\n1:对于有向图上的一个非根节点，对于它的所有入边加减一个权值$v$，最优解的树形图形态不变\n\n因为所有非根点必然有一条入边，所以可以对于每个点，取入边边权最小值减去，把减去的部分加入答案\n\n经过这样的操作使得每条边边权非负，且每个点都有一条为0的入边\n\n$$ \\ $$\n\n2:对于权**非负**的有向图上，如果存在**一个边权均为0的环**，可以把环上的点收缩\n\n因为无论最后得到的树形图如何连边，一定可以通过断掉环上的一条边来生成一个可行的树形图\n\n\n\n算法流程\n\n1.为每个点的入边更改边权\n\n2.收缩0环\n\n​\t2.1 存在环 : 回到1\n\n​\t2.2 不存在环：结束算法\n\n此时存在两种情况\n\n1.图不连通，无解\n\n2.图联通，每个点一定存在一条为0的入边，取出一个合法边集，\n\n然后依次展开每个被收缩的0环，即可得到一个最小树形图方案\n\n复杂度分析：\n\n每次收缩环需要依次遍历，每次至少缩小一个点，因此复杂度上限为$O(nm)$\n\n$$ \\ $$\n\nTips:\n\n1.注意不要更改根的入边\n\n2.0边构成的的图不连通\n\n实现：只记录一条0边指向的点，找环\n\n<br>\n\n```cpp\nconst int N=10010,INF=1e9;\n\nint n,m,rt,ans;\nint U[N],V[N],W[N];\nint id[N],inw[N],pre[N];\n\nvoid Reweight(){\n\trep(i,1,n) inw[i]=INF,pre[i]=0;\n\trep(i,1,m) if(U[i]!=V[i] && V[i]!=rt) if(inw[V[i]]>W[i]) inw[V[i]]=W[i],pre[V[i]]=U[i];\n\trep(i,1,n) if(i!=rt && id[i]==i) {\n\t\t if(inw[i]==INF) puts(\"-1\"),exit(0);\n\t\t ans+=inw[i];\n\t}\n\trep(i,1,m) if(U[i]!=V[i] && V[i]!=rt) W[i]-=inw[V[i]];\n}\n\nint vis[N];\nint Union(){\n\tint fl=0;\n\trep(i,1,n) vis[i]=0;\n\trep(i,1,n) if(id[i]==i && !vis[i]) {\n\t\tint u=i;\n\t\twhile(u && !vis[u]) vis[u]=i,u=pre[u];\n\t\tif(vis[u]==i) {\n\t\t\tint v=pre[u];\n\t\t\tfl=1;\n\t\t\twhile(v!=u) id[v]=u,v=pre[v];\n\t\t}\n\t}\n\treturn fl;\n}\n\nint main(){\n\tn=rd(),m=rd(),rt=rd();\n\trep(i,1,n) id[i]=i;\n\trep(i,1,m) U[i]=rd(),V[i]=rd(),W[i]=rd();\n\twhile(1) {\n\t\tReweight();\n\t\tif(!Union()) break;\n\t\trep(i,1,m) U[i]=id[U[i]],V[i]=id[V[i]];\n\t\trt=id[rt];\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n<br>\n\n### 可并堆优化朱刘算法\n\n涉及到的操作：\n\n1.依次插入每个点，为其确定一条最小的出边\n\n2.如果出边（0边）构成了环，将环上的点缩点\n\n3.合并环上点的点出边集合，并将这个点重新加入待定点集\n\n<br>\n\n3操作要用可并堆维护合并点集入边的最小权值，并且支持全局减操作\n\n2操作用并查集维护判断是否出现了环，我写得比较丑，一个并查集存缩点之后新点的编号，一个存点所在连通块\n\n比较常见的实现是左偏树，因为便于全局修改的标记下传操作，代码也比较好写\n\n用可并堆维护朱刘算法的操作，单次合并操作为$O(\\log m)$，因此复杂度为$O((n+m)\\log m)$\n\n```cpp\nconst int N=100010;\n\nint n,m,rt,ans;\n// 轻度封装的左偏树\nclass Heap{\nprivate:\n    Heap *ls,*rs;\n    Pii val;\n    int tag,dis;\n    void Down(){\n        if(ls) ls->val.first+=tag,ls->tag+=tag;\n        if(rs) rs->val.first+=tag,rs->tag+=tag;\n        tag=0;\n    }\n    void Up(){\n        if(rs && (!ls || rs->dis>ls->dis)) swap(ls,rs);\n        dis=rs?rs->dis+1:1;\n    }\n\npublic:\n    Heap(){ }\n    Heap(Pii x){ ls=rs=0,val=x,tag=0,dis=1; }\n    friend Heap* Union(Heap* a,Heap *b) {\n        if(!a) return b;\n        if(!b) return a;\n        if(a->val>b->val) swap(a,b);\n        a->Down(),a->rs=Union(a->rs,b);\n        return a->Up(),a;\n    }\n    void Add(int x){ tag+=x,val.first+=x; }\n    Pii top(){ return val; }\n    Heap* pop(){ return Down(),Union(ls,rs); }\n} *H[N];\n\nint F[N],J[N]; // F存连通块，J存编号\nPii G[N];\nint Find(int x){ return F[x]==x?x:F[x]=Find(F[x]); }\nint I(int x){ return J[x]==x?x:J[x]=I(J[x]); }\n\nvoid Work(int i) {\n    // 依次加入每个点，先把自环弹掉\n    while(H[i] && I(H[i]->top().second)==i) H[i]=H[i]->pop();\n    if(!H[i]) puts(\"-1\"),exit(0);\n    G[i]=H[i]->top(),H[i]->Add(-G[i].first),H[i]=H[i]->pop();\n    ans+=G[i].first;\n    int v=I(G[i].second);\n    if(Find(i)!=Find(v)) F[Find(i)]=Find(v);\n    else {\n        for(int u=v;u!=i;u=I(G[u].second)) J[I(u)]=i,H[i]=Union(H[i],H[u]);\n        Work(i);\n    }\n}\n\nint main(){\n    n=rd(),m=rd(),rt=rd();\n    rep(i,1,n) J[i]=F[i]=i;\n    rep(i,1,m) {\n        int u=rd(),v=rd(),w=rd();\n        H[v]=Union(H[v],new Heap(mp(w,u)));\n    }\n    rep(i,1,n) if(I(i)==i && i!=rt) Work(i);\n    printf(\"%d\\n\",ans);\n}\n```\n\n<br>\n\n### 无根树的最小树形图\n\n建立超级原点$S$向$V$中的点连边权极大的边，以限制每次只选一条这样的边\n\n单次得到答案后减去这个极大值即可，注意如果答案中出现多个这样的极大值，说明原图无解是无解的\n\n<br>\n\n## 最小内向森林\n\n对于给定的值$k$，最小内向森林是一个有根树集合，且其恰好包含$k$条边\n\n<br>\n\n### 凸优化+朱刘算法\n\n最小内向森林问题是一个**凸函数问题**，可以考虑$\\text{wqs}$二分\n\n同样建立超级原点$S$，二分原点$S$向$V$中点连的边权$\\alpha$\n\n通过朱刘算法得到新图的最小树形图\n\n二分使得最终的树形图包含原点度数为$|V|-1-k$即可\n\n<br>\n\n### 优先内向树扩张算法\n\n考虑在上面二分的过程中，一个点向原点连边当且仅当这个点不再有边边权$<\\alpha$\n\n同时一旦这个点向原点连边，就不再会与其他任何点合并\n\n也就是这点的所有出边再减去下一条最小树边权值之后，存在一个$\\alpha'<0$\n\n容易想到按照每个点最小边的边权为优先级进行操作\n\n最后被扩展的边的实际上就是我们要找的$\\alpha$\n\n令$dec_u$表示$u$节点中，被合并上来所有节点已经减掉的值的最大值\n\n$dec_u'=dec_u+\\min \\{w_{v,u} \\}$，合并时$dec_u$取$\\max$\n\n按照$dec'_u$递增的顺序考虑每个点的扩张，最后一个$dec'_u$就是我们所需要的$\\alpha$\n\n用一个额外的堆维护$dec'_u$的权值，直到扩张满$k$次即可\n\n复杂度为$O((n+m)\\log m+n\\log n)$\n\n<br>\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"CF1061E - Politics","url":"/articles/2021/05/10/260b711d.html","content":"# CF1061E - Politics\n\n### 题目大意\n\n给定两棵有根树$T_1,T_2$，节点均从$1-n$编号\n\n对于节点$i$，有权值$a_i$，每个节点可以被选择一次\n\n对于$T_1,T_2$，有$q_1,q_2$条限制，每条限制了一个子树$k$内恰好有$x$个点被选择\n\n求最大化选择的权值之和，或者确定不存在方案\n\n<br>\n\n### 分析\n\n如果剥离树的结构考虑，让问题变成点集之和的限制\n\n这是一个经典的无法处理的问题~~，或许可以单纯形试试看~~\n\n那么考虑树的结构如何处理\n\n我们认为一个点被选择会向祖先链上的点总和+1，这是一个链状更新\n\n可以用一棵内向树描述，再将限制加在边上，就能够得到一个简单的网络流模型\n\n然而边权无法限制满流（除非上下界网络流），而现在问题不仅带权，还同时涉及两棵树\n\n因此引入费用是必须的\n\n#### 解决恰好为$x$的限制\n\n考虑将有限制的边视作特殊，我们将这条边额外加上一个费用$\\infty$，最后从答案中减去\n\n如果最优解中无法流满这些边，答案将$<0$\n\n<br>\n\n#### 解决两棵树\n\nNaive的思路，我们需要强制两棵树上同编号的点入流相同\n\n~~经过长时间弱智的思考~~，这无法实现\n\n于是想办法强制两个点入流**不同**\n\n容易发现，对于被选个数的限制可以对称转化为限制未选个数\n\n从源点$S$向$i_0$连一条流量为1的边，$i_0$流向$i_1$表示选择$i$，流向$i_2$表示不选\n\n将$T_1$建成选择点的限制，$T_2$建成不选点的限制即可\n\n<br>\n\n形式化的说，对于一个费用流，我们想要限制两条边$flow_1=flow_2$\n\n即$flow_1-flow_2=0$，这难以做到\n\n但是我们可以限制$flow_1+(-flow_2)=0$，或者说\n\n$flow_1+(w-flow_2)=w$\n\n并且将对于$flow_2$的限制转化为对$w-flow_2$的限制，此时额外建立一个点$t$\n\n$S$向$t$连$(w,\\infty)$，强制向$t$流满$w$的流量，然后再从$t$向$flow_1,w-flow_2$分流即可\n\n<br>\n\n$\\text{EK}$费用流 ![QQ图片20210506190147.jpg](https://i.loli.net/2021/05/06/zQSNb6mCwdJqFs3.jpg)\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=1544,INF=1e9+7;\n\nint n,m,d;\nint a[N];\nstruct Edge{\n\tint to,nxt,w,c;\n} e[N*4];\nint head[N],ecnt=1;\nvoid AddEdge(int u,int v,int w,int c){\n\te[++ecnt]=(Edge){v,head[u],w,c};\n\thead[u]=ecnt;\n}\nvoid Link(int u,int v,int w,int c){ AddEdge(u,v,w,c),AddEdge(v,u,0,-c); }\nint S=1,T=2,V=2;\n\nll ans=0;\nstruct Tree{\n\tvector <int> G[N];\n\tint Rt,sz[N],lim[N],fa[N];\n\tvoid dfs(int u,int f) {\n\t\t//cout<<\"pre dfs \"<<u<<endl;\n\t\tsz[u]=1,lim[u]=-1,fa[u]=f;\n\t\tfor(int v:G[u]) if(v!=f) {\n\t\t\tdfs(v,u);\n\t\t\tsz[u]+=sz[v];\n\t\t}\n\t}\n\tvoid ReadTree(){\n\t\trep(i,2,n){\n\t\t\tint u=rd(),v=rd();\n\t\t\tG[u].pb(v),G[v].pb(u);\n\t\t}\n\t\tdfs(Rt,0);\n\t}\n\tvoid ReadLimit(){\n\t\trep(_,1,rd()) {\n\t\t\tint u=rd(),x=rd();\n\t\t\t//cout<<\"$\"<<sz[u]<<endl;\n\t\t\tif(sz[u]<x) puts(\"-1\"),exit(0);\n\t\t\tlim[u]=x;\n\t\t}\n\t}\n\tvoid Init(int k){\n\t\tfa[Rt]=T-V;\n\t\tif(k==0) {\n\t\t\trep(i,1,n) {\n\t\t\t\tLink(T+i,V+i,1,a[i]);\n\t\t\t\tif(~lim[i]) {\n\t\t\t\t\tans-=1ll*lim[i]*INF;\n\t\t\t\t\tLink(V+i,V+fa[i],lim[i],INF);\n\t\t\t\t} else Link(V+i,V+fa[i],n,0);\n\t\t\t}\n\t\t} else {\n\t\t\trep(i,1,n) {\n\t\t\t\tLink(T+i,V+i,1,0);\n\t\t\t\tif(~lim[i]) {\n\t\t\t\t\tans-=1ll*(sz[i]-lim[i])*INF;\n\t\t\t\t\tLink(V+i,V+fa[i],sz[i]-lim[i],INF);\n\t\t\t\t} else Link(V+i,V+fa[i],n,0);\n\t\t\t}\n\t\t}\n\t\tV+=n;\n\t}\n} Tr[2];\n\nll dis[N];\nint vis[N],pre[N];\nint SPFA(){\n\tstatic queue <int> que;\n\trep(i,1,V) dis[i]=-1e18;\n\tque.push(S),dis[S]=0;\n\twhile(!que.empty()) {\n\t\tint u=que.front(); que.pop();\n\t\tvis[u]=0;\n\t\tfor(int i=head[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].to,c=e[i].c;\n\t\t\tif(dis[v]>=dis[u]+c || !e[i].w) continue;\n\t\t\tdis[v]=dis[u]+e[i].c,pre[v]=i;\n\t\t\t//cout<<\"$\"<<u<<' '<<v<<' '<<e[i].c<<' '<<e[i].w<<endl;\n\t\t\tif(!vis[v]) vis[v]=1,que.push(v);\n\t\t}\n\t}\n\treturn dis[T]>-1e18;\n}\n\nvoid EK(){\n\twhile(SPFA()) {\n\t\tint w=INF;\n\t\tfor(int u=T;pre[u];u=e[pre[u]^1].to) cmin(w,e[pre[u]].w);\n\t\tfor(int u=T;pre[u];u=e[pre[u]^1].to) e[pre[u]].w-=w,e[pre[u]^1].w+=w;\n\t\tans+=w*dis[T];\n\t}\n}\n\nint main(){\n\tn=rd(),Tr[0].Rt=rd(),Tr[1].Rt=rd();\n\trep(i,1,n) Link(S,V+i,1,INF),ans-=INF;\n\tV+=n;\n\trep(i,1,n) a[i]=rd();\n\trep(i,0,1) Tr[i].ReadTree();\n\trep(i,0,1) Tr[i].ReadLimit(),Tr[i].Init(i);\n\tEK();\n\tif(ans<0) puts(\"-1\");\n\telse printf(\"%lld\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1368G - Shifting Dominoes","url":"/articles/2021/05/10/ffa7592.html","content":"# CF1368G - Shifting Dominoes\n\n### 题目大意\n\n给定一个被$1\\times 2$的骨牌（横向或者竖向）铺满的方格图\n\n现在可以拿走一个骨牌，之后任意一个骨牌可以沿着其放置方向左右移动至多一步\n\n求最终两个空位所在不同位置的方案数\n\n<br>\n\n### 分析\n\n观察一个空位的移动\n\n如果上/下/左/右边是一条骨牌，则可以移动到该骨牌所在的上/下/左/右边方格\n\n将这个移动方式构成一个有向图（当然忽略反复横跳的情况）\n\n大胆猜测此时你会发现它是 **两片外向树森林**，下面说明三个充分条件\n\n1.跳跃的过程为$(x,y)\\rightarrow (x\\pm 2,y\\pm 2)$，显然$x+y$的奇偶性不变，故可以黑白染色分为两部分\n\n2.一个点至多有一条入边：一个点的入边只能来自其所在骨牌的另一边\n\n3.图中不存在环：\n\n假设构成了一个环，此时这些边对应的骨牌围成一个不规则的环\n\n从环的某一个角出发，向四周走，发现其余所有点总能完成一一匹配\n\n也就是说，环内部包含的点个数为奇数，显然不存在这样的覆盖方案\n\n<br>\n\n### 答案计算\n\n考虑移除一张骨牌生成两个点$(x,y)$，两个点分属于两片森林，并且可以向下走\n\n不妨求出森林的$\\text{dfs}$序，此时问题变成了一个二维空间矩形覆盖问题\n\n可以扫描线+线段树解决\n\n```cpp\nconst int N=2e5+10;\n\nint n,m,d;\nstring s[N];\nint I(int x,int y){ return (x-1)*m+y; }\nll ans;\n\nvector <int> G[N];\nint col(int u){ return ((u-1)%m+(u-1)/m)&1; }\n\nvoid Link(int u,int v){ G[u].pb(v),ind[v]++; }\nint ind[N],L[N],R[N],dfn;\nvoid dfs(int u,int f){\n\tL[u]=++dfn;\n\tfor(int v:G[u]) if(v!=f) dfs(v,u);\n\tR[u]=dfn;\n}\n\n// 线段树维护扫描过程中第二维未被覆盖的点个数\nstruct Node{\n\tint mi,x;\n\tNode operator + (const Node _) const {\n\t\tNode res;\n\t\tres.mi=min(mi,_.mi),res.x=0;\n\t\tif(mi==res.mi) res.x+=x;\n\t\tif(_.mi==res.mi) res.x+=_.x;\n\t\treturn res;\n\t}\n} tr[N<<2];\nint t[N<<2];\nvoid Down(int p){\n\tif(!t[p]) return;\n\trep(i,p<<1,i+1) t[i]+=t[p],tr[i].mi+=t[p];\n\tt[p]=0;\n}\nvoid Upd(int p,int l,int r,int ql,int qr,int x){\n\tif(ql<=l && r<=qr) {\n\t\tt[p]+=x,tr[p].mi+=x;\n\t\treturn;\n\t}\n\tDown(p);\n\tint mid=(l+r)>>1;\n\tif(ql<=mid) Upd(p<<1,l,mid,ql,qr,x);\n\tif(qr>mid) Upd(p<<1|1,mid+1,r,ql,qr,x);\n\ttr[p]=tr[p<<1]+tr[p<<1|1];\n}\n\nstruct Update{\n\tint p,l,r,x;\n\tbool operator < (const Update __) const { return p<__.p; }\n} U[N*2];\nint C;\n\nvoid Add(int x,int y){\n\tif(col(x)) swap(x,y);\n\tU[++C]=(Update){L[x],L[y],R[y],1};\n\tU[++C]=(Update){R[x]+1,L[y],R[y],-1};\n}\nvoid Build(int p,int l,int r){\n\ttr[p]=(Node){0,r-l+1};\n\tif(l==r) return;\n\tint mid=(l+r)>>1;\n\tBuild(p<<1,l,mid),Build(p<<1|1,mid+1,r);\n}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,1,n) {\n\t\tcin>>s[i];\n\t\trep(j,1,m) {\n\t\t\tif(s[i][j-1]=='U') if(i>1) Link(I(i-1,j),I(i+1,j));\n\t\t\tif(s[i][j-1]=='D') if(i<n) Link(I(i+1,j),I(i-1,j));\n\t\t\tif(s[i][j-1]=='L') if(j>1) Link(I(i,j-1),I(i,j+1));\n\t\t\tif(s[i][j-1]=='R') if(j<m) Link(I(i,j+1),I(i,j-1));\n\t\t}\n\t}\n    // 获得dfs序\n\trep(i,1,n*m) if(!ind[i]) dfs(i,0);\n\trep(i,1,n) {\n\t\trep(j,1,m) {\n\t\t\tif(s[i][j-1]=='U') Add(I(i,j),I(i+1,j));\n\t\t\tif(s[i][j-1]=='L') Add(I(i,j),I(i,j+1));\n\t\t}\n\t}\n\tBuild(1,1,dfn);\n\tsort(U+1,U+C+1);\n\tint p=1;\n\trep(i,1,dfn) {\n\t\twhile(p<=C && U[p].p<=i) Upd(1,1,dfn,U[p].l,U[p].r,U[p].x),p++;\n\t\tint c=dfn-(tr[1].mi==0?tr[1].x:0);\n\t\tans+=c;\n\t}\n\tprintf(\"%lld\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1111E - Tree","url":"/articles/2021/05/10/cb63d4bc.html","content":"# CF1111E - Tree\n\n### 题目大意\n\n给定一棵无根树$T$，$q$次查询每次查询一个给定一个根$r$，点集$S$和限制$m$\n\n求将$S$分成不超过$m$个非空集合，使得最终每个集合内不存在两点为祖先关系\n\n<br>\n\n### 分析\n\n容易发现题目是一个给定部分点集的树形$dp$，因此需要用虚树来处理\n\n将$r$也加入虚树，从$r$开始$\\text{dfs}$即确定了根为$r$\n\n### dp部分\n\n一种思路是树形背包，计算子树内分为$i$个集合的方案数，枚举在$\\text{LCA}$处合并两个集合\n\n但是由于要枚举合并的个数，难以写出优秀的复杂度\n\n由于一条祖先链上点之间的集合独立，容易描述，因此可以考虑$\\text{dfs}$序dp\n\n按照$\\text{dfs}$依次加入每一个点$u$，令$dp_i$表示当前有$i$个集合的方案数\n\n则在$i$个集合中包含$dep_u$个集合$u$无法加入\n\n枚举$i$，加入一个点$O(m)$转移，滚动数组即可\n\n复杂度为$O(n\\log n+\\sum |S|\\cdot m)$\n\n```cpp\nconst int N=1e5+10,P=1e9+7;\n\nint n,m;\nint L[N],top[N],son[N],sz[N],dfn,fa[N],dep[N];\nstruct Edge{\n\tint to,nxt;\n} e[N<<1];\nint head[N],ecnt;\nvoid AddEdge(int u,int v){\n\te[++ecnt]=(Edge){v,head[u]};\n\thead[u]=ecnt;\n}\n\nvoid dfs(int u){\n\tsz[u]=1;\n\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif(v==fa[u]) continue;\n\t\tdep[v]=dep[fa[v]=u]+1,dfs(v);\n\t\tif(sz[v]>sz[son[u]]) son[u]=v;\n\t\tsz[u]+=sz[v];\n\t}\n}\nvoid dfs(int u,int t){\n\ttop[u]=t,L[u]=++dfn;\n\tif(son[u]) dfs(son[u],t);\n\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif(v==son[u] || v==fa[u]) continue;\n\t\tdfs(v,v);\n\t}\n}\nint LCA(int x,int y){\n\twhile(top[x]!=top[y]) dep[top[x]]>dep[top[y]]?x=fa[top[x]]:y=fa[top[y]];\n\treturn dep[x]<dep[y]?x:y;\n}\n\nvector <int> G[N];\nint stk[N],T;\nvoid Link(int u,int v){ G[u].pb(v),G[v].pb(u); }\nvoid Ins(int u){\n\tif(T<=1) return void(stk[++T]=u);\n\tint lca=LCA(u,stk[T]);\n\tif(lca==stk[T]) return void(stk[++T]=u);\n\twhile(T>1 && L[stk[T-1]]>=L[lca]) Link(stk[T],stk[T-1]),T--;\n\tif(stk[T]!=lca) Link(stk[T],lca),stk[T]=lca;\n\tstk[++T]=u;\n}\nint dis[N],mk[N];\n\nint dp[310],a[N],c,rt;\nvoid dfs_dp(int u,int f){\n\tdis[u]=dis[f]+mk[u];\n\tif(mk[u]) drep(i,m,0) dp[i]=((i?dp[i-1]:0)+1ll*(i-dis[f])*dp[i])%P;\n\tfor(int v:G[u]) if(v!=f) dfs_dp(v,u);\n\tmk[u]=0,G[u].clear();\n}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,2,n){\n\t\tint u=rd(),v=rd();\n\t\tAddEdge(u,v),AddEdge(v,u);\n\t}\n\tdfs(1),dfs(1,1);\n\trep(_,1,m) {\n\t\tc=rd(),m=rd(),rt=rd();\n\t\trep(i,1,c) mk[a[i]=rd()]=1;\n\t\ta[++c]=1,a[++c]=rt;\n\t\tsort(a+1,a+c+1,[&](int x,int y){ return L[x]<L[y]; });\n\t\tT=0;\n\t\trep(i,1,c) if(a[i]!=a[i-1]) Ins(a[i]);\n\t\twhile(T>1) Link(stk[T-1],stk[T]),T--;\n\t\trep(i,0,m) dp[i]=0;\n\t\tdp[0]=1;\n\t\tdfs_dp(rt,0);\n\t\tint ans=0;\n\t\trep(i,1,m) ans+=dp[i],Mod1(ans);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1468L - Prime Divisors Selection","url":"/articles/2021/05/09/4360f883.html","content":"# CF1468L - Prime Divisors Selection\n\n### 题目大意\n\n对于一个序列$A$，一个合法的质因子序列$P$满足$\\forall P_i|A_i,P_i\\ is\\ a\\ prime$\n\n给定一个序列$a_i,i\\in[1,n]$，求选出$k$个数，使得对于选出的序列$A$\n\n不存在一个$P$使得$P$中某个元素恰好出现一次\n\n$n\\leq 1000,a_i\\leq 10^{18}$\n\n<br>\n\n### 分析\n\n由题目的意思我们知道肯定要分解质因数\n\n~~Pollard's_Rho!!!~~\n\n$10^{18}$分解质因数可不是开玩笑的。。。\n\n所以先考虑合法$A$的判定\n\n### 判定$A$合法\n\n假设可以存在一个元素恰好出现一次$x$，那么在$A$所有元素质因子中至少要包含一个$x$\n\n并且，不存在两个元素**只包含**$x$\n\n也就是说，对于合法的$A$中出现的所有质因子$x$，都必须存在两个元素只包含$x$\n\n我们称只包含$x$作为质因子的元素为$x$-元素，为了构造合法的$A$，我们必须对于一些$x$选出若干对$x$-元素\n\n对于每个$x$，我们只把前两个$x-$元素视为有效，假设有$c$对这样的元素\n\n那么情况分几种\n\n1.$2|k,2c\\ge k$，那么直接随意选完即合法\n\n2.$2c\\ge k,2\\not |k$，此时我们需要选出部分对，使得剩下的元素中存在一个数它的因子集已经被选\n\n枚举剩下一个元素，判定合法即可\n\n3.$2c\\leq k$，此时可以将$c$对全部选出，判断是否还存在$k-2c$个可以选择即可\n\n<br>\n\n### 质因数分解\n\n~~亲身试验，我的Pollards_Rho它T飞了~~\n\n容易发现，对于$x-$元素我们只需要找到它的$a_i=x^k$\n\n对于其他元素我们只需要找到$a_i$对应的$x$的集合，或者判断无法被$x-$元素集合包含\n\n由于$n\\leq 1000$，我们可以先得到$x-$元素集合，其他元素我们最后一个个判定\n\n找到$a_i=x^k$问题简化了很多\n\n~~如果你相信std::pow，可以直接来~~\n\n只需要找到一个最小的$k'$，使得$a_i=x'^{k'}$，判定$x'$是否为质数，如果是则停止，否则继续分解$x'$\n\n对于$k'\\leq 3$，甚至更大一些的情况，std::pow比较可信\n\n而$k'>3$的情况（实际上$k'=4$被$k'=2$包含，所以是$k'\\ge 5$）\n\n实际上$x'$已经很小了，直接枚举质数即可\n\n素数判定依然需要$\\text{Miller_Rabin}$，~~但是至少不用Pollards_Rho了~~\n\n[CodeForces Submission](https://codeforces.com/contest/1468/submission/115792602)\n\n```cpp\nconst int N=1e5+10;\n\nint n,m;\nint pri[N],pc,notpri[N];\n\nll qmul(ll x,ll y,ll P){\n\tull z=(long double)x/P*y+0.5;\n\tll res=(ull)x*y-z*P;  Mod2(res);\n\treturn res;\n}\nll qpow(ll x,ll k,ll P){\n\tll res=1;\n\tfor(;k;k>>=1,x=qmul(x,x,P)) if(k&1) res=qmul(res,x,P);\n\treturn res;\n}\n\nint Miller_Rabin(ll n){\n\tif(n<N) return !notpri[n];\n\tif(~n&1) return 0;\n\tll s=n-1,t=0;\n\twhile(s%2==0) s/=2,t++;\n\trep(k,1,7) {\n\t\tll a=qpow(pri[rand()%pc+1],s,n),b;\n\t\trep(i,1,t) {\n\t\t\tb=qmul(a,a,n);\n\t\t\tif(b==1 && a!=1 && a!=n-1) return 0;\n\t\t\ta=b;\n\t\t}\n\t\tif(a!=1) return 0;\n\t}\n\treturn 1;\n}\n\nll a[N],mk[N];\nvector <ll> F[N]; // Factor Set of each element\nvector <ll> IF; // Independent Factor Set\nvoid unique(vector <ll> &a){ sort(a.begin(),a.end()),a.erase(unique(a.begin(),a.end()),a.end()); }\n\nmap <ll,vector<int> > M;\nll ans[N];\nvoid Outp(){\n\trep(i,1,m) ans[i]=a[ans[i]];\n\tsort(ans+1,ans+m+1);\n\trep(i,1,m) printf(\"%lld \",ans[i]);\n\texit(0);\n}\n\nll Root2(ll n){\n\tll x=round(sqrt(n));\n\treturn x*x==n?x:-1;\n}\nll Root3(ll n){\n\tll x=round(pow(n,1./3));\n\treturn x*x*x==n?x:-1;\n}\n\nll KDivide(ll x){\n\tif(Miller_Rabin(x)) return x;\n\tll y;\n\tif(~(y=Root2(x))) return KDivide(y);\n\tif(~(y=Root3(x))) return KDivide(y);\n\tll U=pow(x,1./5)+4;\n\tvector <ll> fac;\n\tfor(int i=1;pri[i]<=U;++i) if(x%pri[i]==0) {\n\t\twhile(x%pri[i]==0) x/=pri[i];\n\t\tfac.pb(pri[i]);\n\t}\n\tif(fac.size()==1 && x==1) return fac[0];\n\treturn -1;\n}\n\n\nint main(){\n\trep(i,2,N-1) if(!notpri[i]) {\n\t\tpri[++pc]=i;\n\t\tfor(int j=i+i;j<N;j+=i) notpri[j]=1;\n\t}\n\tn=rd(),m=rd();\n\trep(i,1,n) {\n\t\tll x=KDivide(a[i]=rd<ll>());\n\t\tif(~x) IF.pb(x);\n\t}\n\tunique(IF);\n\trep(i,1,n) {\n\t\tll x=a[i];\n\t\tfor(ll y:IF) if(x%y==0) {\n\t\t\twhile(x%y==0) x/=y;\n\t\t\tF[i].pb(y);\n\t\t}\n\t\tif(x>1) F[i].pb(-1),F[i].pb(-2); // invalid factor, emm... to avoid some situation we push two \n\t\tif(F[i].size()==1 && M[F[i][0]].size()<2) M[F[i][0]].pb(i),mk[i]=1;\n\t}\n\tint c=0;\n\tfor(auto i:M) if(i.second.size()>=2) c++;\n\tif(m%2==0 && c*2>=m) {\n        // choose k/2 pairs!!\n\t\tint k=m;\n\t\tfor(auto i:M) if(i.second.size()>=2) {\n\t\t\tif(!k) break;\n\t\t\trep(j,0,1) ans[k--]=i.second[j];\n\t\t}\n\t\tOutp();\n\t}\n\tif(c*2>=m) {\n        // find another\n\t\trep(i,1,n) if(!mk[i] && (int)F[i].size()<=m/2) {\n\t\t\tint f=1;\n\t\t\tfor(ll x:F[i]) if(M[x].size()<2) f=0;\n\t\t\tif(f) {\n\t\t\t\tint k=m;\n\t\t\t\tans[k--]=i;\n\t\t\t\tfor(ll x:F[i]) {\n\t\t\t\t\trep(j,0,1) ans[k--]=M[x][j];\n\t\t\t\t\tM.erase(x);\n\t\t\t\t}\n\t\t\t\tfor(auto i:M) if(i.second.size()>=2) {\n\t\t\t\t\tif(!k) break;\n\t\t\t\t\trep(j,0,1) ans[k--]=i.second[j];\n\t\t\t\t}\n\t\t\t\tOutp();\n\t\t\t}\n\t\t}\n\t} else {\n\t\tint k=m;\n\t\tfor(auto i:M) if(i.second.size()>=2) {\n\t\t\tif(!k) break;\n\t\t\trep(j,0,1) ans[k--]=i.second[j];\n\t\t}\n        // Count if we have left much enough...\n\t\trep(i,1,n) if(!mk[i]) {\n\t\t\tif(!k) break;\n\t\t\tint f=1;\n\t\t\tfor(ll x:F[i]) if(M[x].size()<2) f=0;\n\t\t\tif(f) ans[k--]=i;\n\t\t}\n\t\tif(!k) Outp();\n\t}\n\tputs(\"0\");\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1392I - Kevin and Grid","url":"/articles/2021/05/09/974e38c2.html","content":"# CF1392I - Kevin and Grid\n\n### 题目大意\n\n给定一张网格图，每个点上$(i,j)$写着$a_i+b_j$\n\n对于一个给定阈值$x$，将图分为$a_i+b_j<x$和$a_i+b_j\\ge x$两组连通块\n\n定义一个能够连通到网格图边界的连通块的价值为1，否则为2\n\n有$q$次查询，每次给定$x$，求两种连通块价值之差\n\n<br>\n\n### 分析\n\n是网格图上的连通块计数，并且看起来无法真的搜索连通块，于是想到[平面图的欧拉定理](https://www.cnblogs.com/chasedeath/p/14246463.html)\n\n欧拉定理连通块计数式子$C=|V|-|E|+|F|-1$\n\n考虑和题目给定的奇妙的**价值**有什么关系\n\n显然价值是连通块个数加上被包含的连通块个数\n\n答案应该是$S_1-S_2=|V_1|-|V_2|-|E_1|+|E_2|+|F_1|-|F_2|+1类被包含个数-2类被包含个数$\n\n容易观察发现，当一个1类连通块被包含时，$F_2$就增加1\n\n也就是说$1类被包含个数-|F_2|$最终只剩下 ：外层无限区域 以及 **四相邻连通块** \n\n设四个相邻连通块的个数为$D_1,D_2$\n\n那么$S_1-S_2=|V_1|-|V_2|-|E_1|+|E_2|+D_1-D_2$\n\n关于如何统计$a_i+b_j\\leq x$的个数，还多组查询，你猜猜要干嘛....\n\n比较不用过脑子的，做**7次FFT乘法**即可，也可以共用一些FFT结果\n\n$\\downarrow \\downarrow \\downarrow $我没有脑子！！！ ~~(/ha/ha/ha/ha/ha)~~\n\n```cpp\nconst int N=1<<18;\nconst db PI=acos(-1);\n\nstruct Cp{\n\tdb a,b;\n\tCp(){ }\n\tCp(db a,db b):a(a),b(b){ }\n\tCp operator + (const Cp _) const{ return Cp(a+_.a,b+_.b);  }\n\tCp operator - (const Cp _) const{ return Cp(a-_.a,b-_.b);  }\n\tCp operator * (const Cp _) const{ return Cp(a*_.a-b*_.b,a*_.b+b*_.a);  }\n} R[N];\nint rev[N];\nvoid FFT(Cp *a,int f){\n\trep(i,0,N-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n\tstatic Cp e[N>>1];\n\te[0]=Cp(1,0);\n\tfor(int i=1;i<N;i<<=1) {\n\t\tCp t(cos(PI/i),f*sin(PI/i));\n\t\tfor(int j=i-2;j>=0;j-=2) e[j+1]=(e[j]=e[j>>1])*t;\n\t\tfor(int l=0;l<N;l+=i*2){\n\t\t\tfor(int j=l;j<l+i;++j) {\n\t\t\t\tCp t=a[j+i]*e[j-l];\n\t\t\t\ta[j+i]=a[j]-t;\n\t\t\t\ta[j]=a[j]+t;\n\t\t\t}\n\t\t}\n\t}\n\tif(f==-1) rep(i,0,N-1) a[i].a/=N;\n}\n\n// 这个变量名求轻喷\nint n,m,q;\nint a[N],b[N];\nll A[N],B[N],C[N],D1[N],D2[N];\n// A为<x块个数\n// B为<x边数\n// C为>=x边数\n// D1,D2同上述\n\nCp D[N],E[N],F[N],G[N],H[N],I[N];\n\nvoid Add(ll *a,Cp *b,Cp *c) {\n\trep(i,0,N-1) R[i]=b[i]*c[i];\n\tFFT(R,-1);\n\trep(i,0,N-1) a[i]+=round(R[i].a);\n}\n\nint main(){\n\trep(i,0,N-1) rev[i]=(rev[i>>1]>>1)|((i&1)*(N/2));\n\tn=rd(),m=rd(),q=rd();\n\trep(i,1,n) {\n\t\tD[a[i]=rd()].a++;\n\t\tif(i>1) F[max(a[i-1],a[i])].a++, G[min(a[i-1],a[i])].a++;\n\t}\n\trep(i,1,m) {\n\t\tE[b[i]=rd()].a++;\n\t\tif(i>1) H[max(b[i-1],b[i])].a++, I[min(b[i-1],b[i])].a++;\n\t}\n\tFFT(D,1),FFT(E,1); FFT(F,1),FFT(G,1); FFT(H,1),FFT(I,1);\n\tAdd(A,D,E);\n\tAdd(B,D,H),Add(B,F,E);\n\tAdd(C,D,I),Add(C,G,E);\n\tAdd(D1,F,H),Add(D2,G,I);\n\trep(i,1,N-1) A[i]+=A[i-1],B[i]+=B[i-1],D1[i]+=D1[i-1];\n\tdrep(i,N-2,0) C[i]+=C[i+1],D2[i]+=D2[i+1];\n\twhile(q--) {\n\t\tint x=rd();\n\t\tll ans=1ll*n*m-2*A[x-1]-C[x]+B[x-1]+D2[x]-D1[x-1];\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"平面图的欧拉定理","url":"/articles/2021/05/09/338be5d9.html","content":"# 平面图的欧拉定理\n\n### 平面图\n\n平面图是一张无向图，顾名思义\n\n存在一种在平面上画点的方法，使得所有的边不会相交\n\n### 欧拉定理\n\n对于一张平面图$G=(V,E)$，$F$为平面图上的边把平面划分的区域个数（注意统计最外层的无限区域），则\n\n一张平面图是连通的 $\\Longleftrightarrow$ $|V|-|E|+|F|=2$\n\n下面是一个例子\n\n![Snipaste_2021-01-07_14-31-51.png](https://i.loli.net/2021/01/07/38Omti1zofAV6HY.png)\n\n$|V|=5,|E|=8,F=5$ (包含最外层的区域)\n\n很显然这个定理也可以用来统计联通块的数量/区域的数量\n\n即$C=|V|-|E|+|F|-1$\n\n### 欧拉定理与网格图\n\n当题目涉及到网格图染色问题时，不妨将所有染色的网格视为点，边即为四联通\n\n![Snipaste_2021-01-07_14-35-46.png](https://i.loli.net/2021/01/07/x2IniXu6brhJA7y.png)\n\n此时构成一个特殊的平面图，且此时可以发现\n\n$F$为 4相邻块个数 + 空腔个数 + 1\n\n$|E|$为相邻对数\n\n$|V|$为染色个数\n\n由此可以在染色问题上把 **空腔数量** 与 **连通性结合起来**\n\n~~作为一种可能出现的思路~~\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"CF1299D - Around the World","url":"/articles/2021/05/09/e34c0694.html","content":"# CF1299D - Around the World\n\n### 题目大意\n\n给定一张带权无向图，满足经过1号点不存在长度$>3$的简单环\n\n求删除1号点所连边的一个子集，使得剩下的边构成的图满足\n\n不存在一条 **非完全重复** 回路 异或和为0\n\n非完全重复即所有边恰好被经过偶数次的回路\n\n边权$<32$\n\n<br>\n\n### 分析\n\n考虑如何判定0回路\n\n1.任意一个回路由同一连通块内的环叠加产生\n\n2.将所有$\\text{dfs}$树上的环边提取出来，无法加入线性基时则存在0回路\n\n线性基是重要的判断0回路的方法，因此考虑直接将线性基压进状态进行$dp$\n\n<br>\n\n### dp\n\n删除1所连边后，对于每个连通块考虑计算\n\n设连通块内环边的线性基为$D$（加入每条都能成功插入，否则直接跳过该连通块）\n\n包含$C$条连接1的边\n\n仍需考虑经过1的环边，题目限制了这样的环边在每个连通块内最多有一条\n\n不妨提取这条边，设其所在三元环权为$L$\n\n那么转移分为3种\n\n1.不选这个连通块\n\n2.选择连通块内所有边，但是不选三元环，即$3\\cdot 2^{C-2}-1$ (如果存在$L$)\n\n暴力合并$dp$状态中的线性基和$D$即可，依次插入$D$中的每条基\n\n3.额外再选择$L$，$2^{C-2}$\n\n状压线性基容易发现线性基最多有15个位置可能出现1，可以暴力二进制存下来\n\n实际上，合法的线性基通过高斯消元之后种类非常少，因此复杂度有保证\n\n```cpp\nconst int N=1e5+10,P=1e9+7;\n\nint n,m;\nvector <Pii> G[N];\n\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\n#define Gauss   rep(i,0,4) if(d[i]) rep(j,i+1,4) if(d[j]&(1<<i)) d[j]^=d[i];\\\n\t\t\t\tdrep(i,4,0) D=(D<<(i+1))|d[i];\n\nint Ins(int &D,int x){\n\tint d[5];\n\trep(i,0,4) d[i]=D&((1<<(i+1))-1),D>>=i+1;\n\tint f=0;\n\tdrep(i,4,0) if(x&(1<<i)) {\n\t\tif(d[i]) x^=d[i];\n\t\telse { f=1,d[i]=x; break; }\n\t}\n\tif(!f) return 0;\n\tGauss;\n\treturn 1;\n}\n\nint Uni(int &D,int E){\n\tif(!E) return 1;\n\tint d[5];\n\trep(i,0,4) d[i]=D&((1<<(i+1))-1),D>>=i+1;\n\trep(i,0,4) {\n\t\tint x=E&((1<<(i+1))-1); E>>=i+1;\n\t\tif(!x) continue;\n\t\tint f=0;\n\t\tdrep(i,4,0) if(x&(1<<i)) {\n\t\t\tif(d[i]) x^=d[i];\n\t\t\telse { f=1,d[i]=x; break; }\n\t\t}\n\t\tif(!f) return 0;\n\t}\n\tGauss;\n\treturn 1;\n}\n\nstruct Table{\n\tint val[1<<15],a[1<<15],c;\n\tvoid Add(int x,int v) {\n\t\tif(!val[x]) a[c++]=x;\n\t\tval[x]+=v,Mod1(val[x]);\n\t}\n\tvoid clr(){\n\t\trep(i,0,c-1) val[a[i]]=0;\n\t\tc=0;\n\t}\n} dp[2];\n\nint vis[N],dfn,dis[N],D,F,E[N],L,C;\nvoid dfs(int u) {\n\tvis[u]=++dfn;\n\tif(~E[u]) C++;\n\tfor(Pii i:G[u]) if(i.first!=1) {\n\t\tint v=i.first;\n\t\tif(~E[u] && ~E[v]) L=E[u]^E[v]^i.second; // 找到了一个经过1的三元环\n\t\tif(!vis[v]) dis[v]=dis[u]^i.second,dfs(v);\n\t\telse if(vis[v]>vis[u]) {\n\t\t\tF&=Ins(D,dis[v]^dis[u]^i.second);\n\t\t}\n\t}\n}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,1,m) {\n\t\tint u=rd(),v=rd(),w=rd();\n\t\tG[u].pb(mp(v,w)),G[v].pb(mp(u,w));\n\t}\n\trep(i,1,n) E[i]=-1;\n\tfor(Pii i:G[1]) E[i.first]=i.second;\n\tint cur=0;\n\tdp[0].Add(0,1);\n\tfor(Pii i:G[1]) {\n\t\tint v=i.first;\n\t\tif(vis[v]) continue;\n\t\tF=1,D=C=0,L=-1,dfs(v);\n\t\tif(!F) continue;\n\t\tdp[!cur].clr();\n\t\tif(~L) C-=2;\n\t\tC=qpow(2,C);\n\t\trep(i,0,dp[cur].c-1) {\n\t\t\tint x=dp[cur].a[i],y=dp[cur].val[x];\n\t\t\tdp[!cur].Add(x,y);\n\t\t\tif(Uni(x,D)) {\n\t\t\t\tdp[!cur].Add(x,((~L?3ll:1ll)*C-1)*y%P);\n\t\t\t\tif(~L && Ins(x,L)) dp[!cur].Add(x,1ll*y*C%P);\n\t\t\t}\n\t\t}\n\t\tcur^=1;\n\t}\n\tint ans=0;\n\trep(i,0,dp[cur].c-1) (ans+=dp[cur].val[dp[cur].a[i]])%=P;\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1379E - Inverse Genealogy","url":"/articles/2021/05/09/6befe245.html","content":"# CF1379E - Inverse Genealogy\n\n### 题目大意\n\n给定$n,k$，要求构造一棵二叉树满足\n\n1.除了叶子以外的节点有两个儿子\n\n2.称一个节点是特殊的：两个儿子中，一个儿子$size$至少是另一个的两倍  \n\n要求特殊的节点恰好有$k$个\n\n<br>\n\n### 分析\n\n首先考虑一些简单的情况\n\n1.$2|n$时不存在合法二叉树\n\n2.$n$个节点的树，能够包含$0$个特殊节点当且仅当$\\exists 2^i-1=n$\n\n也就是能够构成一棵完美二叉树\n\n3.除了$2$情况外的树，顺次放置每个节点得到的二叉树恰好包含1一个特殊点\n\n那么当$k\\leq 1$时的情况均可以被解决\n\n否则，考虑通过加上一条极长的链来构造\n\n即构造一个一边儿子大小为1，另一边顺次相接的链，这样能够做到最大利用点数\n\n最多能得到$\\frac{n-3} {2}$个特殊点\n\n然而我们必须处理剩余点的分配，下面给出的构造能够解决$k\\in [2,\\frac{n-3} {2}]$的情况\n\n### 通用构造\n\n~~经过不断尝试得到的构造方法，好像很强~~\n\n假设得到一条长度为$m$且右偏的上述链，将剩下的点分配到两个地方\n\n1.根的左儿子\n\n2.链底的右儿子\n\n分配方式就是顺次放置每个节点得到的二叉树\n\n设剩下节点个数+根的左儿+链底的右儿子$=c$\n\n设$f(n)=1-[\\exists 2^i-1=n]$，特别的，当$2|n$时，$f(n)=\\infty$\n\n假设根的左儿子分配大小为$x$，则新的树特殊点数目就是\n\n$m-2+f(x)+f(c-x)+[c-x\\ge 3]+[x\\ge 2(n-1-x) \\text{  or  } (n-1-x)\\ge 2x]$\n\n枚举每一个$x\\in[1,c-1]$，判定上式是否成立即可\n\n```cpp\nconst int N=1e5+10;\n\n#define NO puts(\"NO\"),exit(0)\n\nint n,m;\nint fa[N];\n\nint chk(int a,int b) {\n\tif(a>b) swap(a,b);\n\treturn a*2<=b;\n}\n\nvoid Out(){\n\tputs(\"YES\");\n\trep(i,1,n) printf(\"%d \",fa[i]);\n\texit(0);\n}\n\nint Get(int l,int r) {\n\trep(i,l+1,r) fa[i]=l-1+(i-l+1)/2;\n\treturn l;\n}\n\nint Mincost(int x){\n\tif(~x&1) return 1e9;\n\trep(i,0,17) if(x+1==(1<<i)) return 0;\n\treturn 1;\n}\n\n\nint main(){\n\tn=rd(),m=rd();\n\tif(Mincost(n)==m) Get(1,n),Out();\n\tif(m==0) NO;\n\tif(~n&1) NO;\n\tif((m+1)*2>=n) NO;\n\tint r=(m+1)*2+1;\n\tif(r==n) {\n\t\trep(i,1,m+1) fa[i*2]=i*2-1,fa[i*2+1]=i*2-1;\n\t\tOut();\n\t}\n\n\tr-=2;\n\tint c=n-r+2;\n\tif(m>1) rep(x,1,c-1) if(Mincost(x)+Mincost(c-x)-!chk(c-x,n-1-(c-x))+(x>=3)==1) {\n\t\trep(i,1,m) fa[i*2]=i*2-1,fa[i*2+1]=i*2-1;\n\t\tint t=max(0,r-2);\n\t\tfa[Get(r-1,r+x-2)]=t;\n\t\tfa[2]=t;\n\t\tfa[Get(r+x-1,n)]=1;\n\t\tOut();\n\t}\n\tNO;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1305G - Kuroni and Antihype","url":"/articles/2021/05/09/2165e626.html","content":"# CF1305G - Kuroni and Antihype\n\n### 题目大意\n\n有$n$个人，每个人有一个权值$a_i$\n\n每个人可以自己选择放入集合，不获得分数\n\n或者一个已经在集合中的人$i$可以把一个$a_i \\ \\text{and}\\  a_j=0$的$j$放入集合，并且获得$a_i$的分数\n\n求最大得分总和\n\n<br>\n\n### 模型分析\n\n按照原题的模型分析，视$a_i\\rightarrow a_j$为一条权值为$a_i$边，则实际上求的是 **最大外向森林**\n\n考虑加入$a_0=0$，且$a_0$初始在集合中，一个人自己放入集合视作被$0$放入集合\n\n那么问题简化为求以0为根的 **最大外向树**\n\n进一步观察会发现：\n\n在外向树上每个点贡献次数就是$a_i\\cdot (deg_i-1)$\n\n那么最大化$a_i\\cdot (deg_i-1)$等价于最大化$\\sum a_i\\cdot deg_i$\n\n那么我们将一条边的权值$a_i\\rightarrow a_j$改为$a_i+a_j$，此时边双向权值相同\n\n问题就变成了求最大生成树\n\n<br>\n\n### 计算生成树\n\n~~只有暴力解法~~\n\n倒着枚举$a_i+a_j=S$，枚举$S$的子集$T$就能确定两个点\n\n并查集处理加边即可，复杂度为$O(\\cfrac{3^{18} } {2}\\cdot \\alpha(n))$\n\n$\\text{CodeForces}$真的有点快！！\n\n```cpp\nconst int N=1<<18,INF=1e9+10;\n\nint n,a[N],F[N];\nll ans;\nint Find(int x){ return F[x]==x?x:F[x]=Find(F[x]); }\n\nint main(){\n\tn=rd();\n\trep(i,1,n) {\n\t\tint x=rd();\n\t\ta[x]++,ans-=x;\n\t}\n\ta[0]++;\n\trep(i,0,N-1) F[i]=i;\n\tdrep(i,N-1,1) {\n\t\tfor(int S=i,T;(S^i)<=S;S=(S-1)&i) if(a[S] && a[T=S^i] && Find(S)!=Find(T)) {\n\t\t\tans+=1ll*(a[S]+a[T]-1)*i;\n\t\t\ta[S]=a[T]=1,F[Find(S)]=Find(T);\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1276F - Asterisk Substrings","url":"/articles/2021/05/09/b4dda2ab.html","content":"# CF1276F - Asterisk Substrings\n\n### 题目大意\n\n给定串$S,|S|=n$，设一个串的子串集合为$Sub(S)$\n\n求$|Sub(S) \\cup Sub(*+S[2:n])\\cup Sub(S[1:1]+*+S[3:n])\\cup \\cdots|$\n\n其中*表示特殊字符而不是通配符\n\n<br>\n\n### 分析\n\n对于不包含*的串，显然就是$Sub(S)$，可以通过后缀数组，后缀自动机来计算\n\n对于包含*的串，考虑分两部分计算\n\n<br>\n\n#### 1.对于后面接的串$T$分类\n\n对于后面接的串$T$，$T$在原串$S$出现的位置对应后缀数组上一段$\\text{rank}$区间$[l,r]$\n\n考虑按照原串后缀数组的$\\text{height}$建立笛卡尔树，此时容易发现，不同的$[l,r]$就是\n\n笛卡尔树上每一个节点对应的区间，而这个$[l,r]$出现的个数就是$height_u-height_{fa_u}$\n\n<br>\n\n#### 2.对于每一个$[l,r]$计算前面接的串$R$的种类\n\n那么在前面接的串$R$就是从$[l,r]$中$sa[i]-2$对应的所有前缀中\n\n选择某一条后缀得到\n\n在笛卡尔树上计算时，我们需要从儿子中合并两段$[l,r],[l',r']$，计算不同串个数\n\n也就是说我们需要动态维护一个集合$Set$为反串后缀的子集，并且计算这些后缀能够构成的串种类\n\n对于$Set$为全集的情况，我们知道答案就是$\\sum |suf_i|-\\sum height_i$\n\n这条式子的意义实际上是：\n\n按照$\\text{rank}$考虑每一个后缀，减去前面已经出现过的所有串，就是减去和前面串最大的$\\text{LCP}$\n\n由于$\\text{LCP}(i,j)$取决于中间$height$的最小值，按$\\text{rank}$加入时$\\text{LCP}$的最大值就是$height_{i-1}$\n\n<br>\n\n那么这个计算思路对于$Set$中元素不连续的情况显然依然成立\n\n只需要动态维护出现位置的$\\text{rank}$，不断减去相邻两个位置$i,j$的$\\text{LCP}$即可\n\n用$\\text{std::set}$+启发式合并即可$O(n\\log ^2n)$维护，$\\text{LCP}$用后缀数组$\\text{RMQ}$即可$O(1)$求（实际上带一个$\\log $也不影响总复杂度）\n\n或许用线段树合并可以做到$O(n\\log n)$\n\n代码的话$\\downarrow $，有轻度封装\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nenum{N=100010};\nint n,m;\nchar s[N];\nstruct Suffix_Array{\nint rk[N<<1],tmp[N],cnt[N],sa[N],lcp[N];\nvoid Build() {\n\trep(i,1,n) cnt[s[i]-'a']++;\n\trep(i,1,25) cnt[i]+=cnt[i-1];\n\trep(i,1,n) rk[i]=cnt[s[i]-'a'];\n\tdrep(i,n,1) sa[cnt[s[i]-'a']--]=i;\n\tfor(int m=n,k=1;;k<<=1) {\n\t\tint h=0;\n\t\trep(i,n-k+1,n) tmp[++h]=i;\n\t\trep(i,1,n) if(sa[i]>k) tmp[++h]=sa[i]-k;\n\t\n\t\trep(i,1,n) cnt[rk[sa[i]]]=i;\n\t\tdrep(i,n,1) sa[cnt[rk[tmp[i]]]--]=tmp[i];\n\t\t\n\t\trep(i,1,n) tmp[sa[i]]=tmp[sa[i-1]]+(rk[sa[i]]!=rk[sa[i-1]]||rk[sa[i-1]+k]!=rk[sa[i]+k]);\n\t\trep(i,1,n) rk[i]=tmp[i];\n\t\tif((m=rk[sa[n]])==n) break;\n\t}\n\tint h=0;\n\trep(i,1,n) {\n\t\tint j=sa[rk[i]-1];\n\t\tif(h) h--;\n\t\twhile(s[i+h]==s[j+h]) h++;\n\t\tlcp[rk[i]-1]=h;\n\t}\n}\n} ;\n\nstruct LCPer:Suffix_Array{\nint st[20][N],Log[N];\nvoid Init() {\n\trep(i,2,n) Log[i]=Log[i>>1]+1;\n\trep(i,1,n) st[0][i]=lcp[i];\n\trep(i,1,Log[n]) {\n\t\tint len=1<<(i-1);\n\t\trep(j,1,n-len+1) st[i][j]=min(st[i-1][j],st[i-1][j+len]);\n\t}\n}\nint LCP(int i,int j) {\n\tif(i==j) return n-sa[i]+1;\n\tif(i>j) swap(i,j);\n\tj--;\n\tint d=Log[j-i+1];\n\treturn min(st[d][i],st[d][j-(1<<d)+1]);\n}\n} S;\n\nstruct SA_Solver:Suffix_Array{\nint stk[N],top,ls[N],rs[N],mk[N];\nll ans,F[N*2];\nset <int> st[N*2];\nvoid dfs(int &u,int l,int r,int lst){\n\tif(l==r) {\n\t\tu=++m;\n\t\tint p=sa[l];\n\t\tif(p>2) {\n\t\t\tint q=n-(p-2)+1;\n\t\t\tF[u]=n-q+1;\n\t\t\tst[u].insert(S.rk[q]);\n\t\t}\n\t\tif(p>1) ans+=1ll*(n-p+1-lst)*(F[u]+1);\n\t\treturn;\n\t}\n\tdfs(ls[u],l,u,lcp[u]),dfs(rs[u],u+1,r,lcp[u]);\n\tif(st[ls[u]].size()>st[rs[u]].size()) swap(ls[u],rs[u]);\n\tswap(st[u],st[rs[u]]),F[u]=F[ls[u]]+F[rs[u]];\n\n\tint t=-1;\n\tfor(int i:st[ls[u]]) {\n\t\tif(~t) F[u]+=S.LCP(t,i);\n\t\tt=i;\n\t\tauto r=st[u].upper_bound(i);\n\t\tif(r!=st[u].end()) F[u]-=S.LCP(i,*r);\n\t\tif(r!=st[u].begin()) {\n\t\t\tauto l=r; l--;\n\t\t\tif(r!=st[u].end()) F[u]+=S.LCP(*l,*r);\n\t\t\tF[u]-=S.LCP(*l,i);\n\t\t}\n\t\tst[u].insert(i);\n\t}\n\tans+=1ll*(lcp[u]-lst)*(F[u]+1);\n}\nvoid Solve(){\n\trep(i,1,n-1) {\n\t\twhile(top && lcp[stk[top]]>lcp[i]) ls[i]=stk[top--];\n\t\tif(top) rs[stk[top]]=i;\n\t\tstk[++top]=i;\n\t}\n\trep(i,1,n-1) mk[ls[i]]=mk[rs[i]]=1;\n\n\trep(i,1,n) ans+=n-i+1-lcp[i];\n\tans++;\n\tint lst=-1;\n\trep(i,1,n) if(S.sa[i]>1) {\n\t\tans+=n-S.sa[i]+1;\n\t\tif(~lst) ans-=min(S.LCP(i,lst),min(n-S.sa[i]+1,n-S.sa[lst]+1));\n\t\tlst=i;\n\t}\n\tans++;\n\trep(i,1,n-1) if(!mk[i]) dfs(i,1,n,0);\n\tprintf(\"%lld\\n\",ans);\n}\n} T;\n\nint main(){\n\tscanf(\"%s\",s+1),n=m=strlen(s+1);\n\tif(n==1) return puts(\"3\"),0;\n\tT.Build(),reverse(s+1,s+n+1),S.Build(),S.Init();\n\tT.Solve();\n}\n```\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1082F - Speed Dial","url":"/articles/2021/05/08/d60b19a0.html","content":"# CF1082F - Speed Dial\n\n### 题目大意\n\n给定$n$个电话号码，你可以随意生成$k$个快捷键，每个快捷键是一个数字串\n\n最终拨号方式：\n\n选择 **至多一个** 快捷键按下，对于剩余部分手动补全，且不允许退格\n\n每个电话号码有拨打次数，最小化手动补全部分的长度总和\n\n<br>\n\n### 分析\n\n如果每次选定一个集合使其公用一个快捷键，那么其长度必然是集合中所有串的$\\text{LCP}$\n\n假设确定了一个$\\text{LCP}$，那么对应的串集合容易发现就是$\\text{trie}$树上的一个子树\n\n于是先将所有串加入$\\text{trie}$树，此时问题转化为\n\n选择至多$k$个$\\text{LCP}$（默认根节点选了且没有代价），使得每个电话号码到其祖先中最深$\\text{LCP}$的距离之和最小\n\n由于有拨打次数的限制，且其数值相对较大，难以存入dp状态\n\n于是想到在祖先钦定$\\text{LCP}$，然后从子树取值\n\n令$dp_{u,i,j}$表示计算$u$子树内的答案，已经钦定祖先中最深的$\\text{LCP}$长度为$i$，且在子树内又钦定了$j$个$\\text{LCP}$\n\n合并子树时对于每个$i$，背包合并$j$，决策$u$自己是否选为$\\text{LCP}$即可\n\n```cpp\n\nconst int N=510,INF=1e9+10;\n\nint n,m;\nint trie[N][10],cnt,c[N];\nchar s[N];\nint dp[N][N][12];\nint F[N][12],G[12],dep[N];\n\nvoid dfs(int u) {\n\tfor(int v:trie[u]) if(v) dep[v]=dep[u]+1,dfs(v);\n\tmemset(F,63,sizeof F);\n\trep(i,0,dep[u]) F[i][0]=c[u]*(dep[u]-i);\n\tfor(int v:trie[u]) if(v) {\n\t\trep(j,0,dep[u]) {\n\t\t\trep(k,0,m) G[k]=F[j][k],F[j][k]=INF;\n\t\t\trep(k,0,m) rep(d,0,m-k) cmin(F[j][k+d],G[k]+dp[v][j][d]);\n\t\t}\n\t}\n\trep(d,0,dep[u]) {\n\t\trep(i,0,m) dp[u][d][i]=INF;\n\t\trep(i,0,m) {\n\t\t\tcmin(dp[u][d][i+1],F[dep[u]][i]);\n\t\t\tcmin(dp[u][d][i],F[d][i]);\n\t\t}\n\t}\n}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,1,n) {\n\t\tscanf(\"%s\",s+1);\n\t\tint u=0;\n\t\tfor(int j=1;s[j];++j) {\n\t\t\tint &v=trie[u][s[j]-'0'];\n\t\t\tif(!v) v=++cnt;\n\t\t\tu=v;\n\t\t}\n\t\tc[u]+=rd();\n\t}\n\tdfs(0);\n\tint ans=INF;\n\trep(i,0,m) cmin(ans,dp[0][0][i]);\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1366G - Construct the String","url":"/articles/2021/05/08/62b22b70.html","content":"# CF1366G - Construct the String\n\n### 题目大意\n\n给定一个初始串$S$和目标串$T$\n\n其中$S$除了包含字母外还包含删除标记'.'\n\n具体的$S$表示的字符串$f(S)$，就是依次加入每个字母，或者在删除标记处删除上一个字符（不存在这个字符则非法）\n\n求删除$S$中最少的字符，使得$f(S')=T$\n\n<br>\n\n### 吐槽\n\n$O(n^2)$出$n\\leq 10^4$???\n\n<br>\n\n<br>\n\n### 朴素dp分析\n\n这种题目容易想到记录在$T$中匹配位置的$dp$，通过枚举$S$的每一个字符\n\n1.匹配\n\n2.手动删除\n\n3.被'.'删除\n\n然而被'.'删除的情况实际难以处理，因为无法额外记录待定的'.'个数\n\n<br>\n\n### 基于括号树的思路\n\n考虑对于不完全的括号序列的包含关系建立树，注意到\n\n1.一个已经和'.'匹配的字符，不需要考虑它被手动删除的情况\n\n2.一个字符能够保留，当且仅当所有跨过其的右括号被删除\n\n跨过其的右括号即祖先中的右括号\n\n所以此时dp决策可以简单地归纳为\n\n1.保留一整个匹配括号的子树，进入后面的匹配\n\n2.否则，删除右括号，并且决定自己这个字符是否匹配，然后递归进入子树\n\n~~代码没写~~\n\n<br>\n\n### 更简洁的表述\n\n实际上与上面类似，但是更加简化了模型，转移可以简单归纳为\n\n1.匹配当前字符\n\n2.删除当前字符\n\n3.找到当前字符匹配右括号，跳过这一段\n\n原理：\n\n实际上朴素dp缺陷就在于：\n\n如果当前这个字符被后面的某一个'.'删除，却又无法匹配时，无法被加入状态\n\n此时手动补充直接跳到删除这个字符的位置\n\n充分性理解：在新串中匹配该字符的右括号 和 当前后缀中匹配该字符的括号相同\n\n如果要让这个字符被'.'删除，那么到当前后缀中匹配该字符的括号为止，中间的部分不可能保留\n\n手动删除只会让匹配该字符的括号右移，这不会更优\n\n```cpp\nconst int N=10010,P=1e9+7;\n\nint n,m;\nchar s[N],t[N];\nint dp[N][N];\n\nint main(){\n\tscanf(\"%s%s\",s,t),n=strlen(s),m=strlen(t);\n\trep(i,0,n) memset(dp[i],63,(min(m,i)+2)<<2);\n\trep(i,*dp[0]=0,n-1) {\n\t\tif(s[i]!='.') {\n\t\t\tint j=i,c=0;\n\t\t\tdo c+=s[j++]=='.'?-1:1;\n\t\t\twhile(c && j<n);\n\t\t\tif(!c) rep(k,0,min(m,i)) cmin(dp[j][k],dp[i][k]);\n\t\t}\n\t\trep(j,0,min(m,i)) {\n\t\t\tcmin(dp[i+1][j],dp[i][j]+1);\n\t\t\tif(s[i]==t[j]) cmin(dp[i+1][j+1],dp[i][j]);\n\t\t}\n\t}\n\tprintf(\"%d\\n\",dp[n][m]);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1201E2 - Knightmare (Hard)","url":"/articles/2021/05/08/da5446ce.html","content":"# CF1201E2 - Knightmare (hard)\n\n### 题目大意\n\n$n\\times m(2|n,2|m)$的棋盘上有两个 马 ~~(Knight是国际象棋)~~ 分别位于$S_1=(x_1,y_1),S_2=(x_2,y_2)$\n\n他们分别要到达$T_1=(\\frac{n} {2},\\frac{m} {2}),T_2=(\\frac{n} {2}+1,\\frac{m} {2})$\n\n一方胜利的情况是：\n\n1.吃掉另一方\n\n2.到达自己的目标位置，且这个位置不能被另一方吃掉\n\n你可以选定操作先手还是后手，要求和交互器交互，并且在**350**步内取胜\n\n<br>\n\n### 分析\n\n首先是一个重要的性质：**双方必然有一方永远无法吃掉另一方**\n\n考虑象棋的移动，每次$(x\\pm 1,y\\pm 2)$或者$(x\\pm 2,y\\pm 1)$\n\n每次操作，必然导致$x+y\\mod 2$改变，在双方轮流操作的过程中\n\n必然有一方走的时候永远无法和另一方同奇偶，也就是无法吃掉另一方\n\n<br>\n\n在此基础上，考虑几种情况\n\n设$D(a,b)$为$a,b$两点的距离，$f$为先手是否永远不会被吃\n\n1.先手可以在不被后手吃掉的情况下到达目标，且先于后手\n\n先于后手即$D(S_1,T_1)\\leq D(S_2,T_2)$\n\n先手不被后手吃掉的情况\n\n1.$f$ ： 显然\n\n2.$D(S_1,T_1)<D(S_2,T_1)$：\n\n此时，假设后手存在一个吃掉先手的策略\n\n那么后手经过这个吃掉先手的点到达$T_1$的最短路一定和先手相同，故矛盾\n\n\n\n<br>\n\n2.后手可以在不被先手吃掉的情况下到达目标，且先于先手\n\n$D(S_1,T_1)>D(S_2,T_2)$\n\n对称情况\n\n1.$not\\  f$ \n\n2.$D(S_2,T_2)<D(S_1,T_2)-1$\n\n以上两种情况均直接冲最短路到达目标\n\n<br>\n\n3.双方均无法安全直接抵达目标\n\n此时，考虑选择不会被吃的一方操作\n\n由于自己是无敌的，可以考虑先猛扑对方的终点\n\n3.1 $f=true$，选择先手\n\n先走到$T_2$堵住后手，然后可以绕三步到达$T_1$\n\n先手占据$T_2$时，后手无法到达$T_2$\n\n走第一步时，由于先手限制着，后手无法进入$T_2$\n\n走第二步时，根据奇偶性分析，后手无法到达$T_2$的奇偶性\n\n第三步到达目标\n\n3.2$f=false$，同理\n\n\n\n### 实现\n\n可以好好封装一下\n\n~~我曾经以为不用读入~~\n\n由于交互器下面读入的参数可能会让交互器走智障操作\n\n如果能吃掉对方，一定要直接吃掉\n\n```cpp\nconst int N=1010,INF=1e9+10;\nconst int dx[]={1,1,-1,-1,2,2,-2,-2};\nconst int dy[]={2,-2,2,-2,1,-1,1,-1};\n\nint n,m,opt;\nint x=-2,y=-2;\nvoid input(){ \n\tx=rd(),y=rd(); \n\tif(x==-1) exit(0);\n}\nvoid CB(){ puts(\"BLACK\"),fflush(stdout),input(); }\nvoid CW(){ puts(\"WHITE\"),fflush(stdout); }\n\nstruct Bfser{\n\tint dis[N][N],pre[N][N];\n\tint QX[N*N],QY[N*N],L,R;\n\tint u,v;\n\tint Reach() {\n\t\tint a=abs(u-x),b=abs(y-v);\n\t\tif(a>b) swap(a,b);\n\t\treturn a==1 && b==2;\n\t}\n\tvoid Bfs(int x,int y){\n\t\tu=x,v=y;\n\t\tQX[L=R=1]=x,QY[1]=y,pre[x][y]=-1,dis[x][y]=1;\n\t\tfor(;L<=R;) {\n\t\t\tx=QX[L],y=QY[L++];\n\t\t\trep(i,0,7) {\n\t\t\t\tint x1=x+dx[i],y1=y+dy[i];\n\t\t\t\tif(x1<1 || y1<1 || x1>n || y1>m || dis[x1][y1]) continue;\n\t\t\t\tdis[x1][y1]=dis[x][y]+1,QX[++R]=x1,QY[R]=y1,pre[x1][y1]=i;\n\t\t\t}\n\t\t}\n\t}\n\tvoid Go(int d,int k=1) {\n\t\tif(Reach()) printf(\"%d %d\\n\",x,y),fflush(stdout),exit(0);\n\t\tprintf(\"%d %d\\n\",u+=dx[d],v+=dy[d]),fflush(stdout);\n\t\tif(k) input();\n\t}\n\tvoid Go(int x,int y,int k) {\n\t\tvector <int> s;\n\t\twhile(~pre[x][y]) {\n\t\t\tint t=pre[x][y];\n\t\t\ts.pb(t),x-=dx[t],y-=dy[t];\n\t\t}\n\t\tdrep(i,s.size()-1,0) Go(s[i],k+i);\n\t}\n} B,W;\n\nint main(){\n\tn=rd(),m=rd();\n\tint x1=rd(),y1=rd(),x2=rd(),y2=rd();\n\tW.Bfs(x1,y1),B.Bfs(x2,y2);\n\tint f=((x1+y1)&1)!=((x2+y2)&1);\n\tif(W.dis[n/2][m/2]<=B.dis[n/2+1][m/2] && (f || W.dis[n/2][m/2]<B.dis[n/2][m/2])) {\n\t\tCW(),x=x2,y=y2,W.Go(n/2,m/2,0);\n\t} else if(B.dis[n/2+1][m/2]<W.dis[n/2][m/2] && (B.dis[n/2+1][m/2]<W.dis[n/2+1][m/2]-1 || !f)) {\n\t\tCB(),B.Go(n/2+1,m/2,0);\n\t} else if(f) {\n\t\tCW(),x=x2,y=y2,W.Go(n/2+1,m/2,1);\n\t\tW.Go(2),W.Go(5),W.Go(7,0);\n\t} else {\n\t\tCB(),B.Go(n/2,m/2,1);\n\t\tB.Go(0),B.Go(7),B.Go(5,0);\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1221G - Graph and Numbers","url":"/articles/2021/05/08/d94695b.html","content":"# CF1221G - Graph And Numbers\n\n### 题目大意\n\n给定一个$n$点$m$边的无向图，$n\\leq 40$\n\n求给所有点01染色，满足\n\n至少存在一条边两边的点均为0\n\n至少存在一条边两边的点一个为0，一个为1\n\n至少存在一条边两边的点均为1\n\n的方案数\n\n<br>\n\n### 分析\n\n**至少存在** 问题并不好处理，由于限制有3个，可以通过$2^3$种情况容斥得到\n\n设三种边类型为0,1,2\n\n即计算\n\n1.不存在0\n\n2.不存在1\n\n3.不存在2\n\n4.不存在01\n\n5.不存在02\n\n6.不存在12\n\n7.不存在012\n\n### 逐个击破\n\n2.即计算所有边连接两个点染色相同方案数，统计连通块即可\n\n4/6即统计所有点两边都是1/0的方案数\n\n5即统计所有边两端点颜色不同的方案数，即二分图染色数\n\n7.即m=0\n\n1,3类似，可以归纳为每条边两端的点至少有一个为1\n\n~~似乎有点类似一般图独立集个数的求解~~\n\n由于$n\\leq 40$，考虑 $\\text{meet in the middle}$ 做\n\n枚举半边，判断集合内部是否有非法边，然后根据集合之间的非法边以及自己集合内部为0的点\n\n确定另一个集合必须选择为1的点集\n\n因此需要一个父集前缀和\n\n```cpp\nconst int N=45;\n\nint n,m;\nint G[N][N];\nll E[N]; // 这东西居然要开long long\n\nll Solve0(){\n\tstatic int S[1<<20];\n\tll ans=0;\n\tint m=n/2,A=(1<<m)-1;\n\trep(i,0,(1<<m)-1) {\n\t\tll T=0;\n\t\trep(j,0,m-1) if(~i&(1<<j)) T|=E[j];\n\t\tS[i]=(~i&T&A)==0;\n\t}\n    // 父集前缀和\n\tfor(int i=1;i<=A;i<<=1) for(int l=0;l<=A;l+=i*2) for(int j=l;j<l+i;++j) S[j]+=S[j+i];\n\trep(i,0,(1<<(n-m))-1) {\n\t\tll T=0;\n\t\trep(j,0,n-m-1) if(~i&(1<<j)) T|=E[j+m];\n\t\tif((T>>m)&~i) continue;\n\t\tT&=A,ans+=S[T];\n\t}\n\treturn ans;\n}\n\nll Solve1(){\n\tstatic int vis[N];\n\tfunction<void(int)> dfs=[&](int u) {\n\t\tif(vis[u]) return;\n\t\tvis[u]=1;\n\t\trep(i,0,n-1) if(G[u][i]) dfs(i);\n\t};\n\tll ans=1;\n\trep(i,0,n-1) if(!vis[i]) dfs(i),ans<<=1;\n\treturn ans;\n}\n\nll Solve01(){\n\tll ans=1;\n\trep(i,0,n-1) if(!E[i]) ans<<=1;\n\treturn ans;\n}\n\nll Solve02(){\n\tstatic int vis[N],fl=1;\n\tfunction <void(int,int)> dfs=[&](int u,int c) {\n\t\tif(vis[u]) {\n\t\t\tif(vis[u]!=c) fl=0;\n\t\t\treturn;\n\t\t}\n\t\tvis[u]=c;\n\t\trep(i,0,n-1) if(G[u][i]) dfs(i,3-c);\n\t};\n\n\tll ans=1;\n\trep(i,0,n-1) if(!vis[i]) dfs(i,1),ans<<=1;\n\treturn fl*ans;\n}\n\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,1,m) {\n\t\tint x=rd()-1,y=rd()-1;\n\t\tG[x][y]=G[y][x]=1;\n\t\tE[x]|=1ll<<y,E[y]|=1ll<<x;\n\t}\n\tll ans=1ll<<n;\n\tans-=2*Solve0(),ans-=Solve1();\n\tans+=2*Solve01()+Solve02();\n\tif(m==0) ans-=1ll<<n;\n\tprintf(\"%lld\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1408 - Clusterization Counting","url":"/articles/2021/05/08/524f7bdc.html","content":"# CF1408 - Clusterization Counting\n\n### 题目大意\n\n给定$n$个点无向带权完全图，求将这些点分组，使得 组内的边边权 都小于 组内点连到组外点的边权\n\n保证边权不同\n\n<br>\n\n### 分析\n\n考虑如何确定合法的分组\n\n从小到大依次加入每一条边，则一个合法的分组一定在某一个时刻满足\n\n1.这个分组是一个极大的连通块\n\n2.这个分组是一个团\n\n<br>\n\n### dp\n\n考虑类似$\\text{Kruskal}$重构树的方法，对于合并的过程转化为树形结构\n\n此时，分组决策只有两种\n\n1.这个点儿子内部分别分组，背包合并\n\n2.如果这个点恰好是合法的分组，那么选择这个点建立新的分组，并且此时儿子必须都是散点\n\n借用树形背包的复杂度分析，$dp$部分复杂度为$O(n^2)$\n\n排序可以桶排\n\n```cpp\n\n\nconst int N=3010,P=998244353;\n\nint n,m,k;\nint F[N],S[N],C[N];\nint Find(int x){ \n\treturn F[x]==x?x:F[x]=Find(F[x]); \n}\nint dp[N][N/2];\nint X[N*N/4],Y[N*N/4];\n\nint main(){\n\tn=rd();\n\trep(i,1,n) F[i]=i,S[i]=1,C[i]=0,dp[i][0]=dp[i][1]=1;\n\trep(i,1,n) rep(j,1,n) {\n\t\tint x=rd();\n\t\tif(i<j) X[x]=i,Y[x]=j;\n\t}\n\trep(i,0,n*n) if(X[i]) {\n\t\tint x=Find(X[i]),y=Find(Y[i]);\n\t\tif(x==y) {\n\t\t\tif(++C[x]==S[x]*(S[x]-1)/2) dp[x][1]++;\n\t\t} else {\n\t\t\t++n;\n\t\t\trep(a,0,S[x]) rep(b,0,S[y]) if((a>0)==(b>0)) dp[n][a+b]=(dp[n][a+b]+1ll*dp[x][a]*dp[y][b])%P;\n\t\t\tF[x]=F[y]=n,S[n]=S[x]+S[y],C[n]=C[x]+C[y]+1,F[n]=n;\n\t\t\tif(C[n]==S[n]*(S[n]-1)/2) dp[n][1]++;\n\t\t}\n\t}\n\trep(i,1,S[n]) printf(\"%d \",dp[n][i]);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","Codeforces"],"categories":["题解"]},{"title":"CF1450H2 - Multithreading (Hard Version)","url":"/articles/2021/05/07/b640b4e8.html","content":"# CF1450H2 - Multithreading (Hard Version)\n\n### 题目大意\n\n给定一个均分成$n$份($n$为偶数)的圆，每份上有一个元素为0/1，其中一些元素的值未知，且随机\n\n当存在一个方案，0和0连线，1和1连线，使得每个元素都被恰好连一条线时，称环$c$合法\n\n定义$f(c)$为上述连线方案中 **不同色连线交叉**的最小次数\n\n同时需要支持修改元素，求$f(c)$的期望\n\n<br>\n\n### 贪心求解指定环\n\n首先考虑一个Naive的贪心，在环上一旦出现相邻两点同色，就将他们连线然后删除\n\n直到最后，就将变成01交替，设此时环长$n'$，考虑再让相邻的00,11连线\n\n则得到交叉个数为$\\frac{n'} {4}$\n\n~~这个贪心甚至连不带修的情况都做不了~~\n\n### 简化求解\n\n考虑上面贪心过程中被抵消的点\n\n容易发现一定是一个奇数位置的点去抵消一个偶数位置的点\n\n并且抵消之后其他位置的奇偶性保持不变\n\n因此猜想最终剩下的黑点数量就是$|cnt_{odd}-cnt_{even}|$\n\n其中$cnt_{odd},cnt_{even}$表示已经确定的1元素在奇数/偶数位上的个数\n\n也容易证明\n\n根据贪心，显然同奇偶的点无法抵消，因此$ans\\ge |cnt_{odd}-cnt_{even}|$\n\n而一旦存在两个不同奇偶的黑点，若他们不相邻\n\n则他们之间一定存在一对相邻白点（否则奇偶性不对），进而不断合并白点使得它们相邻\n\n白点可以对称得到相同值的式子，最终得到答案就是\n\n$\\displaystyle \\frac{|cnt_{odd}-cnt_{even}|} {2}$\n\n<br>\n\n### 答案式子\n\n设已经确定的部分$\\delta=cnt_{odd}-cnt_{even}$，未确定的部分包含$x$个奇数位置，$y$个偶数位置\n\n则Naive的计算答案式子为\n\n$\\displaystyle Sum=\\sum_{i=0}^x \\sum_{j=0}^y \\frac{1} {2}\\cdot [2|i-j+\\delta] \\cdot |\\delta+i-j|\\binom{x} {i}\\binom{y} {j}$\n\n~~NTT~~\n\n补上方案数$2^{x+y-1}$（因为只有一半的方案奇偶性相同），用$y-j$代换$j$\n\n$\\displaystyle E=\\frac{1} {2^{x+y} }\\sum_{i=0}^x \\sum_{j=0}^y \\cdot [2|i-y+j+\\delta] \\cdot |\\delta+i-y+j|\\binom{x} {i}\\binom{y} {j}$\n\n转换为$\\displaystyle i+j\\leftarrow \\binom{x} {i}\\binom{y} {j}$的形式后，带入组合意义合并$i,j$\n\n$\\displaystyle E=\\frac{1} {2^{x+y} }\\sum_{i=0}^{x+y} \\cdot [2|\\delta-y+i] \\cdot |\\delta-y+i|\\binom{x+y} {i}$\n\n不妨设$\\delta'=\\delta-y$\n\n$\\displaystyle E=\\frac{1} {2^{x+y} }\\sum_{i=0}^{x+y} \\cdot [\\delta'\\equiv i\\pmod 2] \\cdot |\\delta'+i|\\binom{x+y} {i}$\n\n根据$\\delta'+i$的正负性容易确定一个范围，范围两边都是计算都转化为\n\n$\\displaystyle S(n,m)=\\sum _{i=0}^m [2\\not |i]\\cdot  i\\cdot \\binom{n} {i}$\n\n$\\displaystyle S(n,m)=\\sum _{i=0}^m [2\\not |i]\\cdot  n\\cdot \\frac{(n-1)!} {(n-i)!(i-1)!}$\n\n$\\displaystyle S(n,m)=n\\sum _{i=0}^{m-1} [2 |i]\\cdot \\binom{n-1} {i}$\n\n形如$\\displaystyle m|2, S'(n,m)=\\sum _{i=0}^m [2|i]\\cdot \\binom{n} {i} $，可以转化为\n\n$\\displaystyle S'(n,m)=\\sum _{i=0}^m [2|i](\\binom{n-1} {i}+\\binom{n-1} {i-1})$\n\n$\\displaystyle S'(n,m)=\\sum _{i=0}^m \\binom{n-1} {i}$\n\n组合数关于$m$一维的前缀和是一个经典的步移问题\n\n$S(n,m-1)=S(n,m)-C(n,m)$\n\n$S(n,m+1)=S(n,m)+C(n,m+1)$\n\n$S(n+1,m)=\\displaystyle \\sum_{i=0}^m C(n+1,m)=\\sum_{i=0}^mC(n,i)+\\sum_{i=0}^{m-1}C(n,i-1)=2S(n,m)-C(n,m)$\n\n$\\displaystyle S(n-1,m)=\\frac{S(n,m)+C(n-1,m)} {2}$\n\n封装一下计算即可，复杂度为$O(n)$\n\n~~真的只是一点点麻烦~~\n\n![QQ图片20210506191744.jpg](https://i.loli.net/2021/05/06/JKoODBXaQ3nA1Gr.jpg)\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\nchar IO;\nint rd(){\n\tint s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\n\nconst int N=2e5+10,P=998244353;\n\nint n,m;\nint I[N],J[N];\nint P1[N],P2[N];\nll qpow(ll x,ll k=P-2){\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nchar s[N];\nint d,x,y;\n\nint Pow2(int x){ return x<0?P2[-x]:P1[x]; }\nint C(int n,int m){ return n<0||m<0||n<m?0:1ll*J[n]*I[m]%P*I[n-m]%P; }\n\nint p1,p2,cur=1;\n// 组合数关于m的前缀和，步移计算\nint SC(int n,int m) {\n\tif(n<0||m<0) return 0;\n\tif(m==0) return 1;\n\tif(m>=n) return Pow2(n);\n\tif(m==n-1) return Pow2(n)-1;\n\n\t/* Brute Force\n\tint sum=0;\n\trep(i,0,m) sum=(sum+C(n,i))%P; \n\treturn sum;\n\t*/\n\n\t/* assertions blows\n\tstatic int fl=1; \n\tassert(fl || abs(p1-n)+abs(p2-m)<=10);\n\tfl=0;\n\t*/\n\n\twhile(p2>m) cur=(cur-C(p1,p2--))%P;\n\twhile(p2<m) cur=(cur+C(p1,++p2))%P;\n\twhile(p1<n) cur=(cur*2ll-C(p1++,p2))%P;\n\twhile(p1>n) cur=1ll*(cur+C(--p1,p2))*(P+1)/2%P;\n\treturn cur;\n}\n\n// T 指前面的S'\nint T(int n,int m,int k){ return k==1?(SC(n,m)-T(n,m,0))%P:(n==0?m>=0:SC(n-1,m-(m&1))); }\nint T(int n,int l,int r,int k){ \n\t\n\t/*Brute Force\n\tint sum=0;\n\trep(i,l,r) if((i&1)==k) sum=(sum+C(n,i))%P;\n\treturn sum;\n\t*/\n\n\treturn l>r?0:(T(n,r,k)-T(n,l-1,k))%P; \n}\n\nint S(int n,int m){ return 1ll*n*T(n-1,m-1,0)%P; }\nint S(int n,int l,int r,int k=1){\n\n\t/*Brute Force\n\tint sum=0;\n\trep(i,l,r) if((i&1)==k) sum=(sum+1ll*i*C(n,i))%P;\n\treturn sum;\n\t*/\n\n\tif(l>r) return 0;\n\tif(k==0) return (1ll*n*(SC(n-1,r-1)-SC(n-1,l-2))-S(n,l,r))%P;\n\treturn (S(n,r)-S(n,l-1))%P;\n}\n\nint Que(){\n\tint D=d-y,n=x+y,ans=0;\n\t/* Brute Force\n\trep(i,0,n) if((i&1)==(D&1))  {\n\t\tans=(ans+1ll*abs(D+i)*C(n,i))%P;\n\t}\n\t*/\n\tif(D<0) {\n\t\tint t=-D-1;\n\t\tans=(ans-1ll*D*T(n,t,D&1))%P;\n\t\tans=(ans-S(n,0,t,D&1))%P;\n\t}\n\tif(D+n>=0) {\n\t\tans=(ans+1ll*D*T(n,max(0,-D),n,D&1))%P;\n\t\tans=(ans+S(n,max(0,-D),n,D&1))%P;\n\t}\n\tans=1ll*(ans+P)*Pow2(-n)%P;\n\treturn ans;\n}\n\nint main(){\n\trep(i,*P1=1,N-1) P1[i]=P1[i-1]*2,Mod1(P1[i]);\n\trep(i,*P2=1,N-1) P2[i]=((P2[i-1]&1)?P2[i-1]+P:P2[i-1])/2;\n\trep(i,*J=1,N-1) J[i]=1ll*J[i-1]*i%P;\n\tI[N-1]=qpow(J[N-1]);\n\tdrep(i,N-1,1) I[i-1]=1ll*I[i]*i%P;\n\tn=rd(),m=rd(),scanf(\"%s\",s+1);\n\trep(i,1,n) {\n\t\tif(s[i]=='b') i&1?d++:d--;\n\t\tif(s[i]=='?') i&1?x++:y++;\n\t}\n\tprintf(\"%d\\n\",Que());\n\twhile(m--) {\n\t\tint i=rd(),c=getchar();\n\t\tif(s[i]=='b') i&1?d--:d++;\n\t\tif(s[i]=='?') i&1?x--:y--;\n\t\ts[i]=c;\n\t\tif(s[i]=='b') i&1?d++:d--;\n\t\tif(s[i]=='?') i&1?x++:y++;\n\t\tprintf(\"%d\\n\",Que());\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1379F2 - Chess Strikes Back (Hard Version)","url":"/articles/2021/05/07/7c270418.html","content":"# CF1379F2 - Chess Strikes Back (hard version)\n\n### 题目大意\n\n给定一个$2n\\times 2m$的交错棋盘，一个位置$(i,j)$可以放当且仅当$2|i+j$\n\n给定$q$次操作，每次操作在一个位置加入或删除一个障碍\n\n求是否存在一种方案能在棋盘上放入$nm$个互不攻击的国王（国王走九宫格）\n\n<br>\n\n<br>\n\n### 分析\n\n棋盘是交错的减少了很多无法处理的情况\n\n容易发现，任何一个King都只能在它自己$2\\times 2$的小方格内选择两种位置\n\n如果一个$2\\times 2$的单元左上角被填了，那么它就只能选择右下角\n\n而根据这个King的互斥位置，在其右下方的所有King都只能选择右下角\n\n如果右下角被占了同理，左上方的King只能选择左上角\n\n实际上判定是否有解就是判定这些关系是否互斥，将每个点按照其所属$2\\times 2$单元编号\n\n则问题转化为一个检查二维偏序的问题\n\n删点容易通过线段树分治转化，偏序可以用树状数组处理\n\n```cpp\nconst int N=2e5+10,P=998244353;\n\nint n,m,q;\nint X[N],Y[N];\nint A[N*20],B[N*20],C[N*20],T;\nint ans;\nvoid Add(int x,int y){\n\tint t=x&1;\n\tx=(x+1)/2,y=(y+1)/2;\n\tif(t) {\n\t\tfor(int i=x;i<=n;i+=i&-i) ans+=Y[i]>=y;\n\t\tfor(int i=x;i<=n;i+=i&-i) if(X[i]>y) A[++T]=0,B[T]=i,C[T]=X[i],X[i]=y;\n\t} else {\n\t\tfor(int i=x;i;i-=i&-i) ans+=X[i]<=y;\n\t\tfor(int i=x;i;i-=i&-i) if(Y[i]<y) A[++T]=1,B[T]=i,C[T]=Y[i],Y[i]=y;\n\t}\n}\nvoid Back(){\n\tif(A[T]==0) X[B[T]]=C[T];\n\telse Y[B[T]]=C[T];\n\tT--;\n}\n\nmap <Pii,int> M;\nvector <Pii> G[N<<2];\nvoid Ins(int p,int l,int r,int ql,int qr,Pii x){\n\tif(ql<=l && r<=qr) return G[p].pb(x);\n\tint mid=(l+r)>>1;\n\tif(ql<=mid) Ins(p<<1,l,mid,ql,qr,x);\n\tif(qr>mid) Ins(p<<1|1,mid+1,r,ql,qr,x);\n}\n\nvoid Solve(int p,int l,int r){\n\tint t1=T,t2=ans;\n\tfor(auto i:G[p]) Add(i.first,i.second);\n\tif(l==r) puts(ans?\"NO\":\"YES\");\n\telse {\n\t\tint mid=(l+r)>>1;\n\t\tSolve(p<<1,l,mid),Solve(p<<1|1,mid+1,r);\n\t}\n\twhile(T>t1) Back();\n\tans=t2;\n}\n\nint main(){\n\tmemset(X,10,sizeof X);\n\tn=rd(),m=rd(),q=rd();\n\trep(i,1,q) {\n\t\tint x=rd(),y=rd();\n\t\tPii t(x,y);\n\t\tif(M[t]==0) M[t]=i;\n\t\telse Ins(1,1,q,M[t],i-1,t),M[t]=0;\n\t}\n\tfor(auto i:M) if(i.second!=0) Ins(1,1,q,i.second,q,i.first);\n\tSolve(1,1,q);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF Round  635 Div.1 Chiori and Doll Picking (Hard Version)","url":"/articles/2021/05/07/f5140243.html","content":"# CF Round #635 Div.1 Chiori and Doll Picking (hard version)\n\n考虑对于$a_i$建立线性基$d$，并且通过高斯消元重整，使得$d$中 每一个元素的最高位 仅自己包含\n\n不妨设$k=|d|$，一个基底的生成集合为$S(d)$，设$A=S(d)$，预处理部分复杂度为$O(nm+k^2)$\n\n$$ \\ $$\n\n根据线性基的基本性质，我们知道任何一个$x\\in S(d)$有$2^{n-k}$种生成方法\n\n因此我们只需要计算线性基元素异或的答案即可，这样我们将问题规模降低到了$k$\n\n$$ \\ $$\n\n$$ \\ $$\n\n### 暴力1\n\n对于$k\\leq 27$，暴力枚举每个元素是否选择，可以通过预处理让复杂度降至$O(2^k)$\n\n<br>\n\n### 暴力2\n\n$m\\leq 35，k>27$时\n\n由于线性基包含$k$个关键01位，$m-k$个非关键01位\n\n通过高斯消元可以使得基的每一位仅包含一个关键01位\n\n令$dp_{S,i}$表示选择了$i$个基，非关键01位异或和为$S$的方案数\n\n复杂度为$O(2^{m-k}m^2)$\n\n<br>\n\n--------------------------\n\n\n\n## 对称暴力\n\n由于$m\\leq 53$，而我们能够暴力解决$k\\leq 27$，则可以考虑剩下的$m-k$个位，想办法在$O(2^{m-k})$时间内求解\n\n$$ \\ $$\n\n考虑计算个数为$c$的方案数，我们用一个卷积形式来描述，令$\\displaystyle F_c(x)=\\sum_{|T|=c}x^{T}$\n\n则容易发现 $ans_c=[x^{\\empty}](A\\bigoplus F_c)$，其中$\\bigoplus$表示 异或 ~~(集合对称差)~~ 卷积\n\n显然我们需要$\\text{FWT}$来计算这个东西，也就是计算\n\n$[x^{\\empty}]\\text{FWT}(\\text{FWT}(A)\\cdot \\text{FWT}(F_c))$\n\n先考虑比较复杂的$G=\\text{FWT}(A)$的计算\n\n下面你需要良好掌握$\\text{FWT}$，[参考](https://www.cnblogs.com/chasedeath/p/12785842.html)\n\n<br>\n\n#### 1: $G(x)$中每一非零项系数为$2^k$\n\n考虑线性基$A$的元素是封闭的，则有$A\\bigoplus A=A\\cdot |A|$\n\n即$G\\cdot G=G\\cdot 2^k$，解方程得到$[x^S]G\\in\\{0,2^k\\}$\n\n<br>\n\n#### 2:$[x^S]G(x)=2^k\\Longleftrightarrow \\forall T,|S\\cap T|\\equiv 0\\pmod 2$\n\n由$\\text{FWT}$式子\n\n$[x^S]G(x)=\\sum (-1)^{|S\\cap T|} [x^T]A(x)$\n\n而$A(x)$由$2^k$个1构成，故得结论\n\n<br>\n\n#### 确定非零项\n\n由恒等式$|X\\cap S|+|Y\\cap S|\\equiv|(X\\oplus Y)\\cap S|\\pmod 2$，得到简化\n\n1.若$X,Y$对于$S$合法，则$X\\oplus Y$同样合法，只需要考虑线性基$d$中元素对于$S$的限制\n\n2.假设已知$S,T$非零，则$S\\oplus T$非零，因此可以考虑用一个线性基$d'$来描述合法元素\n\n<br>\n\n#### 确定$|d'|$大小\n\n则$2^kS(d')=G$，$\\text{IFWT}(2^k\\cdot S(d'))=A$\n\n带入两边$x^{\\empty}$项的值，容易得到$|S(d')|=2^{m-k}$，故$|d'|=m-k$\n\n$|d'|=m-k$是接近前面猜想的一大跳跃\n\n<br>\n\n#### 构造$d'$?\n\n考虑用0/1矩阵形式描述线性基$d$\n\n将$d$中的元素中的最高位移动到主对角线上最高的$k$个位置，此时每一行一定是一个主对角线元素后面跟上一些位置$\\ge k+1$的元素\n\n此时$d'$的构造即：主对角线取反，其余位置为转置\n\n|  | | | | |\n| ---- | ---- | ---- | ---- | ----|\n| $\\color{blue} 1$ | 0    | 0    | $\\color{blue} 1$ | 0 |\n| 0 | $\\color{blue} 1$ | 0    | 0   |$\\color{blue} 1$|\n| 0 | 0 | $\\color{blue} 1$ | $\\color{blue} 1$ |0|\n| $\\color{red}1$ | 0    | $\\color{red}1$ | $\\color{red}1$ | 0|\n| 0    | $\\color{red}1$ | 0    | $\\color{red}1$ | $\\color{red}1$ |\n\n\n\nProof:\n\n显然这样构造出的$d'$元素最低位独立，因此不线性相关，只需要证明满足限制即可\n\n首先$d_i$与$d'_j$在主对角线上无交，有交部分一定是一个主对角线元素与一个非主对角线元素交\n\n若$d_{i}$与$d'_j$在$d_{i,j},d'_{j,j}$有交，则在其关于主对角线对称的位置$d_{i,i},d'_{i,j}$处同样有交\n\n因此交都是成对出现的\n\n$$ \\ $$\n\n$$ \\ $$\n\n-----------\n\n\n\n由此我们可以在$2^{m-k}$时间内通过暴力枚举得到$G$中每个非零项\n\n下面考虑$\\text{FWT}(F^c)$的贡献的部分实际极其简单\n\n可以根据$G$中每一项$x^S$的$|S|$确定$\\text{FWT}(F^c)$\n\n$[x^S]\\text{FWT}(F^c)=\\sum_{|T|=c}(-1)^{|S\\cup T|}$\n\n对于$G$中不同的$|S|$分类，对于$|T|=c$，枚举$|S\\cup T|$，添加组合数系数即可计算贡献\n\n注意最后求出的答案$[x^{\\empty}]$为对应项相乘之后求和除去$\\text{IFWT}$的$2^k$\n\n复杂度为$O(2^{m-k}+m^3+nm)$\n\n\n\n```cpp\nconst int N=210,P=998244353;\n\nint n,m,c;\nll d[62],e[63],C[62][62],W[63][63];\nll qpow(ll x,ll k=P-2){\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nvector <int> Enum(ll *d){\n\tstatic ll a[N],S[1<<15],T[1<<15],bin[1<<15];\n\tint n=0,m;\n\trep(i,0,61) if(d[i]) a[n++]=d[i];\n\tm=n/2;\n\trep(i,0,m) bin[1<<i]=i;\n\trep(i,1,(1<<m)-1) S[i]=S[i&(i-1)]^a[bin[i&-i]];\n\trep(i,1,(1<<(n-m))-1) T[i]=T[i&(i-1)]^a[bin[i&-i]+m];\n\tvector <int> res(::m+1);\n\tint X=(1<<m)-1;\n\trep(i,0,(1<<n)-1) res[__builtin_popcountll(S[i&X]^T[i>>m])]++;\n\treturn res;\n}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,1,n) {\n\t\tll x=rd<ll>();\n\t\tdrep(i,m-1,0) if(x&(1ll<<i)) {\n\t\t\tif(!d[i]) {\n\t\t\t\td[i]=x,c++;\n\t\t\t\tbreak;\n\t\t\t} else x^=d[i];\n\t\t}\n\t}\n\tif(c<=27) {\n\t\tn=qpow(2,n-c);\n\t\tvector <int> res=Enum(d);\n\t\trep(i,0,m) res[i]=1ll*res[i]*n%P;\n\t\trep(i,0,m) printf(\"%d \",res[i]);\n\t\treturn 0;\n\t}\n\trep(i,0,m) rep(j,*C[i]=1,i) C[i][j]=(C[i-1][j]+C[i-1][j-1])%P;\n\trep(i,0,m) { // F_i变成j之后的变化\n\t\trep(j,0,m) rep(k,0,min(i,j)) {\n\t\t\tW[i][j]=(W[i][j]+1ll*(k&1?-1:1)*C[j][k]*C[m-j][i-k])%P;\n\t\t}\n\t}\n\trep(i,0,m-1) if(d[i]) rep(j,i+1,m) if(d[j]&(1ll<<i)) d[j]^=d[i];\n\trep(i,0,m-1) if(d[i]) {\n\t\trep(j,0,i-1) if(d[i]&(1ll<<j)) e[j]|=1ll<<i;\n\t} else e[i]|=1ll<<i;\n\tvector <int> t=Enum(e),ans(m+1);\n\tn=qpow(2,n-c+c-m+P-1);\n\trep(i,0,m) rep(j,0,m) ans[i]=(ans[i]+1ll*W[i][j]*t[j])%P;\n\trep(i,0,m) ans[i]=1ll*(ans[i]+P)*n%P;\n\trep(i,0,m) printf(\"%d \",ans[i]);\n}\n```\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1393E2 - Twilight and Ancient Scroll (Harder Version) ","url":"/articles/2021/05/07/8ef026cd.html","content":"# CF1393E2 - Twilight and Ancient Scroll (harder version) \n\n### 题目大意\n\n给定$n$个串$S_i$，求在每个串中至多删除一个字符（可以删到空）\n\n最终$S'_i$字典序单调不减的方案数\n\n<br>\n\n<br>\n\n### dp\n\n显然是记录上一个串删除的位置$j$，得到$dp_j$，依次考虑每个串\n\n设$S$为当前串，$T$为上一个串\n\n每次我们枚举当前串删除的位置$i$，不妨设得到的新串为$S'$，考虑对于$S'$找到所有合法转移\n\n设$L=LCP(S,T)$，在$T$中删除位置为$t$\n\n1.$t>L+1$\n\n则可以根据$T_{L+1}$和$S'_{L+1}$的关系确定$T'$与$S'$的关系，只需要处理一个后缀和$suf_i$\n\n<br>\n\n2.设$p$为$T_{L+1}$向前延伸且字符相同的最长位置，$t\\in[p,L+1]$\n\n此时，删除$T_t$可能会使得$L'>L$，所以提出来特殊处理\n\n显然$t\\in[p,L+1]\\Leftrightarrow t=L+1$，那么对于得到的新串可以再求$LCP(S',T')$来判断大小\n\n只需要一个区间和\n\n<br>\n\n3.$t<p$，此时$L'=LCP(S',T')<L$\n\n由于$L'<L$,比较$S',T'$相当于比较$T_{t:},T_{t+1:}$\n\n其中$T_{t:}$表示$T$在$t$开始的后缀，那么预处理找到所有合法的$t$，累前缀和即可得到$pre_{p-1}$\n\n<br>\n\n### 关于实现\n\n写$\\text{SA,SAM}$就完蛋了\n\n由于删除一个字符之后，求$LCP$的两个串就是在原串基础上进行$\\pm 1$的偏移\n\n线性预处理三个$LCP$数组即可，当然真正求的时候需要分类讨论一下~~(真的，就一下/md)~~\n\n<br>\n\n判断$T_{t:},T_{t+1:}$容易倒着线性预处理出来，在代码里是$chk_i$\n\n<br>\n\n所有操作均可以线性处理，时间复杂度为$O(L)$，77ms\n\nTips:\n\n比较过程中容易出现奇妙的越界，我写得很丑\n\n```cpp\nconst int N=1e6+10,P=1e9+7;\n\nint n,m;\nchar A[2][N],*S=A[0],*T=A[1];\nint X[N],Y[N],Z[N];\nint dp[N],F[N],suf[N],pre[N],chk[N],L[N];\n\nint main(){\n\trep(_,1,rd()) {\n\t\tswap(S,T),swap(n,m);\n\t\tscanf(\"%s\",S+1),n=strlen(S+1);\n\t\trep(i,n+1,m+2) S[i]=1;\n\t\trep(i,m+1,n+2) T[i]=-1;\n\t\tif(!m) {\n\t\t\trep(i,1,n+1) dp[i]=1;\n\t\t\tcontinue;\n\t\t}\n\t\trep(i,max(n,m)+1,i+2) X[i]=Y[i]=Z[i]=0;\n\t\tdrep(i,max(n,m),1) {\n\t\t\tX[i]=S[i]==T[i]?X[i+1]+1:0;\n\t\t\tY[i]=S[i]==T[i+1]?Y[i+1]+1:0;\n\t\t\tZ[i]=S[i+1]==T[i]?Z[i+1]+1:0;\n\t\t}\n\n\t\t// initiate\n\t\tsuf[m+2]=0;\n\t\tdrep(i,m+1,1) suf[i]=suf[i+1]+dp[i],Mod1(suf[i]);\n\t\tdrep(i,m,1) chk[i]=T[i]!=T[i+1]?T[i]>T[i+1]:chk[i+1];\n\t\trep(i,1,m+1) L[i]=T[i]==T[i-1]?L[i-1]:i;\n\t\trep(i,1,m) pre[i]=pre[i-1]+chk[i]*dp[i],Mod1(pre[i]);\n\n\n\t\trep(i,1,n+1) {\n\t\t\tint l=min(X[1],i-1);\n\t\t\tif(l==i-1) l+=Z[i];\n\t\t\tF[i]=0;\n\n\t\t\tauto I=[&](int x){ return (x>=i)+x; };\n\n\t\t\t// type1 , deleted pos > l+1\n\t\t\tif(T[l+1]<=S[I(l+1)]) F[i]+=suf[l+2],Mod1(F[i]);\n\t\t\tint p=L[l+1];\n\t\t\t\n\t\t\t// type2 ,delete T between [p..l+1]  ,the same as we delete T[l+1]\n\t\t\tint r=0; // r= LCP(S'[l+2],T[l+2]) ,check if delete T[l+1], T'<=S'\n\t\t\tif(l+1<i) r+=min(i-l-1,Y[l+1]);\n\t\t\tif(r==max(0,i-l-1)) r+=X[l+2+r];\n\t\t\tif(T[l+2+r]<=S[I(l+1+r)]) F[i]=(F[i]+0ll+suf[p]-suf[l+2]+P)%P;\n\t\t\t\n\t\t\t// type3 , delete T at [1,p-1], so LCP'<l , and we determine T'<=S' by chk[i]\n\t\t\tF[i]=(F[i]+pre[p-1])%P;\n\t\t}\n\t\trep(i,1,n+1) dp[i]=F[i];\n\t}\n\tint ans=0;\n\trep(i,1,n+1) ans+=dp[i],Mod1(ans);\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1217F - Forced Online Queries Problem","url":"/articles/2021/05/07/385be545.html","content":"# CF1217F - Forced Online Queries Problem\n\n### 题目大意\n\n$n$个点无向图，$m$次操作，每次加入/删除一条边，或者查询两个点连通性\n\n$lst$为上次查询的连通性情况，即$lst=\\{0,1\\}$\n\n加密方式为$x=(x'+lst-1)\\mod n+1$\n\n<br>\n\n### 吐槽\n\n~~如果你管这叫Forced Online？~~\n\n<br>\n\n### 分析\n\n### 无强制在线\n\n如果没有这个假的强制在线，考虑用线段树分治解决\n\n预处理每条边出现的时间区间$[L,R]$，加入线段树，用按秩合并并查集维护加边和回撤即可\n\n<br>\n\n### 伪强制在线\n\n依然是预处理每条边的时间区间\n\n虽然我们无法确定一条边**存在**的时间区间\n\n但是我们可以确定一条边**可能存在，或者说可能被修改**的时间区间\n\n一次修改对应两条可能的边，对于两种可能都加入两条边对应的时间节点\n\n每次加边修改指定边，对于涉及的两条边，修改之后判断是否存在\n\n然后对于存在的边，将这条边从现在开始到 **下一个时间节点** 出现之间都插入即可\n\n注意这个线段树分治是\"半在线\"的，即要一边处理操作一边插入修改\n\n由于修改的区间和目前遍历的区间不交，所以容易实现\n\n```cpp\nconst int N=2e5+10;\n\nint n,m,c;\nmap <int,int> M[N],I[N];\nvector <int> T[N*2];\nint P[N*2];\n\n\nint stk[N],top,S[N],F[N];\nint Find(int x){\n\twhile(F[x]!=x) x=x[F][F];\n\treturn x;\n}\nvoid Union(int x,int y){\n\tx=Find(x),y=Find(y);\n\tif(x==y) return;\n\tif(S[x]>S[y]) swap(x,y);\n\tF[x]=y,S[y]+=S[x],stk[++top]=x;\n}\nvoid Back(){\n\tint x=stk[top--];\n\tS[F[x]]-=S[x],F[x]=x;\n}\n\nvector <Pii> G[N<<2];\nvoid Add(int p,int l,int r,int ql,int qr,Pii x){\n\tif(ql>qr) return;\n\tif(ql<=l && r<=qr) return G[p].pb(x);\n\tint mid=(l+r)>>1;\n\tif(ql<=mid) Add(p<<1,l,mid,ql,qr,x);\n\tif(qr>mid) Add(p<<1|1,mid+1,r,ql,qr,x);\n}\nint opt[N],A[N],B[N],lst;\nvoid Solve(int p,int l,int r){\n\tint tmp=top;\n\tfor(Pii t:G[p]) Union(t.first,t.second);\n\tif(l==r) {\n\t\tint x=(A[l]+lst-1)%n+1;\n\t\tint y=(B[l]+lst-1)%n+1;\n\t\tif(x>y) swap(x,y);\n\t\tif(opt[l]==1) {\n\t\t\tM[x][y]^=1;\n\t\t\trep(i,0,1) {\n\t\t\t\tint x=(A[l]+i-1)%n+1;\n\t\t\t\tint y=(B[l]+i-1)%n+1;\n\t\t\t\tif(x>y) swap(x,y);\n\t\t\t\tint id=I[x][y];\n\t\t\t\tP[id]++;\n\t\t\t\tif(M[x][y]) Add(1,1,m,l+1,T[id][P[id]]-1,mp(x,y));\n\t\t\t}\n\t\t} else {\n\t\t\tlst=Find(x)==Find(y);\n\t\t\tputchar(lst+48);\n\t\t}\n\t} else {\n\t\tint mid=(l+r)>>1;\n\t\tSolve(p<<1,l,mid),Solve(p<<1|1,mid+1,r);\n\t}\n\twhile(top>tmp) Back();\n}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,1,n) F[i]=i,S[i]=1;\n\trep(i,1,m) {\n\t\topt[i]=rd(),A[i]=rd(),B[i]=rd();\n\t\tif(opt[i]==1) rep(lst,0,1) {\n\t\t\tint x=(A[i]+lst-1)%n+1;\n\t\t\tint y=(B[i]+lst-1)%n+1;\n\t\t\tif(x>y) swap(x,y);\n\t\t\tif(!I[x][y]) I[x][y]=++c;\n\t\t\tT[I[x][y]].pb(i);\n\t\t}\n\t}\n\trep(i,1,c) T[i].pb(m+1);\n\tSolve(1,1,m);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces","各大OJ"],"categories":["题解"]},{"title":"CF1510H - Hard Optimization","url":"/articles/2021/05/06/4ded51dd.html","content":"# CF1510H - Hard Optimization\n\n### 题目大意\n\n给定$n$个区间$L_i,R_i$，满足其两两之间要么包含要么不交，且所有$L_i,R_i$互不相同\n\n求为每个区间选定$L_i\\leq l_i<r_i\\leq R_i$，$[l_i,r_i]$仅在端点相交\n\n使得$\\sum r_i-l_i$，并且输出方案\n\n### 分析\n\n乍一看，$L_i,R_i$的关系构成森林\n\n哇树形$dp$\n\n哇输出方案！\n\n树形$dp$还可以输出方案！！！！！！！！！\n\n![QQ图片20210506190213.gif](https://i.loli.net/2021/05/06/6cr74FpKEmDf9Ou.gif)\n\n考虑从子树合并$dp$信息，令$dp_{u,i,S}$表示\n\n已经确定$u$的子树内的答案，且向祖先接了$i$个区间\n\n$S$表示 左边以及右边 是否有 **待定未匹配** 的区间端点\n\n按照$L_i$依次合并每个儿子，两个儿子之间可以将未匹配的端点匹配，加入**待选集合**\n\n**待选集合**即指向祖先借的个数\n\n每个点在合并结束之后可以匹配同时新建未匹配的左右端点（实际上就是为了给自己定一个方案区间）\n\n### 关于输出方案\n\n![QQ图片20210506185834.jpg](https://i.loli.net/2021/05/06/ECc5nF9jdRSPZ8a.jpg)\n\n存储每个转移的前驱指针，包括合并以及每个点最后的决策\n\n暴力回溯每个状态，其中待选集合可以用一个栈处理\n\n分类讨论gogogo！！！！\n\n\n\n![Snipaste_2021-05-06_18-52-05.png](https://i.loli.net/2021/05/06/MS53dmZobgwVe8k.png)\n\n![Snipaste_2021-05-06_18-51-49.png](https://i.loli.net/2021/05/06/C6ymHzWE3NqfhlF.png)\n\n没错三个都是我\n\n![QQ图片20210506185755.gif](https://i.loli.net/2021/05/06/c6m8jJAIwyiDWMY.gif)\n\n~~可能少讨论了一些，但是没有关系！！！！！！！！~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef pair <int,int> Pii;\n#define mp make_pair\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\nint cmax(int &a,int b){ return a<b?a=b,1:0; }\n\nconst int N=2010,P=998244353;\n\nint n;\nint L[N],R[N];\nint dp[N][N][4],sz[N],len[N],fa[N];\nvector <int> E[N];\n\nint X[N],Y[N];\nint F[N][4],G[N][4];\nint p1[N][N][4],p2[N][N][4];\n// p1 存储合并子树的前驱\n// p2 存储每个点最后决策时的变化\nvoid dfs(int u) {\n\tsort(E[u].begin(),E[u].end(),[&](int x,int y){ return L[x]<L[y]; });\n    // 叶子暴力赋初值\n\tif(!E[u].size()) {\n\t\tsz[u]=0;\n\t\tdp[u][0][0]=R[u]-L[u];\n\t\tdp[u][0][1]=R[u];\n\t\tdp[u][0][2]=-L[u];\n\t\tdp[u][0][3]=0;\n\t\treturn;\n\t}\n\tsz[u]=0;\n\tfor(int v:E[u]) dfs(v);\n\tmemset(F,-63,sizeof F);\n\tfor(int v:E[u]) {\n\t\tif(v==E[u][0]) {\n\t\t\trep(i,0,sz[v]) rep(j,0,3) F[i][j]=dp[v][i][j],p1[v][i][j]=i*16+j;\n\t\t\tsz[u]+=sz[v];\n\t\t\tcontinue;\n\t\t}\n\t\trep(i,0,sz[u]) rep(j,0,3) G[i][j]=F[i][j],F[i][j]=-1e9;\n\t\trep(i,sz[u]+1,sz[u]+sz[v]) rep(j,0,3) F[i][j]=-1e9;\n\t\trep(i,0,sz[u]) rep(a,0,3) rep(j,0,sz[v]) rep(b,0,3) if((a>>1)==(b&1)) {\n\t\t\tif(cmax(F[i+j+(b&1)][(a&1)|(b&2)],G[i][a]+dp[v][j][b])) {\n\t\t\t\tp1[v][i+j+(b&1)][(a&1)|(b&2)]=j*16+a*4+b;\n\t\t\t}\n\t\t}\n\t\tsz[u]+=sz[v]+1;\n\t}\n\trep(i,0,sz[u]) rep(j,0,3) {\n\t\tif(i && cmax(dp[u][i-1][j],F[i][j])) p2[u][i-1][j]=1;\n\t\tif(j&1 && cmax(dp[u][i][j-1],F[i][j]-L[u])) p2[u][i][j-1]=2;\n\t\tif(j&2 && cmax(dp[u][i][j-2],F[i][j]+R[u])) p2[u][i][j-2]=3;\n\t\tif(j&1 && cmax(dp[u][i][j],F[i][j])) p2[u][i][j]=4;\n\t\tif(j&2 && cmax(dp[u][i][j],F[i][j])) p2[u][i][j]=5;\n\t}\n}\n\nstack <Pii> stk;\nPii dfs2(int u,int a,int b) {\n\tif(!E[u].size()) {\n\t\tX[u]=L[u],Y[u]=R[u];\n\t\treturn mp(L[u],R[u]);\n\t}\n\tint typ=p2[u][a][b];\n\tswitch(typ) {\n\t\tcase 0: { break; }\n\t\tcase 1: { a+=1; break; }\n\t\tcase 2: { b+=1; break; }\n\t\tcase 3: { b+=2; break; }\n\t\tcase 4: { break; }\n\t\tcase 5: { break; }\n\t}\n\treverse(E[u].begin(),E[u].end());\n\tint r=0,lst=-1;\n\tfor(int v:E[u]) {\n\t\tint t=p1[v][a][b];\n\t\tPii p=dfs2(v,t>>4,t&3);\n\t\tif(t&2) {\n\t\t\tif(lst==-1) r=p.second;\n\t\t\telse stk.push(mp(p.second,lst)),lst=-1;\n\t\t}\n\t\tif(t&1) lst=p.first;\n\t\ta-=(t>>4)+(t&1),b=(t>>2)&3;\n\t}\n\tswitch(typ) {\n\t\tcase 0:{ break; }\n\t\tcase 1:{ X[u]=stk.top().first,Y[u]=stk.top().second,stk.pop(); break; }\n\t\tcase 2:{ X[u]=L[u],Y[u]=lst; break; }\n\t\tcase 3:{ X[u]=r,Y[u]=R[u]; break; }\n\t\tcase 4:{ X[u]=L[u],Y[u]=lst,lst=L[u]; break; }\n\t\tcase 5:{ X[u]=r,Y[u]=R[u],r=R[u]; break; }\n\t}\n\treturn mp(lst,r);\n}\n\nint main(){\n\tmemset(dp,-63,sizeof dp),scanf(\"%d\",&n);\n\trep(i,1,n) scanf(\"%d%d\",L+i,R+i),len[i]=R[i]-L[i];\n\trep(i,1,n) {\n\t\trep(j,1,n) if(L[j]<L[i] && R[i]<R[j] && (!fa[i] || len[j]<len[fa[i]])) fa[i]=j;\n\t\tif(fa[i]) E[fa[i]].pb(i);\n\t}\n\tint ans=0;\n\trep(i,1,n) if(!fa[i]) {\n\t\tdfs(i);\n\t\tans+=dp[i][0][0],dfs2(i,0,0);\n\t}\n\tprintf(\"%d\\n\",ans);\n\trep(i,1,n) printf(\"%d %d\\n\",X[i],Y[i]);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","Codeforces"],"categories":["题解"]},{"title":"CF1514E - Baby Ehab's Hyper Apartment","url":"/articles/2021/05/06/5bbe56ea.html","content":"# CF1514E - Baby Ehab's Hyper Apartment\n\n### 题目大意\n\n交互题，给定$n$元竞赛图，方向未知，通过两种操作\n\n1.查询$(a,b)$方向 ，上限$9n$次\n\n2.查询$a$到达一个集合$S$是否存在正向边，上限$2n$次\n\n判定所有点之间能否互相到达\n\n<br>\n\n<br>\n\n### 分析\n\n能否互相到达是一个强连通问题，因此需要求出分量以及分量之间的拓扑关系\n\n由于是竞赛图，最终的每个分量一定可以排成一排，只能由前面向后面连边\n\n由于$9\\approx \\log n$，我们需要一个带$\\log $的算法\n\n考虑将分量内部相对顺序随意，其他关系按照拓扑序确定\n\n通过一个 **伪排序** 得到一个初始序列\n\n然后只需要合并得到强连通分量的区间\n\n具体的，按照序列顺序，顺次向图上加入每个点$i$\n\n对于每个点$i$和当前的其所在分量$A$，左边的分量$B$，以及左边所有点的集合$S$\n\n判断$A,B$是否合并，即判断$i$是否有到达$S$的边\n\n最多有$n-1$次合并，以及$n-1$次合并失败\n\ntips: 由于标准库实现的原因，伪排序不能用std::sort，但是可以用std::stable_sort\n\n```cpp\n\nconst int N=2e5+10;\n\nint n;\n\nint Que(int a,int b){\n\tprintf(\"1 %d %d\\n\",a,b),fflush(stdout);\n\treturn rd();\n}\nint P[N];\nint L[N],F[N];\n\nint main(){\n\trep(_,1,rd()) {\n\t\tn=rd();\n\t\trep(i,0,n-1) F[i]=P[i]=i;\n\t\tstable_sort(P,P+n,Que);\n\t\trep(i,0,n-1) {\n\t\t\tL[i]=i;\n\t\t\twhile(L[i]) {\n\t\t\t\tprintf(\"2 %d %d \",P[i],L[i]);\n\t\t\t\trep(j,0,L[i]-1) printf(\"%d \",P[j]);\n\t\t\t\tputs(\"\"),fflush(stdout);\n\t\t\t\tif(rd()) L[i]=L[L[i]-1];\n\t\t\t\telse break;\n\t\t\t}\n\t\t\trep(j,L[i],i) F[P[j]]=i;\n\t\t}\n\t\tputs(\"3\");\n\t\trep(i,0,n-1) {\n\t\t\trep(j,0,n-1) putchar((F[i]<=F[j])+'0');\n\t\t\tputs(\"\");\n\t\t}\n\t\tfflush(stdout);\n\t\tif(rd()==-1) break;\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1515G - Phoenix and Odometers","url":"/articles/2021/05/06/f9236b96.html","content":"# CF1515G - Phoenix and Odometers\n\n### 题目大意\n\n给定一张带权有向图，每次查询$v,s,t$表示从$v$出发并且回到$v$，可以经过重边\n\n判断是否存在经过路径总长$l$满足$l+s\\equiv 0 \\pmod t$\n\n$$ \\ $$\n\n### 分析\n\n显然$v$只能在其自己的强连通分量里走，并且分量内部的任意一个环都是可达的\n\n由于是模意义下，所以环的贡献可以抵消，环之间可以无限叠加\n\n根据裴蜀定理，能够生成的数就是是$\\gcd(len_i)$的倍数\n\n只需预处理强连通分量内部的环，判断$\\gcd(len_i,t)|\\gcd(s,t)$即可\n\n```cpp\n\nconst int N=2e5+10;\n\nint n,m;\nstruct Edge{\n\tint to,nxt,w;\n}e[N];\nint head[N],ecnt;\nvoid AddEdge(int u,int v,int w){\n\te[++ecnt]=(Edge){v,head[u],w};\n\thead[u]=ecnt;\n}\n\nll G[N],S[N];\nll gcd(ll a,ll b){ return b==0?a:gcd(b,a%b); }\nint t[N],low[N],dfn,stk[N],ins[N],top,id[N],scc;\nll dis[N];\n\nvoid dfs(int u){\n\tins[stk[++top]=u]=1,low[u]=t[u]=++dfn;\n\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif(!t[v]) {\n\t\t\tdis[v]=dis[u]+e[i].w;\n\t\t\tdfs(v),cmin(low[u],low[v]);\n\t\t} else if(ins[v]) {\t\n            // 不管是横边还是返祖边，长度都是dis[u]-dis[v]!!!\n\t\t\tcmin(low[u],t[v]);\n\t\t\tG[u]=gcd(G[u],dis[u]-dis[v]+e[i].w);\n\t\t}\n\t}\n\tif(low[u]==t[u]) {\n\t\t++scc;\n\t\tfor(int v=-1;v!=u;) {\n\t\t\tins[v=stk[top--]]=0;\n\t\t\tid[v]=scc,S[scc]=gcd(S[scc],G[v]);\n\t\t}\n\t}\n}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,1,m) {\n\t\tint u=rd(),v=rd(),w=rd();\n\t\tAddEdge(u,v,w);\n\t}\n\trep(i,1,n) if(!t[i]) dfs(i);\n\trep(_,1,rd()) {\n\t\tint u=rd(),s=rd(),t=rd();\n\t\ts=gcd(s,t),t=gcd(t,S[id[u]]);\n\t\tputs(s%t==0?\"YES\":\"NO\");\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1516E - Baby Ehab Plays With Permutations","url":"/articles/2021/05/06/9a349a81.html","content":"# CF1516E - Baby Ehab Plays with Permutations\n\n### 题目大意\n\n给定一个排列$1-n$，对于每个$i\\in[1,k]$，求出恰好操作$i$能够生成的不同排列个数\n\n### 分析\n\n设排列为$P_i$，考虑对于最终态每个$(i,P_i)$构成的环组进行$dp$\n\n一个长度为$n$的环有$(n-1)!$种可能的排列，且需要至少$n-1$次操作得到\n\n考虑先$dp$求出**至少**$i$次操作，生成了总长为$j$的环的种类数，合并两个环类似$\\text{exp}$计算\n\n偶数操作显然是可以抵消的，并且奇数次操作无法抵消，故还需根据奇偶性累前缀和\n\n```cpp\n\nconst int N=410,P=1e9+7;\n\nint n,m;\nll qpow(ll x,ll k=P-2){\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint C[N][N],F[N],D[N],I[N],J[N];\nint dp[N][N];\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,0,N-1) rep(j,*C[i]=1,i) C[i][j]=(C[i-1][j]+C[i-1][j-1])%P;\n\tI[0]=I[1]=J[0]=J[1]=1;\n\trep(i,2,N-1) {\n\t\tJ[i]=1ll*J[i-1]*i%P;\n\t\tI[i]=1ll*(P-P/i)*I[P%i]%P;\n\t}\n    // D[i]=C(n,i)\n\tD[0]=1;\n\trep(i,1,min(m*2,n)) D[i]=1ll*D[i-1]*(n-i+1)%P*I[i]%P;\n\trep(i,1,N-1) I[i]=1ll*I[i-1]*I[i]%P;\n\tdp[0][0]=1;\n\trep(i,0,m) rep(j,0,i*2) if(dp[i][j]) rep(k,1,m-i) {\n\t\t// 生成了k+1个数\n\t\t// C[j+k+1][j] 组合，强制一个元素在第一位\n\t\t// J[k] 环排列\n\t\tdp[i+k][j+k+1]=(dp[i+k][j+k+1]+1ll*dp[i][j]*C[j+k][j]%P*J[k])%P;\n\t}\n\trep(i,0,m) rep(j,0,i*2) if(dp[i][j]) F[i]=(F[i]+1ll*D[j]*dp[i][j])%P;\n\trep(i,2,m) F[i]+=F[i-2],Mod1(F[i]);\n\trep(i,1,m) printf(\"%d \",F[i]);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","Codeforces"],"categories":["题解"]},{"title":"CF1519F - Chests and Keys","url":"/articles/2021/05/05/b1c1356c.html","content":"# CF1519F - Chests and Keys\n\n### 题目大意\n\n给定$n$个宝箱，$m$种锁和对应的钥匙\n\n每个箱子有$a_i$块钱，每种钥匙$b_i$块，给箱子$i$装上$j$这种锁需要$c_{i,j}$的代价\n\n一个箱子可以装多把锁\n\n求最小的代价，使得无论怎么买钥匙取开箱子都无法赚钱\n\n<br>\n\n<br>\n\n$n,m\\leq 6,a_i,b_i\\leq 4$\n\n？？？？？？\n\n《关于Codeforce 3200 是朴素搜索一事》\n\n复杂度上限？大概$2^{41}++$\n\n[-> 873ms](https://codeforces.com/contest/1519/submission/115190500)\n\n再把-1判掉\n\n->31ms\n\n[CodeForces Submission](https://codeforces.com/contest/1519/submission/115207808)\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nconst int N=10,P=998244353;\n\nint n,m;\nint a[N],b[N],c[N][N];\nint A[1<<6],B[1<<6],s[N][1<<6],bin[1<<6];\nint C[1<<6];\n\nint st[N];\nint ans=1e9;\nvoid dfs(int p,int s){\n\tif(s>=ans) return;\n\tif(p==n) { ans=s; return; }\n\trep(S,0,(1<<m)-1) {\n\t\tint fl=1;\n\t\tif(s+::s[p][S]>=ans) continue;\n\t\tst[p]=S;\n\t\tdrep(T,(1<<(p+1))-1,1<<p) {\n\t\t\tC[T]=C[T^(1<<p)]|st[p];\n\t\t\tif(A[T]>B[C[T]]) {\n\t\t\t\tfl=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(fl) dfs(p+1,s+::s[p][S]);\n\t}\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\trep(i,0,max(n,m)-1) bin[1<<i]=i;\n\trep(i,0,n-1) scanf(\"%d\",a+i);\n\trep(i,0,m-1) scanf(\"%d\",b+i);\n\trep(i,0,n-1) rep(j,0,m-1) scanf(\"%d\",c[i]+j);\n\trep(i,0,n-1) rep(j,i+1,n-1) if(a[j]>a[i]) swap(a[i],a[j]),swap(c[i],c[j]);\n\trep(S,1,(1<<n)-1) A[S]=A[S&(S-1)]+a[bin[S&-S]];\n\trep(S,1,(1<<m)-1) B[S]=B[S&(S-1)]+b[bin[S&-S]];\n\trep(i,0,n-1) rep(S,1,(1<<m)-1) s[i][S]=s[i][S&(S-1)]+c[i][bin[S&-S]];\n\tint s=0;\n\trep(i,0,n-1) s+=a[i];\n\trep(i,0,m-1) s-=b[i];\n\tif(s>0) return puts(\"-1\"),0;\n\tdfs(0,0);\n\tprintf(\"%d\\n\",ans==1e9?-1:ans);\n}\n```","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1519E - Off by One","url":"/articles/2021/05/05/b225cfbd.html","content":"# CF1519E - Off by One\n\n### 题目大意\n\n给定$n$个点$(x_i,y_i)=(\\frac{a_i} {b_i},\\frac{c_i} {d_i})$，求一个最大的匹配\n\n满足匹配的点对$(x_i,y_i),(x_j,y_j)$每个点经过如下操作\n\n$(x,y)\\rightarrow (x+1,y) or (x,y+1)$\n\n之后可能满足$\\frac{y_i'} {x_i'}=\\frac{y'_j} {x_j'}$\n\n### 模型简化\n\n按照$\\frac{y'} {x'}$对于每个点经过两种可能变换的值分类，建立节点\n\n我们需要决策每个$P_i$选的变换种类\n\n显然每个斜率对应的个数为偶数时，都可以完成匹配\n\n对于每一个$P_i$，设其两种变换之后变成的斜率对应节点为$(u,v)$，那么连一条无向边\n\n现在问题转化为对于无向边定向，使得最少的点入度为奇数\n\n对于任意一个连通块，若其包含奇数条边，那么至少有一个点入度为奇数\n\n否则一定可以完成匹配\n\n具体的，随便选择一个点作为根，然后只对于祖先向子孙的边考虑关系\n\n从子孙向上考虑所有的边，优先让子孙的入度为偶数\n\n那么只有包含奇数条边时，根的入度为奇数，其他节点入度永远是偶数\n\n即达到最优解\n\n```cpp\n\nconst int N=4e5+10,P=998244353;\n\nint n,m;\nstruct Edge{\n\tint to,nxt;\n} e[N*2];\nint head[N];\n\nstruct Node{\n\tll a,b;\n\tbool operator < (const Node __) const { return a<__.a || (a==__.a && b<__.b); } \n};\nvector <int> G[N];\n\nmap <Node,int> M;\nll gcd(ll a,ll b){ return b==0?a:gcd(b,a%b); }\nint Div(int a,int b,int c,int d){\n\tll x=1ll*a*d,y=1ll*b*c,g=gcd(x,y);\n\tx/=g,y/=g;\n\tNode t=(Node){x,y};\n\tint &u=M[t];\n\tif(!u) u=++m;\n\treturn u;\n}\n\nint vis[N],s[N],dfn;\nvoid dfs(int u){\n\tvis[u]=++dfn,s[u]=0;\n\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif(vis[v] && vis[v]<vis[u]) continue;\n\t\tif(!vis[v]) dfs(v);\n\t\tif(!s[v]) s[u]^=1,G[u].pb(i/2);\n\t\telse s[v]^=1,G[v].pb(i/2);\n\t}\n}\n\nint main(){\n\tn=rd();\n\trep(i,1,n) {\n\t\tint a=rd(),b=rd(),c=rd(),d=rd();\n\t\tint u=Div(a+b,b,c,d),v=Div(a,b,c+d,d);\n\t\te[i*2]=(Edge){u,head[v]},head[v]=i*2;\n\t\te[i*2+1]=(Edge){v,head[u]},head[u]=i*2+1;\n\t}\n\trep(i,1,m) if(!vis[i]) dfs(i);\n\tint ans=0;\n\trep(i,1,m) ans+=G[i].size()/2;\n\tprintf(\"%d\\n\",ans);\n\trep(i,1,m) {\n\t\trep(j,0,G[i].size()/2-1) \n\t\t\tprintf(\"%d %d\\n\",G[i][j*2],G[i][j*2+1]);\n\t}\n}\n```\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1517F - Reunion","url":"/articles/2021/05/05/a8127eac.html","content":"# CF1517F - Reunion\n\n### 题目大意\n\n对于一棵树，树上每个节点颜色在在黑白之间均等随机\n\n定义r: 从某一个点$u$开始，$r$为使得距离$u$在$r$以内的点均为均为黑点的最大距离\n\n求$r$的期望，全黑和全白的情况$r$特殊处理\n\n### 模型转化\n\n当然是期望转概率，枚举$d$，计算$\\max\\{r\\}\\ge d$的概率\n\n然而$\\exists r\\ge d$并不好算，于是算$\\nexists r\\ge d$的概率\n\n看成是用白点去覆盖整棵树，每个白点可以覆盖距离$d$以内的所有点\n\n### dp\n\n令$dp_{u,i}$表示当前$u$的子树内，\n\n$i\\ge 0$，能够向上额外延伸$i$的距离\n\n$i<0$，还需要一个距离为$-1-i$的白点伸进去覆盖它\n\n##### 合并可能存在的问题？\n\n如果$u$子树内即有点伸出去又有点没有被覆盖？\n\n那么记录没有被覆盖的点\n\n因为在最优情况里，这个点一定要被另一个节点覆盖\n\n而那个去覆盖它的点，显然比当前节点延伸出去部分覆盖的范围更大\n\n因此$u$延伸出去的部分没有用\n\n$$\\  $$\n\n第二维出现的个数为$O(dep)$，借用树形背包的复杂度分析，因此单次复杂度上限为$O(n^2)$，实际完全不满\n\n总复杂度为$O(n^3)$\n\n``` cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=310,P=998244353;\nll qpow(ll x,ll k=P-2){\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nint n,d,m;\nvector <int> G[N];\nint dp[N][N*2],g[N*2],D[N];\nvector <int> tmp;\nvoid dfs(int u,int f) {\n\t// n+1 为基准偏移\n\trep(i,0,m) dp[u][i]=0;\n\tdp[u][n+d+2]=1,dp[u][n]=1;\n\tfor(int v:G[u]) if(v!=f) {\n\t\tdfs(v,u);\n\t\tcmax(D[u],D[v]+1);\n\t\trep(i,0,m) g[i]=dp[u][i],dp[u][i]=0;\n\t\ttmp.clear();\n\t\trep(i,0,m) if(dp[v][i]) tmp.pb(i);\n\t\trep(i,0,m) if(g[i]) {\n\t\t\tfor(int j:tmp) {\n\t\t\t\tif(max(j-n-2,i-n-2)>=max(n-i,n-j)) dp[u][max(i,j)]=(dp[u][max(i,j)]+1ll*g[i]*dp[v][j])%P;\n\t\t\t\telse dp[u][min(i,j)]=(dp[u][min(i,j)]+1ll*g[i]*dp[v][j])%P;\n\t\t\t}\n\t\t}\n\t}\n\trep(i,0,m) g[i]=dp[u][i],dp[u][i]=0;\n\trep(i,1,n) dp[u][i-1]=g[i];\n\trep(i,n+2,m) dp[u][i-1]=g[i];\n\tdp[u][n+1]+=g[n+1],Mod1(dp[u][n+1]);\n}\n\nint main(){\n\tn=rd(),m=n*2+2;\n\trep(i,2,n) {\n\t\tint u=rd(),v=rd();\n\t\tG[u].pb(v),G[v].pb(u);\n\t}\n\tint all=qpow(2,n),ans=0;\n    // d枚举到n-1，正好抵消了n 和 -1的贡献\n\tfor(d=1;d<n;++d) {\n\t\tdfs(1,0);\n\t\tint s=all;\n\t\trep(i,n+1,m) s-=dp[1][i],Mod2(s);\n\t\tans=(ans+s)%P;\n\t}\n\tans=ans*qpow(all)%P;\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"CF1517E - Group Photo","url":"/articles/2021/05/05/f2e0ee88.html","content":"# CF1517E - Group Photo\n\n### 题目大意\n\n对于一个长度为$n$的序列，每个元素有一个权值$a_i$，现在为这个序列染色，每个不是C就是P，且满足\n\n$c_i-c_{i-1}\\leq c_{i+1}-c_i$\n\n$p_i-p_{i-1}\\ge p_{i+1}-p_i$\n\n$$  \\ $$\n\n### 模型分析\n\n由一个Simple的性质\n\n对于$c$构成的连续段，只有第一段长度可能>1\n\n对于$p$构成的连续段，只有最后一段长度可能>1\n\n综合以上容易发现\n\n中间交错段都是一个c一个p，两端可以有一段极长的\n\n比较general的情况可以表示如下\n\n| #    | 1    | 2    | 3    | 4    | 5    | 6    | 7    | 8    | 9    | 10   | 11   |\n| ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| C    |      | -    | -    | -    |      | -    |      | -    |      |      | (-)  |\n| P    | (-)  |      |      |      | -    |      | -    |      | -    | -    |      |\n\n~~比较丑哈~~\n\nside 就是P在C前面且只有一个长段\n\n那么枚举$P$的长段开头，二分/尺取前面交错部分长度即可\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=2e5+10,P=998244353;\n\nint n,a[N];\nll s[N],t[N];\n\nint Calc(int i,ll d){\n\tint ans=0;\n\tint res=-1;\n\tfor(int l=0,r=(i-1)/2,mid;l<=r;) \n\t\tif(mid=(l+r)>>1,d-t[i]+t[i-mid*2]-s[i-mid*2]>0) r=mid-1,res=mid;\n\t\telse l=mid+1;\n\tif(~res) ans+=(i-1)/2-res+1;\n\tif(i==1) return ans;\n\tres=-1;\n\tfor(int l=0,r=(i-2)/2,mid;l<=r;) \n\t\tif(mid=(l+r)>>1,d-t[i]+t[i-mid*2]-s[i-mid*2]+2*a[1]>0) r=mid-1,res=mid;\n\t\telse l=mid+1;\n\tif(~res) ans+=(i-2)/2-res+1;\n\treturn ans;\n}\n\nint main(){\n\trep(_,1,rd()) {\n\t\tn=rd();\n\t\trep(i,1,n) a[i]=rd();\n\t\trep(i,1,n) s[i]=s[i-1]+a[i];\n\t\trep(i,1,n) t[i]=a[i]-t[i-1];\n\t\tll ans=0;\n\t\trep(i,1,n-1) {\n\t\t\tans+=Calc(i,s[n]-s[i]);\n\t\t\tif(i<n-1) ans+=Calc(i,s[n-1]-s[i]-a[n]);\n\t\t}\n\t\trep(i,1,n) if(s[i]-(s[n]-s[i])>0) ans++;\n\t\tprintf(\"%lld\\n\",ans%P);\n\t}\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codeforces"],"categories":["题解"]},{"title":"ARC114 - Paper Cutting 2","url":"/articles/2021/05/05/c037d27a.html","content":"# ARC114 - Paper Cutting 2\n\n### 题目大意：\n\n在一张方格图上确定了一个矩形，每次操作选择一条两行或者两列之间的线将图切开\n\n如果切开了矩形就停止，否则将包含矩形的一部分保留\n\n问期望多少步停止\n\n<br>\n\n<br>\n\n（如果你熟练掌握概率的独立性，这道题非常简单）\n\n称矩形内部的横竖线为**关键线**\n\n考虑对于每一个横线|竖线计算其被切的概率，以矩形右边的一条竖线为例\n\n那么在这条竖线右边的线，以及在矩形左边的线，矩形上下的横线 都与其独立\n\n也就是说，概率就是：\n\n这条竖线左边且在矩形右边的线和所有**关键线**之中，这条线是**第一个被切掉**的概率\n\n那么数一下上面提到所有线的个数$c$，概率就是$\\frac{1} {c}$\n\n```cpp\n\nconst int N=2e5+10,P=998244353;\n\nint n,m;\nint I[N];\nint a,b,c,d;\n\nint main(){\n\tI[0]=I[1]=1;\n\trep(i,2,N-1) I[i]=1ll*(P-P/i)*I[P%i]%P;\n\tn=rd(),m=rd();\n\ta=rd(),b=rd(),c=rd(),d=rd();\n\tif(a>c) swap(a,c);\n\tif(b>d) swap(b,d);\n\tint e=c-a+d-b,ans=1;\n\trep(i,1,a-1) ans=(ans+I[a-i+e])%P;\n\trep(i,c+1,n) ans=(ans+I[i-c+e])%P;\n\trep(i,1,b-1) ans=(ans+I[b-i+e])%P;\n\trep(i,d+1,m) ans=(ans+I[i-d+e])%P;\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder"],"categories":["题解"]},{"title":"ARC114 - Moving Pieces on Line","url":"/articles/2021/05/05/4a154c9c.html","content":"# ARC114 - Moving Pieces on Line\n\n### 题目大意：\n\n白色的数轴上有$n$个球$a_i$，给定若干递增且不交的区间$[t_i,t_{i+1})$\n\n每次选择一个球向左或者向右滚，且将滚过的一段反色\n\n求最小步数恰好仅将给定区间染黑色，或者确定不存在方案\n\n\n\n### 模型转化\n\n首先显然可以发现，每个小球只会滚过一段区间一次\n\n设小球$i$最终停在$b_i$，则滚过这段数轴会被反色，且代价为$|a_i-b_i|$\n\n将最终颜色做**异或差分**，那么对于目标的反色，我们认为就是在每个$t_i$处放置了一个1\n\n而对于所有$a_i$，就是在$a_i,b_i$处分别放置了一个1，这样就完全避免了关于$a_i,b_i$大小关系的问题\n\n### 计算答案\n\n由于已经固定了$a_i$(设$a_i$已经排好序)，我们需要决策$b_i$\n\n那么可以预先得到哪些位置需要放置奇数个$b_i$，设这个集合为$pos$\n\n若$|pos|>n$，显然无解\n\n否则，$b_i$的放置仅有两种情况\n\n1.放在某一个$pos_i$处\n\n2.让两个$b_i$放在同一个位置\n\n对于$a,pos$排序之后的情况，显然较小的$a_i$会匹配较小的$pos_i$，代价为$|a_i-pos_i|$\n\n而情况2用掉的两个$b_i$，选择使用$b_i,b_{i+1}$一定不劣，并且代价就是$a_{i+1}-a_i$\n\n那么令$dp_{i,j}$表示前$i$个$a_i$，已经匹配了$j$个$pos_j$的代价，如上决策即可\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=5010,P=998244353;\n\nint n,m;\nint a[N],b[N];\nll dp[N][N];\nint h[N*2],hc;\nint s[N*2],t[N*2];\nint pos[N*2],c;\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,1,n) a[i]=rd(),h[++hc]=a[i];\n\trep(i,1,m) b[i]=rd(),h[++hc]=b[i];\n\tsort(a+1,a+n+1);\n\tsort(h+1,h+hc+1),hc=unique(h+1,h+hc+1)-h-1;\n\trep(i,1,n) {\n\t\ta[i]=lower_bound(h+1,h+hc+1,a[i])-h;\n\t\ts[a[i]]^=1;\n\t}\n\trep(i,1,m) {\n\t\tb[i]=lower_bound(h+1,h+hc+1,b[i])-h;\n\t\tt[b[i]]^=1;\n\t}\n\trep(i,1,hc) if(s[i]^t[i]) pos[++c]=i;\n\tif(c>n || (n-c)&1) return puts(\"-1\"),0;\n\tmemset(dp,63,sizeof dp),dp[0][0]=0;\n\trep(i,1,n) rep(j,0,min(i,c)) {\n\t\tif(j<c) cmin(dp[i][j+1],dp[i-1][j]+abs(h[a[i]]-h[pos[j+1]]));\n\t\tif(i<n) cmin(dp[i+1][j],dp[i-1][j]+h[a[i+1]]-h[a[i]]);\n\t}\n\tprintf(\"%lld\\n\",dp[n][c]);\n}\n```\n\n\n\n\n\n","tags":["Atcoder"],"categories":["题解"]},{"title":"ARC114 - Sequence Scores","url":"/articles/2021/05/05/499b7a81.html","content":"# ARC114 - Sequence Scores\n\n题目大意：对于一个序列$A=a_i,a_i\\in[1,m]$，定义$f(A)$为\n\n对于一个全零的初始序列，每次选择一个区间对于某一个值取$\\max$，最少生成$A$的步数\n\n求所有$m^n$种$A$的$f(A)$之和\n\n首先考虑$f(A)$的计算，显然可以采用如下方法\n\n```pseudocode\nb[i]=0\nFunction Solve(l,r)\n\tv=min a[l..r]\n\tfor i in l,r\n\t\tb[i]=max{b[i],v}\n\tDivide a[l..r] into contiguous ranges that a[i]!=b[i] , Solve(l',r')\n\t\n```\n\n那么考虑计算一个区间$[l,r]$被$\\text{Solve}$的次数\n\n显然区间$[l,r]$被$\\text{Solve}$当且仅当\n\n$\\min\\{a_i|i\\in[l,r]\\}>\\max(a_{l-1},a_{r+1})$\n\n对于不同的$r-l+1$，枚举$\\min$，计算方案数即可\n\n注意考虑$l=1\\or r=n$的边界情况\n\n```cpp\nconst int N=5010,P=998244353;\n\nint n,m;\nint Pow[N][N],F[N][3];\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,0,N-1) rep(j,*Pow[i]=1,N-1) Pow[i][j]=1ll*Pow[i][j-1]*i%P;\n\trep(i,1,n) rep(j,0,2) rep(k,1,m) {\n\t\tF[i][j]=(F[i][j]+1ll*(Pow[m-k+1][i]-Pow[m-k][i]+P)*Pow[k-1][j])%P;\n\t}\n\tint ans=0;\n\trep(i,1,n) rep(j,i,n) {\n\t\tint c=(i>1)+(j<n);\n\t\tans=(ans+1ll*F[j-i+1][c]*Pow[m][n-(j-i+1)-c])%P;\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder"],"categories":["题解"]},{"title":"联合省选2021爆零记","url":"/articles/2021/05/04/ef3a50ed.html","content":"# 联合省选2021爆零记\n\n### Day0\n\n~~车程一如既往6h不眠不休~~\n\n听说订了神仙酒店！\n\n~~诶门在哪里~~\n\n刷脸进门！\n\n双层单间！\n\n一人一间大床房！\n\n100Mbs宽带！\n\n/se/se/se/se/se/se\n\n购买干粮*2\n\n22:00上床\n\n$$ \\ $$\n\n## Day1\n\n牛肉面送到寝室，进食....\n\n~~这个雨下得和去年莫名相似~~ 携带干粮*1，抵达学军紫荆港\n\n抵达Linux机房\n\n### Minute -10\n\n~~哇居然提前10分钟开敲板子~~\n\n### Minute 0\n\n今天密码公布相当顺利\n\n### Minute 10 - 20\n\n嗯，是签到小贪心吗？好像是的\n\n数据范围。。。不能二分\n\nok尺取\n\n...对拍对拍对拍对拍对拍...\n\n### Minute 20 - ?\n\nT2 WTF???\n\n谨慎分析，嗯，是一个$2n$元$n^2$方程的线性规划求可行解\n\n~~啊啊啊啊啊啊~~\n\n消元？击毙->\n\n换元？击毙->\n\n网络流？击毙->\n\n单纯形？击毙->\n\n诶听说这年头对偶很流行？击毙->\n\n差分约束？方程这么长，不会。击毙->\n\n击毙->我\n\n$m=2$，这不硬来吗。。\n\n贪心乱搞一手....枚举每个点然后把四周$b_{i,j}$取$\\min$放进去\n\n对拍.... WAWAWAWA\n\n改顺序... WAWAWAWA\n\n换堆... WAWAWAWA\n\n回撤! \n\n...WAWAWAWAWAWAWAWAWAWAWAWA...\n\n全排列$nm\\leq 9$香啊\n\n~~我死了~~\n\n### Minute 120-150\n\n完了完了T2都不会写，是不是所有人都会T2啊啊啊啊啊啊\n\n先T3暴力开一下，~~说好了就暴力啊~~\n\n记忆化一下模拟是不是就44pts了\n\n$$ \\ $$\n\n### Minute ???\n\n...自闭中...\n\n$$  \\ $$\n\n### Minute $\\infty$\n\n出考场。。。\n\n~~完了所有人都A了T3~~\n\n带着愉~~m~~快~~d~~的心情回到酒店，感觉这波爆零势在必得\n\n~~那就先愉悦一下自己~~\n\n沙县小吃=晚饭\n\n21:30上床(ok早一点)\n\n<br>\n\n<br>\n\n<br>\n\n## Day2\n\n~~说实话早上不知道醒了几次~~\n\n内心平静地又一次来到考场\n\n### Minute -10\n\n今天没有提前10min敲板子\n\n~~但是Linux机房日常不还原~~\n\n### Minute 0\n\n今天也是顺利公布密码的一天\n\n### Minute 10-20\n\n...脑抽中...\n\n诶是不是要每个颜色开一个倍增~~（写锤子~~\n\n### Minute 20++\n\n~~很显然每个点只用开自己颜色下一个颜色的匹配倍增~~\n\n终于开始敲....\n\n~~很快啊~~\n\n看起来大样例挺不chuo的\n\n$$ \\ $$\n\n### Minute 40\n\n~~辛酸血泪之题目看错~~\n\n啊，要求每次排名都是第一，那不是显然要记编号和分数\n\n看起来状态也不是很多嘛，calculating\n\n~~很好，完全存不下~~\n\n$\\text{Hash_Table} $ GoGoGo！！\n\n诶怎么过不了样例，哦原来少了一个条件，~~没关系一样存状态~~\n\n...TLE MLE TLE MLE TLE...\n\n调参..\n\n~~求您给我多点分。。。~~\n\n$$ \\ $$\n\n### Minute ??++\n\n《关于联合省选把数据结构写进题目名字里》\n\n真棒~~（淦）~~，又出板板题\n\n根据题意模拟中....\n\nbitset 看起来很不错，暴力存储连通到达情况，qn^2/64，总能拿pts75吧\n\n<br>\n\n<br>\n\n### Minute $\\infty$\n\n~~今天又是打暴力的一天呢~~\n\n~~6h 返程~~\n\n$$ \\ $$\n\n## Day?\n\n怎么才有民间数据...\n\nD1 T1 ok\n\nD1 T2 ok\n\nD1 T3 啊啊啊啊啊啊WA了\n\nD2 T1 ok\n\nD2 T2 ~~这个数据不行~~\n\nD2 T3 啊啊啊啊啊怎么又WA了\n\n~~哭爹还是喊娘~~\n\n## Day??++\n\n出成绩....\n\nD1 T1 ok\n\nD1 T2 ok\n\nD1 T3 44->16pts ...\n\nD2 T1 ok\n\nD2 T2 怎么就真的60pts呗\n\nD2 T3 难道bitset它T掉了？\n\n~~371完成爆零~~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["游记"]},{"title":"Codeforces1508D -  Tree Calendar","url":"/articles/2021/05/04/b684972e.html","content":"# Codeforces1508D -  Tree Calendar\n\n题目大意：\n\n有一棵已知的有根树和一个未知的$\\text{dfs}$序，且做了若干次操作，每次操作是\n\n对于所有的$(u,fa_u)\\and label_{fa_u}<label_{u}$，找到最小的二元组$(label_{fa_u},lable_u)$，交换二元组的$label$\n\n给定最终的序列，求复原一个$\\text{dfs}$序并且给出操作次数，或者确定不存在这样的$\\text{dfs}$序\n\n$$ \\ $$\n\n模拟这样的过程，容易发现：\n\n1号节点沿着最小$\\text{dfs}$序路径走下去，直到叶子，同时将路径上的点推上来，一共推了$dep_{leaf}$次\n\n2号节点沿着最小$\\text{dfs}$序路径走下去，直到叶子，同时将路径上的点推上来，一共推了$dep_{leaf'}$次\n\n....\n\n考虑每个节点都已经推到最底下的情况，则最终所有的节点有两种情况\n\n1.是推下来的节点，则其$label$恰好为原树上出栈序列的标号\n\n2.剩下的点构成一个新的连通块，按照新的$\\text{dfs}$序的顺序标号\n\n那么考虑找到当前最小的二元组$(label_{fa_u},label_u)$，就知道当前正在推的是哪个元素\n\n考虑先复原这个元素被推下来的过程，**复原的过程中注意判定是否当前的元组合法**\n\n然后容易通过当前的$label$确定一开始的$\\text{dfs}$序\n\n具体的，设$s_u$为$u$子树中最小的$label$，按照$s_u$递增的顺序遍历每个儿子得到的$\\text{dfs}$才可能是合法的$\\text{dfs}$序\n\n原理比较显然，已经被推的叶子按照$\\text{stack}$序遍历，剩下的按照原先的$\\text{dfs}$序遍历，最终取$\\text{min}$然后遍历即合法\n\n然后按照上面的过程，对于得到的$\\text{dfs}$序判定是否合法即可\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=3e5+10;\n\nint n;\nint A[N],F[N];\nvector <int> G[N];\nll ans;\nint X[N],Y[N],Z[N],C1,C2,C3,D[N];\n// X 原树 dfs 序\n// y 原树 stack 序\n// z 删去已经推完的点之后，剩下的点的 dfs 序\n\nint I[N],J[N];\nvoid dfs1(int u){\n\tI[u]=A[u];\n\tfor(int v:G[u]) D[v]=D[u]+1,dfs1(v),cmin(I[u],I[v]);\n}\nvoid dfs2(int u){\n\tJ[X[u]=++C1]=u;\n\tsort(G[u].begin(),G[u].end(),[&](int x,int y){ return I[x]<I[y]; });\n\tfor(int v:G[u]) dfs2(v);\n\tY[u]=++C2;\n}\nint vis[N];\nvoid dfs3(int u){\n\tif(vis[u]) return;\n\tZ[u]=++C3;\n\tfor(int v:G[u]) dfs3(v);\n}\n\nint main(){\n\tn=rd();\n\trep(i,1,n) A[i]=rd();\n\tint p=n+1; A[n+1]=n+1;\n\trep(i,2,n) {\n\t\tint u=rd(),v=rd();\n\t\tG[u].pb(v),F[v]=u;\n\t\tif(A[u]<A[v] && A[p]>A[u]) p=u;\n\t}\n\tint f=1;\n\tif(p<=n) while(F[p]) {\n\t\tint f=F[p];\n\t\t// illgal swap\n\t\tif(A[f]<A[p]) return puts(\"NO\"),0;\n\t\tswap(A[p],A[F[p]]);\n\t\t\n\t\t// not optimal swap\n\t\tif(F[f] && A[F[f]]<A[f]) return puts(\"NO\"),0;\n\t\tfor(int v:G[f]) if(A[v]>A[f] && A[v]<A[p]) return puts(\"NO\"),0;\n\t\tp=F[p],ans++;\n\t}\n\tdfs1(1),dfs2(1);\n\trep(i,1,n) if(A[i]<A[p]) f&=A[i]==Y[i],vis[i]=1,ans+=D[i];\n\tdfs3(1);\n\trep(i,1,n) if(A[i]>=A[p]) f&=Z[i]+A[p]-1==A[i];\n\tif(!f) puts(\"NO\");\n\telse {\n\t\tputs(\"YES\");\n\t\tprintf(\"%lld\\n\",ans);\n\t\trep(i,1,n) printf(\"%d \",X[i]);\n\t\tputs(\"\");\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"Codeforces1508D - Swap Pass","url":"/articles/2021/05/04/dea55e.html","content":"# Codeforces1508D - Swap Pass\n\n题目大意：\n\n给定$n$个不共线的点$p_i$，和一个排列$a_i$\n\n每次交换$a_i,a_j$的同时，在$p_i,p_j$之间连一条线段\n\n求一个方案使得最后$a_i=i$，且连的线之间不交叉\n\n$$ \\ $$\n\n问题解决分为两步：\n\n1.环的交换\n\n对于$a_i$的处理，显然可以将所有点分为若干由$(i,a_i)$边构成的环\n\n每个环上可以随意选择一个点作为初始，设其为$o$\n\n每次交换$o,a_o$上的数，这样的过程就变成了$a_o$在环上走一圈\n\n最后连出的边就是$o$向环上每一个点连接的一圈 \"射线\"\n\n2.环的合并\n\n考虑Simple的情况，交换两个环上的某一对元素可以将两个环合并在一起\n\n我们希望通过在最终的射线里找\"缝隙\"连线来合并所有的环\n\n取某一个非孤立的点为原点$o$，考虑先将所有点放到同一个环里\n\n具体的，将所有的点按原点极角排序，除了最多一个跨过$>\\pi$的位置不能连\n\n剩下的点总可以和极角相邻的点交换，所连的线总在最终射线之间构成三角形\n\n通过若干这样的交换就可以合并到一起\n\n最后再对于钦定的原点进行一次环交换即可\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=3e5+10;\n\nint n,m,O;\nint A[N],I[N];\nstruct Node{\n\tint x,y;\n\tNode(){ }\n\tNode(int x,int y):x(x),y(y){ }\n\tNode operator + (const Node _) const { return Node(x+_.x,y+_.y); }\n\tNode operator - (const Node _) const { return Node(x-_.x,y-_.y); }\n\tll operator * (const Node _) const { return 1ll*x*_.x+1ll*y*_.y; }\n\tdb angle() const { return atan2(y,x); }\n} P[N];\n\nint C,X[N],Y[N],F[N];\nvoid Swap(int x,int y){ swap(A[x],A[y]),X[++C]=x,Y[C]=y; }\nint Find(int x){ return F[x]==x?x:F[x]=Find(F[x]); }\nvoid Union(int x,int y){ F[Find(y)]=Find(x); }\n\nint main(){\n\tn=rd();\n\trep(i,1,n) P[i].x=rd(),P[i].y=rd(),A[i]=rd();\n\trep(i,1,n) if(A[i]!=i) O=i;\n\tif(!O) return puts(\"0\"),0;\n\trep(i,1,n) if(i!=O) P[i]=P[i]-P[O],I[++m]=i;\n\trep(i,1,n) F[i]=i;\n\trep(i,1,n) if(F[i]==i) for(int j=A[i];j!=i;j=A[j]) Union(i,j);\n\tsort(I+1,I+m+1,[&](int x,int y){ return P[x].angle()<P[y].angle(); });\n\trep(i,1,m) if(P[I[i]]*P[I[i%m+1]]>=0 && Find(I[i])!=Find(I[i%m+1])) Union(I[i],I[i%m+1]),Swap(I[i],I[i%m+1]);\n\twhile(A[O]!=O) Swap(A[O],O);\n\tprintf(\"%d\\n\",C);\n\trep(i,1,C) printf(\"%d %d\\n\",X[i],Y[i]);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"ARC117 - Zero-Sum Ranges 2","url":"/articles/2021/05/04/3167746e.html","content":"# ARC117 - Zero-Sum Ranges 2\n\n题目大意：计算由$n$个$+1$和$n$个$-1$构成的序列，且 包含恰好$k$个和为零的区间 的数量\n\n显然需要转化为前缀和，通过前缀和相等的二元组数确定和为0的数量\n\n而恰好$n$个$+1,-1$可以转化为$s_{2n}=0$\n\n设$m=2n+1$，接下来我们要计算$m$个元素，且$s_1=s_m=0,s_{i}=s_{i-1}\\pm 1$的序列\n\n$s_i$的变化是连续的，考虑分为$s_i\\ge 0,s_i<0$的两部分\n\n以$\\ge 0$为例，从高到低确定每个连续的峰折线的情况，折线组的位置不重要，只需要知道个数\n\n令$dp_{i,j,c}$表示当前$i$个元素确定，且已经确定的元素分成了$j$段，得到$c$个相同对的方案数\n\n每个段中可能包含折线组，且两端一定是当前的最低值，状态数为$O(n^4)$\n\n每次$dp$在当前状态上扩展下一层的情况，由于变化连续，得到新的状态\n\n1.每个段两边应该出现新的位置\n\n2.两个段向两边扩展时，可能共用一个位置\n\n3.可能出现新的峰顶\n\n根据2,3的情况，组合数转移\n\n如果直接枚举2,3情况，复杂度为$O(n^6)$\n\n实际上容易发现2,3情况可以放在一起处理\n\n具体的，对于新出现的$j+1$个位置（也就是每两个段之间的间隔）是一定会出现的，用这$j+1$个可以合并为一整个段\n\n剩余的情况，额外插入一个元素，就是在$j+1$个位置中分配，且每额外加入一个就能额外产生一个新的段\n\n复杂度为$O(n^5)$\n\n最终合并$s_i\\ge 0,s_i<0$的两部分，由于$s_1=s_m=0$，所以开头结尾两端必须是0，然后两部分的段交替排列\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\nenum{N=62};\nint n,m,k;\nll C[N][N],dp[N][N][910];\n// dp[i][j][s]\n// i places taken\n// j elements \n// s ranges generated\nint D2(int n){ return n*(n-1)/2; }\nint main() {\n\tscanf(\"%d%d\",&n,&k),m=n*2+1;\n\trep(i,0,m) rep(j,*C[i]=1,i) C[i][j]=C[i-1][j]+C[i-1][j-1];\n\trep(i,0,m) if(D2(i)<=k) dp[i][i][D2(i)]=1;\n\trep(i,1,m) rep(j,1,i) rep(s,0,k) if(dp[i][j][s]) {\n\t\trep(d,j+1,m-i) {\n\t\t\tif(s+D2(d)>k) break;\n\t\t\tdp[i+d][d-j][s+D2(d)]+=dp[i][j][s]*C[d-1][j];\n\t\t}\n\t}\n\tll ans=0;\n\trep(i,1,m) rep(j,1,i) rep(s,0,k) if(dp[i][j][s]) {\n\t\tans+=dp[i][j][s]*dp[m-i][j-1][k-s];\n\t}\n\tprintf(\"%lld\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n","tags":["Atcoder"],"categories":["题解"]},{"title":"[补]联合省选2021 图函数","url":"/articles/2021/05/04/732e8c7.html","content":"# [补]联合省选2021 图函数\n\n考虑将所有加入$i-m$这些边的答案一起算出来\n\n模拟删去点的过程容易发现，删去$u$时，$u,v$在同一个强连通分量里的点满足：\n\n存在仅包含$\\ge u$的点的路径，使得$u,v$互相连通\n\n设$A_{u,v}$表示最大的$i$使得$u$能仅通过$\\ge u$的点到达$v$\n\n设$B_{u,v}$表示最大的$i$使得$v$能仅通过$\\ge u$的点到达$u$\n\n计算$\\min\\{A_{u,v},B_{u,v} \\}$即可确定一个点对能够贡献到的区间\n\n考虑依次加入每一条边$(u,v)$，在正反图上计算$A,B$中每个元素第一次被确定的时间\n\n以计算$A$为例，每次会被更新的$A_{i,..}$一定满足\n\n$i\\ge \\min\\{u,v\\},i\\rightarrow u,i\\not \\rightarrow v$\n\n可以暴力$\\text{for}$这样的$i$，从$[i,v]$开始，让$v$扩展，每次扩展找到未确定的$[i,w]$\n\n每个元素只会被确定一次，复杂度为$O(n^2)$，暴力枚举起点为$O(nm)$\n\n可以用$\\text{bitset}$优化到$O(\\frac{nm} {64}+n^2)$ (扩展元素的部分复杂度可能是假的，但是没有关系)\n\n[Loj Submission](https://loj.ac/s/1131239)\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<cstring>\nusing namespace std;\nusing ull=unsigned long long;\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\nint rd(){\n\tint s=0; static char c;\n\twhile(c=getchar(),c<48);\n\tdo s=(s<<1)+(s<<3)+(c^'0');\n\twhile(c=getchar(),c>47);\n\treturn s;\n}\nenum{N=1010,M=200010};\nint n,m,t;\nint A[N][N],B[N][N],U[M],V[M],ans[M];\nint Log(ull x){ return !x?-1:__builtin_ctzll(x); }\nstruct Bitset{\n\tull a[16];\n\tvoid turn(int x){ a[x>>6]^=1ull<<x; }\n} X[N],Y[N];\nvector <int> G[N],E[N];\nvoid dfs1(int st,int u) {\n\tif(~A[st][u]) return;\n\tA[st][u]=t,X[u].turn(st);\n\tfor(int v:G[u]) if(v>=st) dfs1(st,v);\n}\nvoid dfs2(int st,int u) {\n\tif(~B[st][u]) return;\n\tB[st][u]=t,Y[u].turn(st);\n\tfor(int v:E[u]) if(v>=st) dfs2(st,v);\n}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,0,m-1) U[i]=rd(),V[i]=rd();\n\tmemset(A,-1,sizeof A),memset(B,-1,sizeof B);\n\trep(i,1,n) A[i][i]=B[i][i]=m,X[i].turn(i),Y[i].turn(i);\n\tfor(t=m-1;~t;t--) {\n\t\tG[U[t]].pb(V[t]),E[V[t]].pb(U[t]);\n\t\tint L=min(U[t],V[t]);\n\t\trep(i,0,L>>6) {\n            // bitset 优化。\n\t\t\tfor(int j;~(j=Log(X[U[t]].a[i]&~X[V[t]].a[i])) && (i<<6|j)<=L;) dfs1(i<<6|j,V[t]);\n\t\t\tfor(int j;~(j=Log(Y[V[t]].a[i]&~Y[U[t]].a[i])) && (i<<6|j)<=L;) dfs2(i<<6|j,U[t]);\n\t\t}\n\t}\n\trep(i,1,n) rep(j,i,n) if(~A[i][j] && ~B[i][j]) ans[min(A[i][j],B[i][j])]++;\n\tdrep(i,m,0) ans[i]+=ans[i+1];\n\trep(i,0,m) printf(\"%d \",ans[i]);\n}\n```\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"ARC117 - Gateau","url":"/articles/2021/05/04/e14e6f15.html","content":"# ARC117 - Gateau\n\n题目大意：给定一个长度为$2n$的非负环序列$x_0,x_1,\\cdots x_{2n-1}$，以及$2n$条限制，每条都是\n\n$\\forall A_i,\\sum_{j=0}^{n-1} x_{i+j\\mod 2n}\\ge A_i $\n\n求最小化$\\sum x_i$\n\n---------------\n\n$$  \\ $$\n\n转化为前缀和作差之后，令人联想到差分约束，但是难以处理跨过环末的限制\n\n于是二分答案$s=x_{2n-1}$，建立最长路图\n\n$\\forall i<n,dis_{i+n}\\ge dis_{i}+A_i$\n\n$\\forall i\\ge n,dis_{i-n}\\ge dis_{i}+A_i-s$\n\n$\\forall i<2n-1,dis_{i+1}\\leq dis_i$\n\n那么无解的条件就是：存在正环或者求得$dis_{2n-1}>s$\n\n自然无法直接通过$\\text{SPFA}$来跑。。。\n\n考虑所有的边构成了一条$0-2n-1$的零链 和若干极小的二元环\n\n如果二元环出现正环则无解，否则任意一条最长路路径总是可以描述为\n\n$i<j<n , i(+n)\\rightarrow j(+n)$\n\n在中间点$k$可以选择花费0的代价向后走，或者\n\n$k<n:k\\rightarrow k+n,cost=A_k$\n\n$k\\ge n:k\\rightarrow k-n,cost=A_k-s$\n\n也就是在$k,k+n$之间反复横跳，由此发现一条路径就是\n\n从$0-n-1$进行扫描，并且允许中间$\\pm n$横跳\n\n（当然这里漏掉了一个特殊边，即$dis_{n}\\ge dis_{n-1}$，这是构成环的边）\n\n这样写出一个变种的$\\text{Bellman Ford}$，由于图的特殊性，只需要常数轮即可确定正环\n\n具体的，当图上不存在正环时，扫描最多经过一次环就会停止更新\n\n也就是这样横跳的扫描更新只会进行常数轮（2轮？）\n\n如果若干轮后依然在更新，说明出现了正环\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\nint cmax(int &a,int b){ return a<b?a=b,1:0; }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=3e5+10,INF=1e9+10;\n\nint n;\nint A[N],dp[N];\n\nint Check(int s) {\n\trep(i,0,n-1) if(A[i]+A[i+n]-s>0) return 0;\n\trep(i,0,n*2-1) dp[i]=0;\n\tdp[n*2-1]=s;\n\tint f=0;\n\trep(k,0,5) { \n\t\tf=0;\n\t\trep(i,0,n-1) {\n\t\t\tf|=cmax(dp[i+n],dp[i]+A[i]);\n\t\t\tf|=cmax(dp[i],dp[i+n]+A[i+n]-s);\n\t\t\tif(i<n-1) {\n\t\t\t\tf|=cmax(dp[i+1],dp[i]);\n\t\t\t\tf|=cmax(dp[i+n+1],dp[i+n]);\n\t\t\t}\n\t\t}\n\t\tf|=cmax(dp[n],dp[n-1]);\n\t}\n\tif(f || dp[n*2-1]>s) return 0;\n\treturn 1;\n}\n\nint main() {\n\tn=rd();\n\trep(i,0,n*2-1) A[i]=rd();\n\tint res=-1;\n\tfor(int l=0,r=1.05e9,mid;l<=r;) Check(mid=(l+r)>>1)?r=mid-1,res=mid:l=mid+1;\n\tprintf(\"%d\\n\",res);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder"],"categories":["题解"]},{"title":"ARC117 - Tricolor Pyramid","url":"/articles/2021/05/03/5990b960.html","content":"# ARC117 - Tricolor Pyramid\n\n设三种颜色分别为01,2, 容易发现原题变换$f(a,b)$的等价表达为\n\n$f(a,b)=(-a-b)\\mod 3$\n\n$\\mod 3$可以最后处理，那么就是一个取负操作\n\n看成一个递推$F_{n,i}=col_i$\n\n$F_{i,j}=-F_{i+1,j}-F_{i+1,j+1}$，求出$F_{1,1} \\mod 3$\n\n那么对于每个$col_i$，处理其对于$F_{1,1}$的贡献系数，容易发现贡献就是一个两边走的杨辉三角，即$\\displaystyle \\binom{n-1} {i-1}(-1)^{n-1}$\n\n~~然后我就真的暴力处理组合数~~\n\n```cpp\nconst int N=1e6+10,INF=1e9+10;\n\nint n;\nchar s[N];\nchar ch[]=\"BWR\";\n\nint F[N],cnt[N];\nint C(int n,int m){\n\tif(cnt[n]-cnt[m]-cnt[n-m]) return 0;\n\treturn F[n]*F[m]*F[n-m]%3;\n}\n\nint main(){\n\trep(i,F[0]=1,N-1) {\n\t\tcnt[i]=cnt[i-1],F[i]=F[i-1];\n\t\tint x=i;\n\t\twhile(x%3==0) x/=3,cnt[i]++;\n\t\tF[i]=F[i]*x%3;\n\t}\n\tscanf(\"%d%s\",&n,s+1);\n\tint sum=0;\n\trep(i,1,n) {\n\t\tint t=0;\n\t\tif(s[i]=='W') t=1;\n\t\tif(s[i]=='R') t=2;\n\t\tif(~n&1) t=3-t;\n\t\tsum=(sum+C(n-1,i-1)*t)%3;\n\t}\n\tsum%=3,putchar(ch[sum]);\n}\n```\n\n\n\n","tags":["Atcoder"],"categories":["题解"]},{"title":"ARC 117 - Miracle Tree","url":"/articles/2021/05/03/7c4f0107.html","content":"# ARC 117 - Miracle Tree\n\n~~话说我只能蒙结论。。。~~\n\n打表或者理性分析可以发现一些性质\n\n1.$\\nexists E_i=E_j$\n\n2.如果确定$E_i$从小到大的顺序$P_i$，就能确定一组最优的$E_i$\n\n（但是对于平凡的$P_i$，这个过程会极其恶心，因此考虑特殊化$P_i$）\n\n3.设$\\displaystyle f(P)=\\sum_{i=2}^n dis(P_{i-1},P_i)$，即遍历排列的距离和\n\n则$\\max\\{E_i\\}\\ge \\min\\{f(P)\\}+1$\n\n~~显然~~\n\n由此确定了一个下界，接下来将说明可以取到下界\n\n1.对于一个排列$P_{i}$，如果$P_i$是一组$\\text{dfs}$序，那么满足$\\max\\{E_i\\}=f(P)+1$ (容易模拟发现)\n\n2.$\\min\\{f(P)\\}$在$(P_1,P_n)$恰好为一条直径时取到，显然存在这样一组$\\text{dfs}$序满足要求\n\n由此确定了答案$P$可以是任何一组以某一条直径两个端点为$P_1,P_n$的$\\text{dfs}$序\n\n容易给出一个合法解，代码实现极为暴力\n\n```cpp\nconst int N=2e5+10,INF=1e9+10;\n\nint n;\nvector <int> G[N];\nint F[N][20],D[N],E[N];\nint ma=-1,id;\nvoid dfs(int u,int f) {\n\tif(D[u]>ma) ma=D[u],id=u;\n\tF[u][0]=f,E[u]=D[u];\n\trep(i,1,18) F[u][i]=F[F[u][i-1]][i-1];\n\tfor(int v:G[u]) if(v!=f) D[v]=D[u]+1,dfs(v,u),cmax(E[u],E[v]);\n\tsort(G[u].begin(),G[u].end(),[&](int x,int y){ return E[x]<E[y]; });\n}\nint LCA(int x,int y){\n\tif(D[x]<D[y]) swap(x,y);\n\tfor(int del=D[x]-D[y],i=0;(1<<i)<=del;++i) if(del&(1<<i)) x=F[x][i];\n\tif(x==y) return x;\n\tdrep(i,18,0) if(F[x][i]!=F[y][i]) x=F[x][i],y=F[y][i];\n\treturn F[x][0];\n}\nint Dis(int x,int y){ return D[x]+D[y]-2*D[LCA(x,y)]; }\n\nint lst;\nll A[N];\nvoid dfs2(int u,int f) {\n\tif(!lst) A[lst=u]=1;\n\telse A[u]=A[lst]+Dis(lst,u),lst=u;\n\tfor(int v:G[u]) if(v!=f) dfs2(v,u);\n}\n\nint main(){\n\tn=rd();\n\trep(i,2,n) {\n\t\tint u=rd(),v=rd();\n\t\tG[u].pb(v),G[v].pb(u);\n\t}\n\tdfs(1,0);\n\tint u=id;\n\tdfs(u,0),dfs2(u,0);\n\trep(i,1,n) printf(\"%lld \",A[i]);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder"],"categories":["题解"]},{"title":"%EI 笔记： 一类特殊的线性求和","url":"/articles/2021/04/08/64568338.html","content":"# %EI 笔记： 一类特殊的线性求和\n\n话不多说先%%%%%EI\n\n对于给定的常数列$a_i,i\\in[0,n]$\n\n对于一些可以肉眼描述特征的多项式$F(x)$，以及一类特殊的$G(x)$（常见的$G(x)$为$e^x,a_i=i!$）\n\n具体的，能够对于$F(x)$列出一条较为简单的微分方程，如$F(x)=(1-x)F'(x)+H(x)$\n\n对于$G(x)$，容易求得$\\sum a_i[x^i]G^k(x)$\n\n则可以用下面的思路求得$\\sum a_i[x^i]F(G(x))$\n\n-----------------------------\n\n设$c=G(0)$，带入$F(G(x))$在$c$上的$\\text{Taylor}$展开\n\n$\\displaystyle F(G(x))=\\sum_{i=0}^{\\infty} F^{(i)}(c)\\frac{(G(x)-c)^i} {i!}$\n\n由于$[x^0]G(x)-c=0$，故仅$i\\leq n$的项对于答案有贡献\n\n我们求出的$F^{(i)}(c)$实际上由$F(x+c)$的前$n$项决定\n\n也就是说，只要能够截取$F(x+c)$的前$n$项，设其为$\\mathscr F(x+c)=F(x+c)\\mod x^{n+1}$\n\n那么我们再带入$\\displaystyle \\mathscr F(G(x))=\\sum_{i=0}^n\\mathscr F_iG^i$，根据前面提到的$\\sum a^i[x^i]G^k(x)$就能求得答案\n\n那么通过$F(x+c)$得到$\\mathscr F(x)$，如果可以直接做就不谈\n\n如果较复杂可以通过以下步骤\n\n1.观察并列出$F(x)$的微分方程$\\sum p_i(x)F(x)=0$，则同样有$\\sum p_i(x+c)F^{(i)}(x+c)=0$\n\n2.截取微分方程，得到同样系数的的方程\n\n$\\sum p_i(x+c)\\mathscr F^{(i)}(x+c)$\n\n然而由于$\\mathscr F^{(i)}(x+c)$相较于$F^{(i)}(x+c)$缺少了部分项，设\n\n$\\sum p_i(x+c)\\mathscr F^{(i)}(x+c)=D(x)$\n\n如果$D(x)$较简洁，那么根据$D(x)$的形式，我们能够得到$D(x-c)$的展开\n\n即$\\sum p_i(x)\\mathscr F^{(i)}(x)=D(x-c)$，此时再通过新的微分方程依次递推$\\mathscr F(x)$的每一项即可\n\n<br>\n\n<br>\n\n----------------------\n\n例子：\n\n[「TJOI / HEOI2016」求和](https://loj.ac/p/2058) [题解](https://www.cnblogs.com/chasedeath/p/14634617.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["学习笔记"]},{"title":"「TJOI / HEOI2016」求和","url":"/articles/2021/04/08/d9300c8a.html","content":"# 「TJOI / HEOI2016」求和\n\n题目大意：\n\n求$\\displaystyle \\sum_{i=0}^n\\sum_{j=0}^i \\begin{Bmatrix}i\\\\ j\\end{Bmatrix}2^j\\cdot j!$\n\n由于第二类斯特林数的生成函数$S_m(x)=\\cfrac{1} {m!}(e^x-1)^m$\n\n所以求的东西就是$\\displaystyle F(x)=\\sum_{i=0} (2e^x-2)^i=\\frac{1} {3-2e^x}$前$n$项系数\n\n~~可以暴力求逆~~\n\n线性解法：[思路](https://www.cnblogs.com/chasedeath/p/14633883.html)\n\n要求$\\displaystyle \\frac{1} {3-2e^x}$的前$n$项$[x^i]$乘$i!$的和\n\n设$\\displaystyle G(x)=e^x,F(x)=\\frac{1} {3-2x}$\n\n那么我们需要求得$\\mathscr F(x+1)=F(x+1) \\mod x^{n+1}$\n\n$\\displaystyle F(x+1)=\\frac{1} {1-2x}=\\sum_{i=0} (2x)^i$\n\n$\\displaystyle F'(x+1)=\\sum_{i=0} 2(i+1) (2x)^i$\n\n$F(x+1)=\\cfrac{1-2x} {2}F'(x+1)$\n\n$\\displaystyle \\mathscr F(x+1)=\\cfrac{1-2x} {2}\\mathscr F'(x+1)+(n+1)(2x)^n$\n\n$\\displaystyle \\mathscr F(x)=\\cfrac{3-2x} {2}\\mathscr F'(x)+(n+1)(2x-2)^n$\n\n那么得到\n\n$\\displaystyle [x^k]\\mathscr F(x)=\\frac{3} {2}(k+1)[x^{k+1}]\\mathscr F(x)-k[x^k]\\mathscr F(x)+(n+1)2^{n}\\binom{n} {k}(-1)^{n-k}$\n\n$\\displaystyle \\frac{3} {2}(k+1)[x^{k+1}]\\mathscr F(x)=(k+1)[x^k]\\mathscr F(x)-(n+1)2^{n}\\binom{n} {k}(-1)^{n-k}$\n\n$\\displaystyle \\frac{3} {2} [x^{k+1}]\\mathscr F(x)=[x^k]\\mathscr F(x)-2^{n}\\binom{n+1} {k+1}(-1)^{n-k}$\n\n最后$\\displaystyle \\sum_{i=0}^n [x^i]F(G(x))=\\sum_{i=0}^n [x^i]\\mathscr F(G(x))=\\sum \\mathscr F_i \\sum_{j=0}^n j! [x^j]G^k(x)$\n\n$\\displaystyle [x^0]\\mathscr F(x)=[x^0]\\sum_{i=0}^n(2x-2)^i=\\sum_{i=0}^n (-2)^i=\\frac{1-(-2)^{n+1} } {3}$\n\n$\\sum_{j=0}^n j! [x^j]G^k(x)$就是一个等比数列求和，可以用线性筛$i^k$轻 松线性求得\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nconst int N=1e5+10,P=998244353;\n\nint n;\nint I[N],J[N],Inv[N],Pow[N],q[N],F[N];\nll qpow(ll x,ll k=P-2){\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nvoid Sieve_Pow(int n){\n\tstatic int notpri[N],pri[N],pc;\n\trep(i,2,n) {\n\t\tif(!notpri[i]) pri[++pc]=i,Pow[i]=qpow(i,n);\n\t\tfor(int j=1;j<=pc && 1ll*i*pri[j]<=n;++j) {\n\t\t\tnotpri[i*pri[j]]=1,Pow[i*pri[j]]=1ll*Pow[i]*Pow[pri[j]]%P;\n\t\t\tif(i%pri[j]==0) break;\n\t\t}\n\t}\n}\nint C(int n,int m){ return 1ll*J[n]*I[m]%P*I[n-m]%P; }\n\nint main(){\n\tscanf(\"%d\",&n),Inv[0]=Inv[1]=1;\n\trep(i,2,n+1) Inv[i]=1ll*(P-P/i)*Inv[P%i]%P;\n\trep(i,*I=*J=1,n+1) I[i]=1ll*I[i-1]*Inv[i]%P,J[i]=1ll*J[i-1]*i%P;\n\tSieve_Pow(n+1);\n\tll p=qpow(2,n);\n\tq[0]=1,q[1]=n+1;\n\trep(i,2,n) q[i]=1ll*(Pow[i]-1)*Inv[i-1]%P;\n\tF[0]=(((n&1)?P-p*2%P:p*2%P)+1)*(P+1)/3%P;\n\trep(i,0,n-1) {\n\t\tint t=p%P*C(n+1,i+1)%P;\n\t\tif((n-i+1)&1) t=P-t;\n\t\tF[i+1]=(F[i]+t)*2ll%P*(P+1)/3%P;\n\t}\n\tint ans=0;\n\trep(i,0,n) ans=(ans+1ll*F[i]*q[i])%P;\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["JOI"],"categories":["题解"]},{"title":"字符串的Period(周期),Border","url":"/articles/2021/04/08/38d6070f.html","content":"# 字符串的Period(周期),Border\n\n前置知识：$\\text{kmp}$，$\\text{AC}$自动机\n\n约定：字符串$S$的长度为$|S|$，原串的长度为$n$，$[l,r]$的子串为$S_{l,r}$，下标从$1$开始，前缀$S_{1,i}=pre_i$,后缀$S_{i,n}=suf_i$，设$S$的$\\text{Border}$集合为$B(S)$，设最长的$\\text{Border}$为$\\text{LBorder}$\n\n$\\text{Border}$:\n\n定义字符串$S$的一个$\\text{Border}$为一个满足$pre_i=suf_{n-i+1}$的前缀，$S$和$\\empty$也是一个$\\text{Border}$\n\n$\\text{kmp,AC}$自动机的$fail$指针均指向当前串的$\\text{LBorder}$\n\n$$ \\ $$\n\n$\\text{Period}$(周期):\n\n若$\\exists |T|\\in B(S), 2|T|\\ge n$,则$S$的一个周期是$n-|T|+1$\n\n$\\text{Periodicity Lemma}:$ \n\n若$p,q$是$S$的周期，且$p+q+\\gcd(p,q)\\leq |S|$,则$\\gcd(p,q)$也是$|S|$的一个周期\n\n[证明的话](https://zhuanlan.zhihu.com/p/89385360)\n\n$$ \\ $$\n\n关于$\\text{Border}$的推论:\n\n1.$B(S)=B(\\text{LBorder})\\cup\\{S\\}$\n\n2.串$S$的所有$\\text{Border}$长度构成了不超过$\\log n$个等差数列\n\n证明：\n\n如果$S$的$\\text{LBorder}$，设其为$T$满足$2|T|\\ge |S|$，则所有$R\\in B(S),2|R|\\ge |S|$形成了一个等差数列\n\n参过下面这张图\n\n![aZ5SUJ.png](https://s1.ax1x.com/2020/07/29/aZ5SUJ.png)\n\n则长度为$|T|-(|S|-|T|)$，即标为红色的那一段，它也是原串的一个$\\text{Border}$\n\n更简洁的解释是，$S$有着长度为$|S|-|T|$的周期\n\n所以实际上不止是$2|R|\\ge |S|$的串，而是所有$\\forall|R|\\equiv |S|\\pmod {|S|-|T|}$的$R$都是$S$的$\\text{Border}$\n\n这样的失配过程就可以归纳为：\n\n每次$mod$最短周期$|T|-|S|$，而取模使得长度至少减半，故可以分成$\\log n$段等差数列\n\n$$ \\ $$\n\n并且任意一段最大项为$x$，差为$d$的等差数列，最小项是$x\\mod d+d$ \n\n($+d$是因为在$x\\mod d+d$下一次可能跳的位置$>x\\mod d$)\n\n\n\n**应用**：对于$\\text{kmp,AC}$自动机的字符集过大导致无法存储每种字符的转移，而又有类似可持久化的匹配操作时，\n\n直接暴力跳$fail$会导致复杂度退化，但是可以用等差数列的性质来快速跳\n\n每次形成等差数列时，周期中失配位置的下一个字符都相同\n\n故如果在等差数列上失配，可以直接通过对于差值取模快速跳过，以保证复杂度为$O(\\log n)$\n\n相比于倍增处理，这样跳常数小，实现简单\n\n具体看下面的习题代码\n\n练习模板: [Luogu P5829](https://www.luogu.com.cn/problem/P5829)  求公共$\\text{Border}$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nenum{N=1000010};\nchar s[N];\nint _,i,j,nxt[N];\nint main(){\n\tfor(scanf(\"%s\",s+1),i=2;s[i];++i){\n\t\twhile(j && s[i]!=s[j+1]) j=nxt[j];\n\t\tif(s[i]==s[j+1]) j++;\n\t\tnxt[i]=j;\n\t}\n\tfor(scanf(\"%d\",&_);_--;){\n\t\tfor(scanf(\"%d%d\",&i,&j),i=nxt[i],j=nxt[j];i!=j;){\n\t\t\tif(i<j) swap(i,j);\n\t\t\tif(nxt[i]>i/2) {\n                // 产生等差数列，快速跳过\n\t\t\t\tint d=i-nxt[i];\n\t\t\t\tif(j%d==i%d) i=j;\n\t\t\t\telse i=i%d+d;\n\t\t\t} else i=nxt[i];\n\t\t}\n\t\tprintf(\"%d\\n\",i);\n\t}\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"杜教筛小记","url":"/articles/2021/04/07/2a9a1891.html","content":"# 杜教筛小记\n\n对于一个函数$F(n)$，要在较低时间内求前缀和$S_F(n)=\\sum_{i=1}^nF(i)$\n\n假设我们能找到一个函数$G(n)$使得$G(n),S_{F \\oplus G}(n)$能在较短时间内算出\n\n其中$\\oplus$表示狄利克雷卷积，$(F\\oplus G)(n)=\\sum_{d|n}F(d)G(\\frac{n} {d})$\n\n那么就有\n\n$\\displaystyle S_{F\\oplus G}(n)=\\sum_1^n G(i)S_F(\\lfloor\\frac{n} {i}\\rfloor)$\n\n$\\displaystyle G(1)F(n)=S_{F\\oplus G}(n)-\\sum_2^nG(i)S_F(\\lfloor\\frac{n} {i}\\rfloor)$\n\n这个$\\lfloor\\frac{n} {i}\\rfloor$的个数是$O(\\sqrt n)$的，数论分段求解\n\n由于每次从$2$开始枚举，每次子问题大小至少减半\n\n~~(然而并没有分析复杂度)~~\n\n当$n$较小时可以直接预处理出来前$m$个($m$为以常数)\n\n不要存状态$\\text{dp}$，直接递归求解用$\\text{map}$维护记录即可\n\nps:实际上对于一个固定的$n$，每次计算$x$的答案时，可以根据当前的$\\lfloor \\cfrac{n} {x}\\rfloor$为状态编号，去掉了$\\text{map}$\n\n当$m=n^{\\frac{2} {3} }$时，复杂度最优为$O(n^{\\frac{2} {3} })$\n\n--------\n\n### 例子1：\n\n对于$F(n)=\\mu(n)$，求$S_\\mu(n)$\n\n由于$\\sum_{d|n}\\mu(d)=[n=1]$\n\n那么就知道可以构造$G(n)=1$\n\n则$(F\\oplus G)(n)=[n=1]$\n\n$S_{F\\oplus G}(n)=1$\n\n$\\displaystyle S_F(n)=S_{F\\oplus G}(n)-\\sum_2^nS_F(\\lfloor\\frac{n} {i}\\rfloor)$\n\n<br>\n\n-------------\n\n### 例子1.5\n\n$F(n)=\\mu(n)n^k$，求$S_F(n)$\n\n令$G(n)=n^k$\n\n则$\\displaystyle (F\\oplus G)(n)=\\sum _{d|n} \\mu(d)d^k (\\frac{n} {d})^k=n^k\\sum_{d|n} \\mu(d)=[n=1]\\cdot n^k$\n\n$\\displaystyle S_F(n)=1-\\sum_{i=2}^n i^kS_F(\\lfloor \\frac{n} {i}\\rfloor )$\n\n只要通过一些手段得到$i^k$前缀和即可\n\n<br>\n\n-----------------\n\n### 例子2：\n\n对于任何$F(n)=\\sum_{d|n}\\mu(d)H(\\frac{n} {d})$，其中$H(n)$前缀和可以求\n\n类似上面的，构造$G(n)=1$\n\n$(F\\oplus G)(n)=\\sum_{d|n}H(d)\\sum_{k|\\frac{n} {d} }\\mu(k)=H(n)$\n\n$\\displaystyle S_F(n)=S_{H}(n)-\\sum_2^nS_F(\\lfloor\\frac{n} {i}\\rfloor)$\n\n$$ \\ $$\n\n### 例子3+3.5:\n\n$F(n)=\\varphi(n)\\cdot n^k$，求$S_F(n)$\n\n性质：$\\displaystyle \\sum_{d|n}\\varphi(d)=n$\n\n原理简要证明：满足$\\gcd(i,n)=\\frac{n} {d}$的$i$共有$\\varphi(d)$个，则累和就是枚举了所有$\\gcd(i,n)$进行统计\n\n所以构造$G(n)=n^{k}$\n\n$\\displaystyle (F\\oplus G)(n)=\\sum_{d|n}F(d)G(\\frac{n} {d})=\\sum_{d|n} \\varphi(d)d^k(\\frac{n} {d})^{k}=\\sum_{d|n} \\varphi(d) n^{k}=n^{k+1}$\n\n同样的只需要求出\n\n$\\displaystyle S_{F\\oplus G}(n)=\\sum_{i=1}^n i^{k+1}$\n\n$\\displaystyle S_G(n)=\\sum_{i=1}^n i^k$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["学习笔记"]},{"title":"「HAOI2018」字串覆盖","url":"/articles/2021/04/07/33c832ae.html","content":"# 「HAOI2018」字串覆盖\n\n这自然有后缀数组和后缀自动的写法，我写的是后缀数组\n\n现对于$A,B$两串拼接后建立$\\text{SA}$\n\n对于查询的四个参数$[s,t,l,r]$，在$\\text{SA}$上找到能够匹配$[l,r]$的$\\text{rank}$区间$[l',r']$\n\n这个$[l',r']$就用$\\text{SA}$的$\\text{height}$数组上倍增即可$O(\\log n)$找到\n\n由于$K>n$，显然覆盖就是从左到右依次匹配每个$\\text{rank}$在$[l',r']$中的$i$，能放就放\n\n数据范围提示我们切分写\n\n### Part1 $r-l\\leq 50$\n\n对于每种不同的$r-l$，倍增预处理\n\n我们将依次匹配的过程描述成一个个跳跃\n\n对于每个$i$找到后面第一个$j$满足$j>i+r-l,\\text{LCP}(i,j)\\ge r-l+1$\n\n具体的，将$\\text{SA}$的$\\text{height}$数组按照$\\text{height}_p\\ge r-l+1$分成一段一段\n\n每个连续段中的两个位置$\\text{LCP}\\ge r-l+1$\n\n合法的$i,j$一定出现的某个连续段中\n\n找到每一个这样一个连续段，然后双指针得到合法的$i,j$即可\n\n$$ \\ $$\n\n这样的跳跃关系，以及跳跃过程中的答案，可以通过倍增来维护出来\n\n对于每个询问，可以先找到区间内第一个合法的点$i_0$，然后倍增查询答案即可\n\n找到$i_0$可以用主席树二分出$\\text{rank}$在$[l',r']$内的第一个$i_0\\ge s$的位置\n\n复杂度为$O(50n\\log n+q\\log n)$\n\n$$ \\ $$\n\n### Part2 $r-l>50$\n\n根据数据范围，这里我们只要能够暴力跳每一个合法的$i$即可\n\n那么像上面一样，用主席树每次找$[l',r']$内第一个$i'> i+r-l$\n\n每次$\\log n$跳即可，复杂度为$O(\\frac{nq} {r-l}\\log n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\nint rd(){\n    int s=0,f=0;\n    while(!isdigit(IO=getchar())) f|=IO=='-';\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return f?-s:s;\n}\n\nconst int N=2e5+10,M=N*18,S=60;\n\nint n,K,q;\nchar s[N];\nint cnt[N],rk[N<<1],tmp[N],sa[N];\nint st[19][N],Log[N];\nvoid Build() {\n    rep(i,1,n) cnt[(int)s[i]]++;\n    rep(i,1,200) cnt[i]+=cnt[i-1];\n    drep(i,n,1) sa[cnt[(int)s[i]]--]=i;\n    rep(i,1,n) rk[sa[i]]=rk[sa[i-1]]+(s[sa[i]]!=s[sa[i-1]]);\n    for(int m=rk[sa[n]],k=1;k<n && m<n;k<<=1,m=rk[sa[n]]) {\n        int h=0;\n        rep(i,n-k+1,n) tmp[++h]=i;\n        rep(i,1,n) if(sa[i]>k) tmp[++h]=sa[i]-k;\n\n        memset(cnt,0,(m+1)<<2);\t\n        rep(i,1,n) cnt[rk[i]]++;\n        partial_sum(cnt+1,cnt+m+1,cnt+1);\n        drep(i,n,1) sa[cnt[rk[tmp[i]]]--]=tmp[i];\n        rep(i,1,n) tmp[sa[i]]=tmp[sa[i-1]]+(rk[sa[i]]!=rk[sa[i-1]] || rk[sa[i]+k]!=rk[sa[i-1]+k]);\n        memcpy(rk,tmp,(n+1)<<2);\n    }\n    rep(i,2,n) Log[i]=Log[i>>1]+1;\n    int h=0;\n    rep(i,1,n) {\n        int j=sa[rk[i]-1];\n        if(h) h--;\n        while(s[i+h]==s[j+h]) h++;\n        st[0][rk[i]-1]=h;\n    }\n    rep(i,1,Log[n]) {\n        int len=1<<(i-1);\n        rep(j,1,n-len+1) st[i][j]=min(st[i-1][j],st[i-1][j+len]);\n    }\n}\n\nint ls[M],rs[M],c[M],rt[N],tcnt;\nvoid Upd(int &p,int pre,int l,int r,int x){\n    c[p=++tcnt]=c[pre]+1,ls[p]=ls[pre],rs[p]=rs[pre];\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    x<=mid?Upd(ls[p],ls[pre],l,mid,x):Upd(rs[p],rs[pre],mid+1,r,x);\n}\nint Que(int p1,int p2,int l,int r,int x){\n    if(c[p1]==c[p2] || r<x) return n+1;\n    if(l==r) return l;\n    int mid=(l+r)>>1,t=Que(ls[p1],ls[p2],l,mid,x);\n    return t<=n?t:Que(rs[p1],rs[p2],mid+1,r,x);\n}\n\nvector <int> G[S];\nint A[N],B[N],L[N],R[N],X[N];\nll ans[N];\nll H[20][N]; int F[20][N];\nint D[N],C;\n\nint main(){\n    n=rd(),K=rd();\n    scanf(\"%s\",s+1),scanf(\"%s\",s+n+1);\n    n*=2,Build(),n/=2;\n    rep(i,1,n*2) {\n        rt[i]=rt[i-1];\n        if(sa[i]<=n) Upd(rt[i],rt[i],1,n,sa[i]);\n    }\n    rep(i,1,q=rd()) {\n        A[i]=rd(),B[i]=rd();\n        int l=rd(),x=rd()-l+1,r=l=rk[l+n];\n        drep(j,18,0) {\n            if(r+(1<<j)<=n*2 && st[j][r]>=x) r+=1<<j;\n            if(l>(1<<j) && st[j][l-(1<<j)]>=x) l-=1<<j;\n        }\n        L[i]=l,R[i]=r,X[i]=x;\n        if(n<=5000 && q<=5000) {\n            int p=A[i],e=B[i]-x+1;\n            while(p<=e) {\n                while(p<=e && (rk[p]<l || rk[p]>r)) p++;\n                if(p>e) break;\n                ans[i]+=K-p,p+=x;\n            }\n        } else if(X[i]>=S) {\n            int p=A[i],e=B[i]-x+1;\n            while(p<=e) {\n                int c=0;\n                while(++c<5 && p<=e && (rk[p]<l || rk[p]>r)) p++;\n                if(p>e) break;\n                if(rk[p]<l || rk[p]>r) p=Que(rt[l-1],rt[r],1,n,p);\n                if(p>e) break;\n                ans[i]+=K-p,p+=x;\n            }\n        } else G[X[i]].pb(i);\n    }\n    rep(x,1,S-1) if(G[x].size()) {\n        rep(i,1,n) F[0][i]=n+1;\n        rep(i,0,17) F[i][n+1]=n+1;\n        rep(i,1,n*2) {\n            int j=i;\n            while(j<n*2 && st[0][j]>=x) j++;\n            C=0;\n            rep(k,i,j) if(sa[k]<=n) D[++C]=sa[k];\n            if(C) {\n                sort(D+1,D+C+1);\n                int j=1;\n                rep(i,1,C) {\n                    while(j<=C && D[j]-D[i]<x) j++;\n                    if(j<=C) F[0][D[i]]=D[j];\n                }\n            }\n            i=j;\n        }\n        rep(i,1,n) H[0][i]=K-i;\n        rep(j,1,17) rep(i,1,n) {\n            F[j][i]=F[j-1][F[j-1][i]];\n            H[j][i]=H[j-1][i]+H[j-1][F[j-1][i]];\n        }\n        rep(d,0,G[x].size()-1) {\n            int i=G[x][d],e=B[i]-x+1;\n            int p=Que(rt[L[i]-1],rt[R[i]],1,n,A[i]);\n            if(p>e) continue;\n            drep(j,17,0) if(F[j][p]<=e) {\n                ans[i]+=H[j][p];\n                p=F[j][p];\n            }\n            ans[i]+=H[0][p];\n        }\n    }\n    rep(i,1,q) printf(\"%lld\\n\",ans[i]);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"拟阵","url":"/articles/2021/04/06/f66a8573.html","content":"# 拟阵\n\n(latest updated on 2020-08-10)\n\n大量基础定义警告，参考了wiki和2018论文《浅谈拟阵的一些拓展及其应用》，如果想看大段详细证明请移步论文\n\n拟阵的概念比较抽象，有多种定义方法，结合这些定义方法可以更具体地了解拟阵的基础性质\n\n### 前言\n\n很多问题可以转化为拟阵，但是并不是所有问题都可以通过简单的拟阵操作得到答案\n\n在具体问题中，很多时候有着更优的算法解决拟阵运算无法解决的操作\n\n但是对于一个奇怪的问题，如果转化为类似拟阵的操作后，就有很多性质可以拿过来套\n\n拟阵的应用，更多还是用 **诸多的性质** 把复杂,抽象问题向更简单的方向转化~~(便于乱搞)~~\n\n也可以便于简化问题的证明，所以这个东西了解一下也差不多了\n\n~~(不会有人丧心病狂到专门出一个拟阵交的题吧)~~\n\n$$ \\ $$\n\n### 符号及约定\n\n$|S|$集合大小\n\n$S-T$，删除$S$中在$T$中的元素\n\n$a\\Rightarrow b$若$a$则$b$\n\n$a\\Leftrightarrow b$，$a,b$等价\n\n$a\\in b$元素$a$是集合$b$中的一个元素\n\n$a\\sube b$，集合$a$是集合$b$的子集\n\n$\\exists$ 存在\n\n$\\forall$ 任意\n\n### 幂集\n\n一个集合$S$的所有$2^{|S|}$个子集构成的集合是$S$的幂即$P(S)$或者$2^S$\n\n### 集族\n\n给定集合$S$ 的**一些子集**构成的类$F$叫做$S$的**子集族**（或称*S* 上的**集合族**）,$F \\sube 2^S$\n\n$$ \\ $$\n\n### 用独立集定义拟阵(似乎是最直观的定义)\n\n 一个二元组$M=(E,I)$，其中$E$是**基础集**，$I$是$E$的**一些子集构成的集族**(即$I\\sube 2^S$)，称之为**独立集**，在独立集中的子集称之为独立的\n\n拟阵可以用独立集$I$定义，则$I$需满足性质:\n\n1.空集：有$\\emptyset \\in I$，所以有$I\\ne \\emptyset$\n\n2.遗传性：若$A\\sube B,B\\in I$，则$ A\\in I$\n\n3.扩充性：若$\\exists A,B\\in I,|A|>|B|$，则$\\exists i\\in A,(B\\cup \\{i\\}) \\in I$\n\n例子：对于$S=\\{1,2,3\\}$，$\\{\\emptyset \\},\\{\\emptyset,\\{1\\} \\}$是合法的独立集，但$\\{\\emptyset,\\{1\\},\\{2\\},\\{3\\},\\{2,3\\} \\}$不是，因为它不满足扩充性\n\n$\\{ \\{1,2\\},\\{2,3\\},\\{1\\},\\{2\\},\\{3\\},\\{\\emptyset \\} \\}$也是合法的独立集\n\n对于$S=\\{1,2,3,4,5\\}$,$I=\\{ \\{1,2,3\\},\\{3,4,5\\},\\{1,2\\},\\{2,3\\},\\{1,3\\},\\{3,4\\},\\{3,5\\},\\{4,5\\},\\{1\\},\\{2\\},\\{3\\},\\{5\\},\\{\\emptyset\\} \\}$不是合法的独立集，因为它不满足扩充性($A=\\{1,2,3\\},B=\\{3,4\\}$时)\n\n$$ \\ $$\n\n### 用基底和基定义拟阵(似乎是最简洁的描述)\n\n基底:$E$的一个**独立的极大子集**称为其的一个基底，独立的极大子集即其加入任意元素得到的子集不独立\n\n基:$E$的基$B$为其所有基底构成的集合\n\n拟阵可以用基$B$定义，则$B$需满足性质:\n\n1.非空：$B\\ne \\emptyset$，最小的$B=\\{\\emptyset\\}$\n\n2.交换公理：对于两个基底$a,b$，若用$b$中$a$没有的元素换掉一个$a$中原先的元素，得到的集合依然是基底\n\n推论：基底等大，即$\\forall a\\in B,b\\in B,|a|=|b|$(否则就不满足扩充性)\n\n例如：若$\\{1,2\\},\\{1,3\\}$是基底，则$\\{2,3\\}$也是基底(否则不满足扩充性)\n\n可以得到拟阵的等价定义，且$I=\\bigcup _{T\\in B} 2^T$\n\n$$ \\ $$\n\n###用环路集定义拟阵\n\n环路:$S$的一个子集是环路，则这个子集是一个极小的**非独立集**，即去掉任意一个元素都会称为独立集\n\n所有环路构成的集合称为环路集$C$，如对于$E=\\{1,2\\},I=\\{\\emptyset,\\{1\\} \\}$，环路集为$\\{ \\{2\\} \\}$\n\n拟阵可以用环路集$C$定义，则$C$需满足性质：\n\n1.$C$可以为空(此时$I=P(S)$)，且$\\emptyset \\not \\in C$\n\n2.环路互相之间不是真子集，即$\\exists a\\in C,b\\in C,a\\sube b\\Rightarrow a=b$ (否则不满足遗传性)\n\n3.若$\\exists a\\in C,b\\in C,a\\ne b$以及一个元素$i\\in a\\cap b$，则$a\\cup b-\\{i\\}$不是独立集\n\n推论：$A\\sube I \\Leftrightarrow \\nexists B\\in C,B\\sube A$\n\n环路不一定等大\n\n$$ \\ $$\n\n### 环路和基底的一些关系\n\n1.环路和基底之间不能通过加减一个元素转化\n\n2.基底加上一个元素得到的非独立集恰好包含一个环路\n\n$$ \\ $$\n\n### 拟阵的秩\n\n拟阵的秩：拟阵的任意一个**基底的元素个数**是其秩$r$\n\n为了同下文的秩函数相对应，也可说{%raw%}$\\begin{aligned}r=\\max_{R\\in I} \\{|R|\\}\\end{aligned}${%endraw%}，即最大的独立集大小\n\n$$ \\ $$\n\n### 用秩函数定义拟阵\n\n对于元素集$S$\n\n若可以定义一个在$2^S$上的秩函数$r(T)$，满足以下性质:\n\n1.大小有界:$r(T)\\in[0,|T|]$\n\n2.大小传递性:$A\\sube B\\Rightarrow r(A)\\le r(B)$\n\n3.次模性:$r(A\\cup B)+r(A\\cap B)\\le r(A)+r(B)$\n\n那么可以用这样的一个秩函数定义一个拟阵$M=(S,r)$，此时$r(T)$为$2^T$中极大的独立集大小，且拟阵的独立集就是$I=\\{T|T\\sube S,r(T)=|T|\\}$\n\n$$ \\ $$\n\n### 例子\n\n均匀拟阵：$U_n^k=(S,I),|S|=n,I=\\{T|T\\sube S,|T|\\leq k\\}$\n\n图拟阵：\n\n对于无向图$G=(V,E)$，它的生成拟阵是$M=(E,\\{T|T\\sube E,T无环\\})$\n\n它的最大独立子集大小为$G$的最大生成森林边数，每个最大生成森林都是基底\n\n匹配拟阵：\n\n对于无向图$G=(V,E)$，它的匹配拟阵是$M=(V,\\{T|T\\sube V,存在一个边匹配覆盖T\\})$\n\n它的最大的独立子集大小为k最大匹配数，每个最优匹配的方案都是基底\n\n异或线性基：\n\n对于非负整数可重集合$S$，拟阵是$M=(S,\\{T|T\\sube S,T中的元素任意异或不会得到0\\})$\n\n(这是向量空间的线性基问题的一种)\n\n$$ \\ $$\n\n\n\n$$ \\ $$\n\n\n\n----------------------------\n\n注意分清楚 **定义需要满足的条件** 和 **通过条件推导得到的性质** 的区别 ，上面几种拟阵定义是等价的\n\n$$ \\ $$\n\n$$ \\ $$\n\n\n\n\n\n## 一些应用\n\n### 求最大权值独立子集\n\n对于拟阵$M=(S,I)$，给每个$S$中每个元素一个非负权值，定义一个集合的权值为所有元素权值和，要求最大权值的独立子集\n\n这是一个非常简单的问题，直接从大到小能加入就加入即可，设最终选出的集合为$P$\n\n证明:\n\n1.$P\\in B$，否则可以再加入元素\n\n2.假设存在更优解$Q\\in B$，根据基底交换公理，一定可以用$P$中一个权值更大的元素换掉$Q$中一个元素，所以$Q$不是合法集合\n\n在连通图拟阵上使用该算法，就是$\\text{Kruskal}$最小生成数算法\n\n在异或线性基上使用该算法，可以求得最大权值线性基\n\n$$ \\ $$\n\n### 拟阵交\n\n对于同基础集的拟阵$M_1=(S,I_1),M_2=(S,I_2)$，它们的交是独立集的交\n\n但是它们的交不一定是拟阵\n\n求解最大交:最小最大定理:\n\n{%raw%}$\\begin{aligned} \\max_{A\\in (I_1\\cup I_2)} \\{|T|\\}=\\min_{R\\in S} \\{r_1(R)+r_2(S-R)\\}\\end{aligned}${%endraw%}\n\n这个东西的证明分为两步:\n\n1.证明$\\max\\leq \\min$\n\n$|T|=|T\\cap R|+|T\\cap (S-R)|\\leq r_1(R)+r_2(S-R)$\n\n2.介绍找到两个最值的算法\n\n这个算法的中心是，从空集开始扩展$T$，并且相应找到对应的$R$使得$|T|=r_1(R)+r_2(S-R)$，此时答案已经充分了\n\n求解拟阵交的算法基于一个构造的图\n\n对于当前的答案$T$，构造一个**有向二分图**，两侧点集分别为$T,S-T$\n\n对于分别在两侧的点$x,y$，\n\n存在$x\\rightarrow y$的边: 当$T$中把$x$换成$y$之后是$M_1$的独立子集\n\n存在$y\\rightarrow x$的边: 当$T$中把$y$换成$x$之后是$M_2$的独立子集\n\n设对于$I_1,I_2$可行的增广元素集合为$X_1,X_2 $(即加入元素后依然独立的集合)\n\n每次的增广过程可以描述为:\n\n(1.如果$X_1\\cap X_2\\ne \\emptyset$，直接都加入$T$)\n\n2.构图，找到一条从$X_1$的点出发，到达$X_2$的的**最短的**路径$P$(广搜即可)，将$I$变为$I\\bigoplus P$ (这里原文是对称差，但是异或大家都懂哈)\n\n当不存在增广时，找到了最大的$T$，此时对应合法的$R$为$\\{e\\in S|在图中存在e到达X_2的路径\\}$\n\n由于每次增广至少增加一个元素，该算法的复杂度上限为$O(r|S|^2)$，其中$r$为拟阵的秩，$|S|^2$为边数\n\n$$ \\ $$\n\n#### 带权拟阵交\n\n每个元素带权\n\n在增广时，图上每个点加上点权(加入为正，删除为负)，每次求出点权最短路进行增广即可\n\n$$ \\ $$\n\n### 拟阵交的应用\n\n#### 二分图匹配问题\n\n二分图匹配匈牙利算法 是 求解拟阵交的问题 的一种特殊情况\n\n对于二分图$G=(V_1,V_2,E)$，构造\n\n$M_1=(E,I=\\{T\\sube E|T中的边在V_1上没有公共点\\})$\n\n$M_2=(E,I=\\{T\\sube E|T中的边在V_2上没有公共点\\})$\n\n答案就是$M_1,M_2$交的最大值，匈牙利算法增广的过程是依次考虑$X_1$中的元素进行增广\n\n(带权的二分图匹配问题，实际也是可以用拟阵解决的，但是好像$\\text{KM}$还是最棒的)\n\n$$ \\ $$\n\n拟阵交还可以解决一些看起来很抽象的 **带有两个限制的** (可能带权) 的问题，比如论文里下面的这个例子\n\n(Colorful Tree): 对于一个无向图，每条边给定一个颜色和一个权值，求颜色不能重复的最大生成树\n\n类似这样的问题可以转化为拟阵交问题，但是这个东西的局限性实在太大，也没有人敢动\n\n$$ \\ $$\n\nupdate:\n\n~~有生之年竟然用上了这个东西？~~\n\n**模拟赛有人搞了一个题:\n\n对于一个无向图$G=(V,E),E=(u,v,w)$，其中$w$为每条边的颜色\n\n要求选出一个最大的边集，满足：\n\n1.每种颜色$i$选出的边不超过$c_i$条\n\n2.选出的边不构成简单环\n\n然后写了一次不太正规的拟阵交模板\n\n令$M1$为个数的拟阵，$M2$为生成树拟阵\n\n解释在代码里\n\n```cpp\n\nint n,m,k;\nint A[N],I[N];\n// A为颜色个数的限制\nint U[N],V[N],W[N],F[N];\n// U,V,W为边\n// F 为并查集\nint Find(int x){ return F[x]==x?x:F[x]=Find(F[x]); }\nint X[N],Y[N],P[N];\n\n// 处理生成树的情况\nvector <int> G[N];\nint fa[N],fe[N],dep[N];\nvoid dfs(int u,int f){\n\tdep[u]=dep[fa[u]=f]+1;\n\tfor(int i:G[u]) {\n\t\tint v=U[i]==u?V[i]:U[i];\n\t\tif(v==f) continue;\n\t\tfe[v]=i,dfs(v,u);\n\t}\n}\n\nint main(){\n\tfreopen(\"forget.in\",\"r\",stdin),freopen(\"forget.out\",\"w\",stdout);\n\tn=rd(),m=rd(),k=rd();\n\trep(i,1,k) A[i]=rd();\n\trep(i,1,m) U[i]=rd(),V[i]=rd(),W[i]=rd();\n\trep(i,1,n) F[i]=i;\n\twhile(1) {\n\t\tint f=0;\n        // X, Y分别为 M1,M2的可拓展集合\n        // I 记录已经在选边方案里的边\n\t\trep(i,1,m) if(!I[i]) {\n\t\t\tX[i]=A[W[i]]>0,Y[i]=Find(U[i])!=Find(V[i]);\n            // 如果X,Y有交，就直接加入集合\n\t\t\tif(X[i] && Y[i]) {\n\t\t\t\tA[W[i]]--,F[Find(U[i])]=Find(V[i]);\n\t\t\t\tI[i]=1,f=i;\n\t\t\t}\n\t\t} else X[i]=Y[i]=0;\n\t\tif(f) continue;\n\t\tstatic queue <int> que;\n\t\twhile(!que.empty()) que.pop();\n        // 预处理当前的生成树，便于处理M2的限制\n\t\trep(i,1,n) G[i].clear();\n\t\trep(i,1,m) if(I[i]) G[U[i]].pb(i),G[V[i]].pb(i);\n\t\trep(i,1,n) dep[i]=0;\n\t\trep(i,1,n) if(!dep[i]) dfs(i,0);\n        // 从X中的某一个点出发\n\t\trep(i,1,m) if(X[i]) que.push(i),P[i]=-1;\n\t\telse P[i]=0;\n\t\tf=0;\n        // 广搜找交替 替换路径\n\t\twhile(!que.empty()) {\n\n\t\t\tint u=que.front(); que.pop();\n            // 找到一条满足X->Y的交替路径\n\t\t\tif(Y[u]){ f=u; break; }\n\t\t\tif(I[u]) {\n                // u->v，交换之后满足M1\n\t\t\t\trep(v,1,m) if(!P[v] && !I[v] && A[W[v]]+(W[u]==W[v])) P[v]=u,que.push(v);\n\t\t\t} else {\n                // 满足拟阵M2，即交换这条边之后还是生成树，可以从目前生成树上的环上选取能够替换的边\n\t\t\t\tint x=U[u],y=V[u];\n\t\t\t\tif(Find(x)!=Find(y)) {\n\t\t\t\t\trep(v,1,m) if(!P[v] && I[v]) \n\t\t\t\t\t\tP[v]=u,que.push(v);\n\t\t\t\t} else {\n\t\t\t\t\twhile(x!=y) {\n\t\t\t\t\t\tif(dep[x]<dep[y]) swap(x,y);\n\t\t\t\t\t\tint i=fe[x];\n\t\t\t\t\t\tif(!P[i]) P[i]=u,que.push(i);\n\t\t\t\t\t\tx=fa[x];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(!f) break;\n        // 放置交替方案\n\t\twhile(~f) {\n\t\t\tA[W[f]]+=I[f]?1:-1;\n\t\t\tI[f]^=1,f=P[f];\n\t\t}\n\t\tint cnt=0;\n\t\trep(i,1,m) if(I[i]) cnt++;\n        // 重构并查集\n\t\trep(i,1,n) F[i]=i;\n\t\trep(i,1,m) if(I[i]) F[Find(U[i])]=Find(V[i]);\n\t}\n\tint cnt=0;\n\trep(i,1,m) if(!I[i]) cnt++;\n\tprintf(\"%d\\n\",cnt);\n\trep(i,1,m) if(!I[i]) printf(\"%d \",i);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"幂前缀和的生成函数","url":"/articles/2021/04/06/b146e91f.html","content":"# 幂前缀和的生成函数\n\n问题描述：\n\n对于给定的大数$m$，求$\\displaystyle k\\in[1,n],F_k=\\sum _{i=1}^m i^k$\n\n$F_k=\\sum _{i=1}^m i^k$，每一项的组合意义即：为$k$个元素每个染上$i$种颜色中的一个\n\n#### 下面是用斯特林数的推导\n\n带入第二类斯特林数的组合意义，得到\n\n$\\displaystyle F_k=\\sum_{i=1}^m \\sum_{j=0}^{\\infty} \\binom{i} {j}\\begin{Bmatrix}k\\\\ j\\end{Bmatrix}j!$\n\n合并外层循环的组合数前缀和\n\n$\\displaystyle F_k=\\sum_{i=0}^{\\infty} \\binom{m+1} {i+1}\\begin{Bmatrix}k\\\\ i\\end{Bmatrix}i!$\n\n我们知道第二类斯特林数的$\\text{EGF}$\n\n$\\displaystyle S(x)=\\sum \\begin{Bmatrix}i\\\\m \\end{Bmatrix}\\frac{x^i} {i!}=\\frac{1} {m!}(e^x-1)^m$\n\n其意义是合并每一种颜色的元素的$\\text{EGF}$，要求每种颜色个数$\\ge 1$，同时颜色之间无序，最后除掉\n\n\n带入$F_k$的式子，得到$F_k$的$\\text{EGF}$\n\n$\\displaystyle F(x)=\\sum \\binom{m+1} {i+1}(e^x-1)^i$\n\n带入二项展开\n\n$\\displaystyle F(x)=\\frac{e^{(m+1)x}-1} {e^x-1}$\n\n-----------------\n\n停停停\n\n这个东西不是直接根据$[x^n]e^{ax}=\\cfrac{a^n} {n!}$\n\n就会发现是$\\displaystyle \\sum_{i=0}^m e^{ix}=\\frac{e^{(m+1)x}-1} {e^x-1}$吗\n\n#### 线性解法\n\n待补。。。\n\n","tags":["default tag"],"categories":["default category"]},{"title":"Luogu P7445「EZEC-7」线段树","url":"/articles/2021/04/05/9e225749.html","content":"#  Luogu P7445「EZEC-7」线段树\n\n显然一个点是否被$\\text{push_down}$仅取决于所有完全包含它的操作区间权值之和\n\n那么可以考虑对于每个节点计算概率，然后累加\n\n反向计算一个节点不被$\\text{push_down}$的概率，即权值之和为$0$的概率\n\n而每个节点有自己被覆盖的概率，即$p_i=\\cfrac{l\\cdot (n-r+1)} {n(n+1)/2}$\n\n而覆盖的次数$c$决定了这个概率贡献的权值，即$p_i^c(1-p_i)^{m-c}$\n\n由此得到一个思路：\n\n先通过计算得到$k$次覆盖权值为0的函数$A(x)$\n\n容易发现这样得到每个点的概率为：$A(\\cfrac{p_i} {1-p_i})(1-p_i)^m$\n\nNaive地带入多点求值，就能暴力得到\n\n<br>\n\n<br>\n\n### 计算$k$次被覆盖权值和为0的方案数\n\n容易发现就是\n\n$\\displaystyle [x^0](\\sum_{i=-1}^V x^i)^k=[x^0](x^{-1}\\frac{1-x^{V+2} } {1-x})^k$\n\n暴力展开这个式子会需要对于$(x^{V+2}-1)^k$有用的项只有$\\frac{k} {V+2}$项\n\n即原式$\\displaystyle =[x^k](\\frac{1-x^{V+2} } {1-x})^k=\\sum_{i=0}^{k}\\binom{2k-i-1} {k-1}[x^i](1-x^{V+2})^k$\n\n$\\displaystyle =\\sum_{i=0}^{\\frac{k} {V+2} } \\binom{2k-i(V+2)-1)} {k-1} (-1)^i \\binom{k} {i}$\n\n(第一个组合数是组合意义插板，第二个是二项展开)\n\n求$k$的权值需要$O(\\frac{k} {V})$，并不好直接卷积优化\n\n<br>\n\n<br>\n\n由于涉及了类似$[x^n]G^k(x)$的形式，考虑用 \"另类拉格朗日反演\" 求解\n\n[如果想参考一下，但是EI的课件我是真的看不懂](https://www.cnblogs.com/chasedeath/p/14421599.html)\n\n处理一下$x$的负指数，设$\\displaystyle F(x)=\\sum _{i=0}^{V+1}x^i$，转化为$[x^0](\\frac{F(x)} {x})^k$\n\n然而不管是$F(x)$还是$\\frac{F(x)} {x}$都不存在复合逆，但是$\\frac{x} {F(x)}$有\n\n设$G(x)$为$\\frac{x} {F(x)}$的复合逆\n\n$\\displaystyle [x^0](\\frac{F(x)} {x})^k=[x^0](\\frac{x} {F(x)})^{-k}=[x^{k}]\\frac{xG'(x)} {G(x)}$\n\n求解$G(x)$即可得到所有$k$的值\n\n$G(x)$为$\\cfrac{x} {F(x)}=\\cfrac{x (x-1)} {x^{V+2}-1}$的复合逆\n\n即满足$\\cfrac{G(G-1)} {G^{V+2}-1}=x$\n\n$xG^{V+2}-G^2+G-x=0$\n\n这个形式还是比较易于进行牛顿迭代的\n\n$f(z)=xz^{V+2}-z^2+z-x$\n\n$f'(z)=(V+2)xz^{V+1}-2z+1$\n\n$\\displaystyle A=B-\\frac{f(B)} {f'(B)}=B-\\frac{xB^{V+2}-B^2+B-x} {(V+2)xB^{V+1}-2B+1}$\n\n边界条件为$[x^0]G(x)=0$，$[x^1]G(x)=1$\n\n~~结果牛顿迭代需要多项式快速幂~~\n\n<br>\n\n<br>\n\n### 有关多点求值的优化\n\n由于我们并不需要知道每个点被操作的概率，只需要一个求和，因此可以对于每一项求出\n\n设$a_i=\\cfrac{p_i} {1-p_i},b_i=(1-p_i)^m$，容易发现实际上求出的式子是\n\n$A(\\cfrac{p_i} {1-p_i})(1-p_i)^m=\\sum A_j\\sum_i a_i^j b_i$\n\n对于每个$j$求解，就是\n\n$\\displaystyle [x^j]\\sum _i \\frac{b_i} {1-a_ix}$\n\n可以分治$\\text{NTT}$通分，也就是写成下式\n\n$\\displaystyle \\frac{1} {\\prod (1-a_ix)} \\sum b_i \\prod_{i!=j} (1-a_jx)$\n\n右边就是一个经典的分治$\\text{NTT}$问题，再加上一次求逆即可\n\n~~好像也不一定快吧~~\n\n<br>\n\n<br>\n\n接下来就是套板板时间\n\n```cpp\nconst int N=1<<19,P=998244353;\n\nint n,m,k;\n\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\ntypedef vector <int> V;\nint rev[N],w[N];\nint Inv[N+1],I[N+1],J[N+1];\nvoid Init_w() {\n\tint N=1; while(N<=max(n,m+1)*2+4) N<<=1;\n\tint t=qpow(3,(P-1)/N);\n\tw[N/2]=1;\n\trep(i,N/2+1,N-1) w[i]=1ll*w[i-1]*t%P;\n\tdrep(i,N/2-1,1) w[i]=w[i<<1];\n\tInv[0]=Inv[1]=1;\n\trep(i,2,N) Inv[i]=1ll*(P-P/i)*Inv[P%i]%P;\n\trep(i,*I=*J=1,N) {\n\t\tI[i]=1ll*I[i-1]*Inv[i]%P;\n\t\tJ[i]=1ll*J[i-1]*i%P;\n\t}\n}\nint Init(int n){\n\tint R=1,c=-1;\n\twhile(R<=n) R<<=1,c++;\n\trep(i,1,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<c);\n\treturn R;\n}\n\n/*\n被隐藏的部分:!!\nNTT\noperator *\noperator +\noperator -\n*/\n\nV operator ~ (V a) {\n\tint n=a.size();\n\tif(n==1) return V{(int)qpow(a[0],P-2)};\n\tV b=a; b.resize((n+1)/2); b=~b;\n\tint R=Init(n*2);\n\tNTT(R,a,1),NTT(R,b,1);\n\trep(i,0,R-1) a[i]=(2-1ll*a[i]*b[i]%P+P)*b[i]%P;\n\tNTT(R,a,-1),a.resize(n);\n\treturn a;\n}\nvoid Exp_Solve(V &A,V &B,int l,int r){\n\tstatic int X[N],Y[N];\n\tif(l==r) {\n\t\tB[l]=1ll*B[l]*Inv[l]%P;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tExp_Solve(A,B,l,mid);\n\tint R=Init(r-l+2);\n\trep(i,0,R) X[i]=Y[i]=0;\n\trep(i,l,mid) X[i-l]=B[i];\n\trep(i,0,r-l-1) Y[i+1]=A[i];\n\tNTT(R,X,1),NTT(R,Y,1);\n\trep(i,0,R-1) X[i]=1ll*X[i]*Y[i]%P;\n\tNTT(R,X,-1);\n\trep(i,mid+1,r) B[i]+=X[i-l],Mod1(B[i]);\n\tExp_Solve(A,B,mid+1,r);\n}\nV Deri(V a){\n\trep(i,1,a.size()-1) a[i-1]=1ll*i*a[i]%P;\n\ta.pop_back();\n\treturn a;\n}\nV Integ(V a) {\n\ta.pb(0);\n\tdrep(i,a.size()-1,1) a[i]=1ll*a[i-1]*Inv[i]%P;\n\treturn a[0]=0,a;\n}\n\nV operator << (V A,const int &x){\n\tA.resize(A.size()+x);\n\tdrep(i,A.size()-1,x) A[i]=A[i-x];\n\trep(i,0,x-1) A[i]=0;\n\treturn A;\n}\nV operator >> (V A,const int &x){\n\trep(i,x,A.size()-1) A[i-x]=A[i];\n\tA.resize(A.size()-x);\n\treturn A;\n}\n\nV Ln(V a){\n\tint n=a.size();\n\ta=Deri(a)*~a,a.resize(n-1);\n\treturn Integ(a);\n}\nV Exp(V F){\n\tint n=F.size(); F=Deri(F);\n\tV A(n); A[0]=1;\n\tExp_Solve(F,A,0,n-1);\n\treturn A;\n}\nV Pow(V x,int k) {\n\tint d=0,n=x.size();\n\twhile(d<n && !x[d]) d++;\n\tif(1ll*d*k>=n){\n\t\trep(i,0,x.size()-1) x[i]=0;\n\t\treturn x;\n\t}\n\tx=x>>d,x.resize(n),x=Ln(x);\n\trep(i,0,n-1) x[i]=1ll*x[i]*k%P;\n\tx=Exp(x)<<(d*k),x.resize(n);\n\treturn x;\n}\n\nV Evaluate(V F,V X){\n\tstatic int ls[N<<1],rs[N<<1],cnt;\n\tstatic V T[N<<1];\n\tstatic auto TMul=[&] (V F,V G){\n\t\tint n=F.size(),m=G.size();\n\t\treverse(G.begin(),G.end());\n\t\tint R=Init(n);\n\t\tNTT(R,F,1),NTT(R,G,1);\n\t\trep(i,0,R-1) F[i]=1ll*F[i]*G[i]%P;\n\t\tNTT(R,F,-1); V T(n-m+1);\n\t\trep(i,0,n-m) T[i]=F[i+m-1];\n\t\treturn T;\n\t};\n\tstatic function <int(int,int)> Build=[&](int l,int r) {\n\t\tint u=++cnt; ls[u]=rs[u]=0;\n\t\tif(l==r) {\n\t\t\tT[u]=V{1,P-X[l]};\n\t\t\treturn u;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tls[u]=Build(l,mid),rs[u]=Build(mid+1,r);\n\t\tT[u]=T[ls[u]]*T[rs[u]];\n\t\treturn u;\n\t};\n\tint n=F.size(),m=X.size();\n\tcmax(n,m),F.resize(n),X.resize(n);\n\tcnt=0,Build(0,n-1);\n\tF.resize(n*2+1),T[1]=TMul(F,~T[1]);\n\tint p=0;\n\trep(i,1,cnt) if(ls[i]) {\n\t\tswap(T[ls[i]],T[rs[i]]);\n\n\t\tint R=Init(T[i].size()),n=T[i].size(),m1=T[ls[i]].size(),m2=T[rs[i]].size();\n\t\tNTT(R,T[i],1);\n\t\treverse(T[ls[i]].begin(),T[ls[i]].end()); reverse(T[rs[i]].begin(),T[rs[i]].end());\n\t\tNTT(R,T[ls[i]],1); NTT(R,T[rs[i]],1);\n\t\trep(j,0,R-1) {\n\t\t\tT[ls[i]][j]=1ll*T[ls[i]][j]*T[i][j]%P;\n\t\t\tT[rs[i]][j]=1ll*T[rs[i]][j]*T[i][j]%P;\n\t\t}\n\t\tNTT(R,T[ls[i]],-1); NTT(R,T[rs[i]],-1);\n\t\trep(j,0,n-m1) T[ls[i]][j]=T[ls[i]][j+m1-1];\n\t\tT[ls[i]].resize(n-m1+1);\n\t\trep(j,0,n-m2) T[rs[i]][j]=T[rs[i]][j+m2-1];\n\t\tT[rs[i]].resize(n-m2+1);\n\t\t\t\n\t} else X[p++]=T[i][0];\n\tX.resize(m);\n\treturn X;\n}\n\nV operator * (V A,const int &x){\n\trep(i,0,A.size()-1) A[i]=1ll*A[i]*x%P;\n\treturn A;\n}\n\nV Newton(int n){\n\tif(n==1) return V{0,1}; \n\tV G=Newton((n+1)/2); G.resize(n);\n\tV T=Pow(G,k+1);\n\tV A=((G*T)<<1)-G*G+G-V{0,1},B=(T<<1)*(k+2)-G*2+V{1};\n\tA.resize(n+1),B.resize(n+1),A=A*~B,A.resize(n+1);\n\treturn G-A;\n}\n\nV X,Y;\nvoid Build(int l,int r){ \n\tif(l==r) return;\n\tint prob=1ll*l*(n-r+1)%P*Inv[n]%P*Inv[n+1]%P*2%P;\n\tY.pb(P+1-prob);\n\tX.pb(prob*qpow(P+1-prob)%P);\n\tint mid=(l+r)>>1;\n\tBuild(l,mid),Build(mid+1,r);\n}\n\nint main(){\n\tn=rd(),m=rd(),k=rd(),Init_w();\n\tV F=Newton(m+1); \n\tF=Deri(F)*~(F>>1),F.resize(m+1);\n\tint t=1,inv=qpow(k+2);\n\trep(i,0,m) {\n\t\tF[i]=1ll*F[i]*t%P*J[m]%P*I[i]%P*I[m-i]%P;\n\t\tt=1ll*t*inv%P;\n\t}\n\tBuild(1,n);\n\tX=Evaluate(F,X);\n\tint ans=0;\n\trep(i,0,X.size()-1) ans=(ans+P+1-X[i]*qpow(Y[i],m))%P;\n\tMod2(ans),printf(\"%d\\n\",ans);\n}\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n$\\displaystyle F(x,z)=\\frac{1} {\\displaystyle 1-z\\sum_{i=-1}^{V} x^i}$\n\n我们希望知道$[x^0]F(x,z)$，然后根据$[z^k]$就能得到$k$次操作权值和为$0$的方案数\n\n考虑拉格朗日反演解二元函数\n\n设$\\displaystyle G(z)=z \\sum_{i=-1}^V x^i$，转化为求$\\displaystyle [z^1]\\frac{z} {1-G(z)}$\n\n设$H(z)$为$G(z)$的复合逆，带入扩展拉格朗日反演\n\n$\\displaystyle [z^1]\\frac{z} {1-G(z)}=[z^0]\\frac{1} {(1-z)^2}\\frac{z} {H(z)}$\n\n$H(z)$满足$=z$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["各大OJ"],"categories":["题解"]},{"title":"拉格朗日反演 (Lagrange Inversion) ","url":"/articles/2021/04/04/19870f1a.html","content":"# 拉格朗日反演 (Lagrange Inversion) \n\n### 复合逆\n\n对于$F(G(x))=x (\\Leftrightarrow G(F(x))=x)$，则称$F(x)$与$G(x)$互为复合逆，下文中记为$\\hat F(x)$\n\n存在复合逆的条件为$[x^0]F(x)=0,[x^1]F(x)\\ne 0$\n\n$$ \\ $$\n\n### 拉格朗日反演\n\n对于$G(x)=\\hat F(x)$得到关于$F(x)$的拉格朗日反演表达式\n\n$\\displaystyle [x^n]G(x)=\\frac{1} {n}[x^{-1}](\\frac{1} {F(x)})^n$\n\n由于$[x^0]F(x)=0$无法求逆，所以上式更通用的形式是\n\n$\\displaystyle [x^n]G(x)=\\frac{1} {n}[x^{n-1}](\\frac{x} {F(x)})^n$\n\n$$ \\ $$\n\n### 求解复合逆\n\n对于给定的$F(x)$，求其复合逆$G(x)=\\hat F(x)$\n\n带入拉格朗日反演的式子\n\n$\\displaystyle G(x)=\\sum \\frac{1} {i}[x^{i-1}](\\frac{x} {F(x)})^i x^i$\n\n求这个式子的核心是 分块+暴力\n\n$i=a\\cdot S+b,S=\\sqrt n$，对于每个$a,b$卷积求出$\\displaystyle (\\frac{x} {F(x)})^{Sa},(\\frac{x} {F(x)})^b$\n\n然后直接对于每个位置把两个式子暴力$O(n)$合并即可\n\n两部分复杂度总和为$O(n\\sqrt n\\log n+n^2)$\n\n$$ \\ $$\n\n### 扩展拉格朗日反演\n\n对于$G(x)=\\hat F(x)$，有$\\displaystyle [x^n]H(G(x))=\\frac{1} {n}[x^{n-1}]H'(x) (\\frac{x} {F(x)})^n$\n\n特殊情况例如\n\n$\\displaystyle [x^n]G^k(x)=\\frac{k} {n}[u^{n-k}](\\frac{u} {F(u)})^n=\\frac{k} {n}[u^{-k}]F(u)^{-n}$\n\n也就是$\\displaystyle n[x^n]G^k(x)=k[x^{-k}]F(x)^{-n}$\n\n$$ \\ $$\n\n$$ \\ $$\n\n该式子也可以用于处理$F(G(x))=H(x)$的情况\n\n此时，有$\\hat H(F(G(x)))=x$\n\n$G(x)=\\widehat {\\hat G(F(x))}=H(\\hat F(x))$\n\n带入得到$\\displaystyle [x^n]G(x)=[x^n]H(\\hat F(x))=\\frac{1} {n}[x^{n-1}]H'(x)(\\frac{x} {F(x)})^n$\n\n即$\\displaystyle [x^n]G(x)=\\frac{1} {n}[u^{n-1}]H'(u)(\\frac{u} {F(u)})^n$\n\n$$ \\ $$\n\n### 另类拉格朗日反演\n\n依然设$G(x)=\\hat F(x)$，则\n\n$\\displaystyle [x^n]G^k(x)=[x^{-k-1}]\\frac{F'(x)} {F^{n+1}(x)}$\n\n改一下是\n\n$\\displaystyle [x^n]G^k(x)=[x^{n-k}] F'(x)(\\frac{x} {F(x)})^{n+1}$\n\n更一般的\n\n$\\displaystyle [x^n]H(G(x))=[x^n]H(x)F'(x)(\\frac{x} {F(x)})^{n+1}$\n\n用途：\n\n你会发现对于不同的$k$，$[x^n]G^k(x)$对应的系数居然来自同一个函数$\\displaystyle \\frac{F'(x)} {F^{n+1}(x)}$\n\n因此用于处理求多个$k$的问题\n\n-----------------\n\n$$ \\ $$\n\n$$ \\ $$\n\n后记：\n\n明明自己什么都不会还要写博客。。。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「ZJOI2018」树","url":"/articles/2021/03/30/b3364564.html","content":"# 「ZJOI2018」树\n\n##### 前言\n\n~~置换同构计数真是令人头大，感觉依然不是特别懂~~\n\n$$ \\ $$\n\n### 分析与初步构想\n\n------------\n\n设按照题意生成的$n$个节点有标号有根树族为$\\mathcal{T}_n$，对于某种树形$T$的生成方案数为$c(T)$\n\n则答案显然是$\\cfrac{\\sum _{T\\in \\mathcal{T}_n} c^k(T)} {(n-1)!^k}$\n\n$k$的量级意味着我们无法完成有关$c^k(T)$的展开，因此要在最开始的计算中就将$k$这个幂次加入\n\n为此定义$F_{i,n}=\\sum _{T\\in \\mathcal{T}_n} c^{ik}(T)$\n\n则我们要计算的答案就是$\\cfrac{F_{1,n} } {(n-1)!^k}$\n\n容易发现有意义的$F_{i,j}$规模为$O(\\sum \\sum [ij\\leq n])=O(n\\ln n)$\n\n关于为什么$F_{i,n}$会有第一维，会在下面出现\n\n~~ps: 我的两个维度好像和别人是反的~~\n\n<br>\n\n<br>\n\n### 计算过程分析\n\n---------------\n\n考虑递推计算$F_{i,n}$\n\n容易发现对于任意一个$F_{i,n}$的计算只需要令$k\\rightarrow ik$\n\n为了简化描述，我们先以计算$F_{1,...}$为例\n\n对于同构树计数，子树的叠加是无序的背包问题，**树形之间存在着置换同构**\n\n而每棵子树的**编号**之间可以任意归并，因此需要$\\text{EGF}$的背包合并每棵子树\n\n显然同构仅出现在同种大小的子树中，因此可以对于不同大小的子树分离\n\n假设对于大小为$n$的子树，出现了$m$种不同的树形$T_1,T_2,\\ldots T_m$，每种出现了$a_i$个\n\n则答案应该为$\\displaystyle \\sum_{T_i\\ne T_j} \\frac{1} {(n!)^m}\\prod \\frac{c^{a_ik}(T_i)} {(a_i!)^k}$\n\n其中$(a_i!)^k$除去同构树之间无排列序的方案数\n\n普通的背包计数难以处理$T_i\\ne T_j$的限制\n\n因此考虑用$\\text{Burnside}$引理解决置换同构问题\n\n<br>\n\n---------------------------\n\n同构出现于$m$棵树之间，因此我们置换群为对于$m$的排列置换群\n\n显然任意一个排列置换的的结果是若干个置换环，环上的树树形相同\n\n则对于一个置换$f$，设其生成了大小分别为$b_1,b_2,\\ldots, b_m$的置换环\n\n理想情况下其不动点的式子计算如下\n\n$\\displaystyle \\text{fix}(f)=\\frac{(n\\sum b_i)!} {(n!)^{\\sum b_i} }\\cdot \\frac{F_{b_i,n} } {(b_i!)^k}$\n\n（这就是为什么要给$F$添加第一维）\n\n其中$\\cfrac{(n\\sum b_i)!} {(n!)^{\\sum b_i} }$处理了$\\sum b_i$棵树的点编号，实际上这两个权值可以在计算的最后加入，因此下面忽略掉\n\n而实际上，在不动点中直接加入$\\cfrac{1} {(b_i!)^k}$是错的\n\n原因在于让这样的 **置换环权值** 带入$\\text{Burnside}$引理之后\n\n最终的 **同构类权值** 并不是我们想要的$\\cfrac{1} {(a_i!)^k}$\n\n<br>\n\n--------------------------\n\n考虑 **待定求解** 一个置换环系数的$\\text{EGF}$，设其为$A(x)$\n\n相较于上面的枚举$f$的式子，这里的计算中系数还需要考虑对于每种$b_i$，等价的置换$f$个数\n\n这同样需要对于每棵子树的$\\text{EGF}$合并，系数为$\\cfrac{1} {b_i!}$\n\n而一个环上的点存在一个环排列$(b_i-1)!$，两者合并即$\\cfrac{1} {b_i}$\n\n**注意这一部分并未被加入$A(x)$中**\n\n然而这也恰好使得$\\text{Burnside}$引理的系数$\\frac{1} {m!}$和置换元素的$\\text{EGF}$系数相抵消\n\n不妨设添加环系数$\\text{EGF}$的变换为$\\hat A_i=\\cfrac{A_i} {i}$\n\n所以，则最终的计算中$\\text{Burnside}$引理的答案就是$\\text{exp}(\\hat A(x))$\n\n<br>\n\n---------------\n\n我们希望最终一个 **合法的同构类** 的权值为$\\cfrac{1} {(a_i!)^k}$\n\n而容易发现实际上 **最终的同构类** 是由我们**初始枚举的置换环** 的$\\text{exp}$\n\n因此$\\cfrac{1} {a_i!}$应当是置换环系数经过环元素$\\text{exp}$叠加的结果\n\n设$B(x)=\\cfrac{x^i} {(i!)^k},C_i=\\cfrac{A_i} {F_{n,i} }$\n\n则$B(x)=\\text{exp}(\\hat C(x))$，对于$B(x)$取$\\ln$得到$\\hat C(x)$\n\n加入系数得到我们前面所待定的$A(x)$，即可进行最后的$\\text{exp}(\\hat A(x))$计算\n\nps:\n\n你会发现可以直接忽略环$\\text{EGF}$变换，全程只有$\\hat C(x),\\hat A(x)$，在过渡中这个变换的系数直接消失了\n\n在这里提到这个系数是为了避免不必要的误解，同时也强调其他时候使用$\\text{Burnside}$引理需要添加这个系数\n\n<br>\n\n<br>\n\n### 算法实现简谈\n\n-------------\n\n倒序枚举$F_{i,j}$的$i$，正序枚举大小$j$，边界条件自然是$F_{i,1}=1$\n\n确定了一个$i$后，就可以预处理$\\ln$ 求出置换环系数，这里有$\\frac{n} {i}$个\n\n按照每个$i$，上面式子中的$k\\rightarrow ik$\n\n按照$j$从小到大计算$F_{i,j}$，每次得到$F_{i,j}$之后\n\n计算关于大小为$j$的树的背包系数，这里系数的个数为$l=\\frac{n} {ij}$\n\n将先前的系数补上$F_{d,j}$，再做$\\text{exp}$，最后把前面扔掉的$\\cfrac{1} {(n!)^{\\sum a_i} }$补上，( $(n\\sum a_i)!$直接作为后面$\\text{EGF}$合并的系数）\n\n然后将它补进前面累和的背包里，就能得到这一项的值\n\n注意前面算的式子都是计算儿子的，最后还要加上自己的大小1\n\n当然，计算$\\text{exp},\\ln$需要下面的帮助\n\n<br>\n\n#### $\\text{exp}$的$O(n^2)$方法\n\n$F(x)=\\text{exp}(G(x))$\n\n$F'(x)=\\text{exp}(G(x))G'(x)$\n\n$F'(x)=F(x)G'(x)$\n\n先计算出$G'(x)$，然后$O(n^2)$依次得到$F'(x)$的第$i$项，就能知道$F(x)$的第$i+1$项\n\n<br>\n\n#### $\\ln$的$O(n^2)$方法\n\n$F(x)=\\ln G(x)$\n\n$F'(x)G(x)=G'(x)$\n\n边界$[x^0]G(x)=1,[x^0]F(x)=0$\n\n暴力推$F'(x)$的每一项即可\n\n<br>\n\n<br>\n\n#### 进一步优化\n\n上面的计算时，每次求得一个$\\hat A(x)$，都做一次$\\text{exp}$，然后背包合并\n\n但是实际上，我们可以先将$\\hat A(x)$放在一起，然后一起做$\\text{exp}$\n\n具体的，每次得到$F_{i,j}$之和，我们就可以确定$\\sum \\hat A(x)$的第$j$项\n\n那么在维护$\\sum \\hat A(x)$的同时，也依次递推$\\text{exp}(\\sum \\hat A(x))$的$j$项\n\n这样不仅去掉的背包的过程，也少了很多次$\\text{exp}$\n\n##### Montegomery\n\n[最后是喜闻乐见的套板子时间](https://www.cnblogs.com/chasedeath/p/14070390.html)\n\n\n\n\n\n$$ \\ $$\n\n### 复杂度分析\n\n--------\n\n#### 未优化\n\n相对于$\\text{exp}$，求$\\ln$的复杂度可以忽略\n\n而$\\text{exp}$每次大小是$\\frac{n} {ij}$，即$O(\\sum \\sum \\cfrac{n^2} {i^2j^2})=O(n^2)$\n\n最后的复杂度反而在于背包合并$\\text{EGF}$，为$O(n^2\\ln n)$\n\n#### 优化后\n\n同步求$\\text{exp}$的复杂度为$O((\\cfrac{n} {i})^2)=O(n^2)$\n\nCode1:\n\n```cpp\nconst int N=2010;\n\nint n,k,P;\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint F[N][N],T[N],H[N],C[N];\nint I[N],J[N],Inv[N];\nvoid Exp(int *a,int n){\n\tstatic int b[N];\n\trep(i,1,n) b[i-1]=1ll*a[i]*i%P;\n\trep(i,0,n) a[i]=0;\n\ta[0]=1;\n\trep(i,0,n-1) {\n\t\tint s=0;\n\t\trep(j,0,i) s=(s+1ll*a[i-j]*b[j])%P;\n\t\ta[i+1]=1ll*s*Inv[i+1]%P;\n\t}\n}\n\nvoid Ln(int *a,int n){\n\tstatic int b[N];\n\trep(i,0,n) b[i]=a[i];\n\trep(i,0,n-1) {\n\t\tint s=1ll*b[i+1]*(i+1)%P;\n\t\trep(j,0,i-1) s=(s-1ll*a[j]*b[i-j])%P;\n\t\tMod2(s),a[i]=s;\n\t}\n\tdrep(i,n,1) a[i]=1ll*a[i-1]*Inv[i]%P;\n\ta[0]=0;\n}\n\nint IK[N],JK[N];\n\nint main(){\n\tn=rd(),k=rd(),P=rd();\n\tInv[0]=Inv[1]=1;\n\trep(i,2,n) Inv[i]=1ll*(P-P/i)*Inv[P%i]%P;\n\trep(i,*I=*J=1,n) I[i]=1ll*I[i-1]*qpow(Inv[i],k)%P,J[i]=1ll*J[i-1]*qpow(i,k)%P;\n\t\n\tdrep(i,n,1) {\n\t\tint m=n/i;\n\t\trep(j,*H=1,m) H[j]=0;\n\t\trep(j,0,m) IK[j]=qpow(I[j],i),JK[j]=qpow(J[j],i);\n\t\trep(j,*C=1,m) C[j]=IK[j];\n\t\tLn(C,m);\n\t\trep(j,1,m) {\n\t\t\tF[i][j]=1ll*H[j-1]*JK[j-1]%P;\n\t\t\t\n\t\t\tint u=m/j;\n\t\t\tT[0]=0;\n\t\t\trep(x,1,u) T[x]=1ll*C[x]*F[i*x][j]%P;\n\t\t\tExp(T,u);\n\t\t\tint t=1;\n\t\t\trep(x,1,u) t=1ll*t*IK[j]%P,T[x]=1ll*T[x]*t%P;\n\t\t\tdrep(x,m,1) rep(y,1,x/j) H[x]=(H[x]+1ll*H[x-y*j]*T[y])%P;\n\t\t}\n\t}\n\tint ans=1ll*F[1][n]*I[n-1]%P;\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n[Code2:](https://www.luogu.com.cn/record/48678879)\n\n```cpp\n#include<cstdio>\nusing namespace std;\ntypedef long long ll;\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\nenum{N=2010};\nint n,k,P;\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint H[N],F[N][N],T[N],C[N];\nint I[N],J[N],Inv[N],Fac[N];\nint IK[N],JK[N];\nvoid Ln(int *a,int n){\n\tstatic int b[N];\n\trep(i,0,n) b[i]=a[i];\n\trep(i,0,n-1) {\n\t\tint s=1ll*b[i+1]*(i+1)%P;\n\t\trep(j,0,i-1) s=(s-1ll*a[j]*b[i-j])%P;\n\t\tMod2(s),a[i]=s;\n\t}\n\tdrep(i,n,1) a[i]=1ll*a[i-1]*Inv[i]%P;\n\ta[0]=0;\n}\n\n\nint main(){\n\tscanf(\"%d%d%d\",&n,&k,&P);\n\tInv[0]=Inv[1]=1;\n\trep(i,2,n) Inv[i]=1ll*(P-P/i)*Inv[P%i]%P;\n\trep(i,*I=*J=1,n) I[i]=1ll*I[i-1]*qpow(Inv[i],k)%P,J[i]=1ll*J[i-1]*qpow(i,k)%P;\n\trep(i,*Fac=1,n) Fac[i]=1ll*Fac[i-1]*i%P;\n\t\n\tdrep(i,n,1) {\n\t\tint m=n/i;\n\t\trep(j,*H=1,m) H[j]=T[j]=0;\n\t\trep(j,0,m) IK[j]=qpow(I[j],i),JK[j]=qpow(J[j],i);\n\t\trep(j,*C=1,m) C[j]=IK[j];\n\t\tLn(C,m);\n\t\trep(j,1,m) {\n\t\t\tF[i][j]=1ll*H[j-1]*JK[j-1]%P;\n\t\t\tint u=m/j,t=1;\n\t\t\tT[0]=0;\n\t\t\trep(x,1,u) t=1ll*t*IK[j]%P,T[x*j]=(T[x*j]+1ll*C[x]*F[i*x][j]%P*t%P*x*j)%P;\n\t\t\trep(x,1,j) H[j]=(H[j]+1ll*H[j-x]*T[x])%P;\n\t\t\tH[j]=1ll*H[j]*Inv[j]%P;\n\t\t}\n\t}\n\tint ans=1ll*F[1][n]*I[n-1]%P;\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n[Code3:](https://www.luogu.com.cn/record/48685645)\n\n[Loj Submission](https://loj.ac/s/1103681)\n\n吐槽：实际上套了板子之后已经比loj上的所有人都快了\n\n但是由于新旧评测机的问题~~~，总时间就显得慢了\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nenum{N=2010};\nint n,k,P;\nusing u32=uint32_t;\nusing i32=int32_t;\nusing u64=uint64_t;\nusing i64=int64_t;\n\nstatic u32 m,m2,inv,r2;\nu32 getinv(){\n    u32 inv=m;\n    for(int i=0;i<4;++i) inv*=2-inv*m;\n    return inv;\n}\nstruct Mont{\nprivate :\n    u32 x;\npublic :\n    static u32 reduce(u64 x){ \n        u32 y=(x+u64(u32(x)*inv)*m)>>32;\n        return i32(y)<0?y+m:y;\n    }\n    Mont(){ ; }\n    Mont(i32 x):x(reduce(u64(x)*r2)) { }\n    Mont& operator += (const Mont &rhs) { return x+=rhs.x-m2,i32(x)<0&&(x+=m2),*this; }\n    Mont& operator -= (const Mont &rhs) { return x-=rhs.x,i32(x)<0&&(x+=m2),*this; }\n    Mont& operator *= (const Mont &rhs) { return x=reduce(u64(x)*rhs.x),*this; }\n    friend Mont operator + (Mont x,const Mont &y) { return x+=y; }\n    friend Mont operator - (Mont x,const Mont &y) { return x-=y; }\n    friend Mont operator * (Mont x,const Mont &y) { return x*=y; }\n    i32 get(){ \n        u32 res=reduce(x);\n        return res>=m?res-m:res;\n    }\n} H[N],F[N][N],T[N],C[N],I[N],J[N],Inv[N],IK[N],JK[N];\nMont qpow(Mont x,ll k=P-2) {\n\tMont res(1);\n\tfor(;k;k>>=1,x*=x) if(k&1) res*=x;\n\treturn res;\n}\nvoid Init(int m) { \n    ::m=m,m2=m*2;\n    inv=-getinv();\n    r2=-u64(m)%m;\n}\n\nvoid Ln(Mont *a,int n){\n\tstatic Mont b[N];\n\trep(i,0,n) b[i]=a[i];\n\trep(i,0,n-1) {\n\t\tMont s=b[i+1]*(i+1);\n\t\trep(j,0,i-1) s-=a[j]*b[i-j];\n\t\ta[i]=s;\n\t}\n\tdrep(i,n,1) a[i]=a[i-1]*Inv[i];\n\ta[0]=0;\n}\n\nint main(){\n\tscanf(\"%d%d%d\",&n,&k,&P),Init(P);\n\tInv[0]=Inv[1]=1;\n\trep(i,2,n) Inv[i]=(P-P/i)*Inv[P%i];\n\tI[0]=J[0]=1;\n\trep(i,1,n) I[i]=I[i-1]*qpow(Inv[i],k),J[i]=J[i-1]*qpow(i,k);\n\t\n\tdrep(i,n,1) {\n\t\tint m=n/i;\n\t\trep(j,1,m) T[j]=0;\n\t\trep(j,0,m) IK[j]=qpow(I[j],i),JK[j]=qpow(J[j],i);\n\t\tC[0]=H[0]=1;\n\t\trep(j,1,m) C[j]=IK[j];\n\t\tLn(C,m);\n\t\trep(j,1,m) {\n\t\t\tF[i][j]=H[j-1]*JK[j-1];\n\t\t\tMont t=1;\n\t\t\trep(x,1,m/j) t=t*IK[j],T[x*j]+=C[x]*F[i*x][j]*t*(x*j);\n\t\t\tH[j]=0;\n\t\t\trep(x,1,j) H[j]+=H[j-x]*T[x];\n\t\t\tH[j]=H[j]*Inv[j];\n\t\t}\n\t}\n\tMont ans=F[1][n]*I[n-1];\n\tprintf(\"%d\\n\",ans.get());\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["JOI","各省OI"],"categories":["题解"]},{"title":"[NOI Online  3 提高组] 优秀子序列","url":"/articles/2021/03/28/8d4a45a4.html","content":"#  [NOI Online #3 提高组] 优秀子序列\n\n这个题怎么不直接取名\n\n[集合幂级数$\\text{exp}$](https://www.cnblogs.com/chasedeath/p/13891189.html)呢\n\n优秀的子序列中任意两个元素01位无交，这是一个标准的子集卷积形式\n\n$\\varphi$的计算显然与$a_i$的卷积独立，可以线性筛/埃氏筛\n\n### 暴力\n\n可以暴力$3^{18}$过，枚举时为了避免重复可以通过强制枚举的数包含最高位的1\n\n注意$a_i=0$要特殊处理\n\n```cpp\nbool Mbe;\nconst int N=1<<18,P=1e9+7;\n\nint n,cnt0=1;\nll qpow(ll x,ll k=P-2){\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint Phi[N+1],notpri[N+1];\nint F[N],C[N],cnt[N];\n\nint main(){\n\tPhi[1]=1;\n\trep(i,2,N) if(!notpri[i]) {\n\t\tPhi[i]=i-1;\n\t\tfor(int j=i+i;j<=N;j+=i) {\n\t\t\tnotpri[j]=1;\n\t\t\tif(!Phi[j]) Phi[j]=j;\n\t\t\tPhi[j]=Phi[j]/i*(i-1);\n\t\t}\n\t}\n\tn=rd();\n\trep(i,1,N-1) cnt[i]=cnt[i&(i-1)]+1;\n\tF[0]=1;\n\trep(i,1,n) {\n\t\tint x=rd();\n\t\tif(!x) F[0]*=2,Mod1(F[0]);\n\t\telse C[x]++;\n\t}\n\tint ans=0;\n\trep(S,0,N-1) {\n\t\tif(S) for(int T=S;_builtin_clz(S)==__builtin_clz(T);T=(T-1)&S) F[S]=(F[S]+1ll*F[S^T]*C[T])%P;\n\t\tans=(ans+1ll*F[S]*Phi[S+1])%P;\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n\n```\n\n### 集合幂级数\n\n就是直接套集合幂计数的$\\text{exp}$\n\n同样要特殊处理$a_i=0$的\n\n```cpp\nconst int N=1<<18,P=1e9+7;\nint F[N][19],Inv[20];\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar buf[200000],*p1,*p2;\n#define getchar() (((p1==p2)&&(p2=(p1=buf)+fread(buf,1,200000,stdin))),*p1++)\nchar IO;\nint rd(){\n\tint s=0; static char c;\n\twhile(c=getchar(),c<48);\n\tdo s=(s<<1)+(s<<3)+(c^'0');\n\twhile(c=getchar(),c>47);\n\treturn s;\n}\nbool Mbe;\n\nint n,m,cnt0=1,U;\nll qpow(ll x,ll k=P-2){\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint Phi[N+1],notpri[N+1],pri[N/4],pc;\n\nvoid Exp(int *a){\n\tstatic int b[N];\n\trep(i,1,n) b[i-1]=1ll*a[i]*i%P;\n\trep(i,0,n-1) {\n\t\tint s=b[i];\n\t\trep(j,1,i) s=(s+1ll*a[j]*b[i-j])%P;\n\t\ta[i+1]=1ll*s*Inv[i+1]%P;\n\t}\n}\n\nint main(){\n\tInv[0]=Inv[1]=1;\n\trep(i,2,18) Inv[i]=1ll*(P-P/i)*Inv[P%i]%P;\n\tn=rd();\n\trep(i,1,n) {\n\t\tint x=rd(); cmax(U,x);\n\t\tif(!x) cnt0*=2,Mod1(cnt0);\n\t\telse F[x][__builtin_popcount(x)]++;\n\t}\n\tPhi[1]=1;\n\tfor(n=1;(1<<n)<=U;)n++;\n\tm=1<<n;\n\trep(i,2,m) {\n\t\tif(!notpri[i]) pri[++pc]=i,Phi[i]=i-1;\n\t\tfor(int j=1;j<=pc && 1ll*i*pri[j]<=m;++j){\n\t\t\tnotpri[i*pri[j]]=1;\n\t\t\tif(i%pri[j]==0) {\n\t\t\t\tPhi[i*pri[j]]=Phi[i]*pri[j];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tPhi[i*pri[j]]=Phi[i]*(pri[j]-1);\n\t\t}\n\t}\n\tfor(int i=1;i<m;i<<=1) for(int l=0;l<m;l+=i*2) for(int j=l;j<l+i;++j) rep(k,1,n) F[j+i][k]+=F[j][k],Mod1(F[j+i][k]);\n\trep(i,0,m-1) Exp(F[i]);\n\tfor(int i=1;i<m;i<<=1) for(int l=0;l<m;l+=i*2) for(int j=l;j<l+i;++j) rep(k,1,n) F[j+i][k]-=F[j][k],Mod2(F[j+i][k]);\n\tint ans=0;\n\trep(S,1,m-1) ans=(ans+1ll*F[S][__builtin_popcount(S)]*Phi[S+1])%P;\n\tans=1ll*(ans+1)*cnt0%P;\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"[NOI Online 2021 提高组] 愤怒的小N","url":"/articles/2021/03/28/4b5e1fd3.html","content":"# [NOI Online 2021 提高组] 愤怒的小N\n\n### 暴力\n\n倍增维护$[x,x+2^d)$内部所有$b$的权值和 以及$a$的，用多项式表示\n\n具体的，维护两个多项式$F_0(x),F_1(x)$，每次倍增的转移如下\n\n$F_0(x)\\leftarrow F_0(x)+F_1(x+d)$\n\n$F_1(x)\\leftarrow F_1(x)+F_0(x+d)$\n\n因此暴力倍增复杂度为$O(nk^2)$，实现上需要记录每次倍增之后多项式与答案的前面部分相拼接需要额外的偏移\n\n$$ \\ $$\n\n### 优化\n\n如果你输出多项式，就会发现，倍增$k$次之后，所有$a,b$位置对应的多项式就完全相同了\n\n形式化地理解这个过程\n\n一开始，$F_0(x)=A(x),F_1(x)=0$，其中$A(x)$为读入的多项式\n\n进行一次转移后，$F_0(x),F_1(x)$的第$k-1$项只受到对方的$k-1$项和自己的$k-1$项影响\n\n因此一次转移后$[x^{k-1}]F_0(x)=[x^{k-1}]F_1(x)$\n\n下一次转移，第$k-2$项值只受到对方的$k-2$项，已经已经确定相同的$k-1$项影响\n\n这个过程不断进行，第$i$次倍增会使得$[k-i,k-1]$项相同\n\n$$ \\ $$\n\n对于$k$次倍增之后，后面多出来的部分，可以直接求一个多项式前缀和，然后除2得到答案\n\n多项式前缀和容易通过拉格朗日插值解决，复杂度为$O(k^2)$\n\n预处理前面的多项式复杂度为$O(k^3)$，求后面的式子为$O(k^2)$，预处理$n$的值复杂度为$O(\\log n)$\n\n因此复杂度为$O(\\log n+k^3)$\n\n$$ \\ $$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=5e5+10,M=510,INF=1e9+10,P=1e9+7;\n\nint n,m;\nchar s[N];\nint D[N],T[N];\n// D[i]预处理倍增求出的每项对于答案贡献时存在的偏移\n// T[i]预处理每个位后面1的个数\nint A[N],F[2][M],G[2][M],C[M][M];\nint Pow[N];\nll qpow(ll x,ll k=P-2){\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint X[M],Y[M];\nint Lagrange(int x,int n,int *X,int *Y){\n\tint ans=0;\n\trep(i,0,n) {\n\t\tll s=1;\n\t\trep(j,0,n) if(i!=j) s=s*(X[i]-X[j])%P;\n\t\ts=qpow(s);\n\t\trep(j,0,n) if(i!=j) s=s*(x-X[j])%P;\n\t\tans=(ans+s*Y[i])%P;\n\t}\n\treturn ans;\n}\n\nint main(){\n\tfreopen(\"angry.in\",\"r\",stdin),freopen(\"angry.out\",\"w\",stdout);\n\tscanf(\"%s\",s),n=strlen(s),reverse(s,s+n);\n\tm=rd();\n\trep(i,0,m-1) A[i]=F[0][i]=rd();\n\trep(i,0,m) rep(j,*C[i]=1,i) C[i][j]=(C[i-1][j]+C[i-1][j-1])%P;\n\tint ans=0,x=2;\n\trep(i,1,n-1) D[i-1]=x*(s[i]=='1'),x=x*2%P,T[i-1]=(s[i]=='1');\n\tdrep(i,n-1,0) D[i]+=D[i+1],Mod1(D[i]),T[i]^=T[i+1];\n\tx=1;\n\trep(i,0,min(m-1,n-1)) {\n\t\tif(s[i]=='1') {\n\t\t\tint t=1;\n\t\t\trep(j,0,m-1) {\n\t\t\t\tans=(ans+1ll*t*F[!T[i]][j])%P;\n\t\t\t\tt=1ll*t*D[i]%P;\n\t\t\t}\n\t\t}\n\t\trep(d,0,1) rep(j,0,m-1) G[d][j]=F[d][j];\n\t\trep(j,*Pow=1,m-1) Pow[j]=1ll*Pow[j-1]*x%P;\n\t\trep(j,0,m-1) rep(k,0,j) {\n\t\t\tF[0][k]=(F[0][k]+1ll*C[j][k]*Pow[j-k]%P*G[1][j])%P;\n\t\t\tF[1][k]=(F[1][k]+1ll*C[j][k]*Pow[j-k]%P*G[0][j])%P;\n\t\t}\n\t\tx=x*2%P;\n\t}\n    // 倍增到前k-1项\n\tif(m>=n) return printf(\"%d\\n\",ans),0;\n    // 预处理拉格朗日插值\n\trep(i,0,m) {\n\t\tX[i]=i,x=1;\n\t\trep(j,0,m-1) {\n\t\t\tY[i]=(Y[i]+1ll*A[j]*x)%P;\n\t\t\tx=1ll*x*i%P;\n\t\t}\n\t\tif(i) Y[i]+=Y[i-1],Mod1(Y[i]);\n\t}\n\tans=(ans+1ll*Lagrange(D[m-1]-1,m,X,Y)*(P+1)/2)%P;\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"[NOI Online 2021 提高组] 积木小赛","url":"/articles/2021/03/27/7050c6bf.html","content":"# [NOI Online 2021 提高组] 积木小赛\n\n题目大意：给定串$A$,$B$，求$B$中有多少本质不同的连续子段是$A$的子序列\n\n$n\\leq 3000$\n\n暴力枚举$B$中的子段，同步维护与$A$的匹配指针$p$\n\n每次插入一个字符$c$，找到$A$中$p+1$之后第一个字符$c$，令匹配指针跳过去\n\n可以预处理出这样的下一个字符$nxt_{i,c}$，完成$O(1)$匹配\n\n除此以外，我们还需要对于本质不同去重\n\n如果用$\\text{trie}$树去重，需要开一个$\\frac{n^2} {2}\\cdot 26$的数组，面临着内存不够的问题\n\n~~你可以信仰不开这么大~~\n\n也可以去学习一下$\\text{DAT(Double Array Trie)}$算法\n\n也可以用$\\text{hash+set/map/hash table/sort unique}$\n\n也可以用链表暴力存储trie树的情况，每次暴力for过去找儿子\n\n这样内存均为$O(n^2)$\n\n以下是链表trie树的版本\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=3010,M=N*N/2,INF=1e9+10;\nbool Mbe;\n\nint n;\nint nxt[N][26];\nchar A[N],B[N];\nstruct Edge{ int c,to,nxt; } e[M];\nint head[M],cnt;\n\nbool Med;\nint main(){\n\t//fprintf(stderr,\"%.2lf\\n\",(&Med-&Mbe)/1024.0/1024.0);\n\tfreopen(\"block.in\",\"r\",stdin),freopen(\"block.out\",\"w\",stdout);\n\tn=rd(),scanf(\"%s%s\",A+1,B+1);\n\tdrep(i,n,1) {\n\t\trep(j,0,25) nxt[i][j]=nxt[i+1][j];\n\t\tnxt[i][A[i]-'a']=i;\n\t}\n\trep(i,1,n) {\n\t\tint u=0,p=0;\n\t\trep(j,i,n) {\n\t\t\tint c=B[j]-'a';\n\t\t\tif(!(p=nxt[p+1][c])) break;\n\t\t\tint v=-1;\n\t\t\tfor(int k=head[u];k;k=e[k].nxt) if(e[k].c==c) { v=e[k].to; break; }\n\t\t\tif(~v) u=v;\n\t\t\telse {\n\t\t\t\tv=++cnt;\n\t\t\t\te[v]=(Edge){c,v,head[u]};\n\t\t\t\thead[u]=v,u=v;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",cnt);\n}\n```\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「2020-2021 集训队作业」Yet Another Permutation Problem","url":"/articles/2021/03/26/6672bea.html","content":"# 「2020-2021 集训队作业」Yet Another Permutation Problem\n\n### 题目大意\n\n对于一个初始为$1,2,\\ldots n$的排列，每次操作为选择一个数放到开头或者结尾，求$k$次操作能够生成的排列数\n\n对于$k=0,1,\\ldots ,n-1$求解\n\n$$ \\ $$\n\n###  模型转化\n\n容易发现，对于一个排列，生成它的最小次数取决于中间保留段的长度\n\n而保留段实际上是任何一个上升子段\n\n设一个排列的最长上升子段为$l$，那么最少操作步骤就是$n-l$\n\n那么对于$k$，合法的序列就是存在一个长度$\\ge n-k$的上升子段\n\n存在不好算，改为计算任何一个上升子段$<n-k$的数量\n\n为了便于描述，令下文的$k=n-k-1$\n\n$$ \\ $$\n\n### 生成函数构造\n\n考虑一个序列是由若干上升段构成的，设一个长度为$l$的上升段的权值为$[l\\leq k]$\n\n那么排列的权值就是上升段权值之积\n\n容易想到用$\\text{EGF}$合并上升段，但是直接的统计，我们无法保证上升段之间无法拼接\n\n假设我们确定了一个单位上升段的$\\text{EGF}$为$G(x)$，$\\text{OGF}$为$F(x)$\n\n那么按照上面$\\text{Naive}$的计算，上升段之间的合并为有序拼接，即$\\displaystyle \\sum_{i=0}G^i(x)=\\frac{1} {1-G(x)}$\n\n容易发现，这样的计算，会导致一个长度为$l$的极长上升段被分解成若干小段\n\n也就是被计算了$\\displaystyle [x^l](\\sum_{i=0}F^i(x))=[x^l]\\frac{1} {1-F(x)}$次\n\n在合法的计算中，我们希望，$[x^l]\\frac{1} {1-F(x)}$恰好为权值$[l\\leq k]$\n\n也就是说，我们希望$\\displaystyle \\frac{1} {1-F(x)}=H(x)=\\sum_{i=0}^kx^i=\\frac{x^{k+1}-1} {x-1}$\n\n那么可以反向由$H(x)$构造出我们想要的$F(x)$，从而得到$G(x)$，再进行求解\n\n$$ \\ $$\n\n### 答案计算\n\n$\\displaystyle F(x)=1-\\frac{1} {H(x)}=1-\\frac{x-1} {x^{k+1}-1}=\\frac{x-x^{k+1} } {1-x^{k+1} }$\n\n可以爆算得到$F(x)$，从而得到$G(x)$，然后暴力求逆就是$O(n^2)$\n\n优化：\n\n$1-x^{k+1}$的逆，只包含$\\frac{n} {k+1}$项，所以$G(x)$只含$2\\frac{n} {k+1}$项\n\n即$\\displaystyle F(x)=\\sum_{d=0}x^{d(k+1)+1}-\\sum_{d=1}x^{d(k+1)}$，$G(x)$就是除一个阶乘\n\n这样暴力求逆就是$O(n^2\\ln n)$\n\n~~（不是你干嘛要真的求逆，直接进行$G(x)$的叠加就可以了）~~\n\n```cpp\nconst int N=1010;\n\nint n,P,I[N],J[N];\nll qpow(ll x,ll k=P-2){\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint F[N];\n\nint main(){\n\tn=rd(),P=rd();\n\trep(i,*J=1,n) J[i]=1ll*J[i-1]*i%P;\n\tI[n]=qpow(J[n]);\n\tdrep(i,n,1) I[i-1]=1ll*I[i]*i%P;\n\tdrep(k,n,1) {\n\t\tF[0]=1;\n\t\trep(j,1,n) {\n\t\t\tF[j]=0;\n\t\t\tfor(int d=1;d<=j;d+=k) F[j]=(F[j]+1ll*F[j-d]*I[d])%P;\n\t\t\tfor(int d=k;d<=j;d+=k) F[j]=(F[j]-1ll*F[j-d]*I[d])%P;\n\t\t}\n\t\tprintf(\"%d\\n\",int((1ll*(P+1-F[n])*J[n])%P));\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder"],"categories":["题解"]},{"title":"无标号有根树/无根树 计数","url":"/articles/2021/03/23/95323e25.html","content":"# 无标号有根树/无根树 计数\n\n当然是从有根树开始啦\n\n树计数容易想到递归进行，设$n$个节点有根树的$\\text{OGF}$为$F(x)$\n\n我们考虑$F(x)$作为新根节点的子树的情况，这是一个可置换的背包问题，被称为$\\text{Euler}$变换\n\n不妨对于$F(x)$的每一项考虑，我们从$F_k$这么多种类的数中选择一些出来，然后组成背包\n\n设$I=x^k$，$n=F_k$，那么对于这一项的变换可以表示为\n\n$\\displaystyle T(I,n)=\\sum_{i=0}\\binom{n} {i} (\\sum_{j=1}^{\\infty}I^j)^i=(\\sum_{j=1}^{\\infty}I^j+1)^n=\\frac{1} {(1-I)^n}$\n\n那么得到$\\text{Euler}$变换\n\n$\\displaystyle \\mathcal{E}(F(x))=\\prod_{i=1}T(x^i,F_i)=\\prod \\frac{1} {(1-x^i)^{F_i} }$\n\n两边求$\\ln $\n\n$\\displaystyle \\ln \\mathcal{E}(F(x))=\\sum_i F_i\\ln \\frac{1} {(1-x^i)}$\n\n$\\displaystyle \\ln \\mathcal{E}(F(x))=\\sum_i F_i(\\sum_{j=1}\\frac{x^{ij} } {j})$\n\n换循环\n\n$\\displaystyle \\ln \\mathcal{E}(F(x))=\\sum_i \\frac{1} {i}(\\sum_{j=1}F_j(x^i)^j)=\\sum \\frac{F(x^i)} {i}$\n\n$\\displaystyle \\mathcal{E}(F(x))=\\text{exp}(\\sum \\frac{F(x^i)} {i})$\n\n到这里我们得到了一个比较阳间的变换形式，那么$F(x)$的递归表示就是\n\n$F(x)=x\\cdot \\mathcal{E}(F(x))$\n\n考虑用[牛顿迭代](https://www.cnblogs.com/chasedeath/p/12859142.html)求解，设已经求出$G(x)=F(x)\\mod x^n$，我们要求$F(x)\\mod x^{2n}$\n\n而$\\displaystyle \\mathcal{E}(F(x))=\\text{exp}(\\sum \\frac{F(x^i)} {i})$中$i\\ge 2$的项都是已知的，可以在$O(n\\ln n)$时间得到，不妨这些项为常数$\\text{coef}$\n\n则方程为$x\\cdot \\text{exp}(F(x)+\\text{coef})-F(x)=0$\n\n方程函数为$f(z)=xe^{z+\\text{coef} }-z$\n\n$f'(z)=xe^{z+\\text{coef} }-1$\n\n故知$\\displaystyle F(x)=G(x)-\\frac{xe^{G(x)+\\text{coef} }-G(x)} {xe^{G(x)+\\text{coef} }-1}$\n\n(这里没有分治解法的。。。~~实际我也不会~~)\n\n$$ \\ $$\n\n----------------\n\n下面是无根树计数，考虑令重心为根即可\n\n可以直接减掉存在一个子树$> \\frac{n} {2}$的贡献，因为不会出现置换重复，可以将这个子树从原来的树上踢掉\n\n剩下部分依然看成一棵有根树，也就是$F_i\\cdot F_{n-i}(i>\\frac{n} {2})$\n\n对于$2|n$的情况，重心可能有两个，此时要减去对称情况$\\displaystyle \\binom{F_{\\frac{n} {2} }} {2}$\n\n[Luogu P5900](https://www.luogu.com.cn/problem/P5900)   [Submission](https://www.luogu.com.cn/record/48336103)\n\n~~唔-好慢~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\ntypedef vector <int> V;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int L=19,N=1<<L|10,P=998244353;\n\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nint I[N],J[N];\nint rev[N],w[N];\nvoid Init(){\n\tw[1<<(L-1)]=1;\n\tint t=qpow(3,(P-1)>>L);\n\trep(i,(1<<(L-1))+1,1<<L) w[i]=1ll*w[i-1]*t%P;\n\tdrep(i,(1<<(L-1))-1,1) w[i]=w[i<<1];\n\trep(i,J[0]=1,N-1) J[i]=1ll*J[i-1]*i%P;\n\tI[N-1]=qpow(J[N-1]);\n\tdrep(i,N-1,1) I[i-1]=1ll*I[i]*i%P;\n}\nint Init(int n){\n\tint R=1,c=-1;\n\twhile(R<=n) R<<=1,c++;\n\trep(i,0,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<c);\n\treturn R;\n}\nvoid NTT(int n,V &A,int f) {\n\tstatic ull a[N];\n\tif((int)A.size()<n) A.resize(n);\n\trep(i,0,n-1) a[rev[i]]=A[i];\n\tfor(int i=1;i<n;i<<=1) {\n\t\tint *e=w+i;\n\t\tfor(int l=0;l<n;l+=i*2) {\n\t\t\tfor(int j=l;j<l+i;++j) {\n\t\t\t\tint t=a[j+i]*e[j-l]%P;\n\t\t\t\ta[j+i]=a[j]+P-t;\n\t\t\t\ta[j]+=t;\n\t\t\t}\n\t\t}\n\t}\n\trep(i,0,n-1) A[i]=a[i]%P,Mod2(A[i]);\n\tif(f==-1) {\n\t\treverse(A.begin()+1,A.end());\n\t\tll base=1ll*I[n]*J[n-1]%P;\n\t\trep(i,0,n-1) A[i]=A[i]*base%P;\n\t}\n}\n\nV operator + (V a,const V &b) {\n\tif(a.size()<b.size()) a.resize(b.size());\n\trep(i,0,b.size()-1) a[i]+=b[i],Mod1(a[i]);\n\treturn a;\n}\nV operator - (V a,const V &b) {\n\tif(a.size()<b.size()) a.resize(b.size());\n\trep(i,0,b.size()-1) a[i]-=b[i],Mod2(a[i]);\n\treturn a;\n}\nV operator * (V a,V b) {\n\tint n=a.size()-1,m=b.size()-1;\n\tint R=Init(n+m);\n\tNTT(R,a,1),NTT(R,b,1);\n\trep(i,0,R-1) a[i]=1ll*a[i]*b[i]%P;\n\tNTT(R,a,-1),a.resize(n+m+1);\n\treturn a;\n}\nV operator * (V a,const int &x) {\n\tfor(int &i:a) i=1ll*i*x%P;\n\treturn a;\n}\nV operator * (const int &x,V a) { return a*x; }\n\nvoid println(const V &a){\n\tfor(int i:a) printf(\"%d \",i);\n\tputs(\"\");\n}\nV read(int n){\n\tV A(n);\n\trep(i,0,n-1) A[i]=rd();\n\treturn A;\n}\nV operator ~ (V a) {\n\tint n=a.size(),m=(n+1)>>1;\n\tif(n==1) return assert(a[0]),V{(int)qpow(a[0])};\n\tV b=a; b.resize(m),b=~b;\n\tint R=Init(n*2);\n\tNTT(R,a,1),NTT(R,b,1);\n\trep(i,0,R-1) a[i]=(P+2-1ll*a[i]*b[i]%P)*b[i]%P;\n\tNTT(R,a,-1),a.resize(n);\n\treturn a;\n}\nV Deriv(V a) {\n\trep(i,0,a.size()-2) a[i]=1ll*(i+1)*a[i+1]%P;\n\ta.pop_back();\n\treturn a;\n}\nV Integ(V a){\n\ta.pb(0);\n\tdrep(i,a.size()-1,1) a[i]=1ll*a[i-1]*J[i-1]%P*I[i]%P;\n\ta[0]=0;\n\treturn a;\n}\nV Ln(V a){\n\tint n=a.size();\n\ta=Deriv(a)*~a;\n\treturn a.resize(n-1),Integ(a);\n}\nV Exp(V a) {\n\tif(a.size()==1) return assert(a[0]==0),V{1};\n\tint n=a.size();\n\tV b=a; b.resize((n+1)/2),b=Exp(b),b.resize(n);\n\ta=a-Ln(b),a[0]++;\n\ta=a*b,a.resize(n);\n\treturn a;\n}\n\nV operator << (V a,int x) {\n\ta.resize(a.size()+x);\n\tdrep(i,a.size()-1,x) a[i]=a[i-x];\n\trep(i,0,x-1) a[i]=0;\n\treturn a;\n}\nV operator >> (V a,int x) {\n\tif((int)a.size()<=x) return V{ };\n\trep(i,x,a.size()-1) a[i-x]=a[i];\n\ta.resize(a.size()-x);\n\treturn a;\n}\n\nV Newton(int n){\n\tif(n==1) return V{0};\n\tif(n==2) return V{0,1};\n\tV G=Newton((n+1)/2); G.resize(n);\n\tV T=G;\n\trep(i,2,n-1) {\n\t\tint t=1ll*I[i]*J[i-1]%P;\n\t\trep(j,1,min(n/2,(n-1)/i)) T[i*j]=(T[i*j]+1ll*G[j]*t)%P;\n\t}\n\tT=Exp(T)<<1;\n\tV F=G-(T-G)*~(T-V{1});\n\treturn F.resize(n),F;\n}\n\nint main(){\n\tint n=rd()+1; Init();\n\tV F=Newton(n); \n\tint ans=F[--n];\n\trep(i,1,(n-1)/2) ans=(ans-1ll*F[i]*F[n-i])%P;\n\tif(~n&1) ans=(ans-1ll*F[n/2]*(F[n/2]-1)/2)%P;\n\tMod2(ans);\n\tprintf(\"%d\\n\",ans);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"无向图的 三元环 - 四元环 计数","url":"/articles/2021/03/22/10f2c262.html","content":"# 无向图的 三元环 - 四元环 计数\n\n问题描述：\n\n给定一个$n$个点$m$条边的无向图，统计其中三元环/四元环的个数\n\n### 三元环\n\n考虑枚举一条边$(u,v)$，为了避免重复我们可能令$u<v$\n\n然后暴力枚举求出$u,v$两个点出边的交点个数\n\n具体的，先对于$u$的出点打标记，然后查询$v$的出点中被标记的个数\n\ntips:当然每个三元环会被算三次\n\n这样复杂度显然是$O(nm)$的，当$v$点度数大时就可以卡掉\n\n#### 优化\n\n强制$deg_u>deg_v\\or deg_u=deg_v,u<v$\n\n考虑先固定$u$，预处理出标记情况，然后枚举每个合法的$(u,v)$\n\n再去枚举$v$的出边\n\n考虑证明这个复杂度上限为$O(m\\sqrt m)$级别\n\n假设对于$(u,v)$\n\n1.如果$deg_v\\leq \\sqrt m$，显然它们被枚举的次数总和$\\leq m$，枚举复杂度为$O(m\\sqrt m)$\n\n2.对于$deg_v>\\sqrt m$，则显然有$deg_u\\ge deg_v>\\sqrt m$\n\n会枚举到$v$的$u$显然不超过$\\sqrt m$个，因此这样的$v$遍历次数为$O(m\\sqrt m)$\n\n故复杂度为$O(m\\sqrt m)$\n\n$$ \\ $$\n\n### 四元环\n\n类似三元环的方法，同样按照$(deg_u,u)$二元组递减的顺序设定排名\n\n强制$u$为四元环中排名最小的点，枚举合法的边$(u,v)$，那么我们计算的实际上是每个$v$的出边的交的个数\n\n依次枚举每个$v$的过程中，对于出边$(v,w)$维护$w$出现次数，即可求出交点个数\n\n容易发现这样的计算不会出现重复\n\n而复杂显然是与上面相同的，还去掉对于$u$的出点打标记的过程\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"有标号二分图计数","url":"/articles/2021/03/22/82617363.html","content":"# 有标号二分图计数\n\n求 $n$ 个点的有标号二分图数目\n\n容易想到一个会重复的计算方法：暴力把图剖成两个集合，然后集合间随意连边\n\n$G_n=\\displaystyle \\sum_{i=0}^n \\binom{n} {i}2^{i(n-i)}$\n\n而如果一个二分图包含$t$个连通块，那么在$G$中它会被计算$2^t$次\n\n不妨设$\\text{EGF}:$ \n\n$H(x)$为$n$个点连通的二分图的数目\n\n$G(x)$为$G_n$的生成函数\n\n$F(x)$为$n$个点二分图生成函数\n\n容易发现$\\displaystyle G(x)=\\sum \\frac{H^i(x)2^i} {i!}=\\text{exp}(2H(x))$\n\n而我们要求的答案生成函数$F(x)=\\text{exp}(H(x))$\n\n也就是说$F(x)=\\sqrt {G(x)}$\n\n而根据组合意义容易发现$\\displaystyle i(n-i)=\\binom{n} {2}-\\binom{i} {2}-\\binom{n-i} {2}$，容易通过卷积得到$G(x)$\n\n然后开根即可，实际做的时候注意区分什么时候算的是$\\text{EGF}$\n\n```cpp\n\nconst int L=18,N=1<<L|10,P=998244353;\n\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nint I[N],J[N];\nint rev[N],w[N];\nvoid Init(){\n\tw[1<<(L-1)]=1;\n\tint t=qpow(3,(P-1)>>L);\n\trep(i,(1<<(L-1))+1,1<<L) w[i]=1ll*w[i-1]*t%P;\n\tdrep(i,(1<<(L-1))-1,1) w[i]=w[i<<1];\n\trep(i,J[0]=1,N-1) J[i]=1ll*J[i-1]*i%P;\n\tI[N-1]=qpow(J[N-1]);\n\tdrep(i,N-1,1) I[i-1]=1ll*I[i]*i%P;\n}\nint Init(int n){\n\tint R=1,c=-1;\n\twhile(R<=n) R<<=1,c++;\n\trep(i,0,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<c);\n\treturn R;\n}\nvoid NTT(int n,V &A,int f) {\n\tstatic ll a[N];\n\tif((int)A.size()<n) A.resize(n);\n\trep(i,0,n-1) a[rev[i]]=A[i];\n\tfor(int i=1;i<n;i<<=1) {\n\t\tint *e=w+i;\n\t\tfor(int l=0;l<n;l+=i*2) {\n\t\t\tfor(int j=l;j<l+i;++j) {\n\t\t\t\tint t=a[j+i]*e[j-l]%P;\n\t\t\t\ta[j+i]=a[j]-t;\n\t\t\t\ta[j]+=t;\n\t\t\t}\n\t\t}\n\t}\n\trep(i,0,n-1) A[i]=a[i]%P,Mod2(A[i]);\n\tif(f==-1) {\n\t\treverse(A.begin()+1,A.end());\n\t\tll base=1ll*I[n]*J[n-1]%P;\n\t\trep(i,0,n-1) A[i]=A[i]*base%P;\n\t}\n}\n\nV operator + (V a,const V &b) {\n\tif(a.size()<b.size()) a.resize(b.size());\n\trep(i,0,b.size()-1) a[i]+=b[i],Mod1(a[i]);\n\treturn a;\n}\nV operator - (V a,const V &b) {\n\tif(a.size()<b.size()) a.resize(b.size());\n\trep(i,0,b.size()-1) a[i]-=b[i],Mod2(a[i]);\n\treturn a;\n}\nV operator * (V a,V b) {\n\tint n=a.size()-1,m=b.size()-1;\n\tint R=Init(n+m);\n\tNTT(R,a,1),NTT(R,b,1);\n\trep(i,0,R-1) a[i]=1ll*a[i]*b[i]%P;\n\tNTT(R,a,-1),a.resize(n+m+1);\n\treturn a;\n}\nvoid println(const V &a){\n\tfor(int i:a) printf(\"%d \",i);\n\tputs(\"\");\n}\nV read(int n){\n\tV A(n);\n\trep(i,0,n-1) A[i]=rd();\n\treturn A;\n}\nV operator ~ (V a) {\n\tint n=a.size(),m=(n+1)>>1;\n\tif(n==1) return {(int)qpow(a[0])};\n\tV b=a; b.resize(m),b=~b;\n\tint R=Init(n*2);\n\tNTT(R,a,1),NTT(R,b,1);\n\trep(i,0,R-1) a[i]=(P+2-1ll*a[i]*b[i]%P)*b[i]%P;\n\tNTT(R,a,-1),a.resize(n);\n\treturn a;\n}\n\nint Div2(int x){ return (x&1?x+P:x)/2; }\nV Sqrt(V a){\n\tif(a.size()==1) return a;\n\tint n=a.size();\n\tV b=a; b.resize((n+1)/2),b=Sqrt(b),b.resize(n);\n\ta=a*~b; a.resize(n);\n\trep(i,0,b.size()-1) a[i]+=b[i],Mod1(a[i]);\n\trep(i,0,n-1) a[i]=Div2(a[i]);\n\treturn a;\n}\n\nint Pow[N],IPow[N];\n\nint main(){\n\tint n=1e5;\n\tInit();\n\tPow[0]=Pow[1]=IPow[0]=IPow[1]=1;\n\tfor(int i=2,x=2,y=(P+1)/2;i<N;i++,x*=2,Mod1(x),y=Div2(y)) {\n\t\tPow[i]=1ll*Pow[i-1]*x%P;\n\t\tIPow[i]=1ll*IPow[i-1]*y%P;\n\t}\n\tV F(n+1);\n\trep(i,0,n) F[i]=1ll*I[i]*IPow[i]%P;\n\tF=F*F,F.resize(n+1);\n\trep(i,0,n) F[i]=1ll*F[i]*Pow[i]%P;\n\tF=Sqrt(F);\n\trep(i,1,n) printf(\"%d\\n\",int(1ll*F[i]*J[i]%P));\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"有标号荒漠计数","url":"/articles/2021/03/22/aa3d5ccc.html","content":"# 有标号荒漠计数\n\n考虑随意选择一个点为根，则仙人掌的$\\text{EGF}$考虑用以下方式递归生成\n\n令树边为二元环，则一个点周围的点都是都是与它直接相连的环\n\n断开这个点，对于周围断开的环，环上每个点下面认为是一个仙人掌，设某个环断开之后的大小为$c$\n\n当$c=1$时，不需要考虑排列重复，即为$F(x)$\n\n当$c>1$时，考虑环正反排列，即为$\\cfrac{F^c(x)} {2}$\n\n那么就容易得到$\\displaystyle F(x)=x \\cdot \\text{exp}(F(x)+\\sum _{i\\ge 2}\\frac{F^i(x)} {2})$\n\n变一下就是$\\displaystyle F=x\\cdot \\text{exp}(\\frac{F^2} {2-2F}+F)=x\\cdot \\text{exp}(\\frac{2F-F^2} {2-2F})$\n\n是的，我们要解这个方方方方方方程。。。[牛顿迭代代代代代代代](https://www.cnblogs.com/chasedeath/p/12859142.html)\n\n$\\displaystyle f(F(x))=x\\cdot \\text{exp}(\\frac{2F-F^2} {2-2F})-F=0$\n\n$\\displaystyle f(z)=x\\cdot \\text{exp}(\\frac{2z-z^2} {2-2z})-z$\n\n$\\displaystyle f'(z)=x\\cdot \\text{exp}(\\frac{2z-z^2} {2-2z})(1+\\frac{2z-z^2} {2z^2-4z+2})-1$\n\n$\\displaystyle =x\\cdot \\text{exp}(\\frac{2z-z^2} {2-2z})(\\frac{1} {2}+\\frac{1} {2z^2-4z+2})-1$\n\n设上一层的迭代结果为$G(x)$，带入牛顿迭代结论$\\displaystyle F(x)=G(x)-\\frac{f(G)} {f'(G)}$\n\n设$\\displaystyle H=x\\cdot \\text{exp}(\\frac{2G-G^2} {2-2G})$，那么得到Luogu题解里$\\text{N}\\color{red}\\text{aCl_Fish}$一样的式子~~(还要没有推错)~~\n\n$\\displaystyle F=G-\\frac{2H-2G} {H(1+\\frac{1} {(1-G)^2})-2}$\n\n最后还要变成无根，除掉$n$即可\n\n仙人掌转荒漠您只需要一个$\\text{exp}$就好了\n\n```cpp\nconst int L=18,N=1<<L|10,P=998244353;\n\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nint I[N],J[N];\nint rev[N],w[N];\nvoid Init(){\n\tw[1<<(L-1)]=1;\n\tint t=qpow(3,(P-1)>>L);\n\trep(i,(1<<(L-1))+1,1<<L) w[i]=1ll*w[i-1]*t%P;\n\tdrep(i,(1<<(L-1))-1,1) w[i]=w[i<<1];\n\trep(i,J[0]=1,N-1) J[i]=1ll*J[i-1]*i%P;\n\tI[N-1]=qpow(J[N-1]);\n\tdrep(i,N-1,1) I[i-1]=1ll*I[i]*i%P;\n}\nint Init(int n){\n\tint R=1,c=-1;\n\twhile(R<=n) R<<=1,c++;\n\trep(i,0,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<c);\n\treturn R;\n}\nvoid NTT(int n,V &A,int f) {\n\tstatic ull a[N];\n\tif((int)A.size()<n) A.resize(n);\n\trep(i,0,n-1) a[rev[i]]=A[i];\n\tfor(int i=1;i<n;i<<=1) {\n\t\tint *e=w+i;\n\t\tfor(int l=0;l<n;l+=i*2) {\n\t\t\tfor(int j=l;j<l+i;++j) {\n\t\t\t\tint t=a[j+i]*e[j-l]%P;\n\t\t\t\ta[j+i]=a[j]+P-t;\n\t\t\t\ta[j]+=t;\n\t\t\t}\n\t\t}\n\t}\n\trep(i,0,n-1) A[i]=a[i]%P,Mod2(A[i]);\n\tif(f==-1) {\n\t\treverse(A.begin()+1,A.end());\n\t\tll base=1ll*I[n]*J[n-1]%P;\n\t\trep(i,0,n-1) A[i]=A[i]*base%P;\n\t}\n}\n\nV operator + (V a,const V &b) {\n\tif(a.size()<b.size()) a.resize(b.size());\n\trep(i,0,b.size()-1) a[i]+=b[i],Mod1(a[i]);\n\treturn a;\n}\nV operator - (V a,const V &b) {\n\tif(a.size()<b.size()) a.resize(b.size());\n\trep(i,0,b.size()-1) a[i]-=b[i],Mod2(a[i]);\n\treturn a;\n}\nV operator * (V a,V b) {\n\tint n=a.size()-1,m=b.size()-1;\n\tint R=Init(n+m);\n\tNTT(R,a,1),NTT(R,b,1);\n\trep(i,0,R-1) a[i]=1ll*a[i]*b[i]%P;\n\tNTT(R,a,-1),a.resize(n+m+1);\n\treturn a;\n}\nV operator * (V a,const int &x) {\n\tfor(int &i:a) i=1ll*i*x%P;\n\treturn a;\n}\nV operator * (const int &x,V a) { return a*x; }\n\nvoid println(const V &a){\n\tfor(int i:a) printf(\"%d \",i);\n\tputs(\"\");\n}\nV read(int n){\n\tV A(n);\n\trep(i,0,n-1) A[i]=rd();\n\treturn A;\n}\nV operator ~ (V a) {\n\tint n=a.size(),m=(n+1)>>1;\n\tif(n==1) return {(int)qpow(a[0])};\n\tV b=a; b.resize(m),b=~b;\n\tint R=Init(n*2);\n\tNTT(R,a,1),NTT(R,b,1);\n\trep(i,0,R-1) a[i]=(P+2-1ll*a[i]*b[i]%P)*b[i]%P;\n\tNTT(R,a,-1),a.resize(n);\n\treturn a;\n}\nV Deriv(V a) {\n\trep(i,0,a.size()-2) a[i]=1ll*(i+1)*a[i+1]%P;\n\ta.pop_back();\n\treturn a;\n}\nV Integ(V a){\n\ta.pb(0);\n\tdrep(i,a.size()-1,1) a[i]=1ll*a[i-1]*J[i-1]%P*I[i]%P;\n\ta[0]=0;\n\treturn a;\n}\nV Ln(V a){\n\tint n=a.size();\n\ta=Deriv(a)*~a;\n\treturn a.resize(n-1),Integ(a);\n}\nV Exp(V a) {\n\tif(a.size()==1) return assert(a[0]==0),V{1};\n\tint n=a.size();\n\tV b=a; b.resize((n+1)/2),b=Exp(b),b.resize(n);\n\ta=a-Ln(b),a[0]++;\n\ta=a*b,a.resize(n);\n\treturn a;\n}\n\nV operator << (V a,int x) {\n\ta.resize(a.size()+x);\n\tdrep(i,a.size()-1,x) a[i]=a[i-x];\n\trep(i,0,x-1) a[i]=0;\n\treturn a;\n}\nV operator >> (V a,int x) {\n\tif((int)a.size()<=x) return V{ };\n\trep(i,x,a.size()-1) a[i-x]=a[i];\n\ta.resize(a.size()-x);\n\treturn a;\n}\n\nV Newton(int n){\n\tif(n==1) return V{0};\n\tif(n==2) return V{0,1};\n\tV G=Newton((n+1)/2); G.resize(n);\n\tV IG=~(V{1}-G);\n\tV H=(2*G-G*G); H.resize(n),H=H*IG*((P+1)/2),H.resize(n),H=Exp(H)<<1;\n\tV F=IG*IG; F.resize(n),F[0]++;\n\tF=H*F,F.resize(n),F[0]-=2,Mod2(F[0]);\n\tF=G-2*(H-G)*~F;\n\treturn F.resize(n),F;\n}\n\nint main(){\n\tint n=rd()+1; Init();\n\tV F=Newton(n); \n\trep(i,1,F.size()-1) F[i]=1ll*F[i]*I[i]%P*J[i-1]%P;\n\tF=Exp(F);\n\tprintf(\"%d\\n\",int(1ll*F.back()*J[n-1]%P));\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「雅礼集训 2018 Day8」B","url":"/articles/2021/03/22/3f22c6d2.html","content":"# 「雅礼集训 2018 Day8」B\n\n### Solution1\n\n设到达一个点的时间为$T_u$，从这个点出去的时间为$T_u'$\n\n那么显然满足$T_u\\leq T_u'\\leq T_u+t_u$，答案就是$\\sum (t_u-(T'_u-T_u))\\cdot c_u$\n\n对于一条边满足$T_v\\ge T'_u$，二分答案之后，容易发现这是一个线性规划问题\n\n可以暴力单纯形解决掉(当然是水的，但是好像还挺快。。)\n\n[Loj Submission](https://loj.ac/s/1096230)\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=630,P=1e9+7;\nconst db eps=1e-9;\n\nint n,m,W,t[N],c[N];\nint U[N],V[N];\ndb A[N][N];\n\n\ndb Simplex(int n){\n\tsrand(time(NULL));\n\tauto Pivot=[&](int x,int y) {\n\t\tstatic int P[N],C;\n\t\trep(i,0,n) A[y][i]=-A[x][i]/A[x][y];\n\t\tA[y][x]=1/A[x][y],A[y][y]=0;\n\t\trep(i,0,n) A[x][i]=0;\n\t\tC=0;\n\t\trep(i,0,n) if(abs(A[y][i])>eps) P[++C]=i;\n\t\trep(i,0,n) if(abs(A[i][y])>eps) {\n\t\t\tdb t=A[i][y]; A[i][y]=0;\n\t\t\trep(j,1,C) A[i][P[j]]+=t*A[y][P[j]];\n\t\t}\n\t};\n\tvector <int> V;\n\trep(i,1,n) V.pb(i);\n\t//random_shuffle(V.begin(),V.end());\n\twhile(1) {\n\t\tint u=0,v=0;\n\t\tfor(int i:V) if(!u || A[i][0]<A[u][0]) u=i;\n\t\tif(A[u][0]>-eps) break;\n\t\tfor(int i:V) if(A[u][i]>eps) v=i;\n\t\tif(!v) return puts(\"Infeasible\"),0;\n\t\tPivot(u,v);\n\t}\n\n\twhile(1) {\n\t\tint u=0,v=0;\n\t\tfor(int i:V) if(!v || A[0][i]>A[0][v]) v=i;\n\t\tif(A[0][v]<eps) break;\n\t\tfor(int i:V) if(A[i][v]<-eps) if(!u || (A[i][0]/A[i][v] > A[u][0]/A[u][v])) u=i;\n\t\tif(!u) return puts(\"Unbounded\"),0; \n\t\tPivot(u,v); \n\t}\n\treturn A[0][0];\n}\nint outd[N];\nint Check(int lim) {\n\tmemset(A,0,sizeof A);\n\tint cnt=n*2;\n\trep(i,1,n) A[0][i+n]=c[i],A[0][i]=-c[i],A[0][0]-=t[i]*c[i];\n\trep(i,1,n) {\n\t\tA[++cnt][i]=-1; A[cnt][i+n]=1;\n\t\tA[++cnt][i]=1; A[cnt][i+n]=-1; A[cnt][0]=t[i];\n\t}\n\trep(i,1,m) A[++cnt][U[i]+n]=-1,A[cnt][V[i]]=1;\n\trep(i,1,n) if(!outd[i]) A[++cnt][0]=lim,A[cnt][i+n]=-1;\n\tdb res=-Simplex(cnt);\n\treturn res<=W+eps;\n}\n\nint main(){\n\tfreopen(\"soft.in\",\"r\",stdin),freopen(\"soft.out\",\"w\",stdout);\n\tn=rd(),m=rd(),W=rd();\n\tint l=0,r=0,res=-1;\n\trep(i,1,n) t[i]=rd(),r+=t[i];\n\trep(i,1,n) c[i]=rd();\n\trep(i,1,m) U[i]=rd(),V[i]=rd(),outd[U[i]]++;\n\twhile(l<=r) {\n\t\tint mid=(l+r)>>1;\n\t\tif(Check(mid)) r=mid-1,res=mid;\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%d\\n\",res);\n}\n```\n\n$$ \\ $$\n\n### Solution2\n\n二分答案$\\text{lim}$，问题转化为求最小花费\n\n设每个点减少了$x_i$\n\n考虑限制有两种，一种是路径长度的限制，一种是每个点大小的限制\n\n$\\text{minimize:} \\sum x_i\\cdot c_i$\n\n$\\displaystyle \\forall p\\in paths , \\sum x_{p_i}\\ge \\sum t_{p_i}-\\text{lim}$\n\n$-x_i\\ge -t_i$\n\n\n\n对偶一下，设对于路径$p$，$\\sum x_{p_i}$的对偶变量为$y_p$，$-x_i$的对偶变量为$z_i$\n\n$\\text{maximize}:\\sum y_p\\cdot (\\sum t_{p_i}-\\text{lim})-z_i\\cdot t_i$\n\n$\\displaystyle \\forall i\\in[1,n], \\sum_{p\\in paths,i\\in p} y_p-z_i\\leq c$\n\n考虑对偶变量$y_p$和$z_i$有什么意义\n\n此时，选择一条路径$y_p$，会使得 关于路径上的点的限制+1 ， 使得答案增加$\\sum t_{p_i}-\\text{lim}$\n\n$z_i$是关于每个单点的变量，可以用$t_i$代价使得每个$i$的限制-1\n\n那么可以考虑转化为一个路径覆盖问题，选择一条路径覆盖路径上的点，且得到$\\sum t_{p_i}-\\text{lim}$的价值\n\n限制式子转化为：每个点被覆盖次数大于$c$时，再选择就要付出$t_i$的代价令$z_i$加一\n\n带权的路径覆盖容易转化为费用流模型，可以把每个点拆成入点出点，每个点被覆盖前$c_i$次，价值为$t_i$，之后就为0\n\n因此每个点的入点向出点连$(c_i,t_i),(\\infty,0)$两条边即可，路径的$\\text{-lim}$可以在源点前加入\n\n求一次最大费用可行流，最终得到的答案是原问题的最小代价\n\n[~~是我EK写得太丑的说~~: Loj Submission](https://loj.ac/s/1096314)\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nenum{N=10101,INF=1<<30};\n\nint n,m,W;\nint c[N],t[N],X[N],Y[N];\nstruct Edge{\n\tint to,nxt,w,c;\n} e[N];\nint head[N],ecnt=1;\nint V,S,T;\nvoid AddEdge(int u,int v,int w,int c){ e[++ecnt]=(Edge){v,head[u],w,c},head[u]=ecnt; }\nvoid Link(int u,int v,int w,int c){ AddEdge(u,v,w,c),AddEdge(v,u,0,-c); }\n\nint pre[N],dis[N],inq[N];\nint SPFA(int lim){\n\trep(i,1,V) dis[i]=-INF;\n\tstatic queue <int> que;\n\tdis[S]=-lim,que.push(S);\n\twhile(!que.empty()) {\n\t\tint u=que.front(); que.pop(),inq[u]=0;\n\t\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\t\tint v=e[i].to;\n\t\t\tif(!e[i].w || dis[v]>=dis[u]+e[i].c) continue;\n\t\t\tdis[v]=dis[u]+e[i].c,pre[v]=i;\n\t\t\tif(!inq[v]) que.push(v),inq[v]=1;\n\t\t}\n\t}\n\treturn dis[T]>0;\n}\n\nint Check(int lim){\n\tS=++V,T=++V;\n\trep(i,1,n) {\n\t\tLink(S,++V,INF,0);\n\t\tLink(V,V+1,c[i],t[i]);\n\t\tLink(V,V+1,INF,0);\n\t\tLink(++V,T,INF,0);\n\t}\n\trep(i,1,m) Link(X[i]*2+2,Y[i]*2+1,INF,0);\n\tint ans=0;\n\twhile(SPFA(lim)){\n\t\tint w=INF;\n\t\tfor(int i=T;i!=S;i=e[pre[i]^1].to) cmin(w,e[pre[i]].w);\n\t\tfor(int i=T;i!=S;i=e[pre[i]^1].to) e[pre[i]].w-=w,e[pre[i]^1].w+=w;\n\t\tans+=dis[T]*w;\n\t}\n\trep(i,1,V) head[i]=0;\n\tecnt=1,V=0;\n\treturn ans<=W;\n}\n\nint main(){\n\tfreopen(\"soft.in\",\"r\",stdin),freopen(\"soft.out\",\"w\",stdout);\n\tn=rd(),m=rd(),W=rd();\n\tint l=0,r=0,res=-1;\n\trep(i,1,n) r+=t[i]=rd();\n\trep(i,1,n) c[i]=rd();\n\trep(i,1,m) X[i]=rd(),Y[i]=rd();\n\tfor(int mid;l<=r;) Check(mid=(l+r)>>1)?r=mid-1,res=mid:l=mid+1;\n\tprintf(\"%d\\n\",res);\n}\n```\n\n","tags":["default tag"],"categories":["default category"]},{"title":"有标号DAG计数","url":"/articles/2021/03/22/31c608ff.html","content":"# 有标号DAG计数\n\n题目大意：求$n$个点有标号**弱连通**$\\text{DAG}$数量\n\n如果你做过类似 [「CEOI2019」游乐园](https://loj.ac/p/3165) 这样常见的$\\text{DAG}$计数问题\n\n就会对于统计$\\text{DAG}$数量的这个容斥方法十分熟悉\n\n枚举图分层，设当前已经确定的层中点集为$S$，下一层点集为$T$\n\n$dp_{S+T}\\leftarrow dp_{S}\\times 2^{|S|\\cdot |T|}(-1)^{|T|+1}$\n\n其中$|S|\\cdot |T|$为层间随意连的边数量，$(-1)^{|T|+1}$是针对分层不唯一的容斥\n\n当然这样统计出的$\\text{DAG}$是不连通的\n\n那么我们先考虑用卷积来维护这样的一个图\n\n设分层大小为$a_i,i\\in[1,m],n=\\sum a_i$，则上式的变化形式就是\n\n$\\displaystyle \\frac{\\displaystyle n!2^{\\binom{n} {2} }} {\\displaystyle \\prod a_i!(-1)^{a_i+1}2^{\\binom{a_i} {2} }}$\n\n其中$\\displaystyle \\binom{n} {2}-\\sum \\binom{a_i} {2}$就能得出层间边的数量\n\n那么令$\\displaystyle F(x)=\\sum_{n\\ge 1}\\frac{(-1)^{n+1} } {n!2^{\\binom{n} {2} }}$ ，由于层间有序，答案是\n\n$\\displaystyle G(x)=\\sum F^i(x)=\\frac{1} {1-F(x)}$\n\n求逆一次即可得到$G(x)$，然后补上式子中的系数$\\displaystyle 2^{\\binom{n} {2} }$\n\n显然不连通的$\\text{DAG}$转为连通$\\text{DAG}$只需要再求一次$\\ln $即可\n\n注意计算的时候是以$\\text{EGF}$的形式，最后要补回阶乘\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\ntypedef vector <int> V;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\n#ifndef ONLINE_JUDGE\n#define LOG(...) fprintf(stderr,__VA_ARGS__)\n#else\n#define LOG(...) \n#endif\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int L=18,N=1<<L|10,P=998244353;\n\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nint I[N],J[N];\nint rev[N],w[N];\nvoid Init(){\n\tw[1<<(L-1)]=1;\n\tint t=qpow(3,(P-1)>>L);\n\trep(i,(1<<(L-1))+1,1<<L) w[i]=1ll*w[i-1]*t%P;\n\tdrep(i,(1<<(L-1))-1,1) w[i]=w[i<<1];\n\trep(i,J[0]=1,N-1) J[i]=1ll*J[i-1]*i%P;\n\tI[N-1]=qpow(J[N-1]);\n\tdrep(i,N-1,1) I[i-1]=1ll*I[i]*i%P;\n}\nint Init(int n){\n\tint R=1,c=-1;\n\twhile(R<=n) R<<=1,c++;\n\trep(i,0,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<c);\n\treturn R;\n}\nvoid NTT(int n,V &A,int f) {\n\tstatic ull a[N];\n\tif((int)A.size()<n) A.resize(n);\n\trep(i,0,n-1) a[rev[i]]=A[i];\n\tfor(int i=1;i<n;i<<=1) {\n\t\tint *e=w+i;\n\t\tfor(int l=0;l<n;l+=i*2) {\n\t\t\tfor(int j=l;j<l+i;++j) {\n\t\t\t\tint t=a[j+i]*e[j-l]%P;\n\t\t\t\ta[j+i]=a[j]+P-t;\n\t\t\t\ta[j]+=t;\n\t\t\t}\n\t\t}\n\t}\n\trep(i,0,n-1) A[i]=a[i]%P,Mod2(A[i]);\n\tif(f==-1) {\n\t\treverse(A.begin()+1,A.end());\n\t\tll base=1ll*I[n]*J[n-1]%P;\n\t\trep(i,0,n-1) A[i]=A[i]*base%P;\n\t}\n}\n\nV operator + (V a,const V &b) {\n\tif(a.size()<b.size()) a.resize(b.size());\n\trep(i,0,b.size()-1) a[i]+=b[i],Mod1(a[i]);\n\treturn a;\n}\nV operator - (V a,const V &b) {\n\tif(a.size()<b.size()) a.resize(b.size());\n\trep(i,0,b.size()-1) a[i]-=b[i],Mod2(a[i]);\n\treturn a;\n}\nV operator * (V a,V b) {\n\tint n=a.size()-1,m=b.size()-1;\n\tint R=Init(n+m);\n\tNTT(R,a,1),NTT(R,b,1);\n\trep(i,0,R-1) a[i]=1ll*a[i]*b[i]%P;\n\tNTT(R,a,-1),a.resize(n+m+1);\n\treturn a;\n}\nvoid println(const V &a){\n\tfor(int i:a) printf(\"%d \",i);\n\tputs(\"\");\n}\nV read(int n){\n\tV A(n);\n\trep(i,0,n-1) A[i]=rd();\n\treturn A;\n}\nV operator ~ (V a) {\n\tint n=a.size(),m=(n+1)>>1;\n\tif(n==1) return {(int)qpow(a[0])};\n\tV b=a; b.resize(m),b=~b;\n\tint R=Init(n*2);\n\tNTT(R,a,1),NTT(R,b,1);\n\trep(i,0,R-1) a[i]=(P+2-1ll*a[i]*b[i]%P)*b[i]%P;\n\tNTT(R,a,-1),a.resize(n);\n\treturn a;\n}\nV Deriv(V a) {\n\trep(i,0,a.size()-2) a[i]=1ll*(i+1)*a[i+1]%P;\n\ta.pop_back();\n\treturn a;\n}\nV Integ(V a){\n\ta.pb(0);\n\tdrep(i,a.size()-1,1) a[i]=1ll*a[i-1]*J[i-1]%P*I[i]%P;\n\ta[0]=0;\n\treturn a;\n}\nV Ln(V a){\n\tint n=a.size();\n\ta=Deriv(a)*~a;\n\treturn a.resize(n-1),Integ(a);\n}\nint Div2(int x){ return (x&1?x+P:x)/2; }\nint Pow[N],IPow[N];\n\nint main(){\n\tint n=rd();\n\tInit();\n\tPow[0]=Pow[1]=IPow[0]=IPow[1]=1;\n\tfor(int i=2,x=2,y=(P+1)/2;i<N;i++,x*=2,Mod1(x),y=Div2(y)) {\n\t\tPow[i]=1ll*Pow[i-1]*x%P;\n\t\tIPow[i]=1ll*IPow[i-1]*y%P;\n\t}\n\tV F(n+1);\n\trep(i,1,n) {\n\t\tF[i]=1ll*I[i]*IPow[i]%P;\n\t\tif(~i&1) F[i]=-F[i],Mod2(F[i]); // 这个是容斥系数 \n\t\tF[i]=P-F[i];// 这个是1-F\n\t}\n    // 这个是1-F\n\tF[0]=1;\n\tF=~F;\n\trep(i,0,n) F[i]=1ll*F[i]*Pow[i]%P;\n    // 补回系数，然后做一次ln\n\tF=Ln(F);\n\trep(i,0,n) F[i]=1ll*F[i]*J[i]%P;\n\trep(i,1,n) printf(\"%d\\n\",F[i]);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"[AtCoder Regular Contest 115]  D","url":"/articles/2021/03/22/ba67d282.html","content":"# [AtCoder Regular Contest 115](https://atcoder.jp/contests/arc115) #D\n\n### Solution1\n\n考虑用$\\text{FWT}$来理解这个式子，容易发现$\\text{FWT}$之后求积的式子，满足\n\n对于任意$(u_i,v_i)$\n\n如果$u_i,v_i$中有一者被选择，答案为0，否则权值$\\times 2$\n\n那么显然对于一个连通块，设其大小为$c$，放在一起考虑\n\n在$\\text{FWT}$的式子里它们同时出现或者同时不出现\n\n枚举最后$\\text{FWT}$回来时的项与在这$c$个位置中出现$i$个\n\n对于选择这个连通块的情况，贡献为$(-1)^i$\n\n对于不选的情况，贡献为$1$\n\n显然只有$2|i$时贡献为2，乘上组合数完成转移，连通块之间背包合并\n\n就能得到最终计算答案的项中出现了几个1，然后与$\\text{FWT}$的系数合并即可\n\n$$  \\ $$\n\n### Solution2\n\n对于一个连通块，考虑取出一个生成树\n\n容易发现，仅使用这个生成树上的边，就能构成任何一个包含$2k$个奇点的情况\n\n对于多余的边，类似异或线性基，它们都是可选可不选的\n\n于是直接统计答案即可\n\n\n\nSol1 和 Sol2 的式子是一样的\n\n```cpp\nconst int N=5010,P=998244353;\nint n,m,dp[N];\nll qpow(ll x,ll k=P-2){\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nvector <int> G[N];\nint c,vis[N],C[N][N];\nvoid dfs(int u){\n\tif(vis[u]) return;\n\tvis[u]=1,c++;\n\tfor(int v:G[u]) dfs(v);\n}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,0,n) rep(j,*C[i]=1,i) C[i][j]=C[i-1][j]+C[i-1][j-1],Mod1(C[i][j]);\n\trep(i,1,m) {\n\t\tint u=rd(),v=rd();\n\t\tG[u].pb(v),G[v].pb(u);\n\t}\n\tdp[0]=1;\n\trep(u,1,n) if(!vis[u]) {\n\t\tc=0,dfs(u);\n\t\tdrep(i,n,0) {\n\t\t\tint s=0;\n\t\t\trep(j,0,min(i,c)) if(~j&1) {\n\t\t\t\ts=(s+2ll*dp[i-j]*C[c][j])%P;\n\t\t\t}\n\t\t\tdp[i]=s;\n\t\t}\n\t}\n\tint d=qpow(2,P-1-n+m);\n\trep(i,0,n) printf(\"%d\\n\",int(1ll*dp[i]*d%P));\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder"],"categories":["题解"]},{"title":"Nimber系列略学习笔记","url":"/articles/2021/03/17/248a1c21.html","content":"# Nimber系列略学习笔记\n\n#### 前言\n\n$\\text{Nim+Number=Nimber}$\n\n基于我们熟悉的博弈问题$\\text{Nim}$问题，我们定义了多$\\text{Nim}$问题的和，即$\\text{Nim}$和\n\n我们知道$\\text{Nim}$和就是异或运算，为了构成一个更完整的$\\text{Number}$域，又引入一种新的运算\n\n即$\\text{Nim}$积\n\n$$ \\ $$\n\n$$ \\ $$\n\n### 定义\n\n对于在$[0,2^{2^m})$上的整数，定义两种$\\text{Nim}$运算，构成一个封闭的域\n\n1.$\\text{Nim}$和$\\oplus$，$\\displaystyle x\\oplus y=\\text{mex} \\{ \\{a\\oplus y|a<x\\}\\cup\\{x\\oplus b|b<y\\} \\}$\n\n其中对于非负整数集合的$\\text{mex}$运算即求不在集合中的最小非负整数\n\n也就是$\\text{Nim}$游戏的\"和\"\n\n$$ \\ $$\n\n2.$\\text{Nim}$积$\\otimes$\n\n需要先介绍高维$\\text{Nim}$游戏\n\n对于一维情况：\n\n数轴上整点处有若干黑点$x_i$，每次操作可以选择一个黑点$x_i$，找到$a<x_i$\n\n将线段$[a,x_i]$两端点的黑白翻转\n\n对于二维情况：\n\n平面上整点处有若干黑点$(x_i,y_i)$，每次选择一个黑点$(x_i,y_i)$，找到另一个点$(a,b),a<x_i,b<y_i$\n\n将矩形$(a,b)-(x_i,y_i)$四个顶点的颜色翻转\n\n对于三维情况：\n\n空间上整点处有若干黑点$(x_i,y_i,z_i)$，每次选择一个黑点$(x_i,y_i,z_i)$，找到另一个点$(a,b,c),a<x_i,b<y_i,c<z_i$\n\n将长方体$(a,b,c)-(x_i,y_i,z_i)$八个顶点的颜色翻转\n\n$\\ldots$\n\n$\\text{Nim}$积是高维$\\text{Nim}$游戏的降维操作，显然各个维度之间无序，每个黑点之间可以通过$\\text{Nim}$和相加\n\n由此定义在二维$\\text{Nim}$游戏上的$\\text{Nim}$积运算\n\n$x\\otimes y=\\text{mex} \\{(a\\otimes y)\\oplus (x\\otimes b)\\oplus(a\\otimes b)|a<x,b<y\\}$\n\n相较于$\\text{Nim}$和，$\\text{Nim}$积运算十分复杂，需要若干性质简化运算\n\n1.基础运算律\n\n$x\\otimes 1=x$\n\n$x\\otimes y=y\\otimes x$\n\n$(x\\otimes y)\\otimes z=x\\otimes (y\\otimes z)$\n\n\n\n2.{%raw%}$2^{2^n}\\otimes 2^{2^m}=\\left\\{\\begin{aligned}2^{2^n+2^m} && n\\ne m\\\\ 3\\cdot 2^{2^n-1} && n=m\\end{aligned}\\right.${%endraw%}\n\n3.$2^{2^n}\\otimes x=2^{2^n}\\times x\\ (x<2^{2^n})$\n\n对于$x,y\\in [0,2^{2^m})$，利用性质3，用减半的方法优化运算，令$n=2^{m-1}$\n\n$x=a\\cdot 2^n+b,y=c\\cdot 2^n+d,a,b,c,d\\in[0,2^n)$\n\n$x\\otimes y=(a\\otimes 2^n\\oplus b)\\otimes (c\\otimes 2^n\\oplus d)$\n\n$=((a\\otimes c)\\otimes (3\\cdot 2^{n-1}))\\oplus  (2^n\\cdot ((a\\otimes d)\\oplus (b\\otimes c))\\ ) \\oplus (b\\otimes d)$\n\n$=((a\\otimes c)\\otimes (2^{n}\\oplus 2^{n-1}))\\oplus  (2^n\\cdot ((a\\otimes d)\\oplus (b\\otimes c))\\ ) \\oplus (b\\otimes d)$\n\n$=((a\\otimes c)\\otimes 2^{n-1})\\oplus  (2^n\\cdot ((a\\otimes c)\\oplus (a\\otimes d)\\oplus (b\\otimes c))\\ ) \\oplus (b\\otimes d)$\n\n$=((a\\otimes c)\\otimes 2^{n-1})\\oplus  (2^n\\cdot ((a\\oplus b)\\otimes (c\\oplus d)\\oplus (b\\otimes d))) \\oplus (b\\otimes d)$\n\n由此进行暴力递归需要依次计算$a\\otimes c,(a\\otimes c)\\otimes 2^{n-1},b\\otimes d,(a\\oplus b)\\otimes (c\\oplus d)$\n\n复杂度为$O(4^{m})$，由于$2^{n-1}$\n\n对于$2^{32}$以内的运算，即$m=5$，看起来已经可以接受?\n\n$$\\ $$\n\n$$ \\ $$\n\n### 应用原根的优化\n\n$\\text{Nimber}$域内是存在原根的，$[0,2^{16})$域内最小的原根是$258$\n\n如果预处理出$[0,2^{16})$以内所有数的原根指标和乘法表，即可$O(1)$查询$[0,2^{16})$任意数的$\\text{Nimber}$积\n\n由此也可以仅通过一次递归计算$[0,2^{32})$域内的$\\text{Nimber}$积\n\n$$ \\ $$\n\n$$ \\ $$\n\n### 更多运算\n\n对于$[0,2^{2^m})$域内的$\\text{Nimber}$，由性质$x^{2^m}=x$导出的运算有\n\n$\\displaystyle \\frac{1} {x}=x^{2^m-2}$ \n\n$\\sqrt x=x^{2^{m-1} }$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["学习笔记"]},{"title":"「JOISC 2020 Day4」传奇团子师傅 (假模拟退火)","url":"/articles/2021/03/17/9c175b12.html","content":"# 「JOISC 2020 Day4」传奇团子师傅 (假模拟退火)\n\n感觉每次想写模拟退火，调着调着就不知道变成什么东西了\n\n首先是分析原图，每个方案对应选择三个点，不同的方案之间显然存在排斥关系\n\n将这些关系建立成边，问题就转化为一个 **一般图最大独立集** 问题\n\n~~这怎么搞得定。。~~\n\n因此考虑退火，每次操作随机选择一个点，检查周围的点是否选择，数一下如果自己被选，要弹掉的点的个数\n\n同普通的退火，一开始温度高不停随机\n\n到了后面就直接变成 选择答案不劣的方案（也就是交换两个点），事实证明这样的效率比较高\n\n但是直接随机容易随机到选过的点，需要稍微加速一下\n\n具体的，退火每若干次为一轮，每轮随机一个排列\n\n在排列中从左到右找到前面$L$个未选点，然后在$L$个点中随机若干次进行决策\n\n我是直接暴力bitset存答案的，但是效率好像还可以\n\n因为是跑一个点调一次参数的，前面的代码都没存。。。\n\ntips:代码对于不同数据需要修改前面三行的常量\n\n```cpp\nconst int N=510,M=N*N/2,INF=1e9+10;\nconst char infile[]=\"5.in\",outfile[]=\"output_05.txt\";\nconst int MAX=48620;\n\nint n,m,C;\nchar s[N][N];\nint chk(char x){ return x=='P' || x=='G'; }\nstruct Node{\n    int x,y,t;\n} R[M];\nbitset <M> Ansmap,Nowmap;\nint ans,now;\n\nint z[4][2]={ {0,1},{1,0},{-1,-1},{-1,1} };\nchar S[]=\"-|\\\\/\";\nvector <int> G[N][N],E[M];\n\nstruct Naive_Simulator{\n    ~Naive_Simulator(){\n        cerr<<\"!\"<<endl;\n        rep(i,1,C) if(Ansmap[i]) s[R[i].x][R[i].y]=S[R[i].t];\n        rep(i,1,n) puts(s[i]+1);\n    }\n    int P[M],D[M],F[M],PC,counter,lst,L;\n    void Work(db T,db d,db End,int delta) {\n        while(T>End && ans<MAX) {\n            if(++counter%4000==0) {\n                cerr<<ans<<' '<<T<<endl;\n            }\n            if(counter%500==0) random_shuffle(D+1,D+C+1),lst=1;\n            PC=0;\n            rep(i,lst,C) if(!Nowmap[D[i]]) {\n                P[++PC]=D[i];\n                lst=i;\n                if(PC>=L) break;\n            }\n            if(PC<L) {\n                lst=1;\n                PC=0;\n                rep(i,lst,C) if(!Nowmap[D[i]]) {\n                    P[++PC]=D[i];\n                    lst=i;\n                    if(PC>=L) break;\n                }\n            }\n            rep(kase,1,50) {\n                int u,v;\n                u=P[rand()%PC+1],v=P[rand()%PC+1];\n                if(u==v || Nowmap[u]) {\n                    kase--;\n                    continue;\n                }\n                int cnt=0;\n                for(int v:E[u]) cnt+=Nowmap[v];\n                if(cnt-delta<=T) {\n                    Nowmap[u]=1;\n                    for(int v:E[u]) Nowmap[v]=0;\n                    now+=1-cnt;\n                } \n                if(kase%5==0 && now>ans) ans=now,Ansmap=Nowmap;\n            }\n            T*=d;\n        }\n    }\n    void Simulate(){\n        //srand(114514);\n        //srand(1919810);\n        srand(time(NULL));\n        now=0,Nowmap.reset();\n        counter=0,lst=1,L=200;\n        rep(i,1,C) D[i]=i;\n        rep(kase,1,10) Work(2,0.95,1e-2,1);\n        Work(0.99,0.99993,1e-8,2);\n        Nowmap=Ansmap,now=ans;\n        Work(0.99,0.99999,0,1);\n        return;\n    }\n\n    Naive_Simulator(){\n        freopen(infile,\"r\",stdin),freopen(outfile,\"w\",stdout);\n        n=rd(),m=rd();\n        rep(i,1,n) scanf(\"%s\",s[i]+1);\n        rep(i,1,n) rep(j,1,m) if(!chk(s[i][j])) {\n            s[i][j]='W';\n            rep(d,0,3) if(chk(s[i+z[d][0]][j+z[d][1]]) && chk(s[i-z[d][0]][j-z[d][1]]) && s[i+z[d][0]][j+z[d][1]]!=s[i-z[d][0]][j-z[d][1]]) {\n                R[++C]=(Node){i,j,d};\n                G[i][j].pb(C);\n                G[i+z[d][0]][j+z[d][1]].pb(C);\n                G[i-z[d][0]][j-z[d][1]].pb(C);\n            }\n        }\n        rep(i,1,n) rep(j,1,m) rep(k,0,G[i][j].size()-1) rep(l,k+1,kend) {\n            E[G[i][j][k]].pb(G[i][j][l]);\n            E[G[i][j][l]].pb(G[i][j][k]);\n        }\n        Simulate();\n    }\n} Solver;\n\nint main(){ ; }\n```\n\n","tags":["JOI"],"categories":["题解"]},{"title":"「JOISC 2020 Day4」首都城市","url":"/articles/2021/03/17/77ce1303.html","content":"# 「JOISC 2020 Day4」首都城市\n\n题目大意：给定一棵树，每个点有颜色\n\n求选择一个最小的颜色集合，使得这些颜色的点能够构成一个连通块\n\n----------\n\n容易发现，选取这个颜色就必须将这个颜色连通路径上的所有其它颜色选掉\n\n但是要纠正一个：\n\n并不是选取的这个颜色的连通路径上的颜色就行\n\n因为选取另一个颜色，可能导致不在当前连通路径上的其它颜色也需要被选取\n\n$$ \\ $$\n\n这样的关系构成一个有向图，一条边表示选了$u$就选$v$\n\n因此可以考虑$\\text{tarjan}$强连通缩点，由于最终我们选择强连通分量一定没有出边（否则不优）\n\n因此可以线性统计答案，问题在于如何建立这个图\n\n首先考虑如何将这个连通路径提取出来，一种简单的办法是：找到这个颜色所有点的$\\text{LCA}$，路径就可以表示为$\\text{LCA}$到所有点路径的并\n\n### Solution1\n\n树剖线段树完成路径连边\n\n点数为$O(n)$，边数为$O(n\\log ^2n)$\n\n### Solution2\n\n倍增连边\n\n点数边数均为$O(n\\log n)$\n\n### Solution3\n\n离线，用类似$\\text{tarjan LCA}$的方式，维护一个并查集\n\n每次并查集的父亲关系改变时，新建节点，即可完成一个类似可持久化的操作\n\n如果再用$\\text{tarjan}$预处理$\\text{LCA}$，复杂度/点数/边数 就为$O(n\\alpha(n))$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef pair <int,int> Pii;\n#define pb push_back\n#define mp make_pair\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\nchar buf[200000],*p1,*p2;\n#define getchar() (((p1==p2)&&(p2=(p1=buf)+fread(buf,1,200000,stdin))),*p1++)\nint rd(){\n\tint s=0;static char c;\n\twhile(c=getchar(),c<48);\n\tdo s=(s<<1)+(s<<3)+(c^'0');\n\twhile(c=getchar(),c>47);\n\treturn s;\n}\n\nconst int N=2e5+10,INF=1e9+10,K=N*3.5;\n\nint n,k,m;\nint A[N],L[N],F[N],C[N],Fir[N],I[N];\nvector <int> G[N],V[N];\nstruct Edge{ \n\tint to,nxt; \n} e[K*2];\nint head[K],ecnt;\nvoid AddEdge(int u,int v){\n\tif(u==v) return;\n\te[++ecnt]=(Edge){v,head[u]};\n\thead[u]=ecnt;\n}\n\nint Find1(int x){ return F[x]==x?x:F[x]=Find1(F[x]); }\nvoid pre_dfs(int u,int f){\n\tF[u]=u;\n\tif(!Fir[A[u]]) Fir[A[u]]=u;\n\tif(--C[A[u]]==0) L[A[u]]=Find1(Fir[A[u]]);\n\tfor(int v:G[u]) if(v!=f) pre_dfs(v,u);\n\tF[u]=f;\n}\n\nPii Find(int x){\n\tif(F[x]==x) return mp(F[x],I[x]);\n\tPii t=Find(F[x]);\n\treturn AddEdge(++m,t.second),AddEdge(m,I[x]),F[x]=t.first,mp(F[x],I[x]=m);\n}\n\nvoid dfs(int u,int f){\n\tF[u]=u,I[u]=A[u];\n\tfor(int v:G[u]) if(v!=f) dfs(v,u);\n\tfor(int v:V[u]) AddEdge(A[v],Find(v).second);\n\tF[u]=f;\n}\n\nint t[K],low[K],ins[K],stk[K],top,dfn;\nint ans=1e9,vis[N],out[K];\nvoid dfs(int u){\n\tt[u]=low[u]=++dfn,ins[stk[++top]=u]=1;\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(!t[v]) dfs(v),cmin(low[u],low[v]);\n\t\telse if(ins[v]) cmin(low[u],t[v]);\n\t}\n\tif(low[u]==t[u]){\n\t\tint fl=1,tmp=top;\n\t\tfor(int v=-1;v!=u;){\n\t\t\tv=stk[top--];\n\t\t\tfor(int i=head[v];i;i=e[i].nxt) if(!ins[e[i].to]) { fl=0; break; }\n\t\t}\n\t\trep(i,top+1,tmp) ins[stk[i]]=0;\n\t\tif(fl) {\n\t\t\tint res=0;\n\t\t\trep(i,top+1,tmp) {\n\t\t\t\tint x=stk[i];\n\t\t\t\tif(x<=k && !vis[x]) vis[x]=1,res++;\n\t\t\t}\n\t\t\trep(i,top+1,tmp) if(stk[i]<=k) vis[stk[i]]=0;\n\t\t\tif(res) cmin(ans,res-1);\n\t\t}\n\t}\n}\n\nint main(){\n\tn=rd(),k=rd();\n\trep(i,2,n) {\n\t\tint u=rd(),v=rd();\n\t\tG[u].pb(v),G[v].pb(u);\n\t}\n\trep(i,1,n) C[A[i]=rd()]++;\n\tpre_dfs(1,0);\n\trep(i,1,n) V[L[A[i]]].pb(i);\n\tm=k;\n\tdfs(1,0);\n\trep(i,1,k) if(!t[i]) dfs(i);\n\tprintf(\"%d\\n\",ans);\n\tfprintf(stderr,\"Vertices =%d \\nEdges =%d\\n\",m,ecnt);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["JOI"],"categories":["题解"]},{"title":"「ZJOI2020」抽卡","url":"/articles/2021/03/14/995ef261.html","content":"# 「ZJOI2020」抽卡\n\n## Sub1: 从$n$张卡中选取钦定的$m$张的期望次数\n\n令$f_m$表示期望次数，显然$m>0,f_m=\\frac{(n-m)f_m+mf_{m-1} } {n}+1$\n\n即$f_0=0,f_m=f_{m-1}+\\frac{n} {m}$\n\n即$\\displaystyle f_m=\\sum_{i=1}^m \\frac{n} {i}$\n\n## Minmax容斥转化\n\n回到原问题的$a_1,a_2,\\ldots,a_m$，按照连续$k$个分段，设每段开始点$A_i$\n\n我们要求这些$[A_i,A_i+k)$第一次有一个被满足的期望，这难以解决\n\n用一个$\\text{minmax}$容斥处理掉\n\n$\\displaystyle \\min\\{\\exists A_i合法\\}=(-1)^{T+1}\\sum_{T\\subset S} \\max\\{\\forall i\\in T,A_i合法\\}$\n\n这个$\\text{max}$显然取决于$A_i$并的长度\n\n令$dp_{i,j}$表示当前最大的选择点为$i$，选择的总长度为$j$，容易用前缀和优化到$O(n^2)$\n\n$$ \\ $$\n\n## 优化求解\n\n容易想到对于每个长度$\\ge k$的连续段分别求解，然后分治$\\text{NTT}$背包合并\n\n此时我们要对于连续$n$个元素可以选择的子问题求解答案生成函数$F_n(x)$\n\n$$ \\ $$\n\n#### 推论：对于某一个长度$L \\in[k+2,2k]$的且已经确定都选择的段，其容斥系数为0\n\n考虑此时，收尾两个段必须选择，而中间的段(个数$>0$)随意选择\n\n由等式$\\sum {T\\in S} (-1)^{|T|}=[S=\\empty]$可知，其系数为0\n\n观察一下我们能由这个推论得到什么\n\n令$dp_{n}$表示顺次覆盖前$n$个元素的系数\n\n$dp_{k}=-1,dp_{k+1}=-dp_{k}=1$\n\n$\\forall i\\in[k+2,2k],dp_i=0$\n\n$dp_{2k+1}=-dp_{k+1}=-1$\n\n$dp_{2k+2}=-dp_{2k+1}=1$\n\n想必睿智的你一定已经发现了，$dp$数组$k+1$一循环\n\n~~实际上根据这个性质的暴力$dp$可以多10pts~~\n\n由于$dp_{k+1}=1$，也可以表示为$dp_{i}=dp_{k+1}\\cdot dp_{i-k-1}$\n\n因此可以把连续段的前$k+1$个分裂开来，**假装不连续**\n\n此时，我们可以简单描述为：\n\n每次选择的是一个长度为$k+1$的段\n\n可以覆盖前$k$个，系数为$-1$\n\n也可以覆盖$k+1$个，系数为$1$\n\n并且这$k+1$个段不能相交，可以相邻\n\n根据这样的决策，计算系数可以分为两步\n\n$n$个元素选出$i$个长度为$k+1$的段，剩下的元素可以分配到这$i+1$个间隔中\n\n方案数为$\\displaystyle \\binom{n-i(k+1)+i+1-1} {i+1-1}=\\binom{n-ik} {i}$\n\n一开始令这些段都选择前$k$个，然后对于某一些可以额外选择最后一个，乘上$-x$\n\n由此我们列出$\\text{OGF}$表达式\n\n$\\displaystyle G_n(x)=\\sum_{i=0}^{\\frac{n} {k+1} } (-1)^i\\binom{n-ik} {i}x^{ik}(1-x)^i$\n\n$\\displaystyle G_n(x)=\\sum_{i=0}^{\\frac{n} {k+1} } \\binom{n-ik} {i}x^{ik}(x-1)^i$\n\n注意边界情况是最后$k$个被选的情况不会算进去，因此实际上\n\n$F_n(x)=G_n(x)-x^kG_n(n-k)$\n\n考虑如何计算$G_n(x)$\n\n我们对于所有的$i$分治，分治到区间$[l,r]$时，我们维护的是\n\n$\\displaystyle \\sum_{i=l}^{r} \\binom{n-ik} {i}x^{(i-l)k}(x-1)^{(i-l)}$\n\n这样就能保证分治时，区间内多项式长度为$O((r-l+1)(k+1))$\n\n合并时，给右区间补上$x^{(mid-l+1)k}(x-1)^{mid-l+1}$即可\n\n因此计算$F_n(x)$和合并$F_n(x)$的复杂度均为$O(n\\log ^2n)$\n\n~~不$sort$有80pts.jpg~~\n\n~~代码好看就完事了~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\nchar IO;\nint rd(){\n\tint s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\n\nconst int N=1<<18|10,P=998244353;\n\nint n,k;\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nint rev[N],I[N],J[N];\ntypedef vector <int> V;\nvoid Init(){\n\trep(i,J[0]=1,N-1) J[i]=1ll*J[i-1]*i%P;\n\tI[N-1]=qpow(J[N-1]);\n\tdrep(i,N-1,1) I[i-1]=1ll*I[i]*i%P;\n}\nint Init(int n){\n\tint R=1,c=-1;\n\twhile(R<=n) R<<=1,c++;\n\trep(i,0,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<c);\n\treturn R;\n}\nvoid NTT(int n,V &a,int f) {\n\tstatic int e[N>>1];\n\trep(i,0,n-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n\tfor(int i=e[0]=1;i<n;i<<=1) {\n\t\tll t=qpow(f==1?3:(P+1)/3,(P-1)/i/2);\n\t\tfor(int j=i-2;j>=0;j-=2) e[j+1]=(e[j]=e[j>>1])*t%P;\n\t\tfor(int l=0;l<n;l+=i*2) {\n\t\t\tfor(int j=l;j<l+i;++j) {\n\t\t\t\tint t=1ll*e[j-l]*a[j+i]%P;\n\t\t\t\ta[j+i]=a[j]-t,Mod2(a[j+i]);\n\t\t\t\ta[j]+=t,Mod1(a[j]);\n\t\t\t}\n\t\t}\n\t}\n\tif(f==-1) {\n\t\tll Inv=1ll*I[n]*J[n-1]%P;\n\t\trep(i,0,n-1) a[i]=a[i]*Inv%P;\n\t}\n}\n\nV operator * (V a,V b){\n\tif(!a.size() || !b.size()) return { };\n\tint n=a.size()+b.size()-1,R=Init(n);\n\ta.resize(R),b.resize(R);\n\tNTT(R,a,1),NTT(R,b,1);\n\trep(i,0,R-1) a[i]=1ll*a[i]*b[i]%P;\n\tNTT(R,a,-1);\n\ta.resize(n);\n\treturn a;\n}\nV operator + (V a,V b){\n\tif(a.size()<b.size()) swap(a,b);\n\trep(i,0,b.size()-1) a[i]+=b[i],Mod1(a[i]);\n\treturn a;\n}\nV operator - (V a,const V &b){\n\tif(a.size()<b.size()) a.resize(b.size());\n\trep(i,0,b.size()-1) a[i]-=b[i],Mod2(a[i]);\n\treturn a;\n}\n\nV operator << (V a,const int &x){\n\ta.resize(a.size()+x);\n\tdrep(i,a.size()-1,x) a[i]=a[i-x];\n\trep(i,0,x-1) a[i]=0;\n\treturn a;\n}\n\nint C(int n,int m){ return n<0||m<0||n<m?0:1ll*J[n]*I[m]%P*I[n-m]%P; }\nV Binom(int n){\n\tV A(n+1);\n\trep(i,0,n) A[i]=(n-i)&1?P-C(n,i):C(n,i);\n\treturn A;\n}\nV Solve(int n,int l,int r){\n\tif(l==r) return {C(n-l*k,l)};\n\tint mid=(l+r)>>1;\n\treturn Solve(n,l,mid)+((Solve(n,mid+1,r)*Binom(mid-l+1))<<(k*(mid-l+1)));\n}\nV GetG(int n){ return Solve(n,0,n/(k+1)); }\nV GetF(int n){ return GetG(n)-(GetG(n-k)<<k); }\n\nvector <V> T;\nV Solve(int l=0,int r=T.size()-1){\n\tif(l==r) return T[l];\n\tint mid=(l+r)>>1;\n\treturn Solve(l,mid)*Solve(mid+1,r);\n}\nint A[N];\n\nint main(){\n\tInit(),n=rd(),k=rd();\n\trep(i,1,n) A[i]=rd();\n\tsort(A+1,A+n+1);\n\trep(i,1,n) {\n\t\tint j=i;\n\t\twhile(A[j+1]==A[j]+1) j++;\n\t\tif(j-i+1>=k) T.pb(GetF(j-i+1));\n\t\ti=j;\n\t}\n\tV Res=Solve();\n\tint s=0,ans=0;\n\trep(i,1,Res.size()-1){\n\t\ts=(s+1ll*n*I[i]%P*J[i-1])%P;\n\t\tans=(ans+1ll*s*Res[i])%P;\n\t}\n\tans=(P-ans)%P;\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["JOI","各省OI"],"categories":["题解"]},{"title":"CF Round 698 Div1. Nezzar and Chocolate Bars","url":"/articles/2021/03/14/c23c1321.html","content":"# CF Round#698 Div1. Nezzar and Chocolate Bars\n\n#### 前言\n\n这就是大道至简吗。。\n\n为什么和某ZJOI开关一样，到最后就是个背包。。\n\n-----------------------\n\n\n\n### 题目大意：\n\n给定$n,K$和一些棍子长度为$l_i(i\\in [1,n])$（实数！）\n\n每次随机选择一根棍子，概率与$l_i$成正比，然后随机分裂成两段（实数！）\n\n一直分裂，直到每根棍子$l_i\\leq K$，求期望分裂次数\n\n$$ \\ $$\n\n根据题意容易归纳一个更直观的模型：\n\n把这些$l_i$排在数轴上，初始时，点集为$0,l_1,l_1+l_2,\\ldots$\n\n每次随机在数轴上撒一个点，直到点集中相邻两点距离$\\leq K$为止\n\n考虑从简单情况入手\n\n$$ \\ $$\n\n## n=1\n\n单棍情况，设长度为$L$，考虑期望的简单等价变换\n\n$\\displaystyle E(\\text{条件第一次成立操作数})=\\sum_{i=0}^{\\infty} P(i次操作条件未成立)$\n\n设$P_n$为操作$n$次成立（不是恰好）的概率 ~~(变量名重了不要介意)~~\n\n设$n$次操作后的点集排列之后为$X_i$，其中$X_0=0,X_{n+1}=L$\n\n我们要求$\\forall i\\in[1,n+1],Z_i=X_i-X_{i-1}\\leq K$，考虑用一个二项式反演来解决这个计算\n\n设$W=\\lfloor \\frac{L} {K}\\rfloor$\n\n$\\displaystyle P_n=\\frac{1} {L^n}\\sum_{i=0}^{W} (-1)^i\\binom{n+1} {i}(L-iK)^n$\n\n其意义即为从分成的$n+1$个$Z_i$中选择$i$个强制不合法，然后剩下的随意分布，由此计算概率\n\n$$ \\ $$\n\n## 一般情形\n\n考虑一样的期望转概率，设$p_m$为$m$次完成的概率，$q_m=1-p_m$\n\n$\\displaystyle q_m=\\sum_{j_1+j_2+\\cdots +j_n=m} \\frac{m!} {j_1!j_2!\\cdots j_n!}\\prod (\\frac{l_i} {\\sum l_k})^{j_i}P_{i,j_i}$\n\n显然这里考虑用$\\text{EGF}$积的形式来表示，设$S=\\sum l_i$\n\n回到上一步，这里我们对于$i,l_i$计算其$P_n$加上$\\frac{l_i} {S}$系数的$\\text{EGF}$，沿用上面的$L=l_i$\n\n$\\displaystyle F_i(x)=\\text{EGF(P)}=\\sum_{n\\ge 0}\\frac{1} {n!}(\\frac{L} {S})^n\\sum_{i=0}^W(-1)^{i}\\binom{n+1} {i}(1-i\\frac{K} {L})^{n}x^n$\n\n$\\displaystyle F_i(x)=\\sum_{n\\ge 0}\\frac{1} {n!}\\sum_{i=0}^W(-1)^{i}\\binom{n+1} {i}(\\frac{L-iK} {S})^{n}x^n$\n\n设$\\displaystyle u=\\frac{L-iK} {S}x$\n\n$\\displaystyle F_i(x)=\\sum_{i=0}^W\\frac{(-1)^{i} } {i!}\\sum_{n\\ge i-1}\\frac{n+1} {(n+1-i)!}u^n$\n\n令$n'=n+1-i$，$n=n'+i-1$，将$n'$带入\n\n$\\displaystyle F_i(x)=\\sum_{i=0}^W\\frac{(-1)^{i} } {i!}\\sum_{n\\ge 0}\\frac{n+i} {n!}u^{n+i-1}$\n\n将$n,i$拆开\n\n$\\displaystyle F_i(x)=\\sum_{i=0}^W \\frac{(-1)^{i} } {i!}(u^{i}\\sum_{n\\ge 0}\\frac{1} {n!}u^{n}+u^{i-1}\\sum_{n\\ge 0}\\frac{i} {n!}u^{n})$\n\n$\\displaystyle F_i(x)=\\sum_{i=0}^W \\frac{(-1)^{i} } {i!}(u^{i}+iu^{i-1})e^u$\n\n容易发现我们需要多项式是$F(x)=e^x-\\prod F_i(x)$\n\n最终$F(x)$的每一项，都会是$x^k e^{cx}$的形式\n\n其中$e^u$中的$u$总是$\\frac{1} {S}(L-iK)x$，合并之后$L$之和总是存在，记录$\\sum i$即可，为$O(S)$\n\n而每项要么是$u^ie^u$要么是$u^{i-1}e^u$，可以考虑记录一下$u^{i-1}e^u$出现的次数，为$O(n)$\n\n我们的多项式项数是$O(nS)$的\n\n$$ \\ $$\n\n最终我们还需要对于每一项计算答案\n\n我们要计算$\\displaystyle \\sum_{n\\ge 0}n![x^n]F(x)$，考虑形如$x^ke^{cx}$一项的贡献\n\n$\\displaystyle \\sum_{n\\ge k}n![x^n](x^k e^{cx})=\\sum_{n\\ge k}\\frac{n!} {(n-k)!}c^{n-k}=k!\\sum_{n\\ge 0}\\binom{n+k} {n}c^{n}$\n\n由于$\\displaystyle \\binom{n+k} {n}=(-1)^{n}\\binom{-k-1} {n}$\n\n带入广义二项式定理得到\n\n$\\displaystyle k!\\sum_{n\\ge 0}\\binom{n+k} {n}c^{n}=k!(1-c)^{-k-1}$\n\n根据是否用$\\text{NTT}$优化，复杂度会有所不同\n\nover.\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef double db;\ntypedef long double ldb;\ntypedef long long ll;\ntypedef unsigned long long ull;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,const T &b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,const T &b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n    T s=0; int f=0;\n    while(!isdigit(IO=getchar())) if(IO=='-') f=1;\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return f?-s:s;\n}\n\nconst int N=1<<11|10,P=998244353;\n\nint n,m,k;\nll qpow(ll x,ll k=P-2) {\n    ll res=1;\n    for(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n    return res;\n}\n\nint rev[N],I[N],J[N];\ntypedef vector <int> V;\nvoid Init(){\n    rep(i,J[0]=1,N-1) J[i]=1ll*J[i-1]*i%P;\n    I[N-1]=qpow(J[N-1]);\n    drep(i,N-1,1) I[i-1]=1ll*I[i]*i%P;\n}\nint Init(int n){\n    int R=1,c=-1;\n    while(R<=n) R<<=1,c++;\n    rep(i,0,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<c);\n    return R;\n}\nvoid NTT(int n,V &a,int f) {\n    static int e[N>>1];\n    rep(i,0,n-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n    for(int i=e[0]=1;i<n;i<<=1) {\n        ll t=qpow(f==1?3:(P+1)/3,(P-1)/i/2);\n        for(int j=i-2;j>=0;j-=2) e[j+1]=(e[j]=e[j>>1])*t%P;\n        for(int l=0;l<n;l+=i*2) {\n            for(int j=l;j<l+i;++j) {\n                int t=1ll*e[j-l]*a[j+i]%P;\n                a[j+i]=a[j]-t,Mod2(a[j+i]);\n                a[j]+=t,Mod1(a[j]);\n            }\n        }\n    }\n    if(f==-1) {\n        ll Inv=1ll*I[n]*J[n-1]%P;\n        rep(i,0,n-1) a[i]=a[i]*Inv%P;\n    }\n}\n\nV operator * (V a,V b){\n    if(!a.size() || !b.size()) return { };\n    int n=a.size()+b.size()-1,R=Init(n);\n    a.resize(R),b.resize(R);\n    NTT(R,a,1),NTT(R,b,1);\n    rep(i,0,R-1) a[i]=1ll*a[i]*b[i]%P;\n    NTT(R,a,-1);\n    a.resize(n);\n    return a;\n}\nV operator + (V a,V b){\n    if(a.size()<b.size()) swap(a,b);\n    rep(i,0,b.size()-1) a[i]+=b[i],Mod1(a[i]);\n    return a;\n}\n\nV F[55],A,B;\nint S,L[55];\n\nint main(){\n    Init();\n    n=rd(),k=rd();\n    rep(i,1,n) S+=L[i]=rd();\n    sort(L+1,L+n+1);\n    int InvS=qpow(S);\n    F[0]={1};\n    rep(i,1,n) {\n        int W=(L[i]-1)/k;\n        A.clear(),A.resize(W+1);\n        B.clear(),B.resize(W+1);\n        // 注意 L[i]==j*k && j==1 时会出现side condition\n        // 也就是 L=k=1 的情况\n        rep(j,0,W) {\n            int w=1ll*(L[i]-j*k)*InvS%P;\n            A[j]=1ll*(j&1?P-I[j]:I[j])*qpow(w,j)%P;\n            if(j) B[j]=1ll*(j&1?P-I[j]:I[j])*qpow(w,j-1)%P*j%P;\n        }\n        drep(j,i,0) {\n            if(!j) F[j]=F[j]*A;\n            else F[j]=F[j]*A+F[j-1]*B;\n        }\n    }\n    // 就硬乘。。\n    // 如果分治合并每个，复杂度变为log n\n    int ans=0;\n    rep(i,0,n) {\n        rep(j,max(i,1),F[i].size()-1) if(F[i][j]) {\n            int k=j-i;\n            ans=(ans+1ll*F[i][j]*J[k]%P*qpow(1ll*j*::k*InvS%P,P-1-k-1))%P;\n        }\n    }\n    ans=(P-ans)%P;\n    printf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","Codeforces"],"categories":["题解"]},{"title":"「JOISC 2020 Day3」收获","url":"/articles/2021/03/13/81e7c75e.html","content":"# 「JOISC 2020 Day3」收获\n\n~~分类讨论.jpg~~\n\n分析一棵苹果树被不断摘掉的过程，找到第一个摘它的人$i$\n\n此后，每次摘它的人，就是$i$前面第一个距离它$\\ge C$的人，不妨设其为$nxt_i$\n\n显然，$i,nxt_i$的关系，会构成基环内向树森林，每条内向边有一个权值$w_i$\n\n容易$O(n)$尺取得到$nxt_i,w_i$，考虑选择环上的一个点$u$，断开$u$对应的内向边，得到一棵树\n\n![Snipaste_2021-03-13_13-26-19.png](https://i.loli.net/2021/03/13/WmyTG6ksfDpoJVl.png)\n\n处理得到环长$len_u$，令$dis_u=w_u$，树上每个点的$dis_v=dis_{nxt_v}+w_v$\n\n考虑一棵苹果树被第一次摘的情况，用一个二元组表示$(v,t)$，即被$v$在$t$时刻摘掉\n\n我们认为是苹果树在基环内向树上走\n\n1.苹果树不跨过$u$时的贡献\n\n此时相当于每个$(v,t)$在往根节点走，贡献来自每个查询$(x,d)$的子树\n\n即满足$v\\in subtree_x,dis_v-dis_x+t\\leq d$\n\n离散之后可以用简单的 询问离线+$dfs$作差+树状数组解决\n\n$$ \\ $$\n\n2.跨过$u$，先将苹果树的贡献移动到$last$上，变为$(last,t'=t+dis_v)$\n\n对于每个询问，显然必须满足$x$在环上\n\n我们也可以令$d'=d-(len_u-dis_v)$，同样将$x$移动到$last$上\n\n此时只需要考虑每个$t'$对于$d'$的贡献\n\n按照$len_u$，我们可以将$t',d'$分段，每段都是$[i\\cdot len_u,(i+1)\\cdot len_u)$的形式\n\n2-1.对于不是同一段内的，每个$t'$的对于$d'$的贡献次数 就是 段编号 之差 \n\n2-2.同一段内，就是满足$t'\\leq d'$且$t'\\mod len_u\\leq d'\\mod len_u$ 的个数\n\n将所有$d',t'$排序后依次处理，容易通过参数分离处理2-1\n\n对于2-2，将$t'\\mod len_u$离散后可以用树状数组处理\n\n[Loj Submission](https://loj.ac/s/1089106)\n\n空间复杂度为$O(n)$，时间复杂度为$O(n\\log n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll=int64_t;\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\nll rd(){\n    char c;ll s=0;\n    while(c=getchar(),c<48);\n    do s=(s<<1)+(s<<3)+(c^'0');\n    while(c=getchar(),c>47);\n    return s;\n}\nenum{N=200010};\nint n,m,q,nxt[N],L,C,C2,A[N*2],B[N],id[N],incir[N];\nvector <int> E[N],G[N];\nll H[N],dis[N],H2[N],len[N],ans[N];\nvoid dfs(int u){\n    for(int i:E[u]) H[++C]=dis[u]+i;\n    vector <int> tmp;\n    for(int v:G[u]) {\n        if(id[v]==id[u]) continue;\n        tmp.pb(v),id[v]=id[u];\n        dis[v]+=dis[u],dfs(v);\n    }\n    G[u]=tmp;\n}\n\nstruct Node{ ll d; int id; };\nvector <Node> Q[N],que;\nvector <ll> upd;\nstruct BIT{\n    int s[N],n;\n    void Init(int m){ n=m,memset(s,0,(n+1)<<2); }\n    void Add(int p,int x) { while(p<=n) s[p]+=x,p+=p&-p; }\n    int Que(int p) {\n        int res=0;\n        while(p) res+=s[p],p-=p&-p;\n        return res;\n    }\n} T,X;\n\n// dfs作差处理情况1\nvoid dfs2(int u){\n    for(Node &i:Q[u]) {\n        // 如果满足查询点在环上，就要加入2-1,2-2的计算\n        if(incir[u]) {\n            ll d=i.d-(len[id[u]]-dis[u]);\n            if(d>=0) que.pb((Node){d,i.id});\n        }\n        // dfs作差-1\n        ans[i.id]-=T.Que(i.d=upper_bound(H+1,H+C+1,dis[u]+i.d)-H-1);\n    }\n    for(int i:E[u]) T.Add(lower_bound(H+1,H+C+1,dis[u]+i)-H,1),upd.pb(dis[u]+i);\n    for(int v:G[u]) dfs2(v);\n    // dfs作差+1\n    for(Node i:Q[u]) ans[i.id]+=T.Que(i.d);\n}\n\nint main(){\n    n=rd(),m=rd(),L=rd(),C=rd();\n    rep(i,0,n-1) A[i]=rd(),A[i+n]=A[i]+L;\n    rep(i,0,m-1) B[i]=rd();\n    int C_=C%L,p=0;\n    // 尺取预处理i,nxt[i],w[i]\n    rep(i,n,n*2-1) {\n        while(p<i && A[i]-A[p+1]>=C_) p++;\n        nxt[i-n]=p%n,G[p%n].pb(i-n);\n        dis[i-n]=C-C_+A[i]-A[p];\n    }\n    p=0;\n    // 预处理(v,t)\n    rep(i,0,m-1) {\n        while(p<n*2-1 && B[i]+L>=A[p+1]) p++;\n        E[p%n].pb(B[i]+L-A[p]);\n    }\n    C=0;\n    // 断环构建树\n    rep(i,0,n-1) id[i]=-2;\n    rep(i,0,n-1) if(id[i]==-2) {\n        int u=i;\n        for(;~id[u];u=nxt[u]) id[u]=-1;\n        id[u]=u,len[u]=dis[u],incir[u]=1;\n        for(int v=nxt[u];v!=u;v=nxt[v]) len[u]+=dis[v],incir[v]=1;\n        dfs(u);\n    }\n    sort(H+1,H+C+1),T.Init(C=unique(H+1,H+C+1)-H-1);\n    // 离线询问，权值离散\n    rep(i,1,q=rd()) {\n        int u=rd()-1; ll d=rd();\n        Q[u].pb((Node){d,i});\n    }\n    rep(i,0,n-1) if(id[i]==i) {\n        que.clear(),upd.clear();\n        dfs2(i);\n        sort(upd.begin(),upd.end()),sort(que.begin(),que.end(),[&](Node x,Node y){ return x.d<y.d; });\n        C2=0;\n        for(ll x:upd) H2[++C2]=x%len[i];\n        sort(H2+1,H2+C2+1),X.Init(C2=unique(H2+1,H2+C2+1)-H2-1);\n        auto it=upd.begin();\n        ll s=0,c=0;\n        for(Node &q:que) {\n            while(it!=upd.end() && *it<=q.d) \n                X.Add(lower_bound(H2+1,H2+C2+1,*it%len[i])-H2,1),s+=*(it++)/len[i],c++;\n            // 参数分离处理2-1\n            ans[q.id]+=q.d/len[i]*c-s;\n            // 树状数组查询2-2\n            ans[q.id]+=X.Que(upper_bound(H2+1,H2+C2+1,q.d%len[i])-H2-1);\n        }\n    }\n    rep(i,1,q) printf(\"%lld\\n\",ans[i]);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["JOI"],"categories":["题解"]},{"title":"「JOISC 2020 Day3」星座 3 (Dp)","url":"/articles/2021/03/13/dc335e53.html","content":"# 「JOISC 2020 Day3」星座 3 (dp)\n\n考虑根据$A_i$的值建立笛卡尔树，此时平面被划分为个矩形空间\n\n下称选择一个点为保留一个星星\n\n![Snipaste_2021-03-13_11-21-27.png](https://i.loli.net/2021/03/13/SLHx8PR4rwIo1h3.png)\n\n具体的，对于笛卡尔树上的节点$(u,l,r)$，它的矩形就是父节点矩形以下，且满足$x\\in[l,r],y>A_u$的部分\n\n可以用一个线段树来查询矩形内部的点，线段树上每个节点维护$y_{max}$，每次剥掉$y_{max}>A_u$的部分\n\n复杂度为均摊$O(n\\log n)$\n\n$$ \\ $$\n\n观察笛卡尔树的树形，容易发现，\n\n1.笛卡尔树左右子树的矩形之间不会产生贡献\n\n2.每个节点对应的矩形区间内最多选择一个点\n\n3.如果一个节点$(u,l,r)$的祖先中有一个$x_i\\in[l,r]$的点选择了，那么自己的矩形内不能选择点\n\n那么令$dp_{u,i}$表示父节点传下来的点$x=i$时，$u$子树内的答案\n\n对于$i\\in[l,r]$的情况，可以直接将儿子的值合并，加上自己区间内部的权值总和$C_i$\n\n对于$i\\not \\in[l,r]$的情况，这一部分答案相同\n\n可以从自己子区间内选择一个点$(x_i,y_i,c_i)$下传，此时沿用上面合并得到的$dp$值\n\n$outans=\\min\\{dp_{x_i}+sum-c_i\\}$\n\n如何实现这个奇怪的$dp$过程？\n\n考虑子树的区间不交，因此对于$(u,l,r)$，只维护$l,r$内部的答案，对于$i\\not \\in[l,r]$的部分额外记录一个值$dp_u$\n\n考虑用一棵静态的线段树维护$dp$，线段树上存储$i\\in[l,r]$的答案\n\n合并左右儿子时，两个儿子的区间不交\n\n因此，实际上答案就是将$dp_{ls}$加到$[u,r]$上，将$dp_{rs}$加到$[l,u]$上\n\n处理出$sum$之后，区间修改$[l,r]$的答案，对于$dp_u$直接按照上面的方法枚举$(x_i,y_i,c_i)$来计算即可\n\n复杂度为$O(n\\log n)$\n\n```cpp\nint n,A[N];\nstruct SegFinder{\n\tvector <Pii> V[N];\n\tint s[N<<2];\n\tvoid Build(int p,int l,int r){\n\t\tif(l==r) {\n\t\t\tsort(V[l].begin(),V[l].end());\n\t\t\ts[p]=V[l].empty()?0:V[l].back().first;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tBuild(p<<1,l,mid),Build(p<<1|1,mid+1,r);\n\t\ts[p]=max(s[p<<1],s[p<<1|1]);\n\t}\n\tvoid Get(int p,int l,int r,int ql,int qr,int x,vector <Pii> &Res){\n\t\tif(s[p]<x) return;\n\t\tif(l==r) {\n\t\t\twhile(!V[l].empty() && V[l].back().first>=x) Res.pb(mp(l,V[l].back().second)),V[l].pop_back();\n\t\t\ts[p]=V[l].empty()?0:V[l].back().first;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(ql<=mid) Get(p<<1,l,mid,ql,qr,x,Res);\n\t\tif(qr>mid) Get(p<<1|1,mid+1,r,ql,qr,x,Res);\n\t\ts[p]=max(s[p<<1],s[p<<1|1]);\n\t}\n} Finder;\n\nint ls[N],rs[N],stk[N],top,mk[N];\nint rt[N];\nll dp[N],s[N<<2],t[N<<2];\nll Que(int p,int l,int r,int ql,int qr){\n\tif(ql<=l && r<=qr) return s[p];\n\tint mid=(l+r)>>1; ll res=1e18;\n\tif(ql<=mid) cmin(res,Que(p<<1,l,mid,ql,qr));\n\tif(qr>mid) cmin(res,Que(p<<1|1,mid+1,r,ql,qr));\n\treturn res+t[p];\n}\n\nvoid Upd(int p,int l,int r,int ql,int qr,ll x){\n\tif(ql<=l && r<=qr) {\n\t\ts[p]+=x,t[p]+=x;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(ql<=mid) Upd(p<<1,l,mid,ql,qr,x);\n\tif(qr>mid) Upd(p<<1|1,mid+1,r,ql,qr,x);\n\ts[p]=min(s[p<<1],s[p<<1|1])+t[p];\n}\n\n// 线段树内存储的是 如果父节点有下传下来的答案\n// dp 存储没有父节点下传的答案\n\nvoid Solve(int p,int l,int r){\n\tvector <Pii> V; Finder.Get(1,1,n,l,r,A[p]+1,V);\n\t// 拿出我的决策矩形\n\n\tif(l<p) Solve(ls[p],l,p-1);\n\tif(p<r) Solve(rs[p],p+1,r);\n\tif(rs[p]) Upd(1,1,n,l,p,dp[rs[p]]);\n\tif(ls[p]) Upd(1,1,n,p,r,dp[ls[p]]);\n\tll sum=0;\n\tfor(Pii i:V) sum+=i.second;\n\tif(sum) Upd(1,1,n,l,r,sum); \n\t// 如果父节点有下传，那么自己必须被清空\n\t// 否则考虑选择一个下传下去，这样就能得到 没有父节点下传时的值\n\tdp[p]=Que(1,1,n,l,r);\n\tfor(Pii i:V) cmin(dp[p],Que(1,1,n,i.first,i.first)-i.second);\n}\n\nint main(){\n\tn=rd();\n\trep(i,1,n) {\n\t\tA[i]=rd();\n\t\twhile(top && A[stk[top]]<=A[i]) ls[i]=stk[top--];\n\t\tstk[++top]=i;\n\t}\n\ttop=0;\n\tdrep(i,n,1) {\n\t\twhile(top && A[stk[top]]<A[i]) rs[i]=stk[top--];\n\t\tstk[++top]=i;\n\t}\n\trep(i,1,n) mk[ls[i]]=mk[rs[i]]=1;\n\trep(_,1,rd()) {\n\t\tint x=rd(),y=rd(),c=rd();\n\t\tFinder.V[x].pb(mp(y,c));\n\t}\n\tFinder.Build(1,1,n);\n\trep(i,1,n) if(!mk[i]) {\n\t\tSolve(i,1,n);\n\t\tprintf(\"%lld\\n\",dp[i]);\n\t\treturn 0;\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["JOI"],"categories":["题解"]},{"title":"「GXOI / GZOI2019」宝牌一大堆","url":"/articles/2021/03/13/238e9b8c.html","content":"# 「GXOI / GZOI2019」宝牌一大堆\n\n~~麻将.jpg~~\n\n观察牌型和计算方法可知，选择一个杠与选择一个面子对于牌型的贡献是等价的\n\n而选择一个杠的答案一定没有选择一个刻子优，因此是没有任何意义的\n\n除去 \"七对子\" \"国士无双\" 的特殊情况后，此外的情况就是选择 4个面子 + 1个雀头\n\n容易想到对于每个花色dp得到选择$i$个面子$j$个雀头的答案，然后背包合并\n\n为了$dp$顺子的情况，可以存储前面两个位置作为顺子头的个数\n\n令$dp_{i,j,a,b}$表示当前选了$i$个面子，$j$个雀头，上两个位置选了$a$个顺子，上一个位置选了$b$个顺子\n\n暴力维护dp即可\n\n```cpp\nconst int INF=1e9+10;\n\nint min(int x,int y,int z){ return min(min(x,y),z); }\n\nint n,m;\nint C[5][5],c[4][12],mk[4][12];\nll ans,val[5][2];\n\nvoid Check7(){\n\tstatic int val[40],cnt;\n\tcnt=0;\n\trep(i,0,3) rep(j,0,9) if(c[i][j]>=2) val[++cnt]=C[c[i][j]][2]<<(mk[i][j]*2);\n\tif(cnt<7) return;\n\tsort(val+1,val+cnt+1,greater<int>());\n\tll res=7;\n\trep(i,1,7) res*=val[i];\n\tcmax(ans,res);\n}\n\nvoid Check13(){\n\tll res=13,x=0,y=0;\n\tauto chk=[&](ll a,ll b) {\n\t\tif(!x) x=a,y=b;\n\t\tif(x*b<a*y) x=a,y=b;\n\t};\n\trep(i,0,2) {\n\t\tif(!c[i][0] || !c[i][8]) return;\n\t\tres*=c[i][0]*c[i][8];\n\t\tres<<=(mk[i][0]+mk[i][8]);\n\t\tif(c[i][0]>=2) chk(C[c[i][0]][2]<<(mk[i][0]*2),c[i][0]<<mk[i][0]);\n\t\tif(c[i][8]>=2) chk(C[c[i][8]][2]<<(mk[i][8]*2),c[i][8]<<mk[i][8]);\n\t}\n\trep(i,0,6) {\n\t\tif(!c[3][i]) return;\n\t\tres<<=mk[3][i];\n\t\tres*=c[3][i];\n\t\tif(c[3][i]>=2) chk(C[c[3][i]][2]<<(mk[3][i]*2),c[3][i]<<mk[3][i]);\n\t}\n\tif(!x) return;\n\tcmax(ans,res*x/y);\n}\n\nvoid Work(int *cnt,int *mk,ll res[5][2]){\n\tstatic ll dp[2][5][2][5][5],w[5];\n\tint cur=0;\n\tmemset(dp,0,sizeof dp),dp[cur][0][0][0][0]=1;\n\trep(t,0,8) {\n\t\tint x=cnt[t]; ll val;\n\t\tmemset(dp[!cur],0,sizeof dp[!cur]);\n\t\trep(i,0,x) w[i]=C[x][i]<<(mk[t]*i);\n\t\trep(i,0,4) rep(j,0,1) rep(a,0,x) rep(b,0,x-a) if((val=dp[cur][i][j][a][b])) {\n\t\t\tint d=a+b,y=x-d,u=min(cnt[t+1]-b,cnt[t+2]);\n\n\t\t\trep(k,0,min(3-i,y-3,u))\n\t\t\t\tcmax(dp[!cur][i+k+1][j][b][k],val*w[d+k+3]); // 刻 + 顺\n\n\t\t\trep(k,0,min(4-i,y,u))\n\t\t\t\tcmax(dp[!cur][i+k][j][b][k],val*w[d+k]); // 顺\n\n\t\t\tif(j) continue;\n\t\t\trep(k,0,min(4-i,y-2,u))\n\t\t\t\tcmax(dp[!cur][i+k][j+1][b][k],val*w[d+k+2]); // 雀 + 顺\n\t\t}\n\t\tcur^=1;\n\t}\n\tdrep(i,4,0) drep(j,1,0) if(res[i][j]) {\n\t\trep(a,0,4-i) rep(b,0,1-j) \n\t\t\tif(dp[cur][a][b][0][0]) \n\t\t\t\tcmax(res[i+a][j+b],res[i][j]*dp[cur][a][b][0][0]);\n\t}\n}\n\nPii Read(){\n\tstatic char O[5];\n\tscanf(\"%s\",O);\n\tif(*O=='0') return mp(-1,0);\n\tif(isalpha(*O)) {\n\t\tif(*O=='E') return mp(3,0);\n\t\tif(*O=='S') return mp(3,1);\n\t\tif(*O=='W') return mp(3,2);\n\t\tif(*O=='N') return mp(3,3);\n\t\tif(*O=='Z') return mp(3,4);\n\t\tif(*O=='B') return mp(3,5);\n\t\tif(*O=='F') return mp(3,6);\n\t\treturn mp(-1,-1);\n\t}\n\tif(O[1]=='m') return mp(0,*O-'1');\n\tif(O[1]=='p') return mp(1,*O-'1');\n\tif(O[1]=='s') return mp(2,*O-'1');\n\treturn mp(-1,-1);\n}\n\nvoid Solve(){\n\tans=0,memset(val,0,sizeof val),memset(mk,0,sizeof mk),val[0][0]=1;\n\trep(i,0,2) rep(j,0,8) c[i][j]=4;\n\trep(i,0,6) c[3][i]=4;\n\twhile(1) {\n\t\tPii T=Read();\n\t\tif(T.first==-1) break;\n\t\tc[T.first][T.second]--;\n\t}\n\twhile(1) {\n\t\tPii T=Read();\n\t\tif(T.first==-1) break;\n\t\tmk[T.first][T.second]=1;\n\t}\n\tCheck7(),Check13();\n\trep(i,0,2) Work(c[i],mk[i],val);\n\trep(i,0,6) {\n\t\tstatic ll w[5];\n\t\tint x=c[3][i];\n\t\trep(j,0,x) w[j]=C[x][j]<<(j*mk[3][i]);\n\t\tdrep(a,4,0) drep(b,1,0) if(val[a][b]) {\n\t\t\tif(b<1 && x>=2) cmax(val[a][b+1],val[a][b]*w[2]); // 雀\n\t\t\tif(a<4 && x>=3) cmax(val[a+1][b],val[a][b]*w[3]); // 刻\n\t\t\tif(a<4 && x>=4) cmax(val[a+1][b],val[a][b]*w[4]); // 杠\n\t\t}\n\t}\n\tcmax(ans,val[4][1]);\n\tprintf(\"%lld\\n\",ans);\n}\n\nint main(){\n\trep(i,0,4) rep(j,C[i][0]=1,i) C[i][j]=C[i-1][j]+C[i-1][j-1];\n\tint T; scanf(\"%d\",&T);\n\twhile(T--) Solve();\n}\n```\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"[Codechef March Challenge 2021 Random Walk Queries(RWALKS) (动态点分治) ]","url":"/articles/2021/03/11/9b5e688c.html","content":"# [Codechef March Challenge 2021 Random Walk Queries(RWALKS) (动态点分治) ](https://www.codechef.com/MARCH21B/problems/RWALKS)\n\n题目大意：\n\n对于给定的无根树$T$，要求强制在线维护两种操作\n\n1.游走$(u,d)$，以$u$为根在树上游走，从$u$开始，最多走$d$步，每次随机从儿子中选择一个点\n\n2.查询$u$，当前$u$被遍历的期望次数\n\n$$ \\ $$\n\n~~灵光一闪想到这么个憨批树上结构~~\n\n对于更新$(u,d)$，考虑$u$ **跨过当前点分根** 到达其他点分子树里的贡献\n\n一个点由当前点分根到达的概率是一个定值，可以预处理出来，并在查询时计算\n\n因此更新贡献时，可以描述为$dep\\leq d$的点接受到 以$x$的概率访问当前点分根\n\n可以简单用树状数组维护\n\n为了剔除对于自己所在子树的非法贡献，需要额外开一些树状数组来维护\n\n一个节点有$\\log n$个点分父节点，每次需要两次树状数组查询\n\n因此查询部分复杂度为$O(m\\log ^2n)$，预处理以及空间复杂度为$O(n\\log n)$\n\n```cpp\nconst int N=2e5+10,K=19,P=1e9+7;\n\nint n,m,I[N];\nstruct Edge{\n\tint to,nxt;\n}e[N<<1];\nint head[N],ecnt,deg[N];\nvoid AddEdge(int u,int v){\n\te[++ecnt]=(Edge){v,head[u]};\n\thead[u]=ecnt,deg[v]++;\n}\n#define erep(u) for(int i=head[u],v=e[i].to;i;i=e[i].nxt,v=e[i].to)\n\nstruct BIT{\n\tint n;\n\tvector <int> s;\n\tBIT(){ };\n\tBIT(int n):n(n){ s.resize(n+1); }\n\tvoid Add(int p,int x){ \n\t\tfor(cmin(p,n);p;p-=p&-p) s[p]+=x,Mod1(s[p]);\n\t}\n\tint Que(int p){\n\t\tint res=0;\n\t\twhile(p<=n) res+=s[p],Mod1(res),p+=p&-p;\n\t\treturn res;\n\t}\n} T[N];\nvector <BIT> G[N];\n//  Dep:点分树上的dep，id:节点在每层的编号， dep:节点在每层的dep，s:节点在每层由根到达的系数\nint Dep[N],id[K][N],dep[K][N],s[K][N],vis[N],sz[N],fa[N],Root;\n\nint mi,rt;\nvoid FindRt(int n,int u,int f){\n\tint ma=0; sz[u]=1;\n\terep(u) if(v!=f && !vis[v]) {\n\t\tFindRt(n,v,u);\n\t\tsz[u]+=sz[v],cmax(ma,sz[v]);\n\t}\n\tcmax(ma,n-sz[u]);\n\tif(mi>ma) mi=ma,rt=u;\n}\n\nint D,maxd;\nvoid dfs(int u,int f,int id){\n\tcmax(maxd,dep[D][u]=dep[D][f]+1),::id[D][u]=id;\n\terep(u) if(v!=f && !vis[v]) {\n\t\ts[D][v]=1ll*s[D][u]*I[deg[u]-1]%P;\n\t\tdfs(v,u,id);\n\t}\n}\n\n// 预处理点分治，开树状数组\nint Divide(int n,int u){\n\tmi=1e9,FindRt(n,u,0),u=rt;\n\tint sonc=0;\n\tvis[u]=s[Dep[u]=D][u]=1,id[D][u]=-1;\n\tint t=0;\n\terep(u) if(!vis[v]) {\n\t\tmaxd=0;\n\t\ts[D][v]=1,dfs(v,u,sonc);\n\t\tG[u].pb(BIT(maxd));\n\t\tsonc++;\n\t\tcmax(t,maxd);\n\t}\n\tT[u]=BIT(t);\n\terep(u) if(!vis[v]) {\n\t\tif(sz[v]>sz[u]) sz[v]=n-sz[u];\n\t\tD++,fa[Divide(sz[v],v)]=u,D--;\n\t}\n\treturn u;\n}\n\nint sum[N];\nint Que(int u){\n\tll ans=sum[u];\n\tfor(int v=u,d=Dep[v];(d--,v=fa[v]);) \n\t\tans=(ans+ 1ll* (T[v].Que(dep[d][u])+G[v][id[d][u]].Que(dep[d][u])) *s[d][u])%P;\n\treturn (ans%P+P)%P;\n}\nvoid Upd(int u,int d){\n\tsum[u]++,Mod1(sum[u]),T[u].Add(d,I[deg[u]]);\n\tfor(int v=fa[u],D=Dep[u]-1;v;v=fa[v],D--) {\n\t\tif(d<dep[D][u]) continue;\n\t\tint x=1ll*I[deg[u]]*s[D][u]%P;\n\t\tsum[v]+=x,Mod1(sum[v]);\n\t\tx=1ll*x*I[deg[v]-1]%P;\n\t\tT[v].Add(d-dep[D][u],x),G[v][id[D][u]].Add(d-dep[D][u],P-x);\n\t}\n}\n\nint lst;\nint Get() { return (rd()+lst)%n+1; }\n\nint main(){\n\tI[0]=I[1]=1;\n\trep(i,2,N-1) I[i]=1ll*(P-P/i)*I[P%i]%P;\n\tn=rd(),m=rd();\n\trep(i,2,n){\n\t\tint u=rd(),v=rd();\n\t\tAddEdge(u,v),AddEdge(v,u);\n\t}\n\tRoot=Divide(n,1);\n\twhile(m--) {\n\t\tint opt=rd();\n\t\tif(opt==1) {\n\t\t\tint u=Get(),d=Get();\n\t\t\tUpd(u,d);\n\t\t} else printf(\"%d\\n\",lst=Que(Get()));\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","各大OJ","Codechef"],"categories":["题解"]},{"title":"[「BalticOI 2020」村庄 (贪心)]","url":"/articles/2021/03/11/546a1ee9.html","content":"# [「BalticOI 2020」村庄 (贪心)](https://loj.ac/p/3336)\n\n## Subtask1: Min\n\n考虑链上的情况，最优解肯定是两两相邻的交换，如果还有多，就再多交换一次\n\n因此树上的也是类似，实际上就是求解一个最小边覆盖问题，选择一条边就是交换边两端的点编号\n\n可以$O(n)$贪心/dp求解树上最小边覆盖\n\n$$ \\ $$\n\n## Subtask2: Max\n\n考虑理想的最优情况：对于任意一条边，我们要求它被经过次数尽可能多\n\n如果这条边两端子树大小分别为$a,b$，则它被经过的最多次数显然是$2\\min\\{a,b\\}$\n\n考虑找到树的重心，以它为根，此时任意一颗真子树的大小$\\leq \\frac{n} {2}$\n\n为了构造最优答案，只需要每棵子树的集合相互错开即可\n\n一种简单的构造方法是：取$\\text{dfs}$序，平移$\\frac{n} {2}$即可得到解\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\nint rd(){\n\tint s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\n\nconst int N=1e5+10,INF=1e9+10;\n\nint n;\nvector <int> G[N];\nll Min,Max;\nint ans1[N],ans2[N];\nint dep[N],fa[N],vis[N];\n// 最小边覆盖贪心法\nvoid pre_dfs(int u,int f){ \n\tans1[u]=u,fa[u]=f;\n\tfor(int v:G[u]) if(v!=f) {\n\t\tpre_dfs(v,u); \n\t\tif(!vis[v]) vis[v]=vis[u]=1,swap(ans1[u],ans1[v]),Min+=2;\n\t}\n\tif(!vis[u] && !f) vis[u]=1,swap(ans1[u],ans1[G[u][0]]),Min+=2;\n}\n\nint A[N],C;\nint mi=1e9,rt,sz[N];\n// 找重心\nvoid dfs(int u,int f){\n\tsz[u]=1;\n\tint ma=0;\n\tfor(int v:G[u]) if(v!=f) {\n\t\tdfs(v,u);\n\t\tcmax(ma,sz[v]),sz[u]+=sz[v];\n\t\tMax+=2*min(n-sz[v],sz[v]);\n\t}\n\tcmax(ma,n-sz[u]);\n\tif(mi>ma) mi=ma,rt=u;\n}\n// 遍历dfs序\nvoid dfs_get(int u,int f) {\n\tA[++C]=u;\n\tfor(int v:G[u]) if(v!=f) dfs_get(v,u);\n}\nint main(){\n\tn=rd();\n\trep(i,2,n) {\n\t\tint u=rd(),v=rd();\n\t\tG[u].pb(v),G[v].pb(u);\n\t}\n\tpre_dfs(1,0),dfs(1,0),dfs_get(rt,0);\n\trep(i,1,n) ans2[A[i]]=A[(i+n/2-1)%n+1];\n\tprintf(\"%lld %lld\\n\",Min,Max);\n\trep(i,1,n) printf(\"%d \",ans1[i]);\n\tputs(\"\");\n\trep(i,1,n) printf(\"%d \",ans2[i]);\n\tputs(\"\");\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"Codechef March Challenge 2021 Div2 Consecutive Adding(CONSADD)","url":"/articles/2021/03/11/ed997fae.html","content":"# Codechef March Challenge 2021 Div2 Consecutive Adding(CONSADD)\n\n题目大意：\n\n给定两个$n\\times m$矩阵$A$，$B$和一个常数$x$\n\n现在对于$A$操作，每次可以选择一行或者一列连续的$x$个，一起改变同一个数值$v\\in \\Z$\n\n判断是否可以由$A$变成$B$\n\n<br>\n\n显然可以先将$A,B$作差，转化为操作成0矩阵\n\n进一步，我们将$A$矩阵行内差分，使得每次行操作变为一个单点$A_{i,j}+v$，一个单点$A_{i,j+x}-v$\n\n在此基础上，继续差分即可将行列操作都转化为单点操作\n\n此时容易发现，$A_{i,j}$的数值有关联的部分都是$A_{i,j},A_{i+x,j},A_{i,j+x}\\cdots A_{i+ax,j+bx}$\n\n也就是相差$x$的，考虑可以将这一部分子矩形提取出来，这样问题变成了\n\n每次操作一个数$A_{i,j}+v$，可以选择相邻一个数$A_{i,j+1}$或$A_{i+1,j}$去$-v$\n\n对于每个这样的子问题，容易发现有解的充要条件：子矩阵元素和为0\n\n（可以依次考虑每个元素贪心构造方案）\n\n如此可以$O(nm)$判定\n\n```cpp\n\nconst int N=1010,INF=1e9+10;\n\nint n,m,k;\nll A[N][N],B[N][N];\nint V[N][N];\n\nint main(){\n\trep(kase,1,rd()) {\n\t\tn=rd(),m=rd(),k=rd();\n\t\trep(i,1,n+1) rep(j,1,m+1) A[i][j]=V[i][j]=0;\n\t\trep(i,1,n) rep(j,1,m) A[i][j]=rd();\n\t\trep(i,1,n) rep(j,1,m) A[i][j]-=rd();\n\t\trep(i,1,n+1) drep(j,m+1,1) A[i][j]-=A[i][j-1];\n\t\tdrep(i,n+1,1) rep(j,1,m+1) A[i][j]-=A[i-1][j];\n        // 3 次作差\n\t\tint f=1;\n\t\trep(i,1,n+1) rep(j,1,m+1) if(!V[i][j]) {\n\t\t\tll s=0;\n            // 子问题判定\n\t\t\tfor(int a=i;a<=n+1;a+=k) for(int b=j;b<=m+1;b+=k) {\n\t\t\t\tV[a][b]=1;\n\t\t\t\ts+=A[a][b];\n\t\t\t}\n\t\t\tf&=s==0;\n\t\t}\n\t\tputs(f?\"Yes\":\"No\");\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","Codechef"],"categories":["题解"]},{"title":"组合数公式","url":"/articles/2021/03/11/1783d9b2.html","content":"## 组合数公式\n\n-------\n\n组合数$\\displaystyle C(n,m)=C_n^m=\\binom{n} {m}$\n\n### 递推式 \n\n$$ C(n,m)=C(n-1,m-1)+C(n-1,m)$$\n\n----------------------\n\n### 组合数完全累和\n\n$$\\displaystyle \\sum_{i=0}^n C(n,i) =2^n$$\n\n-----\n\n### 奇偶累和\n\n$$\\displaystyle \\sum_0^n (-1)^i C(n,i)=[n=0]$$\n\n----\n\n### $\\sum\\cdots\\sum \\rightarrow C() $型\n\n我们熟知的有\n\n$$\\displaystyle \\sum_{i=1}^{n}1=n = C(n,1)$$\n\n$$ \\displaystyle\\sum _{i=1}^{n} \\sum_{j=i+1}^{n} 1= \\frac{n(n-1)} {2}$$\n\n更一般的\n\n$$\\displaystyle\\underbrace {\\sum \\sum ... \\sum} 1 =C(n,k)$$\n\n$$ (k个\\sum) \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ $$\n\n--------------\n\n### $ ...  \\ \\cdot  C(n,i)$型\n\n$\\displaystyle \\sum i \\cdot C(n,i) $\n\n$\\displaystyle = \\sum {i \\cdot  \\frac{n!} {i! \\cdot (n-i)!} }$\n\n$\\displaystyle = \\sum {  \\frac{n!} {(i-1)! \\cdot (n-i)!} }$\n\n$\\displaystyle=\\sum {n \\cdot \\frac {(n-1)!} {(i-1)! \\cdot (n-i)!} }$\n\n$\\displaystyle=n\\cdot \\sum  C(n-1,i-1)$\n\n同理的\n\n$$\\sum i\\cdot (i-1)\\cdot C(n,i)=n \\cdot (n-1) \\cdot \\sum C(n-2,i-2)$$\n\n带入还能得到\n\n$$\\sum i^2 \\cdot  C(n,i)  = n \\cdot (n-1) \\cdot \\sum C(n-2,i-2)+n \\cdot \\sum C(n-1,i-1)  $$\n\n更一般的，可以表示成\n$$ \\sum C(i,k) \\cdot C(n,i) =C(n,k) \\cdot \\sum C(n-k,i-k)$$\n\n\n\n--------------------------------\n\n### 多组合数相乘型\n\n$\\displaystyle \\sum_{i=0}^{k} C(n,i)\\cdot C(m,k-i) = C(n+m,k)$\n\n其实就是两个组合问题的组合，可以直接通过实际意义得到\n\n-------------------\n\n### Lucas定理\n\n$ C(n,m) \\mod p = C(n \\mod p,m \\mod p) \\cdot C(\\lfloor\\frac{n} {p}\\rfloor, \\lfloor \\frac{m} {p}\\rfloor) \\mod p$\n\n预处理阶乘逆元后，可以用于解决模数较小而$n,m$较大的组合数问题\n\n--------------------------\n\n## 前缀和\n\n### 列\n\n$\\displaystyle \\sum_{i=0}^n \\binom{i} {m}=\\binom{n+1} {m+1}$\n\n由递推式$\\displaystyle \\binom{i} {m}=\\binom{i-1} {m}+\\binom{i-1} {m-1}$容易迭代发现\n\n$$  \\ $$\n\n### 行\n\n令 $S(n,m)=\\sum_{i=0}^{m} C(n,i)$\n\n$S(n,m)+S(n,m+1)$\n\n$=\\sum_{i=0}^{m}(C(n,i)+C(n,i+1))+C(n,0)$\n\n$=\\sum C(n+1,i+1)+C(n,0)$ (带入递推公式)\n\n$=S(n+1,m+1)$\n\n又$\\because S(n,m)+S(n,m+1)=2S(n,m+1)-C(n,m+1)$\n\n$\\therefore S(n,m)=2S(n-1,m)-C(n-1,m)$\n\n(待补。。。)","tags":["default tag"],"categories":["default category"]},{"title":"多项式运算 (求逆/Ln/exp等)","url":"/articles/2021/03/11/2cdf6809.html","content":"# 多项式运算 (求逆/ln/exp等)\n\n(latest updated on 2021.02.23)\n\n前置知识[**NTT**](https://www.cnblogs.com/chasedeath/p/12070229.html)\n\n所有操作均在对$P=\\text{998244353}$取模下进行\n\n代码在最下面，由于板子实在有一点长，所以。。。\n\n下文中$\\pmod {x^n}$表示求出了多项式的前$n$项\n\n$[x^i]F(x)$表示$F(x)$第$i$项的系数\n\n每个小问题的模板题都可以在洛谷上找到\n\n--------------\n\n$$\\ $$\n\n## 1.多项式求乘法逆\n\n~~(为什么叫做乘法逆?因为还有求复合逆和模逆元的)~~\n\n求 $G(x)\\equiv \\frac{1} {F(x)} \\pmod {x^n}$\n\n形象化的理解就是$F(x)\\cdot G(x) \\pmod {x^n}$只有第一项是$1$，其他项都是$0$\n\n这个由于是第一个操作，很多人还并不是很能理解多项式操作到底是什么东西，所以讲多一点\n\n### Part1 O($n^2$)\n\n为了便于理解这个问题，先考虑一个最简单的模拟\n\n$[x^i]F\\cdot G(x)=\\sum [x^j]F(x)[x^{i-j}]G(x)$\n\n第一项$[x^0]G(x)=\\frac{1} {[x^0]F(0)} \\pmod P$，因此求逆的前提条件是$[x^0]F(x)\\ne 0$\n\n考虑从$1$到$n-1$依次求出每一项，先从前面的项中得到所有$j>0$的和$Sum$，然后带入$j=0$时知道\n\n$$[x^i]G(x)=-\\frac{Sum=\\sum_{j=1}^{j\\leq i}[x^j]F(x)[x^{i-j}]G(x)} {[x^0]F(0)}$$\n\n$$ \\ $$\n\n------------\n\n### Part2 O($n\\log^2n$)\n\n上面这个式子是一个类似$dp$转移的东西，可以直接分治NTT优化掉\n\n$$ \\ $$\n\n------------\n\n### Part3 $O(n\\log n)$\n\n考虑倍增求解，设已经求出了\n\n$$H(x)\\equiv \\frac{1} {F(x)},\\pmod {x^{\\frac{n} {2} }}$$\n\n其中递归边界是$n=1$时,$[x^0]G(x)=\\frac{1} {[x^0]F(0)} \\pmod P$，因此求逆的前提条件是$[x^0]F(x)\\ne 0$\n\n则\n\n$$H(x)\\equiv G(x)\\pmod {x^{\\frac{n} {2} }}$$\n\n$$H(x)-G(x)\\equiv 0\\pmod {x^{\\frac{n} {2} }}$$\n\n我们对于$H(x)-G(x)$平方，结果的前$n$项不可能由两个$\\ge \\frac{n} {2}$的项相乘得到，而前$\\frac{n} {2}$项都是$0$，所以\n\n$$(H(x)-G(x))^2\\equiv 0\\pmod {x^n}$$ \n\n所以通过平方可以扩大模数，这很常用\n\n展开平方的式子\n\n$$H(x)^2-2G(x)H(x)+G(x)^2\\equiv 0\\pmod {x^n}$$ \n\n两边乘上$F(x)$\n\n$$H(x)^2F(x)-2H(x)+G(x)\\equiv 0\\pmod {x^n}$$ \n\n$$G(x)\\equiv 2H(x)-H(x)^2F(x)\\pmod {x^n}$$\n\n带入这个式子倍增求解即可\n\n分析复杂度，每次有一个$H(x)^2F(x)$，可以通过$NTT$求出，倍增过程中访问的长度是$O(n+\\frac{n} {2}+\\frac{n} {4}...)=O(n)$\n\n所以总复杂度就是$O(n\\log n)$\n\n\n\n$$ \\ $$\n\n---------\n\n## 2.多项式开根号\n\n求$G(x)^2\\equiv F(x) \\pmod {x^n}$\n\n同样的，递归求解，边界是$[x^0]=\\sqrt{[x^0]F(x)} \\pmod P$\n\n可以发现我们需要求[二次剩余](https://www.cnblogs.com/chasedeath/p/13043597.html)。。。但是一般题目保证了$[x^0]F(x)\\in\\{0,1\\}$\n\n设已经求出$H(x)^2\\equiv F(x) \\pmod{ x^{\\lceil \\frac{n} {2} \\rceil} }$\n\n$$H(x)\\equiv G(x) \\pmod {x^{\\lceil \\frac{n} {2}\\rceil} }$$\n\n$$H(x)^2-2G(x)H(x)+G(x)^2\\equiv 0\\pmod {x^n}$$\n\n$$H(x)^2-2G(x)H(x)+F(x)\\equiv 0 \\pmod {x^n}$$\n\n$$G(x)\\equiv \\frac{H(x)^2+F(x)} {2H(x)} \\pmod {x^n}$$\n\n带入这个式子倍增求解即可\n\n复杂度为$O(n\\log n)$，由于需要求逆，实际可能会比较难写\n\n$$ \\ $$\n\n---------------------\n\n## 3.多项式求$\\ln$\n\n对{%raw%}$\\begin{aligned} G(x)\\equiv \\ln F(x) \\pmod {x^n} \\end{aligned} ${%endraw%} 两边求导，注意这里是**复合函数求导**!!!\n\n{%raw%}$\\begin{aligned} G'(x)\\equiv F'(x)\\frac{1} {F(x)} \\pmod {x^n}\\end{aligned}${%endraw%}\n\n求出$G'(x)$，然后求原函数即可\n\n通常保证$[x^0]F(x)=1$，否则不好求$\\ln 1$，所以求出原函数后首项为0\n\n复杂度为$O(n\\log n)$\n\n$$ \\ $$\n\n-----------\n\n## 4.多项式求exp\n\n多项式求$\\text{exp}$即求$G(x)=e^{F(x)} \\mod x^n$\n\n多项式求$\\text{exp}$常见的解法有两种\n\n### CDQ分治+$\\text{NTT}$\n\n要求$G(x)=e^{F(x)}$\n\n式子两边求导(右边要复合函数求导)，$G'(x)=F'(x) e^{F(x)}$\n\n也就是说，$G'(x)=F'(x)G(x)$\n\n两边同时积分得到{%raw%}$\\begin{aligned} G(x)=\\int{F'(x)G(x)}\\end{aligned}${%endraw%}\n\n我们知道，{%raw%}$ [x^i] \\begin{aligned}\\int H(x) =\\frac{ [x^{i-1}]H(x)} {i}\\end{aligned} ${%endraw%}\n\n带入上面的式子得到$\\displaystyle i\\cdot [x^i]G(x)= \\sum_{j=0}^{i-1}[x^j]F'(x)\\cdot [x^{i-1-j}]G(x)$\n\n那么对于这个式子，直接使用分治NTT求解，其复杂为$O(n\\log n)$\n\n$$ \\ $$\n\n### [牛顿迭代](https://www.cnblogs.com/chasedeath/p/12859142.html)\n\n这是一种渐进意义上更优的做法，但实际在$10^6$以下几乎不可能更快，而且代码难写\n\n但是不管平时用不用，牛顿迭代的知识学习一下肯定是最好的\n\n把题目转化为，对于函数$f(G)=\\ln G-F$\n\n求出在$\\mod x^n$意义下的零点\n\n其中$f(x)=\\ln x-c$\n\n考虑迭代求解，设已经求出$H(x)=e^{F(x)}\\pmod {x^{\\frac{n} {2} }}$\n\n边界条件是$[x^0]H(x)=e^{[x^0]F(x)}$(由于没有办法求$e^x$在模意义下的值，所以通常必须要满足$[x^0]F(x)=0$)\n\n带入牛顿迭代的结果\n\n$$G=H-\\frac{f(H)} {f'(H)}=H(F-\\ln H+1)$$\n\n每次求$\\ln$ 复杂度和$\\text{NTT}$相同，所以总复杂度为$O(n\\log n)$\n\n事实上这个还有优化的余地，就是在求$\\ln$的时候，多项式逆的部分可以同步倍增求出，不需要每次都倍增一下~~(但是好像效果并不是特别明显)~~\n\n$$\\  $$\n\n$$ \\ $$\n\n----------------\n\n## 5.多项式$k$次幂\n\n$G(x)\\equiv F(x)^k\\pmod {x^n}$\n\n$\\ln G(x)=k \\ln F(x) \\pmod {x^n}$\n\n求出$\\ln G(x)$之后，$\\exp$回来即可\n\n由于要求$\\ln$，所以这样求的条件是$[x^0]F(x)=1$ (可以通过平移和系数变换来调整为$[x^0]F(x)=1$)\n\n~~很显然这个方法对于开根号也是适用的~~\n\n复杂度$O(n\\log n)$\n\n$$ \\ $$\n\n$$ \\ $$\n\n\n\n\n$$ \\ $$\n\n------------------\n\n## 6.多项式带余除法\n\n问题：给定$F(x),G(x)$，其次数为$n,m,n>m$\n\n求$F(x)=G(x)P(x)+R(x)$，其中$P(x)$次数为$n-m$，$R(x)$次数为$m-1$\n\n考虑先求解$P(x)$，下面引入一种翻转运算\n\n$F^R(x)=x^nF(\\frac{1} {x})$，即将$F(x)$的系数翻转排列\n\n用$\\frac{1} {x}$带入问题的式子，得到\n\n$\\displaystyle F(\\frac{1} {x})=G(\\frac{1} {x})P(\\frac{1} {x})+R(x)$\n\n$\\displaystyle x^nF(\\frac{1} {x})=x^mG(\\frac{1} {x})\\cdot x^{n-m}P(\\frac{1} {x})+x^nR(x)$\n\n$\\displaystyle F^R(x)=G^R(x)\\cdot P^R(x)+x^{n-m+1}R^R(x)$\n\n要求的$P(x)$是$n-m$次的，所以$R^R(x)\\cdot x^{n-m+1}$并没有贡献\n\n此时可以认为$\\displaystyle P^R(x)=\\frac{F^R(x)} {G^R(x)}$，求逆即可得到\n\n得到$P(x)$之后，带入$R(x)=F(x)-G(x)P(x)$即可\n\n$$ \\ $$\n\n$$\\ $$\n\n应用：[多项式多点求值](https://www.cnblogs.com/chasedeath/p/13073178.html)，[常系数线性齐次递推](https://www.cnblogs.com/chasedeath/p/12949896.html)\n\n\n$$ \\ $$\n\n**以上是基本运算，如果不想继续~~吸多项式~~请直接跳到最下面的代码**\n\n[多项式与点值式](https://www.cnblogs.com/chasedeath/p/13073178.html)\n\n[下降幂多项式初步](https://www.cnblogs.com/chasedeath/p/13073206.html)\n\n\n$$ \\ $$\n\n$$ \\ $$\n\n\n\n---------------------------------\n\n\n\n\n\n\n\n$$ \\ $$\n\n$$\\  $$\n\n$$ \\ $$\n\n---------\n\n所有的操作均用$\\text{vector} $来实现，主要是为了理清思路，并且清零问题上会比较容易解决，同时对于每次计算完多项式的长度的要求会显得更加严格\n\n实际在UOJ/Luogu上会非常慢，在LOJ上不错\n\n\n\n---------------\n\n稍微整理了一下，没怎么卡过常，所以应该还是比较可读的\n\n代码总览(请使用C++11,O2编译运行)\n\n[基本运算的总模板题Loj - 150](https://loj.ac/problem/150)\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef double db;\ntypedef unsigned long long ull;\ntypedef pair <int,int> Pii;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n    T s=0; int f=0;\n    while(!isdigit(IO=getchar())) if(IO=='-') f=1;\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return f?-s:s;\n}\n\nconst int N=1<<17,P=998244353;\n\nint n,k;\n\nll qpow(ll x,ll k=P-2) {\n    ll res=1;\n    for(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n    return res;\n}\n\n/*\nvoid NTT(int n,int *a,int f){\n    rep(i,1,n-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n    for(int i=1;i<n;i<<=1) {\n        int w=qpow(3,(P-1)/i/2);\n        for(int l=0;l<n;l+=i*2) {\n            int e=1;\n            for(int j=l;j<l+i;++j,e=1ll*e*w%P) {\n                int t=1ll*a[j+i]*e%P;\n                a[j+i]=a[j]-t,((a[j+i]<0)&&(a[j+i]+=P));\n                a[j]+=t,((a[j]>=P)&&(a[j]-=P));\n            }\n        }\n    }\n    if(f==-1) {\n        reverse(a+1,a+n);\n        int Inv=qpow(n);\n        rep(i,0,n-1) a[i]=1ll*a[i]*Inv%P;\n    }\n}\n\nint e[N];\nvoid NTT(int n,int *a,int f){\n    rep(i,1,n-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n    e[0]=1;\n    for(int i=1;i<n;i<<=1) {\n        int w=qpow(3,(P-1)/i/2);\n        for(int j=1;j<i;++j) e[j]=1ll*e[j-1]*w%P;\n        for(int l=0;l<n;l+=i*2) {\n            for(int j=l;j<l+i;++j) {\n                int t=1ll*a[j+i]*e[j-l]%P;\n                a[j+i]=a[j]-t,((a[j+i]<0)&&(a[j+i]+=P));\n                a[j]+=t,((a[j]>=P)&&(a[j]-=P));\n            }\n        }\n    }\n    if(f==-1) {\n        reverse(a+1,a+n);\n        int Inv=qpow(n);\n        rep(i,0,n-1) a[i]=1ll*a[i]*Inv%P;\n    }\n}\n\nint e[N];\nvoid NTT(int n,int *a,int f){\n    rep(i,1,n-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n    e[0]=1;\n    for(int i=1;i<n;i<<=1) {\n        int w=qpow(3,(P-1)/i/2);\n        for(int j=i-2;j>=0;j-=2) e[j+1]=1ll*w*(e[j]=e[j>>1])%P;\n        for(int l=0;l<n;l+=i*2) {\n            for(int j=l;j<l+i;++j) {\n                int t=1ll*a[j+i]*e[j-l]%P;\n                a[j+i]=a[j]-t,((a[j+i]<0)&&(a[j+i]+=P));\n                a[j]+=t,((a[j]>=P)&&(a[j]-=P));\n            }\n        }\n    }\n    if(f==-1) {\n        reverse(a+1,a+n);\n        int Inv=qpow(n);\n        rep(i,0,n-1) a[i]=1ll*a[i]*Inv%P;\n    }\n}\n\nint w[N];\nvoid Init(int N){\n    w[N>>1]=1;\n    int t=qpow(3,(P-1)/N);\n    rep(i,(N>>1)+1,N-1) w[i]=1ll*w[i-1]*t%P;\n    drep(i,(N>>1)-1,1) w[i]=w[i<<1];\n}\nvoid NTT(int n,int *a,int f){\n    rep(i,1,n-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n    for(int i=1;i<n;i<<=1) {\n        int *e=w+i;\n        for(int l=0;l<n;l+=i*2) {\n            for(int j=l;j<l+i;++j) {\n                int t=1ll*a[j+i]*e[j-l]%P;\n                a[j+i]=a[j]-t,((a[j+i]<0)&&(a[j+i]+=P));\n                a[j]+=t,((a[j]>=P)&&(a[j]-=P));\n            }\n        }\n    }\n    if(f==-1) {\n        reverse(a+1,a+n);\n        int Inv=qpow(n);\n        rep(i,0,n-1) a[i]=1ll*a[i]*Inv%P;\n    }\n}\n*/\n\n/*\nnamespace MTT{\n    const double PI=acos((double)-1);\n    int rev[N];\n    struct Cp{\n        double x,y;\n        Cp(){ ; }\n        Cp(double _x,double _y): x(_x),y(_y){ } \n        inline Cp operator + (const Cp &t) const { return (Cp){x+t.x,y+t.y}; }\n        inline Cp operator - (const Cp &t) const { return (Cp){x-t.x,y-t.y}; }\n        inline Cp operator * (const Cp &t) const { return (Cp){x*t.x-y*t.y,x*t.y+y*t.x}; }\n    }A[N],B[N],C[N],w[N/2];\n#define E(x) ll(x+0.5)%P\n    void FFT(int n,Cp *a,int f){\n        rep(i,0,n-1) if(rev[i]<i) swap(a[i],a[rev[i]]);\n        w[0]=Cp(1,0);\n        for(reg int i=1;i<n;i<<=1) {\n            Cp t=Cp(cos(PI/i),f*sin(PI/i));\n            for(reg int j=i-2;j>=0;j-=2) w[j+1]=t*(w[j]=w[j>>1]);\n            // 上面提到的最优板子\n            for(reg int l=0;l<n;l+=2*i) {\n                for(reg int j=l;j<l+i;j++) {\n                    Cp t=a[j+i]*w[j-l];\n                    a[j+i]=a[j]-t;\n                    a[j]=a[j]+t;\n                }\n            }\n        }\n        if(f==-1) rep(i,0,n-1) a[i].x/=n,a[i].y/=n;\n    }\n    void Multiply(int n,int m,int *a,int *b,int *res,int P){\n        // [0,n-1]*[0,m-1]->[0,n+m-2]\n        int S=(1<<15)-1;\n        int R=1,cc=-1;\n        while(R<=n+m-1) R<<=1,cc++;\n        rep(i,1,R) rev[i]=(rev[i>>1]>>1)|((i&1)<<cc);\n        rep(i,0,n-1) A[i]=Cp((a[i]&S),(a[i]>>15));\n        rep(i,0,m-1) B[i]=Cp((b[i]&S),(b[i]>>15));\n        rep(i,n,R-1) A[i]=Cp(0,0);\n        rep(i,m,R-1) B[i]=Cp(0,0);\n        FFT(R,A,1),FFT(R,B,1);\n        rep(i,0,R-1) {\n            int j=(R-i)%R;\n            C[i]=Cp((A[i].x+A[j].x)/2,(A[i].y-A[j].y)/2)*B[i];\n            B[i]=Cp((A[i].y+A[j].y)/2,(A[j].x-A[i].x)/2)*B[i];\n        }\n        FFT(R,C,-1),FFT(R,B,-1);\n        rep(i,0,n+m-2) {\n            ll a=E(C[i].x),b=E(C[i].y),c=E(B[i].x),d=E(B[i].y);\n            res[i]=(a+((b+c)<<15)+(d<<30))%P;\n        }\n    }\n#undef E\n}\n*/\n\n\nnamespace Polynomial{\n\n    typedef vector <int> Poly;\n    void Show(Poly a,int k=0){ \n        if(!k){ for(int i:a) printf(\"%d \",i); puts(\"\"); }\n        else for(int i:a) printf(\"%d\\n\",i);\n    }\n    int rev[N],w[N];\n    int Inv[N+1],Fac[N+1],FInv[N+1];\n\n    void Init_w() { \n        int t=qpow(3,(P-1)/N);\n        w[N>>1]=1;\n        rep(i,(N>>1)+1,N-1) w[i]=1ll*w[i-1]*t%P;\n        drep(i,(N>>1)-1,1) w[i]=w[i<<1];\n        Inv[0]=Inv[1]=Fac[0]=Fac[1]=FInv[0]=FInv[1]=1;\n        rep(i,2,N) {\n            Inv[i]=1ll*(P-P/i)*Inv[P%i]%P; \n            FInv[i]=1ll*FInv[i-1]*Inv[i]%P;\n            Fac[i]=1ll*Fac[i-1]*i%P;\n        }\n    }\n    int Init(int n){\n        int R=1,c=-1;\n        while(R<n) R<<=1,c++;\n        rep(i,1,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<c);\n        return R;\n    }\n\n#define NTTVersion1\n\n#ifdef NTTVersion1\n    void NTT(int n,Poly &a,int f){\n        rep(i,0,n-1) if(rev[i]<i) swap(a[i],a[rev[i]]);\n        for(int i=1;i<n;i<<=1) {\n            int *e=w+i;\n            for(int l=0;l<n;l+=i*2) {\n                for(int j=l;j<l+i;++j) {\n                    int t=1ll*a[j+i]*e[j-l]%P;\n                    a[j+i]=a[j]-t,Mod2(a[j+i]);\n                    a[j]+=t,Mod1(a[j]);\n                }\n            }\n        }\n        if(f==-1) {\n            reverse(a.begin()+1,a.begin()+n);\n            ll base=Inv[n];\n            rep(i,0,n-1) a[i]=a[i]*base%P;\n        }\n    }\n    void NTT(int n,int *a,int f){\n        rep(i,0,n-1) if(rev[i]<i) swap(a[i],a[rev[i]]);\n        for(int i=1;i<n;i<<=1) {\n            int *e=w+i;\n            for(int l=0;l<n;l+=i*2) {\n                for(int j=l;j<l+i;++j) {\n                    int t=1ll*a[j+i]*e[j-l]%P;\n                    a[j+i]=a[j]-t,Mod2(a[j+i]);\n                    a[j]+=t,Mod1(a[j]);\n                }\n            }\n        }\n        if(f==-1) {\n            reverse(a+1,a+n);\n            ll base=Inv[n];\n            rep(i,0,n-1) a[i]=a[i]*base%P;\n        }\n    }\n\n#else \n\n    void NTT(int n,Poly &a,int f){ \n        static int e[N>>1];\n        rep(i,0,n-1) if(rev[i]<i) swap(a[i],a[rev[i]]);\n        e[0]=1;\n        for(int i=1;i<n;i<<=1) {\n            int t=qpow(f==1?3:(P+1)/3,(P-1)/i/2);\n            for(int j=i-2;j>=0;j-=2) e[j+1]=1ll*t*(e[j]=e[j>>1])%P;\n            for(int l=0;l<n;l+=i*2) {\n                for(int j=l;j<l+i;++j) {\n                    int t=1ll*a[j+i]*e[j-l]%P;\n                    a[j+i]=a[j]-t,Mod2(a[j+i]);\n                    a[j]+=t,Mod1(a[j]);\n                }\n            }\n        }\n        if(f==-1) {\n            ll base=Inv[n];\n            rep(i,0,n-1) a[i]=a[i]*base%P;\n        }\n    }\n    void NTT(int n,int *a,int f){ \n        static int e[N>>1];\n        rep(i,0,n-1) if(rev[i]<i) swap(a[i],a[rev[i]]);\n        e[0]=1;\n        for(int i=1;i<n;i<<=1) {\n            int t=qpow(f==1?3:(P+1)/3,(P-1)/i/2);\n            for(int j=i-2;j>=0;j-=2) e[j+1]=1ll*t*(e[j]=e[j>>1])%P;\n            for(int l=0;l<n;l+=i*2) {\n                for(int j=l;j<l+i;++j) {\n                    int t=1ll*a[j+i]*e[j-l]%P;\n                    a[j+i]=a[j]-t,Mod2(a[j+i]);\n                    a[j]+=t,Mod1(a[j]);\n                }\n            }\n        }\n        if(f==-1) {\n            ll base=Inv[n];\n            rep(i,0,n-1) a[i]=a[i]*base%P;\n        }\n    }\n\n#endif\n\n\n    Poly operator * (Poly a,Poly b){\n        int n=a.size()+b.size()-1;\n        int R=Init(n);\n        a.resize(R),b.resize(R);\n        NTT(R,a,1),NTT(R,b,1);\n        rep(i,0,R-1) a[i]=1ll*a[i]*b[i]%P;\n        NTT(R,a,-1);\n        a.resize(n);\n        return a;\n    }\n\n    Poly operator + (Poly a,Poly b) { \n        int n=max(a.size(),b.size());\n        a.resize(n),b.resize(n);\n        rep(i,0,n-1) a[i]+=b[i],Mod1(a[i]);\n        return a; \n    }\n    Poly operator - (Poly a,Poly b) { \n        int n=max(a.size(),b.size());\n        a.resize(n),b.resize(n);\n        rep(i,0,n-1) a[i]-=b[i],Mod2(a[i]);\n        return a; \n    }\n\n    Poly Poly_Inv(Poly a) { // 多项式乘法逆，注意这里求出的是前a.size()项\n        int n=a.size();\n        if(n==1) return Poly{(int)qpow(a[0],P-2)};\n        Poly b=a; b.resize((n+1)/2); b=Poly_Inv(b);\n        int R=Init(n<<1);\n        a.resize(R),b.resize(R);\n        NTT(R,a,1),NTT(R,b,1);\n        rep(i,0,R-1) a[i]=(2-1ll*a[i]*b[i]%P+P)*b[i]%P;\n        NTT(R,a,-1);\n        a.resize(n);\n        return a;\n    }\n\n    Poly operator / (Poly a,Poly b){ // 多项式带余除法\n        reverse(a.begin(),a.end()),reverse(b.begin(),b.end());\n        int n=a.size(),m=b.size();\n        a.resize(n-m+1),b.resize(n-m+1),b=Poly_Inv(b);\n        a=a*b,a.resize(n-m+1);\n        reverse(a.begin(),a.end());\n        return a;\n    }\n    Poly operator % (Poly a,Poly b) { // 多项式取模\n        int n=b.size()-1;\n        if((int)a.size()<=n) return a;\n        Poly t=a/b;\n        if((int)t.size()>n) t.resize(n);\n        t=t*b; t.resize(n); a.resize(n);\n        return a-t;\n    }\n\n    int Quad(int a,int k=0) { // 二次剩余(不是原根法),用于求Sqrt\n        if(a<=1) return a;\n        ll x;\n        while(1) {\n            x=1ll*rand()*rand()%P;\n            if(qpow((x*x-a+P)%P,(P-1)/2)!=1) break;\n        }\n        ll w=(x*x-a+P)%P;\n        Pii res=mp(1,0),t=mp(x,1);\n        auto Mul=[&](Pii a,Pii b){\n            int x=(1ll*a.first*b.first+1ll*a.second*b.second%P*w)%P,y=(1ll*a.first*b.second+1ll*a.second*b.first)%P;\n            return mp(x,y);\n        };\n        int d=(P+1)/2;\n        while(d) {\n            if(d&1) res=Mul(res,t);\n            t=Mul(t,t);\n            d>>=1;\n        }\n        ll r=(res.first%P+P)%P;\n        if(k) r=min(r,(P-r)%P);\n        return r;\n    }\n    Poly Sqrt(Poly a){ // 多项式开根号\n        int n=a.size();\n        if(n==1) return Poly{Quad(a[0],1)};\n        Poly b=a; b.resize((n+1)/2),b=Sqrt(b),b.resize(n);\n        Poly c=Poly_Inv(b);\n        int R=Init(n*2);\n        a.resize(R),c.resize(R);\n        NTT(R,a,1),NTT(R,c,1);\n        rep(i,0,R-1) a[i]=1ll*a[i]*c[i]%P;\n        NTT(R,a,-1);\n        a.resize(n);\n        rep(i,0,n-1) a[i]=1ll*(P+1)/2*(a[i]+b[i])%P;\n        return a;\n    }\n\n    Poly Deri(Poly a){ //求导\n        rep(i,1,a.size()-1) a[i-1]=1ll*i*a[i]%P;\n        a.pop_back();\n        return a;\n    }\n    Poly IDeri(Poly a) { //原函数\n        a.pb(0);\n        drep(i,a.size()-1,1) a[i]=1ll*a[i-1]*Inv[i]%P;\n        a[0]=0;\n        return a;\n    }\n\n    Poly Ln(Poly a){ // 多项式求Ln\n        int n=a.size();\n        a=Poly_Inv(a)*Deri(a),a.resize(n-1);\n        return IDeri(a);\n    }\n    Poly Exp(Poly a){ // 多项式Exp\n        int n=a.size();\n        if(n==1) return Poly{1};\n        Poly b=a; b.resize((n+1)/2),b=Exp(b); b.resize(n);\n        Poly c=Ln(b);\n        rep(i,0,n-1) c[i]=a[i]-c[i],Mod2(c[i]);\n        c[0]++,b=b*c;\n        b.resize(n);\n        return b;\n    }\n\n    void Exp_Solve(Poly &A,Poly &B,int l,int r){\n        static int X[N],Y[N];\n        if(l==r) {\n            B[l]=1ll*B[l]*Inv[l]%P;\n            return;\n        }\n        int mid=(l+r)>>1;\n        Exp_Solve(A,B,l,mid);\n        int R=Init(r-l+2);\n        rep(i,0,R) X[i]=Y[i]=0;\n        rep(i,l,mid) X[i-l]=B[i];\n        rep(i,0,r-l-1) Y[i+1]=A[i];\n        NTT(R,X,1),NTT(R,Y,1);\n        rep(i,0,R-1) X[i]=1ll*X[i]*Y[i]%P;\n        NTT(R,X,-1);\n        rep(i,mid+1,r) B[i]+=X[i-l],Mod1(B[i]);\n        Exp_Solve(A,B,mid+1,r);\n    }\n    Poly CDQ_Exp(Poly F){\n        int n=F.size(); F=Deri(F);\n        Poly A(n);\n        A[0]=1;\n        Exp_Solve(F,A,0,n-1);\n        return A;\n    }\n\n\n    Poly Pow(Poly x,int k) { // 多项式k次幂\n        x=Ln(x);\n        rep(i,0,x.size()-1) x[i]=1ll*x[i]*k%P;\n        return Exp(x);\n    }\n\n    Poly EvaluateTemp[N<<1];\n    void EvaluateSolve1(Poly &a,int l,int r,int p=1){\n        if(l==r) { EvaluateTemp[p]=Poly{P-a[l],1}; return; } \n        int mid=(l+r)>>1;\n        EvaluateSolve1(a,l,mid,p<<1),EvaluateSolve1(a,mid+1,r,p<<1|1);\n        EvaluateTemp[p]=EvaluateTemp[p<<1]*EvaluateTemp[p<<1|1];\n    }\n    void EvaluateSolve2(Poly &res,Poly F,int l,int r,int p=1){\n        if(l==r){ res[l]=F[0]; return; }\n        int mid=(l+r)>>1;\n        EvaluateSolve2(res,F%EvaluateTemp[p<<1],l,mid,p<<1);\n        EvaluateSolve2(res,F%EvaluateTemp[p<<1|1],mid+1,r,p<<1|1);\n    }\n    Poly Evaluate(Poly a,Poly b,int flag=1){ // 多项式多点求值\n        Poly res(b.size());\n        if(flag) EvaluateSolve1(b,0,b.size()-1);\n        EvaluateSolve2(res,a,0,b.size()-1);\n        return res;\n    }\n    Poly InterpolationSolve(Poly &T,int l,int r,int p=1){ \n        if(l==r) return Poly{T[l]};\n        int mid=(l+r)>>1;\n        return InterpolationSolve(T,l,mid,p<<1)*EvaluateTemp[p<<1|1]+InterpolationSolve(T,mid+1,r,p<<1|1)*EvaluateTemp[p<<1];\n    }\n    Poly Interpolation(Poly X,Poly Y){ // 多项式快速插值\n        int n=X.size();\n        EvaluateSolve1(X,0,n-1);\n        Poly T=Evaluate(Deri(EvaluateTemp[1]),X,0);\n        rep(i,0,n-1) T[i]=Y[i]*qpow(T[i])%P;\n        return InterpolationSolve(T,0,n-1);\n    }\n\n    void FFPTrans(Poly &a,int f){ // FFP<->EGF\n        int n=a.size();\n        Poly b(n);\n        if(f==1) rep(i,0,n-1) b[i]=FInv[i];\n        else rep(i,0,n-1) b[i]=(i&1)?P-FInv[i]:FInv[i];\n        a=a*b; a.resize(n);\n    }\n    Poly FFPMul(Poly a,Poly b){ // FFP卷积\n        int n=a.size()+b.size()-1;\n        a.resize(n),b.resize(n);\n        FFPTrans(a,1),FFPTrans(b,1);\n        rep(i,0,n-1) a[i]=1ll*a[i]*b[i]%P*Fac[i]%P;\n        FFPTrans(a,-1);\n        return a;\n    }\n    Poly PolyToFFP(Poly F){ // 多项式转FFP\n        int n=F.size();\n        Poly G(n);\n        rep(i,0,n-1) G[i]=i;\n        G=Evaluate(F,G);\n        rep(i,0,n-1) F[i]=1ll*G[i]*FInv[i]%P;\n        FFPTrans(F,-1);\n        return F;\n    }\n    Poly FFPToPoly(Poly F){ // FFP转多项式\n        FFPTrans(F,1);\n        int n=F.size(); Poly X(n);\n        rep(i,0,n-1) X[i]=i,F[i]=1ll*F[i]*Fac[i]%P;\n        EvaluateSolve1(X,0,n-1);\n        rep(i,0,n-1) {\n            F[i]=1ll*F[i]*FInv[i]%P*FInv[n-i-1]%P;\n            if((n-i-1)&1) F[i]=(P-F[i])%P;\n        }\n        return InterpolationSolve(F,0,n-1);\n    }\n}\nusing namespace Polynomial;\n\nPoly Lag(int n,Poly X,Poly Y){\n    Poly T(n+1),R(n+1),A(n+1);\n    T[0]=1;\n    rep(i,0,n) drep(j,i+1,0) T[j]=(1ll*T[j]*(P-X[i])+(j?T[j-1]:0))%P;\n    rep(i,0,n) {\n        ll t=1;\n        rep(j,0,n) if(i!=j) t=t*(X[i]-X[j]+P)%P;\n        t=qpow(t)*Y[i]%P,R[n+1]=T[n+1];\n        drep(j,n,0) A[j]=(A[j]+t*R[j+1])%P,R[j]=(T[j]+1ll*R[j+1]*X[i]%P+P)%P;\n    }\n    return A;\n}\n\nint main(){\n    int n=rd();\n    Init_w();\n    Poly F(n);\n    rep(i,0,n-1) F[i]=rd();\n    Show(CDQ_Exp(F));\n}\n\n\n\n\n\n```\n\n$$ \\ $$\n\n$$  \\ $$\n\n$$ \\ $$","tags":["default tag"],"categories":["default category"]},{"title":"CodeChef 2020 November - Challenge Chef and the Combination Lock (多项式)","url":"/articles/2021/03/10/783a8969.html","content":"# CodeChef 2020 November - Challenge Chef and the Combination Lock (多项式)\n\n题目大意：给定了$n$个随机变量$x_i\\in{0,1,\\cdots,A_i}$，令$\\Chi=\\min_i\\lbrace x_i,A_i-x_i\\rbrace$，求$E(\\Chi)$\n\n我们知道$E(\\Chi)=\\sum_{i=0}^{\\infty} P(\\Chi>i)$\n\n不妨考虑计算$P(\\Chi>i)$，先计算方案数，发现方案数可以用一个多项式来表示\n\n令$F(x)$为$\\Chi>x$的方案数，则{%raw%}$\\begin{aligned}F(x)=\\prod_{i=1}^n (A_i-1-2x)　\\end{aligned}${%endraw%}\n\n显然$\\Chi \\leq \\min\\lbrace \\frac{A_i} {2} \\rbrace$，不妨设这个上界为$U$，也就是说我们要求$\\sum_{i=0}^U F(i)$\n\n常识：一个$n$次多项式前缀和可以用一个不超过$n+1$次的多项式来表示\n\n如果暴力求出$F(x)$在$x=0,1,\\cdots,n+1$处的值，累前缀和，然后用拉格朗日插值法求出解\n\n暴力求值复杂度为$O(n^2)$，拉格朗日插值复杂度为$O(n)$\n\n可以用分治$\\text{NTT}$优化$F(x)$的求解，然后用[**多项式多点求值**](https://www.cnblogs.com/chasedeath/p/13073178.html)求得点值\n\n复杂度为$O(n\\log ^2n)$，实际在CodeChef上的运行时间为0.53s\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef double db;\ntypedef unsigned long long ull;\ntypedef pair <int,int> Pii;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=1<<18,P=998244353;\n\n\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\ntypedef vector <int> Poly;\nvoid Show(Poly a,int k=0){ \n\tif(!k){ for(int i:a) printf(\"%d \",i); puts(\"\"); }\n\telse for(int i:a) printf(\"%d\\n\",i);\n}\nint rev[N],w[N];\nint Inv[N+1],Fac[N+1],FInv[N+1];\n\nvoid Init() { \n\tint t=qpow(3,(P-1)/N);\n\tw[N>>1]=1;\n\trep(i,(N>>1)+1,N-1) w[i]=1ll*w[i-1]*t%P;\n\tdrep(i,(N>>1)-1,1) w[i]=w[i<<1];\n\tInv[0]=Inv[1]=Fac[0]=Fac[1]=FInv[0]=FInv[1]=1;\n\trep(i,2,N) {\n\t\tInv[i]=1ll*(P-P/i)*Inv[P%i]%P; \n\t\tFInv[i]=1ll*FInv[i-1]*Inv[i]%P;\n\t\tFac[i]=1ll*Fac[i-1]*i%P;\n\t}\n\n}\nint Init(int n){\n\tint R=1,c=-1;\n\twhile(R<n) R<<=1,c++;\n\trep(i,1,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<c);\n\treturn R;\n}\n\n\nvoid NTT(int n,int *a,int f){\n\trep(i,0,n-1) if(rev[i]<i) swap(a[i],a[rev[i]]);\n\tfor(int i=1;i<n;i<<=1) {\n\t\tint *e=w+i;\n\t\tfor(int l=0;l<n;l+=i*2) {\n\t\t\tfor(int j=l;j<l+i;++j) {\n\t\t\t\tint t=1ll*a[j+i]*e[j-l]%P;\n\t\t\t\ta[j+i]=a[j]-t,Mod2(a[j+i]);\n\t\t\t\ta[j]+=t,Mod1(a[j]);\n\t\t\t}\n\t\t}\n\t}\n\tif(f==-1) {\n\t\treverse(a+1,a+n);\n\t\tll base=Inv[n];\n\t\trep(i,0,n-1) a[i]=a[i]*base%P;\n\t}\n}\nvoid NTT(int n,Poly &a,int f){\n\tstatic int A[N];\n\tif((int)a.size()<n) a.resize(n);\n\trep(i,0,n-1) A[i]=a[i];\n\tNTT(n,A,f);\n\trep(i,0,n-1) a[i]=A[i];\n}\n\nPoly operator * (Poly a,Poly b){\n\tint n=a.size()+b.size()-1;\n\tint R=Init(n);\n\ta.resize(R),b.resize(R);\n\tNTT(R,a,1),NTT(R,b,1);\n\trep(i,0,R-1) a[i]=1ll*a[i]*b[i]%P;\n\tNTT(R,a,-1);\n\ta.resize(n);\n\treturn a;\n}\n\nPoly operator + (Poly a,Poly b) { \n\tint n=max(a.size(),b.size());\n\ta.resize(n),b.resize(n);\n\trep(i,0,n-1) a[i]+=b[i],Mod1(a[i]);\n\treturn a; \n}\nPoly operator - (Poly a,Poly b) { \n\tint n=max(a.size(),b.size());\n\ta.resize(n),b.resize(n);\n\trep(i,0,n-1) a[i]-=b[i],Mod2(a[i]);\n\treturn a; \n}\n\nPoly Poly_Inv(Poly a) { \n\tint n=a.size();\n\tif(n==1) return Poly{(int)qpow(a[0],P-2)};\n\tPoly b=a; b.resize((n+1)/2); b=Poly_Inv(b);\n\tint R=Init(n<<1);\n\ta.resize(R),b.resize(R);\n\tNTT(R,a,1),NTT(R,b,1);\n\trep(i,0,R-1) a[i]=(2-1ll*a[i]*b[i]%P+P)*b[i]%P;\n\tNTT(R,a,-1);\n\ta.resize(n);\n\treturn a;\n}\n\n// 应用转置原理优化的多项式多点求值\nPoly Evaluate(Poly F,Poly X){\n\tstatic int ls[N<<1],rs[N<<1],cnt;\n\tstatic Poly T[N<<1];\n\tstatic auto TMul=[&] (Poly F,Poly G){\n\t\tint n=F.size(),m=G.size();\n\t\tif(n<=20 && m<=20){\n\t\t\trep(i,0,n-m) {\n\t\t\t\tint t=0;\n\t\t\t\trep(j,0,m-1) t=(t+1ll*F[i+j]*G[j])%P;\n\t\t\t\tF[i]=t;\n\t\t\t} \n\t\t\tF.resize(n-m+1);\n\t\t\treturn F;\n\t\t}\n\t\treverse(G.begin(),G.end());\n\t\tint R=Init(n);\n\t\tNTT(R,F,1),NTT(R,G,1);\n\t\trep(i,0,R-1) F[i]=1ll*F[i]*G[i]%P;\n\t\tNTT(R,F,-1); Poly T(n-m+1);\n\t\trep(i,0,n-m) T[i]=F[i+m-1];\n\t\treturn T;\n\t};\n\tstatic function <int(int,int)> Build=[&](int l,int r) {\n\t\tint u=++cnt; ls[u]=rs[u]=0;\n\t\tif(l==r) {\n\t\t\tT[u]=Poly{1,P-X[l]};\n\t\t\treturn u;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tls[u]=Build(l,mid),rs[u]=Build(mid+1,r);\n\t\tT[u]=T[ls[u]]*T[rs[u]];\n\t\treturn u;\n\t};\n\n\tint n=F.size(),m=X.size();\n\tcmax(n,m),F.resize(n),X.resize(n);\n\tcnt=0,Build(0,n-1);\n\tF.resize(n*2+1),T[1]=TMul(F,Poly_Inv(T[1]));\n\tint p=0;\n\trep(i,1,cnt) if(ls[i]) {\n\t\tswap(T[ls[i]],T[rs[i]]);\n\n\t\tint R=Init(T[i].size()),n=T[i].size(),m1=T[ls[i]].size(),m2=T[rs[i]].size();\n\t\tNTT(R,T[i],1);\n\t\treverse(T[ls[i]].begin(),T[ls[i]].end()); reverse(T[rs[i]].begin(),T[rs[i]].end());\n\t\tNTT(R,T[ls[i]],1); NTT(R,T[rs[i]],1);\n\t\trep(j,0,R-1) {\n\t\t\tT[ls[i]][j]=1ll*T[ls[i]][j]*T[i][j]%P;\n\t\t\tT[rs[i]][j]=1ll*T[rs[i]][j]*T[i][j]%P;\n\t\t}\n\t\tNTT(R,T[ls[i]],-1); NTT(R,T[rs[i]],-1);\n\t\trep(j,0,n-m1) T[ls[i]][j]=T[ls[i]][j+m1-1];\n\t\tT[ls[i]].resize(n-m1+1);\n\t\trep(j,0,n-m2) T[rs[i]][j]=T[rs[i]][j+m2-1];\n\t\tT[rs[i]].resize(n-m2+1);\n\t} else X[p++]=T[i][0];\n\tX.resize(m);\n\treturn X;\n}\n\nint n;\nint A[N];\nint I[N],J[N];\nint F[N],L[N],R[N];\n\nPoly Solve(int l,int r) {\n\tif(l==r) return Poly{A[l]-1,P-2};\n\tint mid=(l+r)>>1;\n\treturn Solve(l,mid)*Solve(mid+1,r);\n}\n\n\nint main() {\n\tInit();\n\trep(i,J[0]=1,N-1) J[i]=1ll*J[i-1]*i%P;\n\tI[N-1]=qpow(J[N-1]);\n\tdrep(i,N-1,1) I[i-1]=1ll*I[i]*i%P;\n\n\trep(kase,1,rd()) {\n\t\tint x=P,All=1; \n\t\tn=rd();\n\t\trep(i,1,n+1) F[i]=0;\n\t\tF[0]=1;\n\t\tint f=0;\n\t\trep(i,1,n) {\n\t\t\tA[i]=rd();\n\t\t\tf|=!A[i];\n\t\t\tcmin(x,(A[i]-1)/2),All=1ll*All*(A[i]+1)%P;\n\t\t}\n\t\tif(f){ puts(\"0\"); continue; }\n\t\tPoly Y=Solve(1,n),X(n+2);\n\t\trep(i,0,n+1) X[i]=i;\n\t\tY=Evaluate(Y,X);\n\t\trep(i,1,n+1) Y[i]=(Y[i]+Y[i-1])%P;\n\t\tint ans=0;\n\t\tif(x<=n+1) ans=Y[x];\n\t\telse {\n            // 拉格朗日插值\n\t\t\tL[0]=x;\n\t\t\trep(i,1,n+1) L[i]=1ll*L[i-1]*(x-i)%P;\n\t\t\tR[n+2]=1;\n\t\t\tdrep(i,n+1,0) R[i]=1ll*R[i+1]*(x-i)%P;\n\t\t\trep(i,0,n+1) {\n\t\t\t\tint t=1ll*Y[i]*(i?L[i-1]:1)%P*R[i+1]%P*I[i]%P*I[n+1-i]%P;\n\t\t\t\tif((n+1-i)&1) t=P-t;\n\t\t\t\tans=(ans+t)%P;\n\t\t\t}\n\t\t}\n\t\tans=ans*qpow(All)%P;\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n```","tags":["Atcoder","Codechef"],"categories":["题解"]},{"title":"「BalticOI 2020」病毒","url":"/articles/2021/03/10/5ddd8536.html","content":"# 「BalticOI 2020」病毒\n\n设点集大小为$N$，边集总长度$\\sum k=M$，模板串总长$L=\\sum ℓ$\n\n涉及到多串匹配的转移问题，容易想到$\\text{AC}$自动机\n\n因为本题状态非常少，可以暴力矩阵维护转移，暴力计算由状态$i$转移至状态$j$，且中途不匹配的最小长度\n\n有$NL^2$个状态\n\n给定的是一张有向图，可以用奇怪的$\\text{Bellman-Ford,Dijkstra}$完成暴力转移\n\n复杂度未知。。。上界应该比较高，但是鉴于常数小可以通过\n\n$$ \\ $$\n\n$$\\ $$\n\n优化的转移：把每一条边的前缀拆出来，建立虚点\n\n这样以来，所有状态转移可以归纳为 虚点+实点 $\\to$ 虚点/实点\n\n一共有$(N+M)L^2$个状态，$(N+M)L^2$种转移，每种转移涉及两个元素，产生$L$个元素\n\n故对于每种转移的每一方，被遍历时都要枚举依次转移，共有$2(N+M)L^3$次转移\n\n因此可以认为建立的图有$(N+M)L^2$个点，$2(N+M)L^3$条边\n\n对此运行 类似 最短路算法即可\n\n因此用$\\text{Dijkstra}$维护转移的复杂度为$O(\\ (N+M)L^3\\ \\log ((N+M)L^2)\\ )$\n\n$$ \\ $$\n\n---以下是未优化Bellman-Ford代码----\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef unsigned long long ll;\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=110,M=54;\n\n\nint n,m,k;\ntypedef vector <int> V;\nint trie[M][2],fail[M],mk[M],cnt;\nvoid Ins(const V &S){\n\tint now=0;\n\tfor(int i:S) {\n\t\tint &nxt=trie[now][i];\n\t\tif(!nxt) nxt=++cnt;\n\t\tnow=nxt;\n\t}\n\tmk[now]=1;\n}\nvoid Build(){\n\tstatic queue <int> que;\n\trep(i,0,1) if(trie[0][i]) que.push(trie[0][i]);\n\twhile(!que.empty()) { \n\t\tint u=que.front(); que.pop();\n\t\tmk[u]|=mk[fail[u]];\n\t\trep(i,0,1){\n\t\t\tint &v=trie[u][i];\n\t\t\tif(v) que.push(v);\n\t\t\t(!v?v:fail[v])=trie[fail[u]][i];\n\t\t}\n\t}\n    // delete illegal state\n\trep(i,0,cnt) rep(j,0,1) if(mk[trie[i][j]]) trie[i][j]=cnt+1;\n}\n\nV Read(){\n\tV Res;\n\trep(i,1,rd()) Res.pb(rd());\n\treturn Res;\n}\n\nvector <V> G[N];\nint E[N][N];\nconst ll INF=-1;\nll dis[N][M][M],ans[N];\nint fl=1;\nvoid Work(int u){\n\tstatic ll F[M][M],G[M][M];\n\tll f=INF;\n\tfor(V S:(::G[u])) {\n\t\tmemset(F,255,sizeof F);\n\t\trep(i,0,cnt) F[i][i]=0;\n\t\tfor(int c:S) {\n\t\t\trep(i,0,cnt) rep(j,0,cnt) G[i][j]=F[i][j],F[i][j]=INF;\n\t\t\trep(i,0,cnt) rep(j,0,cnt) if(G[i][j]<INF) \n\t\t\t\trep(k,0,cnt) if(G[i][j]+dis[c][j][k]>=max(G[i][j],dis[c][j][k])) \n\t\t\t\t\tcmin(F[i][k],G[i][j]+dis[c][j][k]);\n\t\t}\n\t\trep(i,0,cnt) rep(j,0,cnt) if(dis[u][i][j]>F[i][j]) dis[u][i][j]=F[i][j],cmin(f,F[i][j]);\n\t}\n\tif(f!=INF) fl=1;\n}\n\nint main(){\n\tn=rd()-1,m=rd(),k=rd();\n\trep(i,1,m) {\n\t\tint u=rd(); V w=Read();\n\t\tG[u].pb(w);\n\t\tfor(int v:w) E[v][u]=1;\n\t}\n\trep(i,1,k) Ins(Read());\n\tBuild();\n\tmemset(dis,255,sizeof dis),memset(ans,255,sizeof ans);\n\trep(u,0,1) rep(i,0,cnt) if(!mk[i]) dis[u][i][trie[i][u]]=1;\n\twhile(fl){\n\t\tfl=0;\n\t\trep(i,2,n) Work(i);\n\t}\n\trep(i,2,n) rep(j,0,cnt) if(!mk[j]) cmin(ans[i],dis[i][0][j]);\n\trep(i,2,n) {\n\t\tif(ans[i]==INF) puts(\"YES\");\n\t\telse printf(\"NO %llu\\n\",ans[i]);\n\t}\n}\n```\n\n\n\n----以下是无比垃圾的优化代码----\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef unsigned long long ll;\n#define pb push_back\ntypedef pair <int,int> Pii;\n#define mp make_pair\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\nchar IO;\nint rd(){\n\tint s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\n\nconst int N=210,M=52;\nconst ll INF=-1;\n\nint n,m,k,c;\ntypedef vector <int> V;\nint trie[M][2],fail[M],mk[M],cnt;\nvoid Ins(const V &S){\n\tint now=0;\n\tfor(int i:S) {\n\t\tint &nxt=trie[now][i];\n\t\tif(!nxt) nxt=++cnt;\n\t\tnow=nxt;\n\t}\n\tmk[now]=1;\n}\nvoid Build(){\n\tstatic queue <int> que;\n\trep(i,0,1) if(trie[0][i]) que.push(trie[0][i]);\n\twhile(!que.empty()) { \n\t\tint u=que.front(); que.pop();\n\t\tmk[u]|=mk[fail[u]];\n\t\trep(i,0,1){\n\t\t\tint &v=trie[u][i];\n\t\t\tif(v) que.push(v);\n\t\t\t(!v?v:fail[v])=trie[fail[u]][i];\n\t\t}\n\t}\n\tmk[cnt+1]=1;\n\trep(i,0,cnt) rep(j,0,1) if(mk[i] || mk[trie[i][j]]) trie[i][j]=cnt+1;\n}\n\nV Read(){\n\tV Res;\n\trep(i,1,rd()) Res.pb(rd());\n\treturn Res;\n}\n\nvector <Pii> G[N];\nll dis[N][M][M];\nstruct Node{\n\tint u,s,t;\n\tll d;\n\tbool operator < (const Node &__) const {\n\t\treturn d>__.d;\n\t}\n};\npriority_queue <Node> que;\nvoid Upd(int u,int s,int t,ll d){\n\tif(mk[s]||mk[t]||dis[u][s][t]<=d) return;\n\tdis[u][s][t]=d,que.push((Node){u,s,t,d});\n}\n\nint main(){\n\tc=n=rd()-1,m=rd(),k=rd();\n\t++c; // 建立一个空虚点\n\trep(i,1,m) {\n\t\tint u=rd(); V w=Read();\n\t\tint lst=n+1;\n\t\trep(j,0,w.size()-1) {\n\t\t\tif(j==jend) G[lst].pb(mp(w[j],u)),G[w[j]].pb(mp(lst,u));\n\t\t\telse G[lst].pb(mp(w[j],++c)),G[w[j]].pb(mp(lst,c)),lst=c;\n\t\t}\n\t}\n\trep(i,1,k) Ins(Read());\n\tBuild();\n\tmemset(dis,255,sizeof dis);\n\trep(i,0,cnt) if(!mk[i]) dis[n+1][i][i]=0; // 单位矩阵\n\trep(u,0,1) rep(i,0,cnt) Upd(u,i,trie[i][u],1);\n\twhile(!que.empty()) {\n\t\tint u=que.top().u,s=que.top().s,t=que.top().t;\n\t\tll d=que.top().d;  que.pop();\n\t\tif(d>dis[u][s][t]) continue;\n\t\tfor(auto i:G[u]) {\n\t\t\tint v=i.first,to=i.second;\n\t\t\tif(u<=n) {\n\t\t\t\trep(i,0,cnt) if(dis[v][i][s]<INF) Upd(to,i,t,dis[v][i][s]+d);\n\t\t\t} else {\n\t\t\t\trep(i,0,cnt) if(dis[v][t][i]<INF) Upd(to,s,i,d+dis[v][t][i]);\n\t\t\t}\n\t\t}\n\t}\n\trep(i,2,n) {\n\t\tll ans=-1;\n\t\trep(j,0,cnt) if(!mk[j]) ans=min(ans,dis[i][0][j]);\n\t\tif(ans==INF) puts(\"YES\");\n\t\telse printf(\"NO %llu\\n\",ans);\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「BalticOI 2020」小丑","url":"/articles/2021/03/09/9347360f.html","content":"# 「BalticOI 2020」小丑\n\n## Analysis\n\n问题即考虑加入一个边集，判断是否是二分图\n\n容易想到用带权并查集/LCT 之类的结构维护\n\n考虑对于每个左端点/右端点 维护最长的有解区间$R_i/L_i$\n\n$L_i,R_i$显然具有单调性\n\n就可以$O(1)$完成查询\n\n下文认为$n,m$同阶\n\n## Sol1 LCT\n\n考虑尺取，同时用$\\text{LCT}$暴力维护答案合法性，下面只讲$\\text{LCT}$实现\n\n考虑对于所有的边，优先加入树上，对于每一个环，只保留最后被删除的边\n\n这样可以保证一条边被删除时，两个连通块之间没有边\n\n同时，维护每一个连通块内的奇环边 最优集合 即可\n\n复杂度为$O(n\\log n)$，速度。。。。\n\n\n\n## Sol2 分治决策单调性/整体二分\n\n考虑用并查集维护二分图，求出$R_i$，对于$i\\in [l,r]$，已知答案区间为$[L,R]$\n\n通过枚举来找到$[l,r]$中答案分别为$[L,mid),[mid,R]$的两部分的界点$p$\n\n为此我们加入$[mid+1,m]$的边，然后依次加入$[1,r]$的边，直到出现方案\n\n直接维护复杂度显然是错的\n\n因此考虑在分治过程中，保证分治$[l,r],[L,R]$时，$[1,l-1],[R+1,m]$的边集已经加入\n\n此时每次操作需要移动的范围在$[l,r],[L,R]$以内\n\n分治共$\\log n$层，每层长度总和为$n$，因此移动次数为$O(n\\log n)$\n\n由于需要维护简单的回撤操作，可以用按秩合并并查集，因此总复杂度为$O(n\\log ^2n)$\n\n[Loj Submission](https://loj.ac/s/1085800)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「BalticOI 2020」混合物 ","url":"/articles/2021/03/09/971ed4ac.html","content":"# 「BalticOI 2020」混合物 \n\n题目大意：\n\n对于给定的向量$\\vec{O}=(x,y,z)$\n\n动态维护一个集合$S=\\{(x_i,y_i,z_i)\\}$\n\n求出最少用几个$S$中的元素能够 **实数正系数** 线性组合得到$O$\n\n考虑令$\\displaystyle x'=\\frac{x} {x+y+z},y'=\\frac{y} {x+y+z}$，显然$x,y$能够完成组合，$z$就一定成立\n\n此时，问题转化为了一个平面问题，答案分为几种情况\n\n1.$S$包含$O$，答案显然为1\n\n2.$O$在$S$中两点构成的线段上，显然答案为2\n\n3.$O$被某一个三角形包含，答案为3\n\n4.无解\n\n不妨令$T=\\{P-O|P\\in S\\}$，此时\n\n情况1即$T$包含原点\n\n情况2即$T$中某两点与原点共线且在原点两端\n\n情况3即$S$构成的凸包包含原点\n\n因为只需要判断是否包含，所以其实和凸包并没有关系\n\n考虑不包含的情况，则显然可以用一个 以原点为界的**半平面** 包住$S$中的所有点\n\n因此可以维护每个点的极角，判断是否可以用半平面完全包含\n\n实现上，完全包含可以认为是$\\max-\\min<\\pi$\n\n或者是半平面跨过极角为$0$的位置，此时令$x,y$分别为$<\\pi$最大值，$>\\pi$最小值\n\n能包含即$x+2\\pi-y<\\pi$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long double db;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=2e5+10,INF=1e9+10;\nconst db eps=1e-9,PI=acos((db)-1);\n\nint n;\nstruct Node{\n\tdb x,y;\n\tNode(){ }\n\tNode(db x,db y):x(x),y(y){ }\n\tNode operator - (const Node &t) const { return Node(x-t.x,y-t.y); }\n\tdb angle(){ \n\t\tdb t=atan2(y,x);\n\t\tif(t<-eps) t+=2*PI;\n\t\treturn t;\n\t}\n} O,A[N];\nNode Read() {\n\tdb a=rd(),b=rd(),c=rd(),s=a+b+c;\n\treturn Node(a/s,b/s);\n}\n\nint cnt1,cnt2;\nchar op[2];\nstruct cmp{ bool operator () (const db &x,const db &y) const { return x+eps<y; } };\nmultiset <db,cmp> st;\ndb Go(db x){\n\tx+=PI;\n\tif(x>=2*PI) x-=2*PI;\n\treturn x;\n}\nvoid Ins(Node x){\n\tif(fabs(x.x)<eps && fabs(x.y)<eps) return void(cnt1++);\n\tdb y=x.angle();\n\tif(st.find(y)==st.end() && st.find(Go(y))!=st.end()) cnt2++;\n\tst.insert(y);\n}\n\nvoid Del(Node x){\n\tif(fabs(x.x)<eps && fabs(x.y)<eps) return void(cnt1--);\n\tdb y=x.angle();\n\tst.erase(st.find(y));\n\tif(st.find(y)==st.end() && st.find(Go(y))!=st.end()) cnt2--;\n}\n\nint main(){\n\tO=Read();\n\trep(_,1,rd()) {\n\t\tscanf(\"%s\",op);\n\t\tif(*op=='A') Ins(A[++n]=(Read()-O));\n\t\telse Del(A[rd()]);\n\t\tif(cnt1) puts(\"1\");\n\t\telse if(cnt2) puts(\"2\");\n\t\telse {\n\t\t\tint f=1;\n\t\t\tif(st.empty()) f=0;\n\t\t\telse {\n\t\t\t\tif(*st.rbegin()-*st.begin()<PI+eps) f=0;\n\t\t\t\telse {\n\t\t\t\t\tauto y=st.upper_bound(PI),x=y; x--;\n\t\t\t\t\tif(*x+2*PI-*y<PI+eps) f=0;\n\t\t\t\t} \n\t\t\t}\n\t\t\tputs(f?\"3\":\"0\");\n\t\t} \n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"K短路","url":"/articles/2021/03/08/766aa3c0.html","content":"# k短路\n\n~~好像是一个比较简单的东西~~\n\n对于 **正权有向图**，$\\displaystyle G=(V,E),V=\\{V_i\\}_{i=1}^nE=\\{(u_i,v_i,w_i)\\}_{i=1}^m$\n\n求$s$到$t$的前$k$短路\n\n考虑建立反图$G'=(V,E')$，容易$\\text{Dijkstra}$求得$t$的单源最短路$dis_i$，并且建立一棵**最短路树**\n\n考虑$s\\rightarrow t$的最短路，一定是走了一些树边和非树边\n\n选择一条非树边$(u,v,w)$会使长度增加$w'=w-(dis_u-dis_v)$，称$w'$为额外长度\n\n考虑我们选择的非树边序列$(u_i,v_i,w_i)$，显然有：$u_{i+1}$是$v_i$在最短路树上的祖先\n\n考虑用搜索扩展的方式来遍历所有路径情况\n\n记录当前的节点$u$，产生的额外长度$d$，则每次的扩展可以归纳为\n\n1.从$u$所有祖先中取出边的集合$S_u$\n\n2.依次遍历$S_u$中的所有边$(u_i,v_i,w'_i)$，进入递归$u'=v_i,d'=d+w'_i$\n\n每次扩展会产生一个新的状态，且恰好可以遍历每一个状态一次\n\n$$ \\ $$\n\n然而，为了求出前$k$短路，我们必须按照答案从小到大遍历\n\n那么我们首先需要将集合$S_u$排序，从小到大遍历，其次要对于不同的递归情况按照大小扩展\n\n容易想到用一个堆维护扩展的顺序，为了保存遍历$S_u$集合的过程，记录一个指针$p$\n\n此时，用堆维护扩展的方法显然：\n\n1.取出堆顶状态$(u,d,p)$\n\n2.转移\n\n2-1.在当前递归栈中移动$p\\leftarrow p+1$，改变$d$\n\n2-2.模拟上面，建立新的递归栈，同时令指针为$0$\n\n得到$u'=v_{u,p},d'=d+w'_{v,0},p'=0$\n\n如果暴力处理出$S_u$，则预处理复杂度为$O(nm\\log m)$，状态扩展复杂度为$O(2k\\log k)$\n\n用可持久化可并堆处理$S_u$，$p$记录当前堆顶节点指针\n\n每次扩展$p\\leftarrow lson_p$或者$p\\leftarrow rson_p$，增加一个扩展状态\n\n则预处理复杂度以及空间复杂度为$O(m\\log m)$，状态扩展复杂度为$O(3k\\log k)$\n\n[Luogu P2483](https://www.luogu.com.cn/problem/P2483)\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<queue>\n#include<cstring>\n#include<cctype>\nusing namespace std;\ntypedef double db;\ntypedef pair <db,int> Pair;\n#define mp make_pair\n#define fi first\n#define se second\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=5010,M=2e5+10;\nconst db eps=1e-7,INF=1e18;\n\ntemplate <class T> class Heap{\npublic:\n\tT val;\n\tint h;\n\tHeap *ls,*rs;\n\tT top(){ return val; }\n\tHeap(){ }\n\tHeap(Heap *x):val(x->val),h(x->h),ls(x->ls),rs(x->rs){ ; }\n\tHeap(T val):val(val),h(0),ls(0),rs(0){ ; }\n\tfriend Heap* Union(Heap *x,Heap *y){\n\t\tif(!x) return y;\n\t\tif(!y) return x;\n\t\tif(y->val<x->val) swap(x,y);\n\t\tHeap* u=new Heap(x);\n\t\tu->rs=Union(u->rs,y);\n\t\tif(u->rs && (!u->ls || u->rs->h>u->ls->h)) swap(u->ls,u->rs);\n\t\tu->h=u->rs?u->rs->h+1:1;\n\t\treturn u;\n\t}\n\tHeap* pop(){ return Union(ls,rs); }\n\tfriend Heap* push(Heap *u,T val){ return Union(u,new Heap(val)); }\n};\ntypedef Heap <Pair> Node;\nNode *rt[N];\n\nstruct Edge{\n\tint to;db w;\n\tEdge *nxt;\n\tEdge(){ }\n\tEdge(int to,db w,Edge* nxt):to(to),w(w),nxt(nxt){ ; }\n};\nEdge *head[N],*pre[N];\nvoid AddEdge(int u,int v,db w){\n\tEdge* t=new Edge(v,w,head[u]);\n\thead[u]=t;\n}\nint n,m,fa[N];\ndb E,dis[N];\n\nvoid Dijkstra(int u){\n\tstatic priority_queue <Pair,vector<Pair>,greater<Pair>> que;\n\trep(i,1,n) dis[i]=INF;\n\tdis[u]=0,que.push({0,u});\n\twhile(!que.empty()){\n\t\tint u=que.top().se;db d=que.top().fi; que.pop();\n\t\tif(dis[u]<d-eps) continue;\n\t\tfor(Edge *i=head[u];i;i=i->nxt) {\n\t\t\tint v=i->to;\n\t\t\tif(dis[v]>dis[u]+i->w+eps) pre[v]=i,fa[v]=u,que.push({dis[v]=dis[u]+i->w,v});\n\t\t}\n\t}\n}\n\nvoid Construct(){\n\tstatic int I[N];\n\trep(i,1,n) I[i]=i;\n\tsort(I+1,I+n+1,[&](int x,int y){ return dis[x]<dis[y]; });\n\trep(u,1,n) {\n\t\tfor(Edge *i=head[u];i;i=i->nxt) {\n\t\t\tint v=i->to;\n\t\t\tif(pre[v]==i) continue;\n\t\t\trt[v]=push(rt[v],mp(i->w-(dis[v]-dis[u]),u));\n\t\t}\n\t}\n\trt[n]=0;\n\trep(j,1,n) {\n\t\tint u=I[j];\n\t\trt[u]=Union(rt[u],rt[fa[u]]);\n\t}\n}\n\nstruct State{\n\tdb s;\n\tNode *rt;\n\tbool operator < (const State &__) const {\n\t\treturn s>__.s;\n\t}\n};\n\nint ans;\nvoid Kth_Path(){\n\tstatic priority_queue <State> que;\n\tif(dis[1]>E+eps) return void(puts(\"0\"));\n\tans=1,E-=dis[1];\n\tif(rt[1]) que.push({dis[1]+rt[1]->val.fi,rt[1]});\n\twhile(!que.empty()) {\n\t\tState u=que.top(); que.pop();\n\t\tif(u.s>E+eps) break;\n\t\tint v=u.rt->val.se;\n\t\tans++,E-=u.s;\n\t\tif(rt[v]) que.push({u.s+rt[v]->top().fi,rt[v]});\n\t\tu.s-=u.rt->val.fi;\n\t\tif(u.rt->ls) {\n\t\t\tPair w=u.rt->ls->val;\n\t\t\tque.push({u.s+w.fi,u.rt->ls});\n\t\t}\n\t\tif(u.rt->rs) {\n\t\t\tPair w=u.rt->rs->val;\n\t\t\tque.push({u.s+w.fi,u.rt->rs});\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n\nint main(){\n\tn=rd(),m=rd(),scanf(\"%lf\",&E);\n\trep(i,1,m){\n\t\tint u=rd(),v=rd();db w; scanf(\"%lf\",&w);\n\t\tAddEdge(v,u,w);\n\t}\n\tDijkstra(n);\n\tConstruct();\n\tKth_Path();\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「JSOI2019」神经网络","url":"/articles/2021/03/04/7d33ee6f.html","content":"# 「JSOI2019」神经网络\n\n考虑一个合法的哈密顿路可以表示为什么样子：\n\n按照不同树的编号，分割为一段段，相邻两段属于不同树\n\n同时，如果最后一段和第一段同编号，将最后一段移动到第一段前面\n\n由此，一个哈密顿路可以由唯一表示：\n\n1号点在第一个段中，此后每一段和上一个属于不同树，且最后一段不属于1树\n\n由此，问题分解为两部分：\n\n### Part1 求解树路径分段\n\n考虑树形$dp$求解，每个点记录$dp_{i,j,0/1}$表示当前$i$子树内已经产生$j$条路径，$i$自己是否可以向父亲连边\n\n容易用类似树形背包的方式合并，每次决策儿子是否连接到自己上面\n\n注意：一个长度$>1$的段，需要考虑正反方向的排放\n\n复杂度为$O(\\sum k_i^2)$\n\n$$ \\ $$\n\n### Part2 合并每棵树的段\n\n相邻两段不同色，考虑容斥求解\n\n枚举这棵树中的$i$个段自己生成了$j$个不合法的相邻，$i$个段合并生成$i-j$个段，且乘上容斥系数$(-1)^j$\n\n$i$个并掉$j$个，方案数计算如下：\n\n先把$i$个排好，乘上$i!$，然后选择$j$个间隔合并掉$\\binom{i-1} {j}$，然后对于剩下的$i-j$个元素无序，需要除掉$(i-j)!$\n\n背包合并容斥之后的结果，对于当前的$i$个元素，任意排列即可\n\n然而上面是理想情况，还需要考虑$1$号元素不能被排列，要强制最后一个段不是1树的段\n\n这一部分，在树1的容斥以及最终背包合并时特殊处理即可，即少排列一个元素，且最后合并时先选一个放在最后面\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=5e3+10,P=998244353;\n\nint n,m;\nint I[N],J[N],C[N][N];\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nstruct Edge{\n\tint to,nxt;\n} e[N<<1];\nint head[N],ecnt;\nvoid AddEdge(int u,int v){\n\te[++ecnt]=(Edge){v,head[u]};\n\thead[u]=ecnt;\n}\nint dp[N][N][2]; // 0,1 是否向上连\nint G[N][3],H[N][3],sz[N];\n\nvoid dfs(int u,int f){\n\tsz[u]=0;\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(v==f) continue;\n\t\tdfs(v,u);\n\t}\n\tG[0][0]=1,G[0][1]=G[0][2]=0;\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(v==f) continue;\n\t\trep(i,0,sz[u]+sz[v]) rep(j,0,2) H[i][j]=G[i][j],G[i][j]=0;\n\t\trep(i,0,sz[u]) rep(a,0,2) if(H[i][a]) rep(j,0,sz[v]) rep(b,0,min(1,2-a)) G[i+j][a+b]=(G[i+j][a+b]+1ll*H[i][a]*dp[v][j][b])%P;\n\t\tsz[u]+=sz[v];\n\t}\n\trep(i,0,sz[u]+1) dp[u][i][0]=dp[u][i][1]=0;\n\trep(i,0,sz[u]) {\n\t\tdp[u][i+1][0]=(0ll+dp[u][i+1][0]+G[i][0]+2*G[i][1]+2*G[i][2])%P; // 长度>1的段可以翻转\n\t\tdp[u][i][1]=(0ll+dp[u][i][1]+G[i][0]+G[i][1])%P; // 如果连了两个儿子，就无法向上连了\n\t}\n\tsz[u]++;\n}\n\nint F[N],T[N];\nvoid Get(){\n\tn=rd();\n\trep(i,1,n) head[i]=0;\n\tecnt=0;\n\trep(i,2,n) {\n\t\tint u=rd(),v=rd();\n\t\tAddEdge(u,v),AddEdge(v,u);\n\t}\n\tdfs(1,0);\n\trep(i,1,n) {\n\t\tF[i]=dp[1][i][0],T[i]=0;\n\t\tll t=1ll*F[i]*J[i]%P;\n\t\trep(j,1,i) {\n\t\t\tT[j]=(T[j]+((i-j)&1?P-1:1)*t%P*C[i-1][i-j]%P*I[j])%P;\n\t\t}\n\t}\n}\n\nint S[N],c;\n\nint main(){\n\trep(i,J[0]=1,N-1) J[i]=1ll*J[i-1]*i%P;\n\tI[N-1]=qpow(J[N-1]);\n\tdrep(i,N-1,1) I[i-1]=1ll*I[i]*i%P;\n\trep(i,0,N-1) rep(j,C[i][0]=1,i) C[i][j]=C[i-1][j]+C[i-1][j-1],Mod1(C[i][j]);\n\tm=rd();\n\tif(m==1) return n=rd(),printf(\"%d\\n\",n<=2),0;\n\tS[0]=1;\n\trep(t,1,m-1) {\n\t\tGet();\n\t\tdrep(i,n+c,0) {\n\t\t\tS[i]=0;\n\t\t\trep(j,1,min(i,n)) S[i]=(S[i]+1ll*S[i-j]*T[j])%P;\n\t\t}\n\t\tc+=n;\n\t}\n\tGet();\n\trep(i,1,n) {\n\t\tF[i]=dp[1][i][0],T[i]=0;\n\t\tll t=1ll*F[i]*J[i-1]%P; \n\t\t// 特殊处理，不允许排列第一段\n\t\trep(j,1,i) T[j]=(T[j]+((i-j)&1?P-1:1)*t%P*C[i-1][i-j]%P*I[j-1])%P;\n\t}\n\tint ans=0;\n\t// 不允许改变第一段的位置\n\t// 且强制最后一段不能属于第一棵树\n\trep(i,1,c) if(S[i]) rep(j,1,n) if(T[j]) {\n\t\t// 强制前面的最后一个在最后\n\t\tint t=1ll*J[i]*J[j-1]%P*C[i-1+j-1][j-1]%P;\n\t\tans=(ans+1ll*t*S[i]%P*T[j])%P;\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["各省OI"],"categories":["题解"]},{"title":"「CCO 2020」购物计划","url":"/articles/2021/03/03/d5909bf7.html","content":"# 「CCO 2020」购物计划\n\n核心思想：堆+调整临近\n\n### $x_i=y_i=1$\n\n 这个限制相当于每一组内的权值排名可以确定，设组内为$A_{i,j}(j\\ge 1)$\n\n那么我们一个方案的选择可以用$M$个指针$P_i$表示，和为$\\displaystyle \\sum A_{i,P_i}$\n\n考虑用调整的方式解决这个问题，大体思路上，我们可以记录当前移动指针$P_p$\n\n每次可以选择移动$P_p$，或者某一个$P_{i},i>p$\n\n如果直接进行，每次移动的指针数量是$O(m)$级别的，显然不可行\n\n考虑优化一下进行，每次只能选取$i=p+1$\n\n此时，编号小的会先被移动\n\n为了保证答案单调性，我们需要将$A_{i,2}-A_{i,1}$较小的组先移动\n\n同时，并不是每一个组都会被移动，因此转移还要支持一个**特殊回撤操作**，来撤回当前组的指针\n\n也就是说，若$P_p=2$，可以选择把$P_p$回撤为$1$，然后将$P_{p+1}$改为$2$\n\n由此，每个点状态可以选择：\n\n1.移动自己\n\n2.移动下一个\n\n3.若$P_p=2$，回撤自己，同时移动下一个\n\n这样的调整法，可以保证每一个状态恰好有一个前驱，且转移过程中值不断变大\n\n由此可以$O(k)$状态数进行调整，用堆维护，复杂度为$O(k\\log k)$\n\n$$ \\ $$\n\n### 组内调整\n\n一个组内会选择若干个数$A_{b_i},i\\in [1,c]$\n\n初始最小值，显然满足$b_i=i$\n\n类似的，我们记录当前指针$p$，前驱指针$l$，后继指针$r$\n\n显然$p$要往后移，且不能达到$r$，因此决策只有两种\n\n1.移动前驱$l$，并将当前指针变为前驱\n\n2.移动自己$p$\n\n这样的调整是固定个数的，因此，一开始就把$c\\in[x_i,y_i]$的所有情况插入即可\n\n\n\n$$ \\ $$\n\n最后，将两部分一同进行，每次组间调整时，通过组内调整查询答案\n\n总的组内和组间调整次数均为$O(k)$，状态数分别不超过$2k,3k$\n\n复杂度为$O(k\\log k)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\nchar IO;\nint rd(){\n    int s=0;\n    while(!isdigit(IO=getchar()));\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return s;\n}\nenum{N=200010,LINF=1ll<<60};\n\nint n,m,k,I[N]; ll L;\nstruct Group{\n    vector <int> A;\n    int l,r,c;\n    struct Node{\n        int l,p,r; ll s;\n        bool operator < (const Node &__) const { return s>__.s; }\n    };\n    priority_queue <Node> que;\n    vector <ll> V;\n    void Init(){\n        l=rd(),r=rd(),sort(A.begin(),A.end()),c=A.size();\n        if(c<l) {\n            rep(i,1,k) puts(\"-1\");\n            exit(0);\n        }\n        r=min(r,c);\n        rep(i,0,l-1) L+=A[i];\n        ll s=0;\n        if(!l) V.pb(0);\n        rep(i,0,c-1) {\n            if(i>=r) break;\n            s+=A[i];\n            if(i>=l-1) que.push((Node){i-1,i,c-1,s});\n        }\n    }\n    void Next(){\n        if(que.empty()) return V.pb(LINF);\n        Node t=que.top(); que.pop();\n        V.pb(t.s);\n        if(t.p<t.r) que.push((Node){t.l,t.p+1,t.r,t.s-A[t.p]+A[t.p+1]}); // Move current point\n        if(~t.l && t.l<t.p-1) que.push((Node){t.l-1,t.l+1,t.p-1,t.s-A[t.l]+A[t.l+1]}); // Move previous point \n    }\n    // get kth sum\n    ll operator [] (const int &k){\n        while((int)V.size()<k) Next();\n        return V[k-1];\n    }\n} S[N];\n\nstruct Node{\n    int x,y; ll s;\n    bool operator < (const Node &__) const { return s>__.s; }\n};\npriority_queue <Node> que;\n\nint main(){\n    n=rd(),m=rd(),k=rd();\n    rep(i,1,n) { int x=rd(); S[x].A.pb(rd()); }\n    rep(i,1,m) S[i].Init();\n    printf(\"%lld\\n\",L),k--;\n    rep(i,1,m) I[i]=i;\n    sort(I+1,I+m+1,[&](int x,int y){ return S[x][2]-S[x][1]<S[y][2]-S[y][1]; });\n    que.push((Node){1,2,L-S[I[1]][1]+S[I[1]][2]});\n    while(k) {\n        Node t=que.top(); que.pop();\n        if(t.s>=LINF) break;\n        k--,printf(\"%lld\\n\",t.s);\n        int i=I[t.x],j=I[t.x+1];\n        que.push((Node){t.x,t.y+1,t.s-S[i][t.y]+S[i][t.y+1]});// Move current point\n        if(j) que.push((Node){t.x+1,2,t.s-S[j][1]+S[j][2]}); // Move next point\n        if(t.y==2 && j) que.push((Node){t.x+1,2,t.s-S[i][2]+S[i][1]-S[j][1]+S[j][2]}); \n        // Back current point ,and move next point\n    }\n    while(k--) puts(\"-1\");\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["CCO"],"categories":["题解"]},{"title":"「NOI2020」时代的眼泪","url":"/articles/2021/03/03/d1e79365.html","content":"# 「NOI2020」时代的眼泪\n\n#### 前言\n\n这种东西看到就给人一种\n\n分块分块分块分块分块分块!\n\n啊啊啊啊啊啊啊啊啊啊啊\n\n$$\\  $$\n\n### 问题分析\n\n这是一个二维区间顺序对问题，对于普通的区间顺序对问题，我们有简单分块解法\n\n预处理整块的答案，有$n\\sqrt n$个数要插入预处理，也就是有$O(\\sqrt n)$个区间查询\n\n对于散点暴力求，也是$n\\sqrt n$个区间查询问题\n\n那么离线+分块就可以做到$O(\\sqrt n)$插入一个数，$O(\\sqrt 1)$查询，并且有办法将空间实现到$O(n)$\n\n那么对于二维区间考虑部分沿用上面的思路\n\n$$ \\ $$\n\n### Solution\n\n首先对于散块的部分，是完全一样的处理，可以$O(n)$内存实现\n\n具体的：\n\n散点之间可以暴力$for$答案，每次还需要一个二维区间个数查询\n\n每次需要查询的散点又是一段区间\n\n可以描述为$O(m)$个查询，总共查询$O(m\\sqrt n)$个散点\n\n$$ \\ $$\n\n问题在于整块部分的查询$[p1,p2],[u,d]$\n\n对于同一个块内的答案，可以暴力预处理出来\n\n$$ \\ $$\n\n而块之间，可以转化为$[1,d]-[1,u-1]-[1,u-1]\\times [u,d]$\n\n前面两个前缀型问题，可以用如下方法实现：\n\n按照$p_i$从小到大插入，同时维护每个块内已经出现的个数\n\n每次插入$i$后，对于$i$前面的块，会产生$O(\\sqrt n)$对 顺序对\n\n我们要查询的是一个块编号$[p1,p2]$内块的关系，这是一个二维前缀和\n\n可以把两个维度的前缀和分开给插入和查询\n\n具体的，在插入时，处理$S_{l,r}=\\sum_{i\\ge l} C_{i,r}$\n\n查询$[p1,p2]$时，就可以暴力求$S_{l,i}i\\in[l,r]$的和\n\n这样可以分摊复杂度为$O(n\\sqrt n)$，并且内存为$O(n)$，常数较小\n\n$$ \\ $$\n\n对于$[1,u-1]\\times [u,d]$，从左到右一段段 查询过来，每次查询块内$[1,u-1]$$，[u,d]$个数即可\n\n这个统计和上面的块内答案统计都需要预处理每个数在块内排名\n\n但是也可以通过离线去掉这个步骤，避免了一个$O(n\\sqrt n)$的数组\n\n$$ \\ $$\n\n实际实现时，发现散块暴力的部分枚举起来实在太慢，所以块开大了一点，加了一点底层玄学优化\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\ntypedef vector <int> V;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=1e5+10,M=2e5+10,S=1000;\n\nint n,m,A[N],len,P[N];\nstruct Blocker{\n\tint s[M],t[N];\n\tvoid clear(){ memset(s,0,(n+1)<<2),memset(t,0,(n+1)<<2); }\n\tvoid Add(int x){\n\t\tint p=x/len;\n\t\trep(i,x,(p+1)*len-1) s[i]++;\n\t\trep(i,p+1,n/len) t[i]++;\n\t}\n\tint operator [](const int &x) const{ return s[x]+t[x/len]; }\n} B;\nint L[M],R[M],U[M],D[M],p1[M],p2[M],I[M],T[M];\nll Ans[M];\nstruct Que{ int l,r,k,id; };\nvector <Que> Q[N];\n// 处理散点\nvoid SolvePoints(){\n\trep(i,1,n) {\n\t\tB.Add(A[i]);\n\t\tfor(Que x:Q[i]) {\n\t\t\trep(j,x.l,x.r) {\n\t\t\t\tint u=U[x.id],d=D[x.id];\n\t\t\t\tif(A[j]<u || A[j]>d) continue;\n\t\t\t\tif(j>i) cmin(d,A[j]-1);\n\t\t\t\telse cmax(u,A[j]+1);\n\t\t\t\tAns[x.id]+=x.k*(B[d]-B[u-1]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nvector <Pii> E[N];\n// 处理块区间的 前缀逆序对\nvoid SolveB1(){\n\tstatic ll s[S][S],c[S];\n\trep(k,1,n) {\n\t\tint i=P[k],t=0,p=i/len;\n\t\tc[p]++;\n\t\tdrep(j,p-1,0) t+=c[j],s[j][p]+=t;\n\t\tfor(Pii x:E[k]) {\n\t\t\tint u=x.first,l=p1[u]+1,r=p2[u]-1;\n\t\t\trep(j,l+1,r) Ans[u]+=s[l][j]*x.second;\n\t\t}\n    }\n}\n\n//处理块内答案\nvoid SolveB2(){\n\tstatic int s[S][S],C[N];\n\trep(i,0,n/len) {\n\t\tint l=max(1,i*len),r=min(n,(i+1)*len-1);\n\t\trep(j,1,n) C[j]=C[j-1]+(l<=P[j] && P[j]<=r);\n\t\tint L=C[n];\n\t\trep(a,1,L+1) rep(b,a-1,L+1) s[a][b]=0;\n\t\trep(a,l,r) rep(b,a+1,r) if(A[a]<=A[b]) s[C[A[a]]][C[A[b]]]++;\n\t\tdrep(a,L,1) rep(b,a,L) s[a][b]+=s[a+1][b]+s[a][b-1]-s[a+1][b-1];\n\t\trep(j,1,m) if(p1[j]<i && i<p2[j]) {\n\t\t\tAns[j]+=s[C[U[j]-1]+1][C[D[j]]];\n\t\t\tAns[j]-=1ll*T[j]*(C[D[j]]-C[U[j]-1]);\n\t\t\tT[j]+=C[U[j]-1];\n\t\t}\n\t}\n}\n\n// 本来是暴力for l,r内的逆序对的，但是太慢，加了一点底层优化\nint Que(int i,int l,int r,int u,int d){\n\tif(r-l>45) {\n\t\tint mid=(l+r*3)/4;\n\t\tQ[l-1].pb({mid+1,r,-1,i});\n\t\tQ[mid].pb({mid+1,r,1,i});\n\t\treturn Que(i,l,mid,u,d)+Que(i,mid+1,r,u,d);\n\t}\n\tint ans=0;\n\trep(i,l,r) if(u<=A[i] && A[i]<=d) rep(j,i+1,r) ans+=A[i]<=A[j] && A[j]<=d;\n\treturn ans;\n}\n\nint main(){\n\tfreopen(\"tears.in\",\"r\",stdin),freopen(\"tears.out\",\"w\",stdout);\n\tn=rd(),m=rd(),len=ceil(sqrt(n/4.0));\n\tfprintf(stderr,\"Block len=%d ,Block Count=%d\\n\",len,n/len);\n\trep(i,1,n) P[A[i]=rd()]=i;\n\tclock_t ti=clock();\n\trep(i,1,m) {\n\t\tI[i]=i,L[i]=rd(),R[i]=rd(),U[i]=rd(),D[i]=rd();\n\t\tp1[i]=L[i]/len,p2[i]=R[i]/len;\n\t\tif(p1[i]==p2[i]){ Ans[i]=Que(i,L[i],R[i],U[i],D[i]); continue; }\n\t\tAns[i]=Que(i,L[i],(p1[i]+1)*len-1,U[i],D[i])+Que(i,p2[i]*len,R[i],U[i],D[i]);\n\t\tQ[L[i]-1].pb({p2[i]*len,R[i],-1,i});\n\t\tQ[p2[i]*len-1].pb({p2[i]*len,R[i],1,i});\n\t\tif(p1[i]<p2[i]-1) {\n\t\t\tQ[(p1[i]+1)*len-1].pb({L[i],(p1[i]+1)*len-1,-1,i});\n\t\t\tQ[p2[i]*len-1].pb({L[i],(p1[i]+1)*len-1,1,i});\n\t\t\tE[D[i]].pb(mp(i,1));\n\t\t\tE[U[i]-1].pb(mp(i,-1));\n\t\t}\n\t}\n\tfprintf(stderr,\"Part0 %d\\n\",int(clock()-ti)),ti=clock();\n\tSolvePoints();\n\tfprintf(stderr,\"Part1 %d\\n\",int(clock()-ti)),ti=clock();\n\tsort(I+1,I+m+1,[&](int x,int y){ return L[x]<L[y]; });\n\tSolveB1();\n\tfprintf(stderr,\"Part2 %d\\n\",int(clock()-ti)),ti=clock();\n\tSolveB2();\n\tfprintf(stderr,\"Part3 %d\\n\",int(clock()-ti)),ti=clock();\n\trep(i,1,m) printf(\"%lld\\n\",Ans[i]);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「CCO 2020」千山万壑","url":"/articles/2021/03/03/9721906c.html","content":"# 「CCO 2020」千山万壑\n\n### 性质推演\n\n#### 推论1:不选择非树边时，答案为$2(n-1)-$直径长\n\n比较明显就不证了\n\n#### 推论2:最多只会选择一条非树边\n\n考虑如果选择两条非树边，此时必然有答案$\\ge n-1+3\\lceil\\frac{n} {3}\\rceil$\n\n因为能够选择这样的非树边，则必然存在一条长度$>\\frac{n} {3}$的路径，也就是说\n\n直径长度$>\\frac{n} {3}$，故此时选择直径更优\n\n因此不会选择两条非树边\n\n$$ \\  $$\n\n#### 答案计算\n\n下称起点终点路径$(s,t)$，选择的边为$(u,v,w)$\n\n如果$(s,t)$与$(u,v)$无交，则无序额外计算贡献，此时贡献为\n\n$2(n-1)-dis(s,t)-(dis(u,v)-w)$\n\n当$(s,t)$与$(u,v)$有交时，设交长度为$len$，则需要额外花费$2(len-1)$的代价取遍历交部分的点\n\n![](https://10.220.121.125/up/img/tree-pic1.png)\n\n$$ \\ $$\n\n### 求解\n\n显然我们需要先知道$dis(u,v)$，可以$O(n)$预处理，我们选择的非树边一定满足$dis(u,v)>w$\n\n考虑抽直径构成序列$L_i$，然后考虑每一条非树边$(u,v,w)$的贡献，设$u,v$在直径上对应根的编号为$x,y$\n\n如果$x=y$，显然可以选择直径，下面讨论$x<y$的情况\n\n1.$(s,t)$与$(u,v)$无交\n\n1-1.对于$(u,v)$之间的部分可以区间查询最值\n\n1-2.两边预处理前缀/后缀最值\n\n1-3.直径连接到$u$，$v$子树的部分的答案可以换根$dp$预处理\n\n2.$(s,t)$与$(u,v)$有交，设交部分在直径上的区间为$[l,r]$\n\n![](http://10.220.121.125/up/img/tree-pic2.png)\n\n2-1. 相交跨过直径上多个点\n\n2-1-1.若$x<l<r<y$，此时容易用线段树维护答案\n\n![](http://10.220.121.125/up/img/tree-pic3.png)\n\n2-1-2. 若$x<y , \\text{and   } (l=x \\text{   or  } r=y)$，此时显然两边部分最优一定是选择在直径上的部分\n\n![](http://10.220.121.125/up/img/tree-pic4.png)\n\n以下情况一定不优\n\n![](http://10.220.121.125/up/img/tree-pic5.png)\n\n另一边的答案可以在线段树上查询出来，是一个区间的前缀/后缀\n\n2-2.若$l=r$，此时$l=x$或$l=y$，且在$[u,x],[v,y]$部分有交\n\n![](http://10.220.121.125/up/img/tree-pic6.png)\n\n容易发现，此时确定$(s,t)$一边一定在直径的一端，另一端$x,y$对应的子树中\n\n同样可以通过换根$dp$解决\n\n区间查询，如果使用线段树解决，复杂度为$O(n+m\\log n)$\n\n如果用奇怪数据结构~~（猫树）~~，复杂度为$O(n\\log n+m)$\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 「CCO 2020」千山万壑\n\n### 性质推演\n\n#### 推论1:不选择非树边时，答案为$2(n-1)-$直径长\n\n比较明显就不证了\n\n#### 推论2:最多只会选择一条非树边\n\n考虑如果选择两条非树边，此时必然有答案$\\ge n-1+3\\lceil\\frac{n} {3}\\rceil$\n\n因为能够选择这样的非树边，则必然存在一条长度$>\\frac{n} {3}$的路径，也就是说\n\n直径长度$>\\frac{n} {3}$，故此时选择直径更优\n\n因此不会选择两条非树边\n\n$$ \\  $$\n\n#### 答案计算\n\n下称起点终点路径$(s,t)$，选择的边为$(u,v,w)$\n\n如果$(s,t)$与$(u,v)$无交，则无序额外计算贡献，此时贡献为\n\n$2(n-1)-dis(s,t)-(dis(u,v)-w)$\n\n当$(s,t)$与$(u,v)$有交时，设交长度为$len$，则需要额外花费$2(len-1)$的代价取遍历交部分的点\n\n![Snipaste_2021-03-03_09-44-08.png](https://i.loli.net/2021/03/03/CF5b2LK37qRpgyx.png)\n\n$$ \\ $$\n\n### 求解\n\n显然我们需要先知道$dis(u,v)$，可以$O(n)$预处理，我们选择的非树边一定满足$dis(u,v)>w$\n\n考虑抽直径构成序列$L_i$，然后考虑每一条非树边$(u,v,w)$的贡献，设$u,v$在直径上对应根的编号为$x,y$\n\n确定非树边之后，我们需要选择一个最优的$(s,t)$，答案计算上面已经提及\n\n如果$x=y$，显然可以选择直径，下面讨论$x<y$的情况\n\n1.$(s,t)$与$(u,v)$无交\n\n1-1.对于$(u,v)$之间的部分可以区间查询子树最值\n\n1-2.两边预处理前缀/后缀最值\n\n1-3.直径连接到$u$，$v$子树的部分的答案\n\n就是一棵树剔除根到一个点路径之后的直径长度，可以换根$dp$预处理\n\n2.$(s,t)$与$(u,v)$有交，设交部分在直径上的区间为$[l,r]$\n\n容易参分转化为求解：$dis(s,t)+dis(u,v)-w-2(r-l)+2$最大值\n\n![Snipaste_2021-03-03_09-58-39.png](https://i.loli.net/2021/03/03/G8TPMO6XjUlHCW7.png)\n\n2-1. 相交跨过直径上多个点\n\n2-1-1.若$x<l<r<y$，此时容易用线段树维护答案\n\n合并时减去跨过长度的贡献即可\n\n![Snipaste_2021-03-03_10-00-38.png](https://i.loli.net/2021/03/03/hdlGsfQ4eFicT8D.png)\n\n2-1-2. 若$x<y , \\text{and   } (l=x \\text{   or  } r=y)$，此时显然两边部分最优一定是选择在直径上的部分\n\n![Snipaste_2021-03-03_10-01-17.png](https://i.loli.net/2021/03/03/o5itfJTen9XFCVO.png)\n\n以下情况一定不优\n\n![Snipaste_2021-03-03_10-03-49.png](https://i.loli.net/2021/03/03/EnsIrueTi5qJpYd.png)\n\n另一边的答案可以在线段树上查询出来，是一个区间的前缀/后缀\n\n2-2.若$l=r$，此时$l=x$或$l=y$，且在$[u,x],[v,y]$部分有交\n\n![Snipaste_2021-03-03_10-05-43.png](https://i.loli.net/2021/03/03/pOANxDCRHG5d6E2.png)\n\n容易发现，此时确定$(s,t)$一边一定在直径的一端，另一端$x,y$对应的子树中\n\n同样可以通过换根$dp$解决\n\n区间查询，如果使用线段树解决，复杂度为$O(n+m\\log n)$\n\n如果用奇怪数据结构~~（猫树）~~，复杂度为$O(n\\log n+m)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=5e5+10,M=2e6+10,INF=1e9+10;\n\n\nint n,m;\nint U[M],V[M],W[M],D[M],vis[N];\n\nstruct Edge{\n\tint to,nxt;\n} e[N<<1];\nint head[N],ecnt;\nvoid AddEdge(int u,int v){\n\te[++ecnt]=(Edge){v,head[u]};\n\thead[u]=ecnt;\n}\n\nint ma,num,fa[N],dep[N];\nvector <Pii> G[N];\nint Find(int x){ return fa[x]==x?x:fa[x]=Find(fa[x]); }\nvoid dfs1(int u,int f){\n\tif(dep[u]>ma) ma=dep[u],num=u;\n\tvis[fa[u]=u]=1;\n\tfor(Pii v:G[u]) if(vis[v.first]) D[v.second]=dep[u]+dep[v.first]-2*dep[Find(v.first)];\n\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif(v==f) continue;\n\t\tdep[v]=dep[u]+1,dfs1(v,u);\n\t}\n\tfa[u]=f;\n}\nvoid dfs2(int u,int f){\n\tif(dep[u]>ma) ma=dep[u],num=u;\n\tfa[u]=f;\n\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif(v==f) continue;\n\t\tdep[v]=dep[u]+1,dfs2(v,u);\n\t}\n}\n\nint id[N],L[N],C,dp[N][2],dp2[N],g[N],h[N];\nint subid[N];\n\nvoid dfs3(int u,int f){\n\tfa[u]=f;\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(id[v]||v==f) continue;\n\t\tdfs3(v,u);\n\t\tcmax(dp2[u],dp2[v]);\n\t\tint t=dp[v][0]+1;\n\t\tif(t>dp[u][0]) dp[u][1]=dp[u][0],dp[u][0]=t;\n\t\telse cmax(dp[u][1],t);\n\t}\n\tcmax(dp2[u],dp[u][0]+dp[u][1]);\n}\nvoid dfs4(int u,int f,int d=0){\n\tdep[u]=d,subid[u]=d<=1?u:subid[f];\n\tint tg[2]={-INF,-INF},th[2]={0,0};\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(id[v]||v==f) continue;\n\t\tint x=dp[v][0]+1-(d?d:1e9);\n\t\tif(x>tg[0]) tg[1]=tg[0],tg[0]=x;\n\t\telse cmax(tg[1],x);\n\n\t\tx=max(dp2[v],dp[v][0]+1);\n\t\tif(x>th[0]) th[1]=th[0],th[0]=x;\n\t\telse cmax(th[1],x);\n\t}\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(id[v]||v==f) continue;\n\t\th[v]=max(h[u],th[0]==max(dp2[v],dp[v][0]+1)?th[1]:th[0]);\n\t\tg[v]=max(g[u],tg[0]==dp[v][0]+1-(d?d:1e9)?tg[1]:tg[0]);\n\t\tid[v]=id[u],dfs4(v,u,d+1);\n\t}\n\tif(f) cmax(g[u],dp[u][0]-d);\n\tcmax(h[u],dp2[u]);\n}\n\nstruct Node{\n\tint len,ans,l,r;\n\tNode operator + (const Node __) const {\n\t\tNode res; res.len=len+__.len;\n\t\tres.ans=max(ans,__.ans);\n\t\tres.l=max(l,__.l-len),res.r=max(r-__.len,__.r);\n\t\tcmax(res.ans,r+__.l+1);\n\t\treturn res;\n\t}\n} s[N<<2];\nvoid Build(int p,int l,int r) {\n\tif(l==r) {\n\t\ts[p]=(Node){1,max(dp2[L[l]],dp[L[l]][0]),dp[L[l]][0],dp[L[l]][0]};\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tBuild(p<<1,l,mid),Build(p<<1|1,mid+1,r);\n\ts[p]=s[p<<1]+s[p<<1|1];\n}\nNode Que(int p,int l,int r,int ql,int qr){\n\tif(ql<=l && r<=qr) return s[p];\n\tint mid=(l+r)>>1;\n\tif(qr<=mid) return Que(p<<1,l,mid,ql,qr);\n\tif(ql>mid) return Que(p<<1|1,mid+1,r,ql,qr);\n\treturn Que(p<<1,l,mid,ql,qr)+Que(p<<1|1,mid+1,r,ql,qr);\n}\nint ls[N],rs[N];\n\nint main(){\n\tn=rd();\n\trep(t,1,rd()){\n\t\tint u=rd()+1,v=rd()+1,w=rd();\n\t\tif(w==1) AddEdge(u,v),AddEdge(v,u);\n\t\telse U[++m]=u,V[m]=v,W[m]=w,G[u].pb(mp(v,m)),G[v].pb(mp(u,m));\n\t}\n\tma=-1,dfs1(1,0);\n\tma=-1,dep[num]=0,dfs2(num,0);\n\tfor(int u=num;u;u=fa[u]) L[id[u]=++C]=u;\n\trep(i,1,C) dfs3(L[i],0),g[L[i]]=-INF,dfs4(L[i],0);\n\trep(i,1,C) ls[i]=max(ls[i-1],i-1+dp[L[i]][0]);\n\tdrep(i,C,1) rs[i]=max(rs[i+1],C-i+dp[L[i]][0]);\n\tBuild(1,1,C);\n\n\tint ans=C-1;\n\trep(i,1,m) if(D[i]>W[i]) {\n\t\tint u=U[i],v=V[i],d=0;\n\t\tif(id[u]>id[v]) swap(u,v);\n\t\tif(id[u]==id[v]) d=C-1;\n\t\telse {\n\t\t\tif(fa[u]) {\n\t\t\t\tcmax(d,h[u]);\n\t\t\t\tint f=subid[u],t=fa[f];\n\t\t\t\tcmax(d,id[u]-1+(dp[f][0]+1==dp[t][0]?dp[t][1]:dp[t][0]));\n\t\t\t\tcmax(d,id[u]-1+g[u]+2);\n\t\t\t} else cmax(d,dp[u][0]+id[u]-1);\n\t\t\tif(fa[v]) {\n\t\t\t\tcmax(d,h[v]);\n\t\t\t\tint f=subid[v],t=fa[f];\n\t\t\t\tcmax(d,C-id[v]+(dp[f][0]+1==dp[t][0]?dp[t][1]:dp[t][0]));\n\t\t\t\tcmax(d,C-id[v]+g[v]+2);\n\t\t\t} else cmax(d,dp[v][0]+C-id[v]);\n\t\t\tcmax(d,ls[id[u]-1]),cmax(d,rs[id[v]+1]);\n\n\t\t\tint g1=id[u]-1,g2=C-id[v];\n\t\t\tcmax(d,g1+g2-(id[v]-id[u])+2);\n\t\t\tif(id[u]+1<id[v]) {\n\t\t\t\tNode t=Que(1,1,C,id[u]+1,id[v]-1);\n\t\t\t\tcmax(d,t.ans);\n\t\t\t\tcmax(d,t.l+g1+1);\n\t\t\t\tcmax(d,t.r+g2+1);\n\t\t\t}\n\t\t}\n\t\tcmax(ans,D[i]-W[i]+d);\n\t}\n\tprintf(\"%d\\n\",2*(n-1)-ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n","tags":["CCO"],"categories":["题解"]},{"title":"「USACO 2021.1 Platinum」Paint by Letters","url":"/articles/2021/03/02/3fc2b39f.html","content":"# 「USACO 2021.1 Platinum」Paint by Letters\n\n统计连通块问题，暴力是$O(qn^2)$，而且常数大\n\n容易想到 [平面图的欧拉定理](https://www.cnblogs.com/chasedeath/p/14246463.html) 优化\n\n下文和代码中，$V,E,F$分别为点集，边集，区域集合\n\n其中$|V|$可以直接得到，$|E|$可以$O(n^2)$前缀和预处理出来，$O(1)$查询\n\n下面处理区域个数\n\n### Solution1\n\n前缀和所有大小为1（即被四个点包住的）区域，暴力预处理所有大小$>1$的区域，个数为$O(\\frac{nm} {4})$\n\n然后可以转化为一个对于给定矩形查询包含的 矩形个数 的问题\n\n实际上这个题目$q$小直接枚举就是了。。\n\n复杂度为$O(nm+q\\frac{nm} {4})$，足够通过时限\n\n写的够丑可以得到这个[代码](https://loj.ac/s/1080403)\n\n矩形区间查询问题 ，不知道有没有什么更好的方法\n\nps:垃圾数据没有卡，因此实际上数据中的空白块数量非常少，预处理写得稍微好一点可能还比下面的做法常数小\n\n$$ \\ $$\n\n### Solution2\n\n用$(x,y)$表示$(x,y),(x+1,y),(x,y+1),(x+1,y+1)$中间的一个空白区域\n\n这些空白块会被染色块之间的边隔开，但是依然可以形成四联通块\n\n预处理出所有空白区域的连通块，每个连通块选取一个代表点$S_i$\n\n我们要统计一个区域中的空白连通块个数，注意到\n\n跨出区域范围的空白点，并不是断开了，而是和最外层的无穷空白区合并在一起\n\n因此可以先求出在区域中存在的连通块个数，然后将连通到区域外的部分去掉\n\n具体实现上：\n\n前缀和预处理出$S_i$的位置，每次查询区域中的$S_i$个数（这样的统计不完全）\n\n然后将$S_i$在区域中，且跨出区域的白色连通块删掉即可\n\n跨出部分枚举四条边界即可\n\n每次查询枚举边界，因此复杂度为$O(nm+q(n+m))$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nconst int N=1e3+10,INF=1e9+10;\nconst int dx[]={0,0,1,-1},dy[]={1,-1,0,0};\n\nint n,m,q;\nchar A[N][N];\nint vis[N*N],I[N][N],E[4][N][N],S[N][N];\n// B,C预处理上/左边个数\nint B[N][N],C[N][N];\nint X[N*N],Y[N*N],cnt;\n// 搜索空白连通块\nvoid dfs(int x,int y){\n\tI[x][y]=cnt;\n\trep(i,0,3) if(E[x][y][i]) {\n\t\tint x1=x+dx[i],y1=y+dy[i];\n\t\tif(!x1 || !y1||x1>=n || y1>=m || I[x1][y1]) continue;\n\t\tdfs(x1,y1);\n\t}\n}\nint Sum(const int A[N][N],int x1,int y1,int x2,int y2){\n\tx1--,y1--;\n\treturn A[x2][y2]-A[x1][y2]-A[x2][y1]+A[x1][y1];\n}\n\nint main(){\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\trep(i,1,n) scanf(\"%s\",A[i]+1);\n\trep(i,1,n) rep(j,1,m) {\n\t\tE[0][i][j-1]=E[1][i][j]=A[i][j]!=A[i+1][j];\n\t\tE[2][i-1][j]=E[3][i][j]=A[i][j]!=A[i][j+1];\n        // 处理一下空白点之间的边\n\t\tif(A[i-1][j]==A[i][j]) B[i][j]++;\n\t\tif(A[i][j]==A[i][j-1]) C[i][j]++;\n\t}\n    // 预处理空白点之间的集合\n\trep(i,1,n-1) rep(j,1,m-1) if(!I[i][j]) {\n\t\tX[++cnt]=i,Y[cnt]=j,vis[cnt]=q+1;\n\t\tdfs(i,j),S[i][j]++;\n\t}\n\trep(i,1,n) rep(j,1,m) {\n\t\tB[i][j]+=B[i-1][j]+B[i][j-1]-B[i-1][j-1];\n\t\tC[i][j]+=C[i-1][j]+C[i][j-1]-C[i-1][j-1];\n\t\tS[i][j]+=S[i-1][j]+S[i][j-1]-S[i-1][j-1];\n\t}\n\twhile(q--) {\n\t\tint lx,ly,rx,ry; scanf(\"%d%d%d%d\",&lx,&ly,&rx,&ry);\n\t\tint V=(rx-lx+1)*(ry-ly+1);\n\t\tint E=Sum(B,lx+1,ly,rx,ry)+Sum(C,lx,ly+1,rx,ry);\n\t\tint F=Sum(S,lx,ly,rx-1,ry-1);\n\t\tauto Check=[&](int i){ if(vis[i]!=q && lx<=X[i] && X[i]<rx && ly<=Y[i] && Y[i]<ry) vis[i]=q,F--; };\n\t\trep(i,lx,rx-1) {\n\t\t\tif(::E[0][i][ry-1]) Check(I[i][ry-1]);\n\t\t\tif(::E[1][i][ly]) Check(I[i][ly]);\n\t\t}\n\t\trep(i,ly,ry-1) {\n\t\t\tif(::E[2][rx-1][i]) Check(I[rx-1][i]);\n\t\t\tif(::E[3][lx][i]) Check(I[lx][i]);\n\t\t}\n\t\tprintf(\"%d\\n\",V-E+F);\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","USACO"],"categories":["题解"]},{"title":"「USACO 2021.1 Platinum」Sum of Distances","url":"/articles/2021/03/02/b64c0f69.html","content":"# 「USACO 2021.1 Platinum」Sum of Distances\n\n设在$G_i$中$j_i$点可行的距离集合为$D_{j_i}$\n\n注意到一个点的$(j_1,j_2,\\ldots,j_k)$的$dis$可以用如下方式确定\n\n$\\displaystyle dis(j_1,j_2,\\ldots,j_k)=\\min\\{\\bigcap D_{j_i} \\}$\n\n而$D_{j_i}$有一个简单的描述方法：\n\n求出奇数和偶数的最小值，然后再最小值往上+$2k$的部分均存在（不停来回）\n\n这样我们用两个值$odd_{j_i},even_{j_i}$描述了$D_{j_i}$\n\n同时也容易得到$\\displaystyle dis(j_1,j_2,\\ldots,j_k)=\\min\\{\\max\\{odd_{j_i} \\},\\max\\{even_{j_i} \\} \\}$\n\n也就是说要在奇偶的$\\max$之间取$\\min$\n\n考虑$odd_{j_i},even_{j_i}$是$O(N_i)$级别的，可以暴力合并，但是无法处理外层的$\\min$，因此考虑用一个简单的$\\text{minmax}$容斥解决\n\n$\\min\\{a,b\\}=a+b-\\max\\{a,b\\}$\n\n这样就只有$\\max$要计算了，用简单的前缀和优化取$\\max$操作\n\n注意要按照$N_i$排序之后依次合并每一个$G_i$保证复杂度\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef pair <int,int> Pii;\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\nint rd(){\n\tint s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\n\nconst int N=2e5+10,P=1e9+7;\n\nint n;\nint C[N],R[N],D[N][2],I[N],M[N],S[N*2];\nvector <int> G[N];\nint dis[N][2],U,F[N],H[N];\n\nint Solve(int S){\n\tF[U=0]=1;\n\trep(k,1,n) {\n\t\tint i=I[k];\n\t\trep(j,U+1,M[i]) F[j]=F[j-1];\n\t\tcmax(U,M[i]);\n\t\trep(j,0,U) H[j]=0;\n\t\trep(j,R[i-1]+1,R[i]) {\n\t\t\tint d=-1;\n\t\t\tif(S&1) cmax(d,D[j][0]);\n\t\t\tif(S&2) cmax(d,D[j][1]);\n\t\t\tif(d==P) continue;\n\t\t\tH[d]++;\n\t\t}\n\t\trep(j,1,U) H[j]+=H[j-1];\n\t\trep(j,0,U) F[j]=1ll*F[j]*H[j]%P;\n\t}\n\tdrep(j,U,1) F[j]-=F[j-1],Mod2(F[j]);\n\tint ans=0;\n\trep(j,0,U) ans=(ans+1ll*j*F[j])%P;\n\treturn ans;\n}\n\nint main(){\n\tn=rd();\n\trep(i,1,n) {\n\t\tI[i]=i,C[i]=rd(),R[i]=R[i-1]+C[i];\n\t\trep(j,1,C[i]) G[j].clear();\n\t\trep(j,1,rd()){\n\t\t\tint u=rd(),v=rd();\n\t\t\tG[u].pb(v),G[v].pb(u);\n\t\t}\n\t\trep(j,1,C[i]) dis[j][0]=dis[j][1]=P;\n\t\tdis[1][0]=0;\n\t\tstatic queue <Pii> que; que.push(mp(1,0));\n\t\twhile(!que.empty()){\n\t\t\tint u=que.front().first,d=que.front().second; que.pop();\n\t\t\tcmax(M[i],dis[u][d]);\n\t\t\tfor(int v:G[u]) if(dis[v][!d]>dis[u][d]+1) dis[v][!d]=dis[u][d]+1,que.push(mp(v,!d));\n\t\t}\n\t\trep(j,1,C[i]) {\n\t\t\trep(k,0,1) {\n\t\t\t\tD[R[i-1]+j][k]=dis[j][k];\n\t\t\t\tif(dis[j][k]!=P) cmax(M[i],dis[j][k]);\n\t\t\t}\n\t\t}\n\t}\n\tsort(I+1,I+n+1,[&](int x,int y){ return C[x]<C[y]; });\n\tint ans=((Solve(1)+Solve(2)-Solve(3))%P+P)%P;\n\tprintf(\"%d\\n\",ans);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","USACO"],"categories":["题解"]},{"title":"「2020noip模拟题-蒋凌宇」幂","url":"/articles/2021/03/01/4b4b3132.html","content":"# 「2020noip模拟题-蒋凌宇」幂\n\n### Analysis\n\n计算$x$出现的次数，可以转化为枚举每一个$x$，计算剩余$n-1$个位置合法括号序列个数\n\n因此我们只需要计算合法括号序列个数\n\n定义一个辅助计数：**不可分割** 的合法括号序列\n\n这样的括号序列，满足：其恰好为$x$，或者序列两端是一对匹配的左右括号\n\n而实际要求的括号序列 的就是这样的 **不可分割**括号序列 去掉两端的匹配括号\n\n$$\\  $$\n\n## Solution\n\n设$a_n$为长度为$n$的**不可分割** 的合法括号序列数量\n\n括号序列并非排列问题，因此我们用普通生成函数计算\n\n设$\\text{OGF(a)}=A(x)$，$A(x)$容易发现$A(x)$满足下面的递归式\n\n$\\displaystyle A(x)=x^2(\\sum_{i=0}^{\\infty} A^i(x))+x^1$\n\n其中$x^2$表示在外层加一对匹配括号，$\\sum_{i=0}^{\\infty} A^i(x)$枚举子括号中的分裂段，$x^1$表示单个$x$\n\n容易得到下面的化简过程\n\n$\\displaystyle A(x)=\\frac{x^2} {1-A(x)}+x$\n\n$A(x)-A^2(x)=x^2+xA(x)$\n\n$A^2(x)-(x+1)A(x)+x^2+x=0$\n\n带入求根公式，得到$A(x)$的 **收敛形式**\n\n$\\displaystyle A_1(x)=\\frac{x+1+\\sqrt{-3x^2-2x+1} } {2},A_2(x)=\\frac{x+1-\\sqrt{-3x^2-2x+1} } {2}$\n\n令$\\displaystyle F(x)=-3x^2-2x+1,G(x)=\\sqrt{F(x)}$\n\n容易手玩发现：$[x^0]G(x)=1$\n\n而根据定义，我们知道$[x^0]A(x)=0$，因此$A(x)=A_2(x)$\n\n接下来我们要求$\\displaystyle G(x)=F^\\frac{1} {2}(x)$\n\n$$ \\ $$\n\n下面介绍对于短多项式$F(x)$，设$\\text{deg}(F(x))=m$，有理数$k(k\\ne 1)$\n\n求解$G(x)=F^k(x)$的前$n$项的$O(m^2+nm)$递推做法\n\n#### 变形\n\n$G(x)=F^k(x)$\n\n$\\displaystyle G'(x)=kF^{k-1}(x)F'(x)$\n\n$G'(x)F(x)=kF^k(x)F'(x)$\n\n$G'(x)F(x)=kG(x)F'(x)$\n\n$$ \\ $$\n\n#### 求解递推式\n\n对于等号两边，考虑$[x^n]$一项的系数，容易求出$F'(x)=-6x-2$\n\n$\\displaystyle \\sum_{i=0}^m [x^{n-i}]G'(x)F_i=k\\sum_{i=0}^{m-1}[x^{n-i}]G(x)F'_i$\n\n$\\displaystyle \\sum_{i=0}^m [x^{n-i+1}](n-i+1)G(x)F_i=k\\sum_{i=0}^{m-1}[x^{n-i}]G(x)F'_i$\n\n$\\displaystyle (n+1)[x^{n+1}]G(x)=k\\sum_{i=0}^{m-1}[x^{n-i}]G(x)F'_i-\\sum_{i=1}^m [x^{n-i+1}](n-i+1)G(x)F_i$\n\n带入这题的$k$，得到\n\n$\\displaystyle [x^n]=\\frac{3(n-3)[x^{n-2}]+(2n-3)[x^{n-1}]} {n}$\n\n递推边界$[x^0]G(x)=1,[x^1]G(x)=-1$\n\n然后由$G(x)$得到$A(x)$再得到最终答案即可\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["NOIP"],"categories":["题解"]},{"title":"【UER  9】赶路","url":"/articles/2021/02/28/96f8d511.html","content":"# 【UER #9】赶路\n\n-----一定有解。。\n\n### $x_1\\leq x_i\\leq x_n$\n\n将中间的点按照$(x_i,y_i)$排序，然后依次连过去即可\n\n$$ \\ $$\n\n### $x_1=y_1=0$，四个象限均存在点\n\n将所有点极角排序，然后走一圈即可\n\n$$ \\ $$\n\n### $O(n\\log n)$\n\n不妨设$x_1<x_n$\n\n将$1,n$以外所有点分成三部分，即左边| 1 | 中间 | n | 右边\n\n左边右边考虑极角排序转圈走，中间按照$(x_i,y_i)$走\n\n发现两边极角排序之后转圈走不一定能够走到中间去，可能会与转圈时的路径相交\n\n但是实际上画图就会发现，如果顺时针走的路径会相交，逆时针走一定不相交\n\n因此对于左右枚举顺时针还是逆时针即可，4中情况，每种$O(n)$检查线段相交\n\n总能构造一组合法解\n\n预处理需要排序，因此复杂度为$O(n\\log n)$\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=510,INF=1e9+10;\nconst db eps=1e-7;\n\nint n,m;\nstruct Node{\n\tdb x,y;\n\tNode(){ }\n\tNode(db x,db y):x(x),y(y){ }\n\tbool operator < (const Node __) const { return x!=__.x?x<__.x:y<__.y; }\n\tNode operator - (const Node &t) const { return Node(x-t.x,y-t.y); }\n\tdb operator * (const Node &t) const { return x*t.x+y*t.y; }\n\tdb operator ^ (const Node &t) const { return x*t.y-y*t.x; }\n\tvoid turn(db t){\n\t\tdb a=x*cos(t)-y*sin(t),b=x*sin(t)+y*cos(t);\n\t\tx=a,y=b;\n\t}\n\tdb tan() const { return atan2(x,y); }\n} A[N];\nint Cross(int x,int y,int a,int b){\n\tif(((A[x]-A[y])^(A[a]-A[b]))==0) return 0;\n\tdb l=(A[a]-A[x])^(A[y]-A[x]),r=(A[b]-A[x])^(A[y]-A[x]);\n\tif((l<0)^(r>0)) return 0;\n\tswap(a,x),swap(b,y);\n\tl=(A[a]-A[x])^(A[y]-A[x]),r=(A[b]-A[x])^(A[y]-A[x]);\n\tif((l<0)^(r>0)) return 0;\n\treturn 1;\n}\n\nint L[N],LC,R[N],RC,T[N],TC;\nint P[N];\n\nint Work(){\n\tint C=0;\n\tP[++C]=1;\n\trep(i,1,LC) P[++C]=L[i];\n\trep(i,1,TC) P[++C]=T[i];\n\trep(i,1,RC) P[++C]=R[i];\n\tP[++C]=n;\n\tif(LC) rep(i,2,LC) if(Cross(P[LC+1],P[LC+2],P[i],P[i-1])) return 0;\n\tif(RC) drep(i,n,n-RC+2) if(Cross(P[n-RC],P[n-RC-1],P[i],P[i-1])) return 0;\n\treturn 1;\n}\nvoid Solve(){\n\trep(i,0,1) {\n\t\trep(j,0,1) {\n\t\t\tif(Work()) {\n\t\t\t\trep(i,1,n) printf(\"%d \",P[i]);\n\t\t\t\tputs(\"\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treverse(R+1,R+RC+1);\n\t\t}\n\t\treverse(L+1,L+LC+1);\n\t}\n}\n\nint main(){\n\trep(kase,1,rd()){\n\t\trep(i,1,n=rd()) A[i].x=rd(),A[i].y=rd();\n\t\tdb t=1.0*(rand()+2)/(rand()+2);\n\t\trep(i,1,n) A[i].turn(t);\n\t\tif(A[1].x>A[n].x) rep(i,1,n) A[i].x=-A[i].x;\n\t\tLC=RC=TC=0;\n\t\trep(i,2,n-1) if(A[i].x<A[1].x-eps) L[++LC]=i;\n\t\telse if(A[i].x-eps>A[n].x) R[++RC]=i;\n\t\telse T[++TC]=i;\n\t\tsort(T+1,T+TC+1,[&](int x,int y){ return A[x].x<A[y].x; });\n\t\tsort(L+1,L+LC+1,[&](int x,int y){ return (A[x]-A[1]).tan()<(A[y]-A[1]).tan(); });\n\t\tsort(R+1,R+RC+1,[&](int x,int y){ return (A[x]-A[n]).tan()<(A[y]-A[n]).tan(); });\n\t\tSolve();\n\t}\n}\n```\n\n\n\n\n\n\n\n","tags":["各大OJ"],"categories":["题解"]},{"title":"【UER  9】知识网络","url":"/articles/2021/02/28/199b51c1.html","content":"# 【UER #9】知识网络\n\nbitset写错没调出来。。。\n\n\n\n------\n\n### $O(n(n+m))$\n\n暴力枚举起点，建立转移虚点，得到一个边权为$0/1$，点数$n+k$，边数为$O(n+m)$的图\n\n然后广搜双端队列维护即可\n\n$$ \\ $$\n\n### $O(k(n+m)+\\frac{n(n+m)} {w})$\n\n考虑枚举颜色$k$，对于所有这种颜色的点，假设一开始$dis_u$均为$2$\n\n并由此广搜预处理一个最短路图，复杂度为$O(k(n+m))$\n\n由于图上有0边无0环，因此最短路图是拓扑图\n\n那么选定其中一个点为起点，会将这个点的$dis\\rightarrow dis-1$，其他同色点$dis$不变\n\n同时，这个点在最短路图上的所有后记节点$dis\\rightarrow dis-1$\n\n那么对于最短路图上所有点，统计有多少个起点能够到达它，就能够知道以这种颜色点为起点时，这个点不同的$dis$出现次数\n\n这是一个拓扑图$dp$问题，不好处理，因此考虑用$\\text{bitset}$暴力存储所有能够转移的状态\n\n由于需要维护的起点总数为$n$，单次只维护一个集合，因此无法直接用$\\text{std::bitset}$\n\n复杂度为$O(\\frac{nm} {w})$\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=51000,INF=1e9+10;\n\nint n,m,k;\nstruct Edge{\n\tint to,nxt,w;\n} e[N*4];\nint head[N],ecnt;\nvoid AddEdge(int u,int v,int w=1){\n\te[++ecnt]=(Edge){v,head[u],w};\n\thead[u]=ecnt;\n}\n\nint Q[N*4],D[N*4],L,R,dis[N];\nunsigned Ans[N];\nvector <int> G[200];\nint len;\nstruct BITSET{\n\tull a[N/128];\n\tint count(){\n\t\tint c=0;\n\t\trep(i,0,len) c+=__builtin_popcountll(a[i]);\n\t\treturn c;\n\t}\n\tvoid set(int x){ a[x>>6]|=1ull<<x; }\n\tvoid clear(){ memset(a,0,(len+1)<<3); }\n\tvoid copy(const BITSET &t){ memcpy(a,t.a,(len+1)<<3); }\n\tvoid operator |= (const BITSET &t) { rep(i,0,len) a[i]|=t.a[i]; }\n} BS[N];\n\nint cnt,vis[N],ind[N];\nvoid Topo(int sz){\n\trep(i,1,n+k) ind[i]=0;\n\trep(u,1,n+k) for(int i=head[u];i;i=e[i].nxt) if(dis[e[i].to]==dis[u]+e[i].w) ind[e[i].to]++;\n\tL=1,R=0;\n\trep(i,1,n+k) if(dis[i]<1e6 && !ind[i]) Q[++R]=i;\n\twhile(L<=R){\n\t\tint u=Q[L++];\n\t\tif(u<=n) {\n\t\t\tint t=BS[u].count();\n\t\t\tAns[dis[u]]+=sz-t;\n\t\t\tAns[dis[u]-1]+=t;\n\t\t}\n\t\tfor(int i=head[u];i;i=e[i].nxt) if(dis[e[i].to]==dis[u]+e[i].w) {\n\t\t\tBS[e[i].to]|=BS[u];\n\t\t\tif(--ind[e[i].to]==0) Q[++R]=e[i].to;\n\t\t}\n\t}\n}\n\nvoid Bfs(int c){\n\tif(!G[c].size()) return;\n\tmemset(dis,63,(n+k+2)<<2);\n\tL=2*(n+k),R=2*(n+k)-1;\n\trep(i,0,G[c].size()-1) Q[++R]=G[c][i],D[R]=dis[G[c][i]]=2;\n\twhile(L<=R){\n\t\tint u=Q[L++];\n\n\t\tfor(reg int i=head[u];i;i=e[i].nxt){\n\t\t\treg int v=e[i].to,w=e[i].w;\n\t\t\tif(dis[v]<=dis[u]+w) continue;\n\t\t\tdis[v]=dis[u]+w;\n\t\t\tif(!w) Q[--L]=v,D[L]=dis[v];\n\t\t\telse Q[++R]=v,D[R]=dis[v];\n\t\t}\n\t}\n\tlen=G[c].size()/64;\n\tif(len>=N/128){\n\t\tlen=N/128-1;\n\t\trep(i,1,n+k) BS[i].clear();\n\t\trep(i,0,G[c].size()-1) if(i<len*64) BS[G[c][i]].set(i);\n\t\tTopo(len*64);\n\n\t\tint tmp=len*64;\n\t\tlen=(G[c].size()-tmp)/64;\n\t\trep(i,1,n+k) BS[i].clear();\n\t\trep(i,0,G[c].size()-1) if(i>=tmp) BS[G[c][i]].set(i-tmp);\n\t\tTopo(G[c].size()-tmp);\n\t} else {\n\t\trep(i,1,n+k) BS[i].clear();\n\t\trep(i,0,G[c].size()-1) BS[G[c][i]].set(i);\n\t\tTopo(G[c].size());\n\t}\n}\n\nint col[N];\n\nint main(){\n\tn=rd(),m=rd(),k=rd();\n\trep(i,1,n) {\n\t\tint x=col[i]=rd();\n\t\tAddEdge(n+x,i,0),AddEdge(i,n+x);\n\t\tG[x].pb(i);\n\t}\n\trep(i,1,m) {\n\t\tint u=rd(),v=rd();\n\t\tif(col[u]==col[v]) continue;\n\t\tind[u]++,ind[v]++;\n\t\tAddEdge(u,v),AddEdge(v,u);\n\t}\n\trep(i,1,k) Bfs(i);\n\tAns[1]=0;\n\trep(i,2,k*2) Ans[i]/=2;\n\tAns[k*2+1]=1ll*n*(n-1)/2;\n\trep(i,1,k*2+1) printf(\"%u \",Ans[i]),Ans[k*2+1]-=Ans[i];\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["各大OJ"],"categories":["题解"]},{"title":"「WC2021」表达式求值","url":"/articles/2021/02/27/aec7f7f4.html","content":"# 「WC2021」表达式求值\n\n直接枚举每一位求值显然至少是$O(n|S|)$的，为了减少计算次数，考虑对于$n$个不同数组的情况归纳出一些通用情况\n\n对于一个数组，考虑计算答案$\\ge A_i$的方案数，那么有一部分数$\\ge A_i$\n\n直接状压$\\ge A_i$的数的集合，对于的数不同二进制表示就可以得到$2^m$种不同的状态\n\n在计算时，只需要考虑是否$\\ge A_i$，分为两种值，$O(1)$合并即可\n\n预处理出每个二进制对应的值，然后对于每个$A_i$计算答案即可\n\n复杂度为$O(|S|2^m+nm\\log m)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n\nchar IO;\nint rd(){\n\tint s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\n\nconst int N=5e4+10,P=1e9+7;\n\nint n,m;\nint A[N][10];\nchar s[N];\nstruct Node{\n\tint a[2];\n\tNode(){ }\n\tNode(int x){ a[!x]=0,a[x]=1; }\n\tNode operator < (const Node x) const {\n\t\tNode res;\n\t\tres.a[0]=(1ll*a[0]*(x.a[0]+x.a[1])+1ll*a[1]*x.a[0])%P;\n\t\tres.a[1]=1ll*a[1]*x.a[1]%P;\n\t\treturn res;\n\t}\n\tNode operator > (const Node x) const {\n\t\tNode res;\n\t\tres.a[0]=1ll*a[0]*x.a[0]%P;\n\t\tres.a[1]=(1ll*a[1]*(x.a[0]+x.a[1])+1ll*a[0]*x.a[1])%P;\n\t\treturn res;\n\t}\n\tNode operator + (const Node x) const {\n\t\tint l=a[0]+a[1],r=x.a[0]+x.a[1];\n\t\tNode res;\n\t\trep(i,0,1) res.a[i]=(1ll*a[i]*r+1ll*l*x.a[i])%P;\n\t\treturn res;\n\t}\n} X[N];\nint I[10],Y[N],T,val[N];\n\nvoid Work(int S){\n\tT=0;\n\tfor(int i=1;s[i];++i) {\n\t\tif(isdigit(s[i])) X[++T]=Node((S>>(s[i]-'0'))&1),Y[T]=0;\n\t\telse if(s[i]=='<') Y[++T]=1;\n\t\telse if(s[i]=='>') Y[++T]=2;\n\t\telse if(s[i]=='?') Y[++T]=3;\n\t\telse if(s[i]=='(') Y[++T]=4;\n\t\telse X[T-1]=X[T],Y[T-1]=Y[T],T--;\n\t\tif(T>2 && !Y[T] && !Y[T-2]){\n\t\t\tif(Y[T-1]==1) X[T-2]=X[T-2]<X[T];\n\t\t\tif(Y[T-1]==2) X[T-2]=X[T-2]>X[T];\n\t\t\tif(Y[T-1]==3) X[T-2]=X[T-2]+X[T];\n\t\t\tT-=2;\n\t\t}\n\t}\n\tval[S]=X[1].a[1];\n}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,0,m-1) rep(j,1,n) A[j][i]=rd();\n\tscanf(\"%s\",s+1);\n\trep(S,1,(1<<m)-1) Work(S);\n\tint ans=0;\n\trep(i,1,n) {\n\t\trep(j,0,m-1) I[j]=j;\n\t\tsort(I,I+m,[&](int x,int y){ return A[i][x]<A[i][y]; });\n\t\tint S=0;\n\t\tfor(int j=m-1;~j;--j){\n\t\t\tS|=1<<I[j];\n\t\t\tans=(ans+1ll*(A[i][I[j]]-(j?A[i][I[j-1]]:0))*val[S])%P;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["WC"],"categories":["题解"]},{"title":"[补]「WC2021」括号路径 ","url":"/articles/2021/02/27/b92c6052.html","content":"# [补]「WC2021」括号路径 \n\n注意到到达关系是相互的，因此可以把能够互相到达的点放到同一集合中\n\n因此只需要考虑最简单的到达情况，发现实际上当一个点有两条同色入边时，可以将这两条边对应的点合并\n\n对于每个集合，维护一个颜色出边的集合，可以用$\\text{std::map}$实现，每次合并两个点用并查集处理集合关系\n\n然后用启发式合并的方式维护集合的边，即可做到$O(m\\log^2 m)$\n\n用线段树合并的方式维护同样的东西即可做到$O(m\\log k)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nenum{N=300010};\nint n,m,i,u,v,w,F[N],S[N];\nint Find(int x){ return F[x]==x?x:F[x]=Find(F[x]); }\nmap <int,int> M[N];\nvoid U(int x,int y){\n\tx=Find(x),y=Find(y);\n\tif(x==y) return;\n\tif(M[x].size()>M[y].size()) swap(x,y);\n\tF[x]=y,S[y]+=S[x]; \n\tfor(auto i:M[x]) M[y].emplace(i);\n\tfor(auto i:M[x]) U(M[y][i.first],i.second);\n}\nmain(){\n\tfor(scanf(\"%d%d%*d\",&n,&m),i=1;i<=n;++i) S[F[i]=i]=1;\n\twhile(m--){\n\t\tscanf(\"%d%d%d\",&v,&u,&w),u=Find(u),v=Find(v);\n\t\tif(M[u].count(w)) U(M[u][w],v);\n\t\telse M[u][w]=v;\n\t}\n\tint64_t ans=0;\n\tfor(i=1;i<=n;++i) if(Find(i)==i) ans+=1ll*S[i]*(S[i]-1)/2;\n\tprintf(\"%lld\\n\",ans);\n}\n```\n\n\n\n\n\n","tags":["WC"],"categories":["题解"]},{"title":"「CEOI2020」星际迷航","url":"/articles/2021/02/27/cd246478.html","content":"# 「CEOI2020」星际迷航\n\n首先是最简单的判断是否必胜的$dp$转移$\\displaystyle dp_u=\\bigcup_{v\\in son_u} \\text{not  } dp_{v}$\n\n考虑第$i+1$层对于第$i$层的贡献，实际上只和$i+1$层有多少个点$dp$值为0/1有关\n\n下面称$dp$值为0/1的点为 败/胜 点\n\n考虑对于确定第$i$层的根为某一节点$root$之后\n\n在某一个点下面接一个胜点，或者在一个胜点下面接一个点，对于胜败情况没有影响\n\n在一个败点下面接一个败点，可能会导致一段连续祖先段的胜败翻转\n\n考虑对于每个$u$作为根求出：\n\n1.没有接上下一层时的胜败情况 ： $dp_u$\n\n2.有多少个节点接上一个败点之后，会导致根的胜败情况翻转：$R_u$\n\n这是一个换根$dp$问题\n\n具体来说，$R_u$的值，根据子节点中败点的个数可以得到转移：\n\n1.没有败点，那么就是所有子节点$R$之和+自己\n\n2.恰好有一个败点，那么就是败点的$R$\n\n对此，每个点维护子节点中败点的个数，然后换根$dp$即可\n\n求出每个$root$的1，2后，可以用一个矩阵维护每层的转移，就不再赘述\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\nint rd(){\n    int s=0;\n    while(!isdigit(IO=getchar()));\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return s;\n}\n\nconst int N=1e5+10,INF=1e9+10,P=1e9+7;\n\nint n;\nll m;\nstruct Mat{\n    int a[2][2];\n    void clear(){ memset(a,0,sizeof a); }\n    Mat operator * (const Mat x) const {\n        Mat res; res.clear();\n        rep(i,0,1) rep(j,0,1) rep(k,0,1) res.a[i][k]=(res.a[i][k]+1ll*a[i][j]*x.a[j][k])%P;\n        return res;\n    }\n} Res,X;\n\nint F[N],FC[N],FR[N],son[N][2],SR[N];\n// F子树胜败，FC子节点败点个数，FR子树翻转点个数，son存储两个儿子中的败点，SR存储儿子中的FR之和\nint G[N],GC[N],GR[N];\n// F,GC,GR是子树外的\nint dp[N],R[N],fa[N];\n// dp,R即上文所述\n\nvector <int> E[N];\nvoid dfs1(int u,int f) {\n    // 子树处理\n    fa[u]=f;\n    for(int v:E[u]) if(v!=f) {\n        dfs1(v,u);\n        FC[u]+=!F[v];\n        if(!F[v]) {\n            if(!son[u][0]) son[u][0]=v;\n            else son[u][1]=v;\n        }\n        SR[u]+=FR[v];\n    }\n    F[u]=FC[u]>0;\n    FR[u]=!F[u];\n    if(FC[u]<=1) for(int v:E[u]) if(v!=f && F[u]!=F[v]) FR[u]+=FR[v];\n}\n\n//换根dp\nvoid dfs2(int u,int f) {\n    if(f) GC[u]=G[u]=!G[f],GR[u]=GR[f]+!G[u];\n    else GC[u]=G[u]=0,GR[u]=1;\n    dp[u]=F[u]|G[u];\n    if(!dp[u]) R[u]=FR[u]+GR[u]-1;\n    else if(FC[u]+G[u]==1) {\n        if(G[u]) R[u]=GR[u];\n        else R[u]=FR[u];\n    }\n    for(int v:E[u]) if(v!=f) {\n        GC[u]=FC[u]-!F[v]+(f?!G[f]:0);\n        G[u]=GC[u]>0;\n        GR[u]=0;\n        if(!G[u]) GR[u]=GR[f]+SR[u]-FR[v]+1;\n        else if(GC[u]==1) {\n            if(son[u][0] && son[u][0]!=v) GR[u]=FR[son[u][0]];\n            else if(son[u][1] && son[u][1]!=v) GR[u]=FR[son[u][1]];\n            else GR[u]=GR[f];\n        }\n        dfs2(v,u);\n    }\n}\n\nint cnt[2];\nint main(){\n    n=rd(),scanf(\"%lld\",&m);\n    rep(i,2,n) {\n        int u=rd(),v=rd();\n        E[u].pb(v),E[v].pb(u);\n    }\n    dfs1(1,0),dfs2(1,0);\n    // 矩阵处理\n    rep(i,1,n) {\n        cnt[dp[i]]++;\n        X.a[1][dp[i]]=(X.a[1][dp[i]]+n)%P;\n        X.a[0][!dp[i]]=(X.a[0][!dp[i]]+R[i])%P;\n        X.a[0][dp[i]]=(X.a[0][dp[i]]+n-R[i])%P;\n    }\n    m--,Res.a[0][0]=Res.a[1][1]=1;\n    while(m) {\n        if(m&1) Res=Res*X;\n        X=X*X;\n        m>>=1;\n    }\n    int x=(1ll*Res.a[0][0]*cnt[0]+1ll*Res.a[1][0]*cnt[1])%P;\n    int y=(1ll*Res.a[0][1]*cnt[0]+1ll*Res.a[1][1]*cnt[1])%P;\n    // 得到第一层败/胜 的个数，与第0层合并\n    int ans=0;\n    if(!dp[1]) ans=1ll*x*R[1]%P;\n    else ans=(1ll*x*(n-R[1])+1ll*n*y)%P;\n    printf(\"%d\\n\",ans);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["CEOI"],"categories":["题解"]},{"title":"「CEOI2018」斐波那契表示法","url":"/articles/2021/02/26/f401e880.html","content":"# 「CEOI2018」斐波那契表示法\n\n思路：维护当前数值的唯一表示法，然后根据唯一表示法来确定答案\n\n### Part1 唯一表示法\n\n任何一个数$x$有唯一表示$P_i$，满足$x=\\sum F_{P_i},P_i<P_{i+1}-1$\n\n即不会出现相邻两项\n\n依次插入每一个数$x$，考虑可能出现的情况\n\n1.$x$一位以及前后为空，那么直接插入\n\n2.$x$一位为空，且$x-1$为空，$x+1$已经出现\n\n删除$x+1$，插入$x+2$\n\n\n\n3.$x$一位为空，且$x+1$为空，$x-1$已经出现\n\n删除$x-1$，插入$x+1$\n\n4.$x$一位有\n\n先删除$x$，然后插入$x+1,x-2$\n\n对于操作1,2,3以及4中的$x+1$，每次操作增加$O(1)$个元素，每次递归进行删除$O(1)$个元素\n\n操作次数为均摊$O(n)$\n\n对于$4$操作中的$x-2$，如果$x-2$已经出现就会不断进行递归\n\n最终的效果就是所有被操作到的$x-2,x-4,x-6\\ldots$向右平移了一位\n\n~~大致如此，实际情况比较复杂，要讨论x-2=0,x-2<0等等情况~~\n\n用一棵平衡树维护$P_i-P_{i-1}$的值即可，4操作可以二分左边第一个>2的元素，然后进行平移\n\n最终复杂度为$O(n\\log n)$\n\n$$ \\ $$\n\n### Part2 dp求答案\n\n令边界$P_0=0$，根据上面维护的$\\delta_i=P_i-P_{i-1}$\n\n考虑根据$\\delta_i$求解答案\n\n显然一个数$x$可以下分为$x$或者$x-1,x-2$ 或 $x-1,x-3,x-4$ 或$x-1,x-3,x-5,x-6\\ldots$\n\n且不能碰到前面的数\n\n简单分析发现$P_i$有$\\lceil \\frac{\\delta_i} {2}\\rceil $种下分方案\n\n然而，$P_{i-1}$如果被下分，那么$P_{i-1}$这一位会消失，变成$P_{i-1}-1$作为限制点\n\n也就是说，$P_{i-1}$的下分会影响到$\\delta_i$，使得$\\delta_i\\rightarrow \\delta_i+1$\n\n那么依次考虑每个$\\delta_i$，令$dp_{i,f}$表示前$i$个，最后一个是否下分的方案数，可以$dp$求解\n\n由于要动态维护，因此可以考虑用一个类似矩阵的东西来维护区间的dp情况\n\n在平衡树中$up$维护答案即可\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n    T s=0; int f=0;\n    while(!isdigit(IO=getchar())) f|=IO=='-';\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return f?-s:s;\n}\n\nconst int N=4e5+10,P=1e9+7;\n\nint n;\nstruct Node{\n    int l,r,ma,len;\n    int a[2][2];\n    void clear(){ memset(a,0,sizeof a); }\n    Node(){ } \n    Node(int x){\n        l=r=ma=len=x;\n        rep(i,0,1) {\n            a[i][0]=1;\n            a[i][1]=(x-1+i)/2;\n        }\n    }\n    Node operator + (const Node _) const {\n        Node res; res.l=l,res.r=_.r,res.ma=max(ma,_.ma),res.len=len+_.len;\n        res.a[0][0]=(1ll*a[0][0]*_.a[0][0]+1ll*a[0][1]*_.a[1][0])%P;\n        res.a[1][0]=(1ll*a[1][0]*_.a[0][0]+1ll*a[1][1]*_.a[1][0])%P;\n        res.a[0][1]=(1ll*a[0][0]*_.a[0][1]+1ll*a[0][1]*_.a[1][1])%P;\n        res.a[1][1]=(1ll*a[1][0]*_.a[0][1]+1ll*a[1][1]*_.a[1][1])%P;\n        return res;\n    }\n} s[N],val[N];\n\nint rt,ls[N],rs[N],key[N];\nvoid Up(int x){\n    s[x]=val[x];\n    if(ls[x]) s[x]=s[ls[x]]+s[x];\n    if(rs[x]) s[x]=s[x]+s[rs[x]];\n}\nint U(int x,int y){\n    if(!x||!y) return x|y;\n    if(key[x]<key[y]) return rs[x]=U(rs[x],y),Up(x),x;\n    return ls[y]=U(x,ls[y]),Up(y),y;\n}\n\nPii Lower(int x,int len){\n    if(len<=0 || !x) return mp(0,x);\n    if(s[x].len<=len) return mp(x,0);\n    if(s[ls[x]].len>=len) {\n        Pii y=Lower(ls[x],len);\n        return ls[x]=y.second,Up(x),mp(y.first,x);\n    } else {\n        Pii y=Lower(rs[x],len-s[ls[x]].len-val[x].len);\n        return rs[x]=y.first,Up(x),mp(x,y.second);\n    }\n}\n\nvoid EraseEnd(int &x){\n    if(!rs[x]){ x=ls[x]; return; }\n    static int T[N],C;\n    for(int y=x;y;y=rs[y]) T[++C]=y;\n    rs[T[C-1]]=ls[T[C]];\n    drep(i,C-1,1) Up(T[i]);\n    C=0;\n}\nvoid AddR(int x,int y){\n    if(!x) return;\n    if(rs[x]) return AddR(rs[x],y),Up(x);\n    val[x]=Node(val[x].len+y),Up(x);\n}\nvoid AddL(int x,int y){\n    if(!x) return;\n    if(ls[x]) return AddL(ls[x],y),Up(x);\n    val[x]=Node(val[x].len+y),Up(x);\n}\n\nPii Split(int x){\n    if(s[x].ma<=2) return mp(0,x);\n    if(val[x].ma<=2 && s[rs[x]].ma<=2) {\n        Pii y=Split(ls[x]);\n        return ls[x]=y.second,Up(x),mp(y.first,x);\n    } else {\n        Pii y=Split(rs[x]);\n        return rs[x]=y.first,Up(x),mp(x,y.second);\n    }\n}\nPii Split2(int x){\n    if(s[x].ma<=2) return mp(x,0);\n    if(s[ls[x]].ma>2 || val[x].ma>2) {\n        Pii y=Split2(ls[x]);\n        return ls[x]=y.second,Up(x),mp(y.first,x);\n    } else {\n        Pii y=Split2(rs[x]);\n        return rs[x]=y.first,Up(x),mp(x,y.second);\n    }\n}\nint New(int x){ return key[++n]=rand(),s[n]=val[n]=Node(x),n; }\n\nvoid Ins(int x){\n    if(x<0) return;\n    cmax(x,1);\n    if(!rt) { rt=New(x); return; }\n    if(s[rt].len<x-1) {\n        rt=U(rt,New(x-s[rt].len));\n        return;\n    }\n    if(s[rt].len==x-1) {\n        EraseEnd(rt);\n        return Ins(x+1);\n    }\n    Pii t=Lower(rt,x);\n    if(s[t.first].len!=x) {\n        if(x>1) {\n            Pii y=Lower(t.first,x-1);\n            if(s[y.first].len==x-1) {\n                AddR(y.first,s[y.second].len),rt=U(y.first,t.second);\n                return Ins(x+1);\n            } \n            t.first=U(y.first,y.second);\n        }\n        if(s[t.first].len==x+1) {\n            Pii y=Split2(t.second);\n            AddL(y.second,-1);\n            int d=s[t.first].r+s[y.first].len+1;\n            EraseEnd(t.first);\n            rt=U(U(t.first,New(d)),y.second);\n            return;\n        }\n        int d=s[t.first].len-x;\n        AddR(t.first,-d);\n        rt=U(U(t.first,New(d)),t.second);\n        return;\n    }\n    if(s[t.second].l==2) return AddL(t.second,s[t.first].r),EraseEnd(t.first),rt=U(t.first,t.second),Ins(x+1),Ins(x-2);\n    Pii y=Split(t.first); AddL(t.second,-1);\n    if(!y.first) {\n        if(s[y.second].l==1) {\n            AddL(y.second,1),rt=U(y.second,t.second);\n            return;\n        }\n        rt=U(U(New(1),y.second),t.second);\n        return;\n    } \n    if(s[y.first].len>3 && s[y.first].r==3) {\n        EraseEnd(y.first),AddR(y.first,2);\n        rt=U(U(U(y.first,New(2)),y.second),t.second);\n        return;\n    }\n    AddR(y.first,-2);\n    rt=U(U(U(y.first,New(3)),y.second),t.second);\n}\n\n\nint main(){\n    rep(kase,1,rd()) Ins(rd()),printf(\"%d\\n\",(s[rt].a[0][0]+s[rt].a[0][1])%P);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["CEOI"],"categories":["题解"]},{"title":"「CEOI2019」建造摩天楼","url":"/articles/2021/02/25/9e30ae5d.html","content":"# 「CEOI2019」建造摩天楼\n\n显然是倒着考虑删除每个大楼，此时每次面临的情况都是一个子问题\n\n下文称当前局面未被删除的大楼为黑点，其余为白点\n\n子问题有解的充要条件是：黑点之间能 8-连通\n\n当前一个点能够被删掉的条件是：\n\n1.这个点能够连通到无穷处\n\n2.这个点不是当前8-连通图的割点\n\n$$ \\ $$\n\n考虑用一个简单的方法维护条件1：\n\n将一开始每个黑点周围的白点取出，按照白点之间4-连通构建连通块\n\n能够4-连通接触到最外层连通块的黑点满足条件1\n\n每次删除黑点之后，增加能够连通的白点，每个白点只会增加一次\n\nps:寻找最外层4-连通白点的一个方法：找到x最大的白点\n\n$$ \\ $$\n\n接下来考虑如何判定一个点$u$是否是割点：\n\n首先删除$u$之后，周围8连通内能够构成多个连通块，可以发现大致可以归结为以下几种情况，其中x,y为黑点\n\n多个$x$表示$x$在其中任何一个位置都可以\n\n| 1.   |      |      |\n| ---- | ---- | ---- |\n| x    | ①    | y    |\n| x    | u    | y    |\n| x    | ②    | y    |\n\n| 2.   |      |      |\n| ---- | ---- | ---- |\n| x    | ①    | y    |\n| ②    | u    | y    |\n| y    | y    | y    |\n\n对于这两种情况，只要白点1和白点2在同一4-连通块，割掉$u$就会分开x和$y$\n\n由此，每次插入一个白点，可以$O(1)$检测一个点是否合法\n\n简单讨论可以发现，会被影响合法性的点，一定在新加入最外层连通块的白点周围\n\n这样总共check了$O(n)$次，每次用一个堆/set维护能选的最大编号的点即可\n\nps:代码非常丑非常垃圾。。。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef pair <int,int> Pii;\n#define mp make_pair\n#define pb push_back\n#define x first\n#define y second\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=1.3e6+10,INF=1e9+10;\nconst int z[5][4]={ {1,0},{0,-1},{-1,0},{0,1} };\nconst int Z[9][4]={ {1,1},{1,0},{1,-1},{0,-1},{-1,-1},{-1,0},{-1,1},{0,1} };\n\nint n,m,k;\nint F[N];\nint Find(int x){ return F[x]==x?x:F[x]=Find(F[x]);}\nvoid Union(int x,int y){ F[Find(x)]=Find(y); }\nmap <Pii,int> B,W;\nset <int> st;\nvector <int> ans;\nPii A[N],P[N];\nint ma=-1e9,maxid;\nint G[N][4];\nvoid Ins(int x,int y){\n    // Insert white point\n\tPii T=mp(x,y);\n\tif(B.count(T)) return ;\n\tif(!W.count(T)) P[W[T]=++m]=T,F[m]=m;\n\tint u=W[T];\n\tif(x>ma) ma=x,maxid=u;\n\trep(i,0,3) {\n\t\tint x1=x+z[i][0],y1=y+z[i][1];\n\t\tif(W.count(mp(x1,y1))) {\n\t\t\tint v=W[mp(x1,y1)];\n\t\t\tG[u][i]=v;\n\t\t\tG[v][(i+2)%4]=u;\n\t\t\tUnion(u,v);\n\t\t}\n\t}\n}\n\nint del[N],vis[N],reach[N];\nint Check(int u){\n\tif(del[u]||!reach[u]) return 0;\n\tstatic int I[8];\n\tint c=0;\n\trep(i,0,7) {\n\t\tPii T=mp(A[u].x+Z[i][0],A[u].y+Z[i][1]);\n\t\tif(W.count(T)) I[i]=Find(W[T]);\n\t\telse I[i]=0,c++;\n\t}\n\tfor(int i=1,t=0;t<4;t++,i=(i+2)%8){\n\t\tint j=(i+2)%8;\n\t\tif(I[i] && I[i]==I[j] && !I[(i+1)%8] && c>1) return 0;\n\t}\n\tif((!I[0]||!I[1]||!I[2]) && (!I[4]||!I[5]||!I[6]) && I[3] && I[3]==I[7]) return 0;\n\tif((!I[2]||!I[3]||!I[4]) && (!I[6]||!I[7]||!I[0]) && I[1] && I[5]==I[1]) return 0;\n\treturn 1;\n}\nvoid ReCheck(int u){\n\tauto it=st.find(u);\n\tif(it!=st.end()) st.erase(it);\n\tif(Check(u)) st.insert(u);\n}\n\nvector <int> tmp;\nvoid dfs(int u){\n\tif(!u) return;\n\tif(vis[u]) return;\n\tvis[u]=1;\n\trep(i,0,3) {\n\t\tif(G[u][i]) dfs(G[u][i]);\n\t\tPii T=mp(P[u].x+z[i][0],P[u].y+z[i][1]);\n\t\tif(B.count(T)) reach[B[T]]=1;\n\t}\n\trep(dx,-1,1) rep(dy,-1,1) if(dx||dy) {\n\t\tPii T=mp(P[u].x+dx,P[u].y+dy);\n\t\tif(B.count(T)) tmp.pb(B[T]);\n\t}\n}\nvoid Dfs(int u){\n\tdfs(u);\n\tsort(tmp.begin(),tmp.end()),tmp.erase(unique(tmp.begin(),tmp.end()),tmp.end());\n\tfor(int i:tmp) ReCheck(i);\n\ttmp.clear();\n}\n\nvoid Del(int u){\n    // delete black point\n\tdel[u]=1;\n\tB.erase(A[u]),Ins(A[u].x,A[u].y);\n\tDfs(W[A[u]]);\n}\n\nint main(){\n\tn=rd(),rd();\n\trep(i,1,n) A[i].x=rd(),A[i].y=rd(),B[A[i]]=i;\n\trep(i,1,n) F[i]=i;\n\t\n\t// Check NO\n\trep(i,1,n) { \n\t\trep(dx,-1,1) rep(dy,-1,1) {\n\t\t\tPii T=mp(A[i].x+dx,A[i].y+dy);\n\t\t\tif(B.count(T)) Union(i,B[T]);\n\t\t}\n\t}\n\trep(i,1,n) if(Find(i)!=Find(1)) return puts(\"NO\"),0;\n\n\trep(i,1,n) rep(dx,-1,1) rep(dy,-1,1) if(dx||dy) Ins(A[i].x+dx,A[i].y+dy);\n\tDfs(maxid);\n\n\trep(i,1,n) {\n\t\tint u=*st.rbegin();\n\t\tauto it=st.end(); --it;st.erase(it);\n\t\tDel(u),ans.pb(u);\n\t}\n\treverse(ans.begin(),ans.end());\n\tputs(\"YES\");\n\tfor(int i:ans) printf(\"%d\\n\",i);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["CEOI"],"categories":["题解"]},{"title":"「JOI 2021 Final」地牢 3 ","url":"/articles/2021/02/24/12d17016.html","content":"# 「JOI 2021 Final」地牢 3 \n\n\n\n### 判定无解\n\n无解即：$\\exists i\\in[S,T-1],A_i>U$\n\n是一个简单的区间最值问题\n\n$$\\  $$\n\n### $O(nm)$\n\n关于用单调队列之类的东西维护每个点权值的方法这里就不提了\n\n形式化地，我们把一层层点放到数轴上，令$X_i=\\sum_{j<i}A_j$\n\n在数轴上坐标每$+1$消耗一点能量，我们要从$X_S$走到$X_T$\n\n考虑每个点的情况，不妨看做是用$B_i$去覆盖$(X_S,X_T]$，求最小权值\n\n发现对于$B_i$，它能够合法覆盖的区间一定是$(X_i,X_i+U]$\n\n暴力地，可以直接让$B_i$更新这段区间的最小权值，然后暴力求和\n\n$$\\  $$\n\n进一步分析每个$B_i$覆盖的区间，可以发现是合法区间$(X_i,X_i+U]$中的某一连续段$(L_i,R_i]$\n\n而$L_i$取决于$B_i$前面第一个$B_{pre}<B_i$，$R_i$取决于后面第一个$B_{nxt}\\leq B_i$\n\n关于$pre,nxt$的求解显然只是一个单调栈解决\n\n得到$(L_i,R_i]$简单的描述\n\n$L_i=\\max\\{X_i,X_{pre}+U\\}$\n\n$R_i=\\min\\{X_i+U,X_{nxt} \\}$\n\n(ps:这样求得的$L_i$不一定$<R_i$)\n\n暴力枚举即可$O(n)$查询\n\n\n\n$$ \\ $$\n\n$$ \\ $$\n\n### $T_i=n+1$ ~~从这里开始需要一些数据结构？~~\n\n考虑倒着从$n$到$1$计算每一个$S_i$的答案\n\n发现在刚插入$i$的时候，$pre_i$还未出现，可以看做$-\\infty$，$nxt_i$已经确定\n\n当$pre_i$出现时可以重新进行一次插入\n\n每次插入可以用三元组表示$(i,pre,nxt)$，为了便于叙述这里$pre,nxt$直接是坐标\n\n考虑对于$L_i,R_i$进行参数分离计算，首先要考虑何时满足$L_i<R_i$\n\n显然条件就是$nxt-pre>U$\n\n$\\displaystyle L_i=\\max\\{X_i,X_{pre}+U\\}=X_{pre}+\\max\\{X_i-X_{pre},U\\}$\n\n$\\displaystyle R_i=\\min\\{X_i+U,X_{nxt} \\}=X_i+\\min\\{U,X_{nxt}-X_i\\}$\n\n$\\displaystyle Answer=\\sum_{nxt-pre>U} (R_i-L_i)\\cdot B_i$\n\n离线询问，离散之后可以用树状数组维护上述式子，对于不合法部分不要加入即可\n\n$$\\ $$\n\n$$ \\ $$\n\n### $O(n\\log n)$\n\n上面已经能计算$T_i=n+1$的询问，考虑将$S,T$转化为$T_{i}=n+1$的问题\n\n如果直接$S,T$相减显然不合法，不妨找到在$(S,n+1)$的方案中，覆盖的$T$的点$T'$\n\n$(S,n+1)-(T',n+1)$会抵消掉在$S$的方案中$T$右边的部分，而$(X_{T'},X_T]$显然仍然是由$B_{T'}$覆盖，补回来即可\n\n由此完成分离操作，而根据上面区间覆盖的定义，$T'$实际上就是$(X_T-U,X_T]$中最小的$B_i$\n\n所有操作都可以$O(n\\log n)$完成\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\nint rd(){\n\tint s=0,f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=2e5+10,INF=1e9+10;\n\nint n,m,A[N],B[N],nxt[N],stk[N],top,C;\nll ans[N],X[N],H[N];\nstruct Node{ int U,k,id; };\nvector <Node> Q[N];\nvector <int> G[N];\nstruct BIT{\n\tll s[N];\n\tvoid Add(int p,ll x){ \n\t\twhile(p<=C) s[p]+=x,p+=p&-p; \n\t}\n\tll Que(int p){\n\t\tll res=0;\n\t\twhile(p) res+=s[p],p-=p&-p;\n\t\treturn res;\n\t}\n} T1,T2;\n// T1维护式子中含U项的和\n// T2维护式子中常数和\n\nstruct MaxTree{\n\tint s[N<<2],bit;\n\tvoid Build(){\n\t\tfor(bit=1;bit<=n+1;bit<<=1) ;\n\t\trep(i,1,n) s[bit+i]=A[i];\n\t\tdrep(i,bit,1) s[i]=max(s[i<<1],s[i<<1|1]);\n\t}\n\tint Que(int l,int r){\n\t\tif(l==r) return s[l+bit];\n\t\tint res=0;\n\t\tfor(l+=bit-1,r+=bit+1;l^r^1;l>>=1,r>>=1){\n\t\t\tif(~l&1) cmax(res,s[l^1]);\n\t\t\tif(r&1) cmax(res,s[r^1]);\n\t\t}\n\t\treturn res;\n\t}\n} Max;\nstruct MinTree{\n\tint s[N<<2],bit;\n\tint Min(int x,int y){ return mp(B[x],x)<mp(B[y],y)?x:y; }\n\tvoid Build(){\n\t\tB[0]=1e9;\n\t\tfor(bit=1;bit<=n+1;bit<<=1) ;\n\t\trep(i,1,n) s[bit+i]=i;\n\t\tdrep(i,bit,1) s[i]=Min(s[i<<1],s[i<<1|1]);\n\t}\n\tint Que(int l,int r){\n\t\tif(l==r) return s[l+bit];\n\t\tint res=0;\n\t\tfor(l+=bit-1,r+=bit+1;l^r^1;l>>=1,r>>=1){\n\t\t\tif(~l&1) res=Min(res,s[l^1]);\n\t\t\tif(r&1) res=Min(res,s[r^1]);\n\t\t}\n\t\treturn res;\n\t}\n} Min;\n// Min 用于寻找T'\n\nvoid Add(int i,ll pre,ll nxt,int k){\n\tint p=lower_bound(H+1,H+C+1,X[i]-pre)-H,r=lower_bound(H+1,H+C+1,nxt-pre)-H;\n\t// -L\n\tT1.Add(p,-B[i]*k), T1.Add(r,B[i]*k);\n\tT2.Add(p,k*B[i]*(X[i]-pre)), T2.Add(r,-k*B[i]*(X[i]-pre));\n\t// +R \n\tp=lower_bound(H+1,H+C+1,nxt-X[i])-H;\n\tT1.Add(1,k*B[i]),T1.Add(p,-k*B[i]);\n\tT2.Add(p,k*(nxt-X[i])*B[i]),T2.Add(r,-k*(nxt-X[i])*B[i]);\n}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,1,n) A[i]=rd(),X[i+1]=X[i]+A[i];\n\trep(i,1,n) B[i]=rd();\n\tdrep(i,n+1,1) {\n\t\twhile(top && B[stk[top]]>=B[i]) G[i].pb(stk[top--]);\n\t\tnxt[i]=stk[top],stk[++top]=i;\n\t}\n\tMin.Build(),Max.Build();\n\trep(i,1,m) {\n\t\tint S=rd(),T=rd(),U=rd();\n\t\tif(Max.Que(S,T-1)>U){ ans[i]=-1; continue; }\n\t\tH[++C]=U,Q[S].pb((Node){U,1,i});\n\t\tint l=lower_bound(X+1,X+n+2,X[T]-U)-X; cmax(l,S);\n\t\tint t=Min.Que(l,T);\n\t\tans[i]+=(X[T]-X[t])*B[t];\n\t\tQ[t].pb((Node){U,-1,i});\n\t}\n\tsort(H+1,H+C+1),C=unique(H+1,H+C+1)-H-1;\n\tdrep(i,n,1){\n\t\tAdd(i,-1e9,X[nxt[i]],1);\n\t\tfor(int j:G[i]) Add(j,-1e9,X[nxt[j]],-1),Add(j,X[i],X[nxt[j]],1);\n\t\tfor(Node j:Q[i]){\n\t\t\tint p=lower_bound(H+1,H+C+1,j.U)-H;\n\t\t\tans[j.id]+=j.k*(j.U*T1.Que(p)+T2.Que(p));\n\t\t}\n\t}\n\trep(i,1,m) printf(\"%lld\\n\",ans[i]);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["JOI"],"categories":["题解"]},{"title":"多项式复合+拉格朗日反演","url":"/articles/2021/02/23/7bf66bf6.html","content":"# 多项式复合+拉格朗日反演\n\n## 多项式复合\n\n多项式复合形如$F(G(x))$，即复合函数，较为数学的形式可以写作$u=F(v),v=G(x)$\n\n在符号上，记做$F\\circ G=F(G(x))$\n\n稍微展开一下就是{%raw%}$\\begin{aligned} F(G(x))=\\sum_i [x^i]F(x)\\cdot G^i(x)\\end{aligned}${%endraw%}\n\n$$ \\ $$\n\n## 拉格朗日(Lagrange)反演\n\n数学上，拉格朗日反演揭示了幂函数的反函数的形式\n\nOI上，拉格朗日反演是复合逆/反函数的反演\n\n对于多项式$F(x),G(x)$，若他们的复合满足$F(G(x))=x$，则$F(x)$与$G(x)$互为复合逆(若在非模意义下，$y=F(x),y=G(x)$的图像关于直线$y=x$对称，即反函数)，此时也有$G(F(x))=x$\n\n拉格朗日反演用于求解复合逆的**一项的值**:\n\n{%raw%}$\\begin{aligned} [][x^n]F(x)=\\frac{1} {n}[x^{-1}](\\frac{1} {G(x)})^n\\end{aligned} ${%endraw%}\n\n显然，存在复合逆的多项式必然没有常数项\n\n所以上式写成更阳间的样子就是{%raw%}$\\begin{aligned}[] [x^n]F(x)=\\frac{1} {n}[x^{n-1}](\\frac{x} {G(x)})^n\\end{aligned} ${%endraw%}\n\n由于证明太~~，咕了\n\n另外还有扩展拉格朗日反演\n\n{%raw%}$\\begin{aligned} [][x^n]H(F(x))=\\frac{1} {n}[x^{n-1}]H'(x)(\\frac{x} {G(x)})^n\\end{aligned}${%endraw%}\n\n$$ \\ $$\n\n## 多项式复合逆\n\n对于给定的$F(x)$，求其复合逆\n\n带入拉格朗日反演的式子\n\n{%raw%}$\\begin{aligned} F(x)=\\sum \\frac{1} {i}[x^{i-1}](\\frac{x} {G(x)})^i x^i\\end{aligned} ${%endraw%}\n\n求这个式子的核心是 分块+暴力\n\n$i=a\\cdot S+b$，求出$(\\frac{x} {G(x)})^{Sa},(\\frac{x} {G(x)})^b$，然后直接对于每个位置把两个式子暴力合并即可\n\n两部分复杂度总和为$O(n\\sqrt n\\log n+n^2)$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「JOI 2021 Final」机器人","url":"/articles/2021/02/23/a184a2b4.html","content":"# 「JOI 2021 Final」机器人\n\n原问题中颜色什么时候改没有影响\n\n显然不能记录每条边的颜色，显然在行走过程中不会回到原先的点\n\n因此考虑简化状态\n\n从一个点出去时，走了一条边$(u,v,c,w)$，从$u$出发颜色为$c$的边$w$之和为$S_{u,c}$，则有两种转移：\n\n1.走过来时的边被改变了，权值$w$\n\n2.改变了其他同种颜色的边，权值$S_{u,c}-w$\n\n对于2情况在前面修改的边，在后面不会产生贡献（否则可以直接通过这条边过去，而不需要绕路）\n\n可以直接转移到对应节点\n\n\n\n1类转移的贡献相当于下次走这种颜色时，可以少改变一条边的颜色\n\n即下一次转移2时，权值变为$S_{v,c}-w-w'$\n\n可以增加一个额外权值$-w$，然后对于下一个点$v$所有颜色为$c$的出边转移，这可以通过构建虚点解决\n\n实际上总权值就是$0$\n\n考虑到一种不合法的情况，即走回$u$，但是这样的转移权值就是$S_{v,c}-w'\\ge 0$\n\n非法情况无影响\n\n\n\n最终得到的转移就是一个非负边权的最短路图，可以跑$Dijkstra$解决\n\n总点数$\\leq n+2m$，总边数$\\leq 6m$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n\nchar IO;\nint rd(){\n\tint s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\n\nconst int N=5e5+10,INF=1e9+10;\n\nint n,m,k;\nstruct Edge{\n\tint v,c,w;\n};\nvector <Edge> G[N];\nint U[N],V[N],C[N],W[N];\n\nstruct Node{\n\tint u; ll d;\n\tbool operator < (const Node __) const {\n\t\treturn d>__.d;\n\t}\n};\npriority_queue <Node> que;\nll dis[N],S[N];\nvoid Upd(int u,ll d){\n\tif(dis[u]<=d) return;\n\tdis[u]=d,que.push((Node){u,d});\n}\nmap <int,int> st[N];\nvoid AddEdge(int u,int v,int c,int w){\n\tif(!st[u].count(c)) {\n\t\tst[u][c]=++k;\n\t\tG[u].pb((Edge){k,0,0});\n\t}\n\tint t=st[u][c];\n\tG[t].pb((Edge){v,c,w}),S[t]+=w;\n}\n\nvoid Dijkstra(){\n\tmemset(dis,63,sizeof dis);\n\tdis[1]=0,que.push((Node){1,0});\n\twhile(!que.empty()) {\n\t\tint u=que.top().u; ll d=que.top().d; que.pop();\n\t\tif(dis[u]<d) continue;\n\t\tif(u<=n) {\n\t\t\tfor(Edge dd:G[u]) {\n\t\t\t\tint t=dd.v;\n\t\t\t\tfor(Edge i:G[t]) {\n\t\t\t\t\tUpd(i.v,d+min((ll)i.w,S[t]-i.w));\n\t\t\t\t\tUpd(st[i.v][i.c],d);\n\t\t\t\t}\n\t\t\t}\n\t\t} else for(Edge i:G[u]) Upd(i.v,d+S[u]-i.w);\n\t}\n\tprintf(\"%lld\\n\",dis[n]<1e17?dis[n]:-1);\n}\n\nint main(){\n\tfreopen(\"robot.in\",\"r\",stdin),freopen(\"robot.out\",\"w\",stdout);\n\tn=rd(),m=rd(),k=n;\n\trep(i,1,m) {\n\t\tint u=rd(),v=rd(),c=rd(),w=rd();\n\t\tAddEdge(u,v,c,w),AddEdge(v,u,c,w);\n\t}\n\tDijkstra();\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["JOI"],"categories":["题解"]},{"title":"「USACO 2020.12 Platinum」Cowmistry ","url":"/articles/2021/02/22/b99a6032.html","content":"# 「USACO 2020.12 Platinum」Cowmistry \n\n看到样例解释突然就有了思路.jpg\n\n令$m=\\min\\{2^t|2^t>k\\}$，也就是$k$最高位+1\n\n对于数轴，按照$[im,(i+1)m)$分组，显然跨过分组的数之间异或$\\ge m>k$，不合法，扔掉\n\n对于每组，直接看做是$[0,m-1]$，此时令$d=\\frac{m} {2}$\n\n将$[0,m-1]$分为$[0,d-1],[d,m-1]$，显然两段之内的数相互异或的结果$<d$，一定合法\n\n也就是说，长度为$d$的段内随意选3个都合法\n\n下面考虑跨过$d$的贡献，显然是一边选一个，一边选两个，此时这些数之间的异或和$\\ge d$\n\n以左边选一个为例，令$k'=k-d$\n\n### $O(k\\log k)$\n\n考虑异或和中一定有$d$这一位，下面只需要对于$i\\in[0,d-1]$暴力统计出$[d,m]$中有多少个数$j$满足$i\\oplus j\\leq k'$\n\n可以前缀和之后$\\log k$做到，从高到低依次考虑$k$每一个为1的二进制位$i$，如果查询的数这一位和$x$相同，那么下面可以任意选择\n\n否则将$x\\rightarrow x\\oplus 2^i$\n\n实现如下\n\n```cpp\nint Que(int x,int *A,int k){\n\tint ans=0;\n\tdrep(i,19,0) if(k&(1<<i)) {\n\t\tint l=x&(~((1<<i)-1)),r=l+(1<<i)-1;\n\t\tans+=A[r]-A[l-1];\n\t\tx^=1<<i;\n\t}\n\treturn ans+A[x]-A[x-1];\n}\n```\n\n得到个数$c$之后，接下来就是为$x$在$c$里选择两个匹配，就是$\\sum \\frac{c(c-1)} {2}$\n\n由此得到一个$O(k\\log k)$做法，可以通过前三档数据\n\n```cpp\nnamespace part_klogk{\n\tconst int N=1<<20|10;\n\tint m,A[N],B[N],ans;\n\tint Que(int x,int *A,int k){\n\t\tint ans=0;\n\t\tdrep(i,19,0) if(k&(1<<i)) {\n\t\t\tint l=x&(~((1<<i)-1)),r=l+(1<<i)-1;\n\t\t\tans+=A[r]-A[l-1];\n\t\t\tx^=1<<i;\n\t\t}\n\t\treturn ans+A[x]-A[x-1];\n\t}\n\tvoid Solve(int l,int r) {\n\t\tint mid=(l+r)>>1;\n\t\tint c1=0,c2=0;\n\t\trep(i,l,mid) c1+=A[i];\n\t\trep(i,mid+1,r) c2+=A[i];\n\t\tans=(ans+D3(c1))%P,ans=(ans+D3(c2))%P;\n\t\trep(i,l,mid) if(A[i]) {\n\t\t\tint c=Que(i-l,B+mid+2,k-(m/2));\n\t\t\tans=(ans+1ll*c*(c-1)/2)%P;\n\t\t}\n\t\trep(i,mid+1,r) if(A[i]) {\n\t\t\tint c=Que(i-mid-1,B+l+1,k-(m/2));\n\t\t\tans=(ans+1ll*c*(c-1)/2)%P;\n\t\t}\n\t}\n\tvoid Solve() {\n\t\tfor(m=1;m<=k;) m<<=1;\n\t\trep(i,1,n) rep(j,L[i],R[i]) A[j]++;\n\t\trep(i,1,N-1) B[i]=B[i-1]+A[i-1];\n\t\trep(i,0,R[n]/m) Solve(i*m,(i+1)*m-1);\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n```\n\n\n\n\n\n$$\\ $$\n\n### $O(n\\log k-n\\log ^2 k)$\n\n考虑对于$k'$，问题降阶为求区间$a$中的每一个数 ， 在区间$b$中查询合法的个数$cnt_a$\n\n其中$a,b$区间可以认为对应相同的$[0,L-1]$，但是出现元素不同\n\n此时，继续采用上面的方法进行分组，分组对象变为两组区间\n\n令$m'=\\min\\{2^t|2^t>k'\\},d'=\\frac{m} {2}$，分组之后\n\n对于$[0,d'-1],[d',m-1]$，显然两段之内异或$\\leq d$，一定合法，加入答案$cnt_a$中\n\n对于跨过区间的贡献，用下面的方法处理\n\n左边区间对于右边区间继续递归进行查询，将得到的结果加上左边区间中数的个数\n\n右边区间继续对于左边区间递归进行查询，将得到的结果加上右边区间中数的个数\n\n问题不断降阶为子问题，会有$\\log k$层子问题\n\n每层子问题所有的区间可以分为$O(n)$段 **特殊** 的段\n\n其他的部分要么完全覆盖要么为空，这些部分可以快速求出\n\n发现答案如果用$(num,cnt)$表示当前查询结果为$num$的个数为$cnt$\n\n每层可以用$O(n)$个不同的二元对表示结果\n\n如此求得后，再自底向上合并得到答案\n\n$$ \\ $$\n\n$$ \\ $$\n\n### 关于实现\n\n如果真的按照上面的方法，一层层向下分裂区间，会面临着常数大，难以实现的问题\n\n考虑将每个区间$[L_i,R_i]$插入线段树$[0,2^{30}-1]$\n\n显然得到$O(n\\log k)$个节点，在底层完全覆盖的节点打上标记\n\n先递归进行第一层的分裂区间操作，对于打上标记的节点可以分成$\\frac{r-l+1} {m}$个完全覆盖区间\n\n这些完全覆盖区间的答案可以$O(1)$求出\n\n$$ \\ $$\n\n分裂完成后，每次查询的区间对用$(a,b,L,k,f1,f2)$表示\n\n其中$a$表示查询区间对应节点，$b$表示被查询区间对应节点\n\n$L$表示区间长度，$f1,f2$表示$a,b$是否继承到上层的完全覆盖标记\n\n如此每次合并$(ls_a,rs_b),(rs_a,ls_b)$的查询结果，加上另一边的贡献 即可\n\n当$b$为空或者为完全覆盖时，答案可以$O(1)$得到\n\n当$a$为空时，可以得到空答案\n\n从这样的底层向上合并，每个元素被合并次数$O(\\log k)$\n\n$$ \\ $$\n\n没有仔细分析复杂度，应该就是$O(n\\log k-n\\log ^2 k)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair <int,int> Pii;\n#define mp make_pair\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\nchar IO;\nint rd(){\n    int s=0;\n    while(!isdigit(IO=getchar()));\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return s;\n}\n\nconst int N=2e4+10,P=1e9+7,I2=(P+1)/2,I3=(P+1)/3,U=1<<30;\n\nint n,m,k;\nint L[N],R[N];\nint Check(){\n    for(int i=k;i;i>>=1) if(~i&1) return 0;\n    return 1;\n}\nint D3(int n){ return 1ll*n*(n-1)/2%P*(n-2)%P*I3%P; }\nint D2(int n){ return 1ll*n*(n-1)/2%P; }\n\nconst int M=N*60;\nint s[M],ls[M],rs[M],t[M],cnt,rt;\n//在线段树上插入节点，打上标记，同时处理出size便于下面计算\nvoid Ins(int &p,int l,int r,int ql,int qr){\n    if(!p) p=++cnt;\n    s[p]+=min(qr,r)-max(ql,l)+1;\n    if(ql<=l && r<=qr) { t[p]=1; return; }\n    int mid=(l+r)>>1;\n    if(ql<=mid) Ins(ls[p],l,mid,ql,qr);\n    if(qr>mid) Ins(rs[p],mid+1,r,ql,qr);\n}\n\nint ans;\n// O(1)求出m\nint Up(int k){ return 1<<(32-__builtin_clz(k)); }\ntypedef vector <Pii> V;\nV Union(const V &A,const V &B){\n    int p1=0,p2=0,s1=A.size(),s2=B.size();\n    V R;\n    // 这里是否归并并不影响复杂度\n    while(p1<s1 || p2<s2) {\n        if(p1<s1 && (p2==s2||A[p1]<B[p2])) {\n            if(R.size() && R.back().first==A[p1].first) R.back().second+=A[p1].second;\n            else R.pb(A[p1]);\n            p1++;\n        } else {\n            if(R.size() && R.back().first==B[p2].first) R.back().second+=B[p2].second;\n            else R.pb(B[p2]);\n            p2++;\n        }\n    }\n    return R;\n}\nV Calc(int a,int b,int L,int k,int f1,int f2){\n    f1|=t[a],f2|=t[b];\n    V Res;\n    // 底层情况O(1)解决\n    if(!f1 && !a) return Res;\n    if(f2) return Res.pb(mp(k+1,f1?L:s[a])),Res;\n    if(!b) return Res.pb(mp(0,f1?L:s[a])),Res;\n    int m=Up(k);\n    // L>m说明还要继续进行分裂\n    if(L>m) return Union(Calc(ls[a],ls[b],L/2,k,f1,f2),Calc(rs[a],rs[b],L/2,k,f1,f2));\n    // 进入降阶子问题，左查右，右查左\n    k-=m/2;\n    V A=Calc(ls[a],rs[b],L/2,k,f1,f2);\n    for(auto &i:A) i.first+=f2?L/2:s[ls[b]];\n    V B=Calc(rs[a],ls[b],L/2,k,f1,f2);\n    for(auto &i:B) i.first+=f2?L/2:s[rs[b]];\n    return Union(A,B);\n}\n\nint cm;\n// 第一次分裂\nvoid Solve(int p,int L){\n    if(!p) return;\n    // 完全覆盖的部分答案可以快速求出\n    if(t[p]) { cm+=L/m; return; }\n    // 已经完成分裂，此时进入第一层子问题\n    if(L==m) {\n        // 贡献分为 \n        // 左选3 ， 右选 3\n        ans=(ans+D3(s[ls[p]]))%P,ans=(ans+D3(s[rs[p]]))%P;\n        // 左1，右2\n        V A=Calc(ls[p],rs[p],m/2,k-m/2,0,0);\n        // 左2，右1\n        V B=Calc(rs[p],ls[p],m/2,k-m/2,0,0);\n        for(auto i:A) ans=(ans+1ll*D2(i.first)*i.second)%P;\n        for(auto i:B) ans=(ans+1ll*D2(i.first)*i.second)%P;\n        return;\n    }\n    Solve(ls[p],L/2),Solve(rs[p],L/2);\n}\nint main(){\n    n=rd(),k=rd();\n    rep(i,1,n) { int l=rd(),r=rd(); Ins(rt,0,U-1,l,r); }\n    m=Up(k),Solve(rt,U);\n    // O(1)求得完全覆盖部分的答案\n    int t=(2ll*D3(m/2)+1ll*D2(k-m/2+1)*m)%P;\n    ans=(ans+1ll*cm*t)%P;\n    printf(\"%d\\n\",ans);\n}\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","USACO"],"categories":["题解"]},{"title":"「USACO 2020.12 Platinum」Spaceship","url":"/articles/2021/02/22/c4a72629.html","content":"# 「USACO 2020.12 Platinum」Spaceship\n\n看到题目第一个想到的是：按照路径长度可以确定按钮次数和路径次数\n\n然而路径长度是$2^k$级别的。。\n\n下文认为$n,q,k$同阶\n\n既然无法考虑长度，那么就直接在$dp$时将路径作为状态压入\n\n令$dp_{i,s,t}$表示前面$i$个按钮未按过，从$s$走到$t$的路径数\n\n显然$dp_{i}$可以看做一个类似矩阵的转移，设邻接矩阵为$E$\n\n那么得到$dp_{i}=dp_{i-1}+dp_{i-1}\\cdot E\\cdot dp_{i-1}$\n\n($dp_i$不一定按了$i$这个按钮，所以考虑按或者不按)\n\n那么对于$b_s,b_t$的情况，考虑把操作序列分成两段\n\n显然操作序列有唯一一个按过恰好一次的最大的按钮$max$，可以在这里将操作序列分成两段\n\n处理出$b_s$到$max$和$max$到$b_t$的两部分方案数合并即可\n\n以处理$b_s\\rightarrow max$为例\n\n类似上面的操作，令$F_{i,j}$表示最大按钮为$i$，且按过$i$之后没有按过其他按钮，停留在$j$的方案数 ($F_i$是一个向量)\n\n初始显然有$F_{b_s,s}=1$\n\n$\\displaystyle i>b_s,F_{i}=\\sum_{j<i} F_{j}\\cdot dp_{j-1}\\cdot E$(按过$j$之后可以继续按$[1,j-1]$)\n\n前缀和即可，复杂度为$O(n^3)$\n\n同理处理出$max\\rightarrow b_t$的权值合并即可\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nconst int N=62,P=1e9+7,INF=1e9+10;\n\nint n,m,q;\nstruct Mat{\n\tint a[N][N];\n\tvoid clear(){ memset(a,0,sizeof a); }\n\tMat operator * (const Mat &x) const {\n\t\tMat res; res.clear();\n\t\trep(i,1,n) rep(j,1,n) if(a[i][j]) rep(k,1,n) res.a[i][k]=(res.a[i][k]+1ll*a[i][j]*x.a[j][k])%P;\n\t\treturn res;\n\t}\n\tMat operator + (const Mat &x) const {\n\t\tMat res;\n\t\trep(i,1,n) rep(j,1,n) res.a[i][j]=a[i][j]+x.a[i][j],Mod1(res.a[i][j]);\n\t\treturn res;\n\t}\n} I,E,dp[N];\nint F[N][N],G[N][N];\nint S[N][N];\n\nint main(){\n\tfreopen(\"spaceship.in\",\"r\",stdin),freopen(\"spaceship.out\",\"w\",stdout);\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\trep(i,1,n) I.a[i][i]=1;\n\trep(i,1,n) rep(j,1,n) scanf(\"%1d\",&E.a[i][j]);\n\tdp[0]=I;\n\trep(i,1,m) dp[i]=dp[i-1]+dp[i-1]*E*dp[i-1];\n\twhile(q--) {\n\t\tint bs,s,bt,t; scanf(\"%d%d%d%d\",&bs,&s,&bt,&t);\n\t\tmemset(F,0,sizeof F),memset(G,0,sizeof G);\n\t\tmemset(S,0,sizeof S);\n\t\tF[bs][s]=1;\n\t\trep(i,1,n) S[bs][i]=dp[bs-1].a[s][i];\n\t\trep(i,bs+1,m) {\n\t\t\trep(a,1,n) if(S[i-1][a]) rep(b,1,n) F[i][b]=(F[i][b]+1ll*S[i-1][a]*E.a[a][b])%P;\n\t\t\trep(a,1,n) S[i][a]=S[i-1][a];\n\t\t\trep(a,1,n) if(F[i][a]) rep(b,1,n) S[i][b]=(S[i][b]+1ll*F[i][a]*dp[i-1].a[a][b])%P;\n\t\t}\n\n\t\tmemset(S,0,sizeof S);\n\t\tG[bt][t]=1;\n\t\trep(i,1,n) S[bt][i]=dp[bt-1].a[i][t];\n\t\trep(i,bt+1,m) {\n\t\t\trep(a,1,n) rep(b,1,n) G[i][a]=(G[i][a]+1ll*S[i-1][b]*E.a[a][b])%P;\n\t\t\trep(a,1,n) S[i][a]=S[i-1][a];\n\t\t\trep(a,1,n) rep(b,1,n) S[i][a]=(S[i][a]+1ll*G[i][b]*dp[i-1].a[a][b])%P;\n\t\t}\n\n\t\tint ans=0;\n\t\trep(i,1,m) rep(j,1,n) ans=(ans+1ll*F[i][j]*G[i][j])%P;\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","USACO"],"categories":["题解"]},{"title":"「USACO 2020.12 Platinum」Sleeping Cows","url":"/articles/2021/02/22/998fe0.html","content":"# 「USACO 2020.12 Platinum」Sleeping Cows\n\n写容斥就输了。。\n\n为每个牛棚考虑牛，从大到小，考虑每一个牛棚是否匹配\n\n$dp_{i,j,f}$表示后$i$个牛棚中有$j$个钦定要匹配但是还未匹配的牛棚，$f=0/1$表示是否存在一个牛棚未选\n\n每次移动$i$，会有一部分牛不能继续匹配\n\n如果$f=1$，那么这部分牛必须被全部后面的$j$个牛棚中某一些匹配，否则不合法\n\n如果$f=0$，这一部分可以随便匹配一定数量的牛\n\n用组合数维护转移权值即可\n\n```cpp\n\n\nconst int N=3010,P=1e9+7;\n\nint n;\nint dp[N][N][2],I[N],J[N],C[N][N];\nint A[N],B[N];\nvoid Add(int &u,int x){\n\tu+=x,Mod1(u);\n}\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nint main(){\n\tfreopen(\"cow.in\",\"r\",stdin),freopen(\"cow.out\",\"w\",stdout);\n\tn=rd();\n\trep(i,1,n) B[i]=rd();\n\trep(i,1,n) A[i]=rd();\n\tsort(A+1,A+n+1),sort(B+1,B+n+1);\n\tint p=n;\n\tdp[n+1][0][0]=1;\n\trep(i,0,n) rep(j,C[i][0]=1,i) C[i][j]=(C[i-1][j]+C[i-1][j-1])%P;\n\trep(i,J[0]=1,n) J[i]=1ll*J[i-1]*i%P;\n\tI[n]=qpow(J[n]);\n\tdrep(i,n,1) I[i-1]=1ll*I[i]*i%P;\n\t\n\tdrep(i,n,0) {\n\t\tint c=0;\n\t\twhile(p && B[p]>A[i]) c++,p--;\n\t\trep(j,0,n-i) {\n\t\t\trep(k,0,min(j,c)) {\n\t\t\t\tint t=1ll*dp[i+1][j][0]*C[c][k]%P*C[j][k]%P*J[k]%P;\n\t\t\t\tAdd(dp[i][j-k][1],t),Add(dp[i][j-k+1][0],t);\n\t\t\t\tif(k==c) {\n\t\t\t\t\tt=1ll*dp[i+1][j][1]*C[j][k]%P*J[k]%P;\n\t\t\t\t\tAdd(dp[i][j-k][1],t),Add(dp[i][j-k+1][1],t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tint ans=(dp[0][0][0]+dp[0][0][1])%P;\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n","tags":["Atcoder","USACO"],"categories":["题解"]},{"title":"「ROI 2016 Day2」二指禅 ","url":"/articles/2021/02/21/a2107955.html","content":"# 「ROI 2016 Day2」二指禅 \n\n考虑对于每个点，有前缀和后缀两种转移\n\n对于两种转移分别建立$\\text{trie}$树，并且维护最小权值，对于$dp_i$，可以匹配一段后缀从$j<i$得到\n\n也可以匹配一段前缀更新$j>i$，分别$O(n)$枚举在两棵树上匹配即可完成转移\n\n暴力转移复杂度为$O(n^2)$\n\n考虑优化转移效率，以$dp_i$匹配某一段前缀向$dp_j(j>i)$转移为例\n\n### Part1 考虑求出最大的$j$\n\n这个问题实际上就是求出每一个后缀的最大前缀匹配，也就是一个$\\text{exkmp}$问题\n\n而且这题是一个多模板串版本，并不能用$\\text{exkmp}$解决\n\n#### Solution 1\n\n是把所有前缀hash值取出来，放到$\\text{hash_table}$里，然后二分长度+$\\text{hash_table}$查询，复杂度为$O(\\log L)$\n\n#### Solution 2\n\n树剖+hash\n\n对于$\\text{trie}$树树剖并且预处理hash值，重链上二分hash匹配，轻儿子暴力走，复杂度为$O(\\log ^2L)$\n\n如果使用全局平衡二叉树，可以做到单次查询复杂度为$O(\\log L)$，常数应该远小于$\\text{hash_table}$\n\n$$ \\ $$\n\n$$ \\ $$\n\n### Part2 在$j_{max}$基础上转移\n\n考虑先求出最大的$j$之后，得到其对应的$\\text{trie}$树节点$u$，在的祖先$u$中，每一种不同的权值更新一次\n\n显然每一个祖先长度不同，因此最多只有$O(\\sqrt L)$中不同的权值\n\n因此可以for过去更新每一种权值，每次更新是一段区间，可以用树状数组维护\n\n但是实际上极限情况下段极短，可以暴力枚举区间，所以并不是真的$O(\\sqrt L\\log L)$\n\n比较容易说明复杂度的优化方法是：\n\n采用分块$O(1)$更新，$O(\\sqrt L)$查询\n\n这样可以做到稳定$O(\\sqrt L)$完成转移\n\n$$\\ $$\n\n因此预处理复杂度为$O(m\\log L-m\\log ^2L)$，转移复杂度为$O(m\\sqrt L-m\\sqrt L\\log L)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\n\nconst int N=3e5+10,INF=1e9+10,D=6;\n\nint n,m;\nchar T[N];\nint Pow1[N],Pow2[N];\nint S[N];\nconst ll K1=19260817,P1=114514;\nconst ll K2=1e9+13,P2=1919810;\n\nstruct Solver{\n    int S[N];\n    int trie[N][2],s[N],cnt,H1[N],H2[N];\n    int fa[N],top[N],sz[N],h1[N],h2[N],son[N],lst[N],bot[N],L[N],id[N],dfn,dep[N];\n    // lst[i] 记录祖先中第一个s[f]!=s[i]的节点\n    void dfs(int u){\n        sz[u]=1;\n        if(s[u]==s[fa[u]]) lst[u]=lst[fa[u]];\n        else lst[u]=fa[u];\n        rep(i,0,1) {\n            int v=trie[u][i];\n            if(!v) continue;\n            fa[v]=u,dep[v]=dep[u]+1;\n            h1[v]=(h1[u]*K1+i+1)%P1;\n            h2[v]=(h2[u]*K2+i+1)%P2;\n            dfs(v);\n            sz[u]+=sz[v];\n            if(son[u]==0 || sz[v]>sz[son[u]]) son[u]=v;\n        }\n    }\n    void dfs(int u,int t){\n        id[L[u]=++dfn]=u;\n        bot[top[u]=t]=u; if(son[u]) dfs(son[u],t);\n        for(int v:trie[u]) if(v&&v!=son[u]) dfs(v,v);\n    }\n    void Ins(char *T,int l,int w){\n        int now=0;\n        rep(i,1,l) {\n            int c=T[i]-'0';\n            if(!trie[now][c]) s[trie[now][c]=++cnt]=2e9;\n            cmin(s[now=trie[now][c]],w);\n        }\n    }\n    void Init(){\n        rep(i,1,n) {\n            H1[i]=(H1[i-1]*K1+S[i]+1)%P1;\n            H2[i]=(H2[i-1]*K2+S[i]+1)%P2;\n        }\n        dfs(0),dfs(0,0);\n    }\n    int Que(int i) {\n        // 求i 的最长匹配位置\n        int u=0;\n        while(i<=n) {\n            if(!trie[u][S[i]]) break;\n            if(trie[u][S[i]]!=son[u]){ u=trie[u][S[i++]]; continue; }\n            int l=1,r=min(n-i+1,dep[bot[top[u]]]-dep[u]),res=1;\n            while(l<=r){\n                int mid=(l+r)>>1;\n                if( (H1[i+mid-1]-1ll*H1[i-1]*Pow1[mid]%P1+P1)%P1 ==  (h1[id[L[u]+mid]]-1ll*h1[u]*Pow1[mid]%P1+P1)%P1 &&\n                        (H2[i+mid-1]-1ll*H2[i-1]*Pow2[mid]%P2+P2)%P2 == (h2[id[L[u]+mid]]-1ll*h2[u]*Pow2[mid]%P2+P2)%P2)\n                    l=mid+1,res=mid;\n                else r=mid-1;\n            }\n            i+=res,u=id[L[u]+res];\n        }\n        return u;\n    }\n} X,Y;\n\nstruct BIT{\n    ll s[N];\n    void Init(){\n        memset(s,127,sizeof s);\n    }\n    void Add(int p,ll x){\n        while(p) cmin(s[p],x),p-=p&-p;\n    }\n    ll Que(int p){\n        ll res=1e18;\n        while(p<=n) cmin(res,s[p]),p+=p&-p;\n        return res;\n    }\n} TX,TY;\nll dp[N];\n\nint main(){\n    rep(i,Pow1[0]=Pow2[0]=1,N-1) {\n        Pow1[i]=Pow1[i-1]*K1%P1;\n        Pow2[i]=Pow2[i-1]*K2%P2;\n    }\n    scanf(\"%d%d%*d\",&n,&m);\n    rep(i,1,n) scanf(\"%1d\",S+i),X.S[i]=Y.S[n-i+1]=S[i];\n    rep(t,1,m) {\n        int w,l; scanf(\"%d%s\",&w,T+1),l=strlen(T+1);\n        X.Ins(T,l,w),reverse(T+1,T+l+1),Y.Ins(T,l,w);\n    }\n    X.Init(),Y.Init();\n\n    rep(i,1,n) dp[i]=1e18;\n    TX.Init(),TY.Init();\n    TY.Add(1,0);\n    rep(i,0,n) {\n        // 暴力维护转移\n        if(i) {\n            cmin(dp[i],TX.Que(i));\n            int u=Y.Que(n-i+1);\n            while(u) {\n                int l=Y.dep[Y.lst[u]]+1,r=Y.dep[u];\n                if(r-l+1<=D) rep(j,l,r) cmin(dp[i],dp[i-j]+Y.s[u]);\n                else cmin(dp[i],TY.Que(i-r+1)+Y.s[u]);\n                u=Y.lst[u];\n            }\n        }\n        TY.Add(i+1,dp[i]);\n        if(i==n||dp[i]==1e18) continue;\n        int u=X.Que(i+1);\n        while(u) {\n            int l=X.dep[X.lst[u]]+1,r=X.dep[u];\n            if(r-l+1<=D) rep(j,l,r) cmin(dp[i+j],dp[i]+X.s[u]);\n            else TX.Add(i+r,dp[i]+X.s[u]);\n            u=X.lst[u];\n        }\n    }\n    printf(\"%lld\\n\",dp[n]<1e18?dp[n]:-1);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["ROI"],"categories":["题解"]},{"title":"「ROI 2016 Day1」人烟之山 ","url":"/articles/2021/02/20/45fb920a.html","content":"# 「ROI 2016 Day1」人烟之山 \n\n题目大意：\n\n有$n$段折线，$m$个查询点$A$（在折线以上），设折线拐点为$X_i$\n\n求折线上在查询点投影两边最近的位置$B$，且直线$AB$与折线有非边缘的交点 (即从$A$点看过来会被折线遮住)\n\n题目分析：\n\n$B,C$点满足的条件就是其旁边的直线$L$在$x_A$处的值$>y_A$\n\n![Snipaste_2021-02-20_13-43-59.png](https://i.loli.net/2021/02/20/rguOJLKFG89Ipt2.png)\n\n即找到最近的红色直线\n\n## Solution1 $O(n\\log ^2n)$\n\n以求左边为例\n\n考虑二分答案，求出拐点为$X_i,i\\ge mid$的直线中是否存在红色直线\n\n也就是求最大值是否$>y_A$，维护直线最大值，并且区间查询，可以暴力可持久化李超树来解决\n\n因为是求左边的，所以每条直线更新的范围$>X_i$，李超树区间更新复杂度为$O(\\log ^2n)$\n\n李超树查询复杂度为$O(\\log n)$,加上二分，查询为$O(\\log ^2n)$\n\n$$ \\ $$ \n\n### Solution2 $O(n\\log n)$\n\n依然考虑二分，但是这次考虑在线段树上二分\n\n对于所有的$X_i$建立线段树，区间$[L,R]$内维护一个$X_i,i\\in [L,R]$的上凸包，静态维护最大值\n\n凸包可以归并子节点来建立，预处理复杂度为$O(n\\log n)$\n\n如果查询直接在凸包上二分，复杂度会增加一个$\\log n$\n\n解决方法是：将所有查询的$x_A$排序，然后在凸包上查询时就可以做到线性\n\n因此复杂度为$O(n\\log n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\nchar buf[200000],*p1,*p2;\n#define getchar() (((p1==p2)&&(p2=(p1=buf)+fread(buf,1,200000,stdin))),*p1++)\nchar IO;\nint rd(){\n\tint s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=4e5+10,U=1e9+10;\n\nint n,m,K[N],X[N],L[N],R[N];\nll Y[N];\nstruct Que{\n\tint x,y,id;\n\tbool operator < (const Que __) const {\n\t\treturn x<__.x;\n\t}\n} Q[N];\nstruct Node{\n\tint k; ll b;\n\tll operator [] (const ll x) const {\n\t\treturn 1ll*k*x+b;\n\t}\n\tfriend db Cross(Node x,Node y){ return 1.0*(y.b-x.b)/(x.k-y.k); }\n\tbool operator < (const Node __) const {\n\t\treturn k<__.k||(k==__.k && b<__.b);\n\t}\n}; \nvector <Node> H[N<<2];\nvector <Node> ::iterator P[N<<2];\nvoid Build(int p,int l,int r){\n\tif(l==r) return H[p].pb((Node){K[l],Y[l]-1ll*K[l]*X[l]}),P[p]=H[p].begin(),void();\n\tint mid=(l+r)>>1;\n\tBuild(p<<1,l,mid),Build(p<<1|1,mid+1,r);\n\tint p1=0,s1=H[p<<1].size(),p2=0,s2=H[p<<1|1].size(),R=-1;\n\tauto Ins=[&](Node L) {\n\t\twhile(~R && H[p][R].b<=L.b) R--,H[p].pop_back();\n\t\twhile(R>0 && Cross(H[p][R],H[p][R-1])>=Cross(H[p][R],L)-1e-8) R--,H[p].pop_back();\n\t\tH[p].pb(L),R++;\n\t};\n\twhile(p1<s1 || p2<s2) {\n\t\tif(p1<s1 && (p2==s2 || H[p<<1][p1]<H[p<<1|1][p2])) Ins(H[p<<1][p1++]);\n\t\telse Ins(H[p<<1|1][p2++]);\n\t}\n\tP[p]=H[p].begin();\n}\n\nll Que(int p,int x){\n\twhile(P[p]+1!=H[p].end() && (*(P[p]+1))[x]>=(*P[p])[x]) P[p]++;\n\treturn (*P[p])[x];\n}\nint QueL(int p,int l,int r,int x,int qx,int y){\n\tif(x<l || Que(p,qx)<=y) return 0;\n\tif(l==r) return l;\n\tint mid=(l+r)>>1,t;\n\tif(x>mid && (t=QueL(p<<1|1,mid+1,r,x,qx,y))) return t;\n\treturn QueL(p<<1,l,mid,x,qx,y);\n}\nint QueR(int p,int l,int r,int x,int qx,int y){\n\tif(x>r || Que(p,qx)<=y) return n+1;\n\tif(l==r) return l;\n\tint mid=(l+r)>>1,t;\n\tif(x<=mid && (t=QueR(p<<1,l,mid,x,qx,y))<=n) return t;\n\treturn QueR(p<<1|1,mid+1,r,x,qx,y);\n}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,1,n) {\n\t\tX[i]=X[i-1]+rd(),K[i]=rd();\n\t\tY[i]=Y[i-1]+1ll*(X[i]-X[i-1])*K[i];\n\t}\n\trep(i,1,m) Q[i].x=rd(),Q[i].y=rd(),Q[i].id=i;\n\tsort(Q+1,Q+m+1);\n\tBuild(1,1,n);\n\tint p=1;\n\trep(i,1,m) {\n\t\twhile(p<=n && X[p]<Q[i].x) p++;\n\t\tL[Q[i].id]=QueL(1,1,n,p-1,Q[i].x,Q[i].y);\n\t\tR[Q[i].id]=QueR(1,1,n,p+(X[p]==Q[i].x),Q[i].x,Q[i].y);\n\t}\n\trep(i,1,m) printf(\"%d %d\\n\",X[L[i]],X[R[i]-1]);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["ROI"],"categories":["题解"]},{"title":"「GDOI2020模拟赛day2」我的朋友们","url":"/articles/2021/02/18/2c8a1d3d.html","content":"# 「GDOI2020模拟赛day2」我的朋友们\n\n默认翻转了$a_i$顺序，下文多项式省略$(x)$\n\n设当前区间为$(i-L,i]$到最终结束的期望步数为$dp_i$\n\n令$A_i=a_ix+1-a_i$\n\n令$P_i=\\prod_{j\\in(i-L,i]}A_j$\n\n令$F_i=\\sum_{j=1}^i dp_jx^j$\n\n令$\\displaystyle G_i=F_{i-1}P_i,dp_i=\\frac{[x^i]G_i} {coef_i}$\n\n其中常数$coef_i=1-[x^0]P_i=1-\\prod_{j\\in(i-L,i]}(1-a_j)$，容易预处理得到\n\n用分治$\\text{NTT}$，过程中维护\n\n$P_{l,r}=\\prod_{j\\in(r-L,l]}A_j$\n\n$\\displaystyle G_{l,r}=F_{l-1}P_{l,r}$\n\n显然$G_{i,i}=G_i$\n\n分治转移如下：\n\n$\\displaystyle G_{l,mid}=G_{l,r}\\prod_{j\\in (mid-L,min(l,r-L)]} A_j$\n\n$P_{l,mid}=P_{l,r}\\prod_{j\\in (mid-L,min(l,r-L)]} A_j$\n\n先求出$G_{l,mid}$\n\n$P_{mid+1,r}=P_{l,r}\\prod_{j\\in (max(r-L,l),mid+1]} A_j$\n\n$\\displaystyle G_{mid+1,r}=(G_{l,r}+(F_{mid}-F_{l-1})P_{l,r})\\prod_{j\\in (max(r-L,l),mid+1]} A_j$\n\n\n\n归纳上述过程，发现实际上同步维护的部分只需要维护\n\n$G_{l,r}$的$[l-(r-l),r]$项，$P_{l,r}$的$[0,r-l]$项\n\n只需要实现\n\n通过$G_{l,r}$的$[l-(r-l),r]$项得到$G_{l,mid}$的$[l-(mid-l),mid]$，以及$G_{mid+1,r}$的$[l,r]$\n\n通过$P_{l,r}$的$[0,r-l]$得到$P_{l,mid}$的$[0,mid-l]$，$P_{mid+1,r}$的$[0,r-mid-1]$\n\n初始状态\n\n$P_{L,n}=\\prod_{j\\in(n-L,L]}A_j$\n\n$G_{L,n}=0$\n\n在分治过程中有非常多的$P_{l,r}$都是空的。。\n\n\n\n可以分治$\\text{NTT}$预处理出转移系数$\\displaystyle \\prod_{i=l}^r A_i$，或者用记忆化暴力求出，复杂度为$O(n\\log ^2n)$\n\n在转移过程中维护的部分长度与$r-l$同阶，因此复杂度为$O(n\\log^2 n)$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["各省OI"],"categories":["题解"]},{"title":"「ROI 2019 Day2」模式串查找 (口胡)","url":"/articles/2021/02/17/75009384.html","content":"# 「ROI 2019 Day2」模式串查找 (口胡)\n\n设$S=\\sum |w_i|$\n\n显然我们需要一个树形数据结构来维护题目中添加字符的操作\n\n归纳一下，需要实现的操作就是：\n\n1.添加一个新串\n\n2.在当前串中分裂一段区间$[L,R]$\n\n3.将一个串复制$k$次\n\n将每一个单字符视为一个节点，考虑用一个可持久化的平衡树来维护上述操作，比如可持久化非旋$\\text{Treap}$\n\n题解中给出的2-3-Tree不知道效果怎么样\n\n2,3操作增加的数量为$\\log$级别，最终的节点总数为$O(S+n\\log S)$\n\n接下来需要实现的操作是合并两个子串的信息，显然在合并时计算跨过两个节点的串匹配模板串的次数\n\n容易想到记录后缀匹配的$kmp$指针，但是这样的指针难以完成合并操作\n\n为了计算这个，我们需要维护这个串的前缀/后缀 在 原串上最长的匹配子段 \n\n此时一个节点的信息可以用$(l1,r1),(l2,r2),k$来表示，其中$k$标记了这个串是否整个出现在模板串中\n\n合并子串$A,B$信息：\n\n1.求出前缀/后缀匹配，以前缀为例：\n\n1-1.如果$A$无法完全匹配，则匹配前缀为$A$的匹配前缀\n\n1-2.$A$能够完全匹配，设$A$在原串对应$L,R$，$B$的最长匹配前缀在模板串匹配起始位置为$P$\n\n我们需要在$[L,R]$之后借上$P$开始的一段后缀，而$[L,R]$出现在模板串中的位置对应着后缀数组上一段$rank$区间\n\n取模板串反向后缀数组，求出与$R$匹配长度超过$R-L+1$的$rank$区间$[l,r]$\n\n则我们需要找到$[l,r]$中$sa[i]+1$与$P$最长的$LCP$，显然是一个求临近$rank$的问题，可以在线主席树二分解决\n\n由此得到最长前缀为$A$串再加上额外匹配得到的部分\n\n$O(\\log m)$完成\n\n$$ \\ $$\n\n2.求出跨过两个串的完美匹配个数\n\n容易得到前串后缀对应的$\\text{kmp}$指针，后串前缀对应反向的$\\text{kmp}$指针\n\n实际上就是求出这两个指针不断失配时相加恰好完全匹配的个数\n\n注意到，实际上这个询问是完全可以**离线**的\n\n可以通过在线得到的匹配情况，离线得到询问得到询问答案，再从叶子开始重新计算每个节点的答案\n\n比较暴力的做法是：\n\n建立两棵$\\text{kmp}$树，在第一棵树上$\\text{dfs}$，加入祖先对应的位置，然后再第二棵树上查询祖先匹配的个数\n\n可以用$\\text{dfs}$序+差分树状数组维护，复杂度为$O(\\log m)$\n\n$$  \\ $$\n\n因此总体复杂度为$O((S+n\\log S)\\log m)$  ~~实际上常数非常大？~~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["ROI"],"categories":["题解"]},{"title":"「ROI 2018 Day 2」无进位加法","url":"/articles/2021/02/16/2e6ebc78.html","content":"# 「ROI 2018 Day 2」无进位加法\n\n题目大意：\n\n给出二进制数$a_1,\\ldots a_n$，对于$b_1\\ldots b_n$\n\n满足$a_i\\leq b_i$，$\\bigoplus b_i=\\sum b_i$，其中$\\bigoplus $为异或和\n\n求$\\sum b_i$最小值\n\n设长度量级为$N=\\sum len(a_i)$\n\n### $O(N^2-N^3)$ ， 从高到低确定答案的每一个位\n\n枚举当前位为0，下面的位为1，贪心确定是否存在方案\n\n检查一个答案是否合法：\n\n动态维护一个倒序的$a_i$集合，从高到低考虑每一个位置\n\n1.如果当前位为0：\n\n如果$a_i$中存在大于等于这一位的数，非法\n\n2.如果当前位为1：\n\n2-1.如果$a_i$中存在2个当前位为1的数，非法\n\n2-2.如果$a_i$中存在恰好一个，则将这个1用于这个$a_i$，并将$a_i$去掉最高位后放回集合\n\n2-3.不存在，用这个$1$删除最大的一个$a_i$\n\n实际看来，这个贪心本身效率并不高\n\n$$\\ $$\n\n### 优化1：快速确定答案最高位的可能范围\n\n令$B=\\max\\{ len(a_i)+i-1\\}$\n\n则$len(Ans)\\in[B,B+1]$\n\n上下界均可以由上面的贪心模拟得到\n\n$$  \\ $$\n\n### 优化2：快速维护$a_i$倒序\n\n显然在不断更改的过程中，当前的$a_i$一定是原先的某一个$a_i$的一段后缀\n\n考虑将所有这样的后缀排序，为了方便，用每一个最高的1来表示一个合法的后缀\n\n显然可以先按照后缀长度分类，同长度的后缀，按照后缀中下一个1出现的位置排序\n\n也就是一个类似基数排序个过程，额外维护每一个后缀中下一个出现的$1$所对应的后缀即可\n\n预处理复杂度为$O(N\\log N)$\n\n同时，也可以用线段树快速维护插入/删除的排名，得到$B$的值，单次操作复杂度$O(\\log N)$\n\n$$ \\ $$\n\n### 优化3\n\n称满足$len(a_i)+i-1=B$的$i$为$\\text{critical number}$\n\n令$p$为最小的$\\text{critical number}$，也就是在贪心过程中第一个出现情况2-1./2-2.的位置\n\n决策答案为$B$还是为$B+1$，也就是决策\n\n是用$len(a_p)$这个位置删除$a_p$的最高位，还是用$len(a_p)+1$的位置删除$a_p$\n\n($[1,p-1]$的部分一定会被删掉)\n\n$\\text{intended solution}$采用暴力递归来完成确定每一位的这个操作\n\n```pseudocode\nFunction Solve(Limit) Limit为当前可以使用的最高位的1\n\t求得 B,p\n\t删除 a[1,p-1]\n\t删除 a[p]最高位\n\tif B<=Limit and Solve(p-1) then\n\t\tans[len(a[p]),B]=1\n\t\treturn True\n\t删除a[p]\n\tif B+1<=Limit and Solve(p) then \n\t\tans[len(a[p])+1,B+1]=1\n\t\treturn True\n\telse return False\nend\n```\n\n至于复杂度，官方题解给出为$O(N)$次递归和删除/加入操作，最终复杂度为$O(N\\log N)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,const T &b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,const T &b){ ((a<b)&&(a=b)); }\nchar IO;\nint rd(){\n\tint s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\n\ntypedef vector <int> V;\nconst int N=3e5+10,INF=1e9+10;\n\nint n,m,I[N],L;\nchar s[N];\nint fir[N],nxt[N],rk[N],len[N],id[N];\nV A[N];\n\nstruct Affirmation_Of_My_Existence{\n\tint s[N<<2],t[N<<2];\n\tvoid Down(int p){\n\t\trep(v,p<<1,p<<1|1) t[v]+=t[p],s[v]+=t[p];\n\t\tt[p]=0;\n\t}\n\tvoid Upd(int p,int l,int r,int ql,int qr,int x) {\n\t\tif(ql>qr) return;\n\t\tif(ql<=l && r<=qr) {\n\t\t\ts[p]+=x,t[p]+=x;\n\t\t\treturn;\n\t\t}\n\t\tDown(p);\n\t\tint mid=(l+r)>>1;\n\t\tif(ql<=mid) Upd(p<<1,l,mid,ql,qr,x);\n\t\tif(qr>mid) Upd(p<<1|1,mid+1,r,ql,qr,x);\n\t\ts[p]=max(s[p<<1],s[p<<1|1]);\n\t}\n\tvoid Build(int p,int l,int r){ \n\t\ts[p]=len[id[l]]-INF;\n\t\tif(l==r) return;\n\t\tint mid=(l+r)>>1;\n\t\tBuild(p<<1,l,mid),Build(p<<1|1,mid+1,r);\n\t}\n\tvoid Add(int x,int k){\n\t\tx=rk[x];\n\t\tUpd(1,1,m,x,x,INF*k),Upd(1,1,m,x+1,m,k);\n\t}\n\t// Find the first critical position \"p\", and return all the bits in [1,p]\n\tvoid Get(int p,int l,int r,int x,V &R){\n\t\tif(s[p]<0) return;\n\t\tif(l==r) return R.pb(id[l]);\n\t\tDown(p);\n\t\tint mid=(l+r)>>1;\n\t\tGet(p<<1,l,mid,x,R);\n\t\tif(s[p<<1]!=x) Get(p<<1|1,mid+1,r,x,R);\n\t}\n} T;\n\nint Solve(int L){\n\t// L denotes the maxmium bit we can use\n\tint B=T.s[1];\n\tif(B<0) return 1;\n\tif(B>L) return 0;\n\tV R; T.Get(1,1,m,B,R);\n\tint p=*R.rbegin(),l=len[p];\n\tfor(int i:R) T.Add(i,-1);\n\t\n\t// Try ans B , so we use bit [nxt,B] to delete the number [1,p-1] \n    // and the number a[p] will be set to a[p]-2^l\n\tif(nxt[p]) T.Add(nxt[p],1);\n\tif(Solve(l-1)) {\n\t\trep(i,l,B) s[i]=1;\n\t\treturn B+1;\n\t}\n\n\t// Try ans B+1 , so we use bit [nxt+1,B+1] to delete the [1,p]\n\tif(nxt[p]) T.Add(nxt[p],-1);\n\tif(B<L && Solve(l)) {\n\t\trep(i,l+1,B+1) s[i]=1;\n\t\treturn B+2;\n\t}\n\tfor(int i:R) T.Add(i,1);\n\treturn 0;\n}\n\nint main(){\n\trep(i,1,n=rd()) {\n\t\tscanf(\"%s\",s); int l=strlen(s);\n\t\tcmax(L,l);\n\t\tdrep(j,l-1,0) if(s[j]=='1') {\n\t\t\tnxt[++m]=fir[i];\n\t\t\tA[len[m]=l-j-1].pb(m);\n\t\t\tfir[i]=m;\n\t\t}\n\t}\n\trk[0]=1e9;\n\tint k=m;\n\trep(i,0,L-1) {\n\t\tk-=A[i].size();\n\t\tsort(A[i].begin(),A[i].end(),[&](int x,int y){ return rk[nxt[x]]<rk[nxt[y]]; });\n\t\tfor(int j:A[i]) id[rk[j]=++k]=j;\n\t\tk-=A[i].size();\n\t}\n\tT.Build(1,1,m);\n\trep(i,1,n) T.Add(fir[i],1);\n\tmemset(s,0,sizeof s);\n\tdrep(i,Solve(INF)-1,0) putchar(s[i]^48);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["ROI"],"categories":["题解"]},{"title":"「ROI 2019 Day1」运输 20/19","url":"/articles/2021/02/16/8fa685a3.html","content":"# 「ROI 2019 Day1」运输 20/19\n\n题目大意：\n\n给定一个带权$DAG$，$1$为起始点，给定小常数$p$\n\n每次查询一个点$u$，一个权值$r$，问是否存在一条路径$1\\ldots u$，其长度$x$满足$r\\leq x\\leq \\frac{p} {p-1}\\cdot r$\n\n转换一下，$dp$每个点是否存在$r$，那么对于路径的权值$x$，合法的$r$即为$[\\frac{p-1} {p}\\cdot x,x]$\n\n对于任意两个区间，如果其相交，则可以合并，并且用两个区间中最小和最大的$x$来表示这个区间\n\n而不相交的区间最多只有$\\log_{\\frac{p} {p-1} } w$段，大概$700$段\n\n任意时刻，每个点的$dp$情况可以用$700$段不交的区间表示，转移可以归并数组进行\n\n因此维护$dp$复杂度为$O(m\\log_{\\frac{p} {p-1} } w)$常数极小，单次查询复杂度为$O(\\log \\log_{\\frac{p} {p-1} } w)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=5e5+10;\n\nint n,m,q,p;\nstruct Interval{\n\tll l,r,x,y;\n\tInterval(ll a,ll b){ \n\t\tx=a,y=b;\n\t\tl=(x*(p-1)+p-1)/p,r=y;\n\t}\n\tvoid Add(ll c){\n\t\tx+=c,y+=c;\n\t\tl=(x*(p-1)+p-1)/p,r=y;\n\t}\n\tbool operator & (const Interval &__) const { return min(r,__.r)>=max(l,__.l)-1; }\n\tInterval operator + (const Interval &__) const { return Interval(min(x,__.x),max(y,__.y)); }\n\tbool operator < (const ll &x) const {\n\t\treturn r<x;\n\t}\n};\nvector <Interval> dp[N];\n\nstruct Edge{\n\tint to,nxt; ll w;\n} e[N];\nint head[N],ecnt;\nvoid AddEdge(int u,int v,ll w){\n\te[++ecnt]=(Edge){v,head[u],w};\n\thead[u]=ecnt;\n}\nvoid Trans(vector <Interval> &x,vector <Interval> y,ll c){\n\tfor(auto &i:y) i.Add(c);\n\tvector <Interval> res;\n\tint p1=0,p2=0,s1=x.size(),s2=y.size();\n\twhile(p1<s1 || p2<s2) {\n\t\tif(p1<s1 && (p2==s2 || x[p1].l<=y[p2].l)) {\n\t\t\tif(res.size() && *res.rbegin()&x[p1]) res[res.size()-1]=*res.rbegin()+x[p1++];\n\t\t\telse res.pb(x[p1++]);\n\t\t} else {\n\t\t\tif(res.size() && *res.rbegin()&y[p2]) res[res.size()-1]=*res.rbegin()+y[p2++];\n\t\t\telse res.pb(y[p2++]);\n\t\t}\n\t}\n\tx=res;\n}\n\nint main(){\n\trep(kase,1,rd()) {\n\t\tn=rd(),m=rd(),q=rd(),p=rd();\n\t\trep(i,1,n) head[i]=ecnt=0;\n\t\trep(i,1,m){\n\t\t\tint u=rd(),v=rd(); ll w=rd<ll>();\n\t\t\tAddEdge(u,v,w);\n\t\t}\n\t\trep(i,1,n) dp[i].clear();\n\t\tdp[1].pb(Interval(0,0));\n\t\trep(u,1,n) {\n\t\t\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\t\t\tTrans(dp[e[i].to],dp[u],e[i].w);\n\t\t\t}\n\t\t}\n\t\twhile(q--){\n\t\t\tint x=rd(); ll y=rd<ll>();\n\t\t\tauto p=lower_bound(dp[x].begin(),dp[x].end(),y);\n\t\t\tif(p!=dp[x].end() && p->l<=y) putchar('1');\n\t\t\telse putchar('0');\n\t\t}\n\t\tputs(\"\");\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["ROI"],"categories":["题解"]},{"title":"「ROI 2018 Day 1」量子隐形传态","url":"/articles/2021/02/16/65b0974a.html","content":"# 「ROI 2018 Day 1」量子隐形传态\n\n题目大意：\n\n在$N\\times M$的网格上给定$K$个点$1\\ldots K$，定义两点间的距离为$\\displaystyle 2^{\\max\\{|x_i-x_j|,|y_i-y_j|\\} }$\n\n$N,M,K\\leq 10^4$，求$1$到$k$的最短路，下文认为$N,M$同阶\n\n### 如何存储距离\n\n显然距离是一个不超过$10^4$位的二进制数，用$\\text{bitset}$存下来\n\n每一次转移需要维护一个位+1操作，比较大小操作，都可以$O(\\frac{N} {w})$实现，其中$\\text{w}$为压位数\n\n$$ \\ $$\n\n### Lemma:\n\n对于点$A(x,y)$，将平面分为$8$个部分\n\n![Snipaste_2021-02-16_08-28-24.png](https://i.loli.net/2021/02/16/ucKdVED4bmHfoSF.png)\n\n注意对于$x'=x$或者$y'=y$的区域一定要分离\n\n则有：在任意一个平面区域中，有效的转移点一定是距离$(x,y)$最近的点\n\n简要证明：\n\n对于$A$来说，切比雪夫距离相同的的点构成一条带\n\n![Snipaste_2021-02-16_08-39-07.png](https://i.loli.net/2021/02/16/BM6JbDVQChpg3Al.png)\n\n设最近的点为$B$，那么对于任意一个其它点$C$，显然有$dis(A,C)>dis(B,C),dis(A,C)>dis(A,B)$\n\n故走$A\\rightarrow B\\rightarrow C$不劣\n\n### 快速完成转移\n\n这样的$B$显然不唯一存在，每次转移需要的是$\\text{L}$形的段\n\n故可以对于每行每列用线段树优化区间连边\n\n故得到一个$O(K)$点数，$O(K\\log K)$边数的图\n\n用$\\text{Dijkstra}$完成最短路，复杂度为$O(K\\log ^2 K\\frac{N} {W})$\n\nps: 这里没有考虑找到最近点的过程 ，下面的代码是直接暴力找的。。。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef unsigned long long ull;\ntypedef pair <int,int> Pii;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,const T &b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,const T &b){ ((a<b)&&(a=b)); }\n\nchar IO;\nint rd(){\n\tint s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\n\nconst int N=30011,INF=1e9+10,U=10000,D=6;\nbool Mbe;\n\nint n,m,k;\nint X[N],Y[N],pre[N],vis[N];\nvector <Pii> E[N];\ntypedef unsigned long long ull;\nstruct Bitset{\n\tull a[N/64+10];\n\tint l;\n\tvoid Add(int x){\n\t\twhile(1) {\n\t\t\tull t=a[x>>D];\n\t\t\ta[x>>D]+=1ull<<(x&63);\n\t\t\tif(t>a[x>>D]) x=((x>>D)+1)<<D;\n\t\t\telse break;\n\t\t}\n\t\tcmax(l,((x>>D)<<D)+63-__builtin_clzll(a[x>>D]));\n\t}\n\tbool operator < (const Bitset &__) const {\n\t\tif(__.l>10009) return 1;\n\t\tif(l!=__.l) return l<__.l;\n\t\tdrep(i,(l>>D)+1,0) if(a[i]!=__.a[i]) return a[i]<__.a[i];\n\t\treturn 0;\n\t}\n} dis[N];\nstruct Queue{\n\tint s[N<<2],bit;\n\tvoid Up(int p) { s[p]=dis[s[p<<1]]<dis[s[p<<1|1]]?s[p<<1]:s[p<<1|1]; }\n\tvoid Build(){\n\t\tfor(bit=1;bit<=n+1;bit<<=1);\n\t\ts[bit+1]=1;\n\t\tfor(int p=bit+1;p;p>>=1) s[p]=1;\n\t}\n\tvoid push(int p) { for(s[p+bit]=p,p+=bit;p>>=1;) Up(p); }\n\tint top(){\n\t\tint res=s[1],p=s[1];\n\t\tfor(s[p+=bit]=0;p>>=1;) Up(p);\n\t\treturn res;\n\t}\n} que;\n\nint Dis(int x,int y) { return max(abs(X[x]-X[y]),abs(Y[x]-Y[y])); }\nint Ans[N],Ac;\nint Min[N][8];\nint Dir(int u,int v){\n\tint x=X[v]-X[u],y=Y[v]-Y[u];\n\tif(y==0) return x>0?0:4;\n\tif(y>0) return x==0?2:(x>0?1:3);\n\treturn x==0?6:(x>0?7:5);\n}\n\ntypedef vector <int> V;\nV A[N],B[N];\nint rtx[N],rty[N],ls[N],rs[N];\nint Build(const V &vec,int l,int r){\n\tif(l==r) return vec[l];\n\tint mid=(l+r)>>1,u=++n;\n\tls[u]=Build(vec,l,mid),rs[u]=Build(vec,mid+1,r);\n\tE[u].pb(mp(ls[u],-1)),E[u].pb(mp(rs[u],-1));\n\treturn u;\n}\nV Res;\nvoid Que(const V &vec,int p,int l,int r,int ql,int qr){\n\tif(!p) return;\n\tif(ql<=vec[l] && vec[r]<=qr) return Res.pb(p);\n\tint mid=(l+r)>>1;\n\tif(ql<=vec[mid]) Que(vec,ls[p],l,mid,ql,qr);\n\tif(qr>=vec[mid+1]) Que(vec,rs[p],mid+1,r,ql,qr);\n}\nvoid AddX(int u,int x,int l,int r){\n\tint d=abs(x-X[u]);\n\tif(rtx[x]) Que(A[x],rtx[x],0,A[x].size()-1,l,r);\n\tfor(int v:Res) {\n\t\tE[u].pb(mp(v,d));\n\t}\n\tRes.clear();\n}\nvoid AddY(int u,int y,int l,int r){\n\tint d=abs(y-Y[u]);\n\tif(rty[y]) Que(B[y],rty[y],0,B[y].size()-1,l,r);\n\tfor(int v:Res) {\n\t\tE[u].pb(mp(v,d));\n\t}\n\tRes.clear();\n}\n\nvoid Init(){\n\trep(i,1,k) A[X[i]].pb(i),B[Y[i]].pb(i);\n\trep(i,1,U) {\n\t\tif(A[i].size()) {\n\t\t\tsort(A[i].begin(),A[i].end(),[&](int x,int y){ return Y[x]<Y[y]; });\n\t\t\trtx[i]=Build(A[i],0,A[i].size()-1);\n\t\t\tfor(int &j:A[i]) j=Y[j];\n\t\t}\n\t\tif(B[i].size()) {\n\t\t\tsort(B[i].begin(),B[i].end(),[&](int x,int y){ return X[x]<X[y]; });\n\t\t\trty[i]=Build(B[i],0,B[i].size()-1);\n\t\t\tfor(int &j:B[i]) j=X[j];\n\t\t}\n\t}\n\trep(i,1,k) rep(j,0,7) Min[i][j]=INF;\n\trep(i,1,k) rep(j,i+1,k){\n\t\tint d=Dir(i,j),dis=Dis(i,j);\n\t\tcmin(Min[i][d],dis);\n\t\tcmin(Min[j][(d+4)&7],dis);\n\t}\n\trep(i,1,k) {\n\t\tif(Min[i][0]!=INF) AddX(i,X[i]+Min[i][0],Y[i],Y[i]);\n\t\tif(Min[i][1]!=INF) {\n\t\t\tAddX(i,X[i]+Min[i][1],Y[i]+1,Y[i]+Min[i][1]);\n\t\t\tAddY(i,Y[i]+Min[i][1],X[i]+1,X[i]+Min[i][1]);\n\t\t}\n\t\tif(Min[i][2]!=INF) AddY(i,Y[i]+Min[i][2],X[i],X[i]);\n\t\tif(Min[i][3]!=INF) {\n\t\t\tAddX(i,X[i]-Min[i][3],Y[i]+1,Y[i]+Min[i][3]);\n\t\t\tAddY(i,Y[i]+Min[i][3],X[i]-Min[i][3],X[i]-1);\n\t\t}\n\t\tif(Min[i][4]!=INF) AddX(i,X[i]-Min[i][4],Y[i],Y[i]);\n\t\tif(Min[i][5]!=INF) {\n\t\t\tAddX(i,X[i]-Min[i][5],Y[i]-Min[i][5],Y[i]-1);\n\t\t\tAddY(i,Y[i]-Min[i][5],X[i]-Min[i][5],X[i]-1);\n\t\t}\n\t\tif(Min[i][6]!=INF) AddY(i,Y[i]-Min[i][6],X[i],X[i]);\n\t\tif(Min[i][7]!=INF) {\n\t\t\tAddX(i,X[i]+Min[i][7],Y[i]-Min[i][7],Y[i]-1);\n\t\t\tAddY(i,Y[i]-Min[i][7],X[i]+1,X[i]+Min[i][7]);\n\t\t}\n\t}\n}\n\nbool Med;\nint main(){\n\tfprintf(stderr,\"%.2lf\\n\",(&Med-&Mbe)/1024.0/1024.0);\n\tn=rd(),m=rd(),k=rd(),n=k;\n\trep(i,1,k) X[i]=rd(),Y[i]=rd();\n\tInit();\n\tque.Build();\n\tdis[0].Add(10111);\n\trep(i,2,n) dis[i].Add(10110);\n\twhile(que.s[1]) {\n\t\tint u=que.top();\n\t\tvis[u]=1;\n\t\tfor(auto t:E[u]) {\n\t\t\tint v=t.first;\n\t\t\tBitset w=dis[u]; if(~t.second) w.Add(t.second);\n\t\t\tif(w<dis[v]) dis[v]=w,que.push(v),pre[v]=u;\n\t\t}\n\t}\n\n\tfor(int u=k;u;u=pre[u]) if(u<=k) Ans[++Ac]=u;\n\tprintf(\"%d\\n\",Ac);\n\tdrep(i,Ac,1) printf(\"%d \",Ans[i]);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["ROI"],"categories":["题解"]},{"title":"求导/泰勒展开","url":"/articles/2021/02/06/f395be43.html","content":"# 求导/泰勒展开\n\n前言:求导是为泰勒展开铺路的。。\n\n## 求导\n\n$f'(x)$为$f(x)$的导数，即$f(x)$在$x$上的变化率\n\n{%raw%}$\\begin{aligned} f'(x)=\\lim_{\\Delta x\\rightarrow 0} \\frac{f(x+\\Delta x)-f(x)} {\\Delta x}\\end{aligned}${%endraw%}\n\n$f(x)$在$x$上可导的前提是$f(x)$在$x$上是连续的\n\n一种不完善的判定条件是{%raw%}$\\begin{aligned} \\lim_{\\Delta x\\rightarrow 0^+} \\frac{f(x+\\Delta x)-f(x)} {\\Delta x}=\\lim_{\\Delta x\\rightarrow 0^+} \\frac{f(x)-f(x-\\Delta x)} {\\Delta x}\\end{aligned}${%endraw%}\n\n$$ \\ $$\n\n## 求导法则\n\n$1.(x^n)'=n \\cdot x^{n-1}$$(n\\in \\R$,但是要注意定义域)\n\n$2.(\\sin x)'=\\cos x,(\\cos x)'=-\\sin x$\n\n$3.(e^x)'=e^x$\n\n$4.(a^x)'=\\ln a\\cdot a^x$\n\n$5.(\\ln x)'=\\frac{1} {x}$\n\n$6.\\log_a x=\\frac{1} {x\\ln a}$\n\n$7.(f(x)g(x))'=f'(x)g(x)+f(x)g'(x)$\n\n$8.\\displaystyle (\\frac{f(x)} {g(x)})'=\\frac{f'(x)g(x)-f(x)g'(x)} {g^2(x)}$\n\n$9.(f(g(x)))'=f'(g(x))\\cdot g'(x)$\n\n如$f(x)=\\ln x,g(x)=ax-1$\n\n$f'(x)=\\frac{1} {x},f'(g(x))=\\frac{1} {ax-1}$\n\n$g'(x)=a$\n\n$(\\ln (ax-1))'=\\frac{a} {ax-1}$\n\n# $$ \\ $$\n\n## 泰勒 Taylor 展开\n\n$\\text{Taylor}$展开是用函数$f(x)$在某个点$x_0$上不断求导之后的函数值表示出函数本身\n\n从而将任何一个函数表示成(可能不是有穷的)多项式函数形式\n\n{%raw%}$\\begin{aligned} f(x)=\\sum _{i=0}^{\\infty}\\frac{f^{(i)}(x_0)} {i!}(x-x_0)^i\\end{aligned}${%endraw%}\n\n其中$f^{(i)}$表示$f$的$i$阶导数\n\n当$x_0=0$时，这个展开被称为麦克劳林 $\\text{Maclaurin}$展开，即\n\n{%raw%}$\\begin{aligned} f(x)=\\sum _{i=0}^{\\infty}\\frac{f^{(i)}(0)} {i!}x^i\\end{aligned}${%endraw%}\n\n### Taylor 展开的证明\n\n为了便于描述，下面直接对于$\\text{Maclaurin}$ 展开叙述 ， $\\text{Taylor}$展开相当于平移了$x_0$\n\n不妨设$f(x)$展开后的多项式函数系数为$a_i$，即设{%raw%}$\\begin{aligned} f(x)=\\sum_{i=0}^{\\infty}a_ix^i\\end{aligned}${%endraw%}\n\n不断对于$f(x)$求导得到下式\n\n{%raw%}$\\begin{aligned} f^{(0)}(x)= a_0+a_1x+a_2x^2+a_3x^3\\cdots \\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned} f^{(1)}(x)= a_1+2a_2x+3a_3x^2+4a_4x^3\\cdots \\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned} f^{(2)}(x)= 2a_2+6a_3x^1+12a_4x^2+20a_5x^3\\cdots \\end{aligned}${%endraw%}\n\n$\\cdots$\n\n{%raw%}$\\begin{aligned} f^{(n)}(x)= n!a_n+\\prod_{i=2}^{n+1}i\\cdot a_{n+1}x^1+\\prod_{i=3}^{n+2}i\\cdot a_{n+2}x^2\\cdots \\end{aligned}${%endraw%}\n\n带入这些函数在0上的取值，得到\n\n$f^{(i)}(0)=i!\\cdot a_i$\n\n因此{%raw%}$\\begin{aligned} f(x)=a_ix^i=\\sum _{i=0}^{\\infty}\\frac{f^{(i)}(0)} {i!}x^i\\end{aligned}${%endraw%}\n\n$$ \\  $$\n\n### 常见的Taylor展开\n\n#### 如果你是数学生\n\n$\\displaystyle e^x= 1+x+\\frac{x^2} {2}+\\ldots+ \\frac{x^n} {n!}+\\theta\\frac{x^{n+1} } {(n+1)!},\\theta\\in (0,1)$\n\n所以实际上是\n\n{%raw%}$\\left\\{\\begin{aligned}e^x\\ge 1+x+\\frac{x^2} {2}+\\ldots+\\frac{x^n} {n!}&& 2\\not |n\\text{  or }\\ge 0\\\\ e^x\\leq 1+x+\\frac{x^2} {2}+\\ldots+\\frac{x^n} {n!}&& \\text{otherwise}\\end{aligned}\\right.${%endraw%}\n\n$\\ln x\\leq x-1$\n\n诸如此类，常用于$e^x,\\ln x$的放缩处理\n\n$$ \\ $$\n\n#### 如果你是OIer/ACMer\n\n带入$f(x)=e^x,x_0=0$，得到\n\n{%raw%}$\\begin{aligned} f(x)=e^x=\\sum _{i=0}^{\\infty}\\frac{x^i} {i!}\\end{aligned}${%endraw%}\n\n类似的\n\n$$1+\\frac{x^2} {2!}+\\frac{x^4} {4!}+\\frac{x^6} {6!} ... =\\frac{e^x+e^{-x} } {2}$$\n\n$$\\frac{x^1} {1!}+\\frac{x^3} {3!}+\\frac{x^5} {5!}...=\\frac{e^x-e^{-x} } {2}$$\n\n$\\displaystyle [x^n]e^{ax}=\\frac{a^n} {n!}$\n\n还有很多都可以自己代入一下，比如\n\n{%raw%}$\\begin{aligned} \\frac{1} {1-x}=\\sum_{i=0}^{\\infty} x^i\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned} -\\ln (1-x)=\\ln \\frac{1} {1-x}=\\sum_{i=1}^{\\infty}\\frac{x^i} {i}\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned}\\sin x =\\sum_{i=1}(-1)^{i+1}\\frac{x^{2i+1} } {(2i+1)!}\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned}\\cos x=\\sum_{i=0}(-1)^{i}\\frac{x^{2i} } {(2i)!}\\end{aligned}${%endraw%}\n\n应用:[牛顿迭代法](https://www.cnblogs.com/chasedeath/p/12859142.html)","tags":["default tag"],"categories":["default category"]},{"title":"FFT&NTT(以及扩展)","url":"/articles/2021/02/05/e2229676.html","content":"# FFT&NTT(以及扩展)\n\n预备知识：[用于NTT](https://www.cnblogs.com/chasedeath/p/13092822.html)\n\nNTT/FFT其实本质相同，用途是快速求解  __多项式乘积__ \n\n### 前言\n\nFT: 傅里叶变换:\n\n这是一个工程上的概念，可以简述为：一个周期性的信号波段可以用 若干个**正弦曲线** 的带权和表示\n\nDFT: 离散傅里叶变换，这是傅里叶变换在离散情况下的变种\n\nFFT: 快速傅里叶变换\n\nNTT: 快速数论变换\n\n$$ \\ $$\n\n## 谈及核心思想\n\n1.**单位根**:\n\n构造$\\omega_n$为$n$阶单位根(不知道$\\omega_n$的值域)，满足性质$\\omega_n^n=\\omega_n^0=1$\n\n对于$2|n$,$\\omega _n^{\\frac{n} {2} }=-1$\n\n显然$\\omega_n$满足一个非常简单的性质：**折半引理** {%raw%}$\\begin{aligned} \\forall 2|i\\and 2|n , \\omega_n^i=\\omega_{\\frac{n} {2} }^{\\frac{i} {2} }\\end{aligned}${%endraw%}\n\n$\\omega_n$实际上是一个在幂次上呈现$n$元循环的数值\n\n2.**多项式**与**点值式**的转化\n\n一个$n$阶多项式最普通的表示就是$F(x)=\\sum_{i=0}^{n-1} a_ix^i$\n\n然而，多项式也可以用$n$个**互不相关的**点表示，即$(x_0,y_0),(x_1,y_1),\\cdots,(x_{n-1},y_{n-1})$\n\n两者可以互相转化\n\n对于同$x_i$的点值，两个多项式卷积时，其$y_i$可以直接对应相乘\n\nFFT/NTT的核心过程是\n\n多项式$\\longrightarrow$ 点值式$\\longrightarrow$点值式对应相乘$\\longrightarrow$多项式\n\n而用单位根来构造快速的多项式与点值式的转化\n\n3.**分治思想**\n\n用于降低多项式与点值式转换的复杂度\n\n$$ \\ $$\n\n\n\n## FFT的单位根\n\n$(x,y)$指复数$i=\\sqrt{-1},(x,y)=x+yi$\n\n基本运算$(x,y)+(a,b)=(x+a,y+b),(x,y)\\cdot (a,b)=(ax-by,ay+bx)$\n\nFFT的单位根是:$\\omega_n$=$(cos(\\frac{2\\pi} {n}),sin(\\frac{2\\pi} {n}))$\n\n而$\\omega _n^i=(cos(\\frac{2\\pi} {n}\\cdot i),sin(\\frac{2\\pi} {n}\\cdot i))$ (展开发现就是三角函数求和公式)\n\n显然满足单位根的性质​\n\n(实际上可以发现，这个说是点值其实就是信号序列的三角函数表示)\n\n\n\n$$ \\ $$\n\n## NTT\n\n相信您已经了解了原根的一些性质，$\\text{NTT}$的单位根常用原根构造\n\n$\\text{NTT}$的单位根实际有较大的局限性，对于质数$P$只能构造出$n|P-1,\\omega_n=g^{\\frac{P-1} {n} }$\n\n计算在模意义下就能满足单位根的性质\n\n通常我们$P$取$998244353$，$2^{23}|(P-1)$，它的一个原根是3\n\n实际上，为了满足下面分治需要，构造的模数通常满足$P-1=s\\cdot 2^t$的$t$较大，这类模数我们常称作$\\text{NTT}$模数\n\n$$ \\ $$\n\n$$ \\ $$\n\n以上部分均为基础知识，相对来说应该不会太难，下面是主要难点\n\n$$ \\ $$\n\n## 多项式转点值式\n\n接下来我们考虑如何将多项式转化为点值式\n\n对于点值式，我们构造的点横坐标为$x_i=\\omega_n^i$\n\n具体目标是对于函数$F(x)$，求出在$x_0,x_1,\\cdots ,x_{n-1}$上的函数值\n\n即求出$F(x_i)=a_0\\omega_n^0+a_1\\omega_n^{i}+a_2\\omega_n^{2i}+\\cdots$\n\n接下来就是核心的**分治思想**，注意，这里的分治是子问题**严格等大**的\n\n对于当前问题，分成两部分子问题求解(实际是可以分成多部分的，但是这个是特殊情况暂时不予讨论)，即求解\n\n令$m=\\frac{n} {2}$\n\n{%raw%}$\\begin{aligned} 2|i,G(x_i)=a_0\\omega_{m}^0+a_2\\omega_{m}^{\\frac{i} {2} }+a_4\\omega_{m}^{\\frac{i} {2}\\cdot 2}+\\cdots\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned} 2|i,H(x_i)=a_1\\omega_{m}^0+a_3\\omega_{m}^{\\frac{i} {2} }+a_5\\omega_{m}^{\\frac{i} {2}\\cdot 2}+\\cdots\\end{aligned}${%endraw%}\n\n更简洁的描述为\n\n$i<m,G(x_i')=a_0\\omega_{m}^0+a_2\\omega_{m}^{i}+a_4\\omega_{m}^{2i}+\\cdots$\n\n$i<m,H(x_i')=a_1\\omega_{m}^0+a_3\\omega_{m}^{i}+a_5\\omega_{m}^{2i}+\\cdots$\n\n由于$G(x'_i),H(x'_i)$计算的是$[0,m-1]$项，而求$F(x_i)$时用到的是$0,2,4,\\cdots$项，实际需要访问$G(x^2_i),H(x^2_i)$\n\n和$F(x_i)$的式子比较，我们得到合并的式子为\n\n$F(x_i)=G(x^2_i)+x_i H(x^2_i)$\n\n带入折半引理，实际等价于\n\n$F(x_i)=G(x'_i)+x_i H(x'_i)$\n\n注意$x_i=x'_{i\\mod m}$\n\n为了保证复杂度，尽量使得每次分治的子问题都分为两部分，这样的复杂度为$O(n\\log n)$\n\n附:实际上，分为$d$个子问题时，每次合并的复杂度为$O(n\\cdot d)$，因此复杂度为\n\n保证每次分治为两个严格等大的子问题，可以从一开始就把$n$扩充为$2$的幂次\n\n```cpp\nint N=1;\nwhile(N<=n+m) N<<=1;\n```\n\n附:$d$个子问题时，设子问题答案为$G_j(x_i)$，则合并的式子为\n\n{%raw%}$\\begin{aligned} F(x_i)=\\sum_{j=0}^{d-1}x_i^jG_j(x_i^d)=\\sum_{i=0}^{d-1}x_i^jG_j(x'_{i\\mod \\frac{n} {d} })\\end{aligned}${%endraw%}\n\n\n\n## 点值式转多项式\n\n一个简单的性质：单位根反演 {%raw%}$\\sum_{j=0}^{n-1}\\omega_n^{ij}= \\left\\{\\begin{aligned} \\frac{\\omega_n^{in}-1} {\\omega_n^i-1}=0  && i\\ne 0\\\\ n  && i=0\\end{aligned} \\right.${%endraw%}\n\n设点值式对应$y_i$的序列为$b_i$\n\n则$n\\cdot a_i=\\sum_{j=0}^{n-1}\\omega_n^{-ij} b_j$\n\n证明\n\n{%raw%}$\\begin{aligned} \\sum_{j=0}^{n-1}\\omega_n^{-ij}b_j=\\sum_{j=0}^{n-1} \\omega_n^{-ij}(\\sum_{k=0}^{n-1}a_k\\omega_n^{jk})\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned} \\sum_{j=0}^{n-1}\\omega_n^{-ij}b_j= \\sum_{k=0}^{n-1}a_k\\sum_{j=0}^{n-1}\\omega_n^{j(k-i)} \\end{aligned}${%endraw%}\n\n由上面的式子，发现只有$k-i=0$时右边的求和式有值，所以上式成立\n\n因此点值式转多项式直接把系数改为$\\omega_n^{-i}$即可\n\n$$ \\ $$\n\n$$ \\ $$\n\n## Tips:\n\n1.由于单位根的循环特性，溢出会直接溢出到本来的式子里\n\n因此，如果乘法过后的多项式产生了超过$>n$的项$x^i$，会溢出到$x^{i\\mod n}$\n\n2.点值式并不是不满足除法，只是除法得到的多项式并不一定是一个$n$元以内的多项式，除了恰好整除的情况，得到的通常是一个无穷级数的式子，如{%raw%}$\\begin{aligned} \\frac{1} {1-x}=\\frac{1-x^{\\infty} } {1-x}=\\sum_{i=0}^{\\infty}x^i\\end{aligned}${%endraw%}\n\n真正要求除法，通常是求前$n$项的结果，即需要用到**多项式乘法逆**\n\n$$\\ $$\n\n## 代码实现与优化\n\n[模板题传送门](http://uoj.ac/problem/34)\n\n然后我们得到一份优美的代码(FFT)\n\n(Complex是C++库自带的复数,M_PI是C++自带$\\pi$常量)\n\n```cpp\nvoid FFT(int n,Complex *a,int f) {\n\tif(n==1) return;\n\tComplex tmp[N];\n\tint m=n/2;\n\trep(i,0,m-1) tmp[i]=a[i<<1],tmp[i+m]=a[i<<1|1]; // 按照奇偶分类\n\tmemcpy(a,tmp,sizeof(Complex) * n);\n\tFFT(m,a,f),FFT(m,a+m,f); // 分两半，算g(x),h(x)\n\tComplex w(cos(2*M_PI/n),f*sin(2*M_PI/n)),e(1,0); // w=x^1,e=x^i\n\trep(i,0,m-1) {\n\t\ttmp[i]=a[i]+e*a[i+m]; // f(x_i)=g(x_i)+e*h(x_i)\n\t\te=e*w; \n\t}\n\trep(i,m,n-1) {\n\t\ttmp[i]=a[i-m]+e*a[i];\n\t\te=e*w;\n\t}\n\tmemcpy(a,tmp,sizeof(T)*n);\n}\n```\n\n由于$(\\omega_n)^{\\frac{n} {2} }=-1$，所以还可以简化为\n\n```cpp\n\tComplex w(cos(2*M_PI/n),f*sin(2*M_PI/n)),e(1,0);\n\trep(i,0,m-1) {\n\t\ttmp[i]=a[i]+e*a[i+m];\n\t\ttmp[i+m]=a[i]-e*a[i+m];\n\t\te=e*w;\n\t}\n```\n\n由于用了double，最后输出要取整\n\n### 蝴蝶优化\n\n我们加一点优化，取代递归的分治过程\n\n可以看到，分治时我们按照$i \\mod 2$分成两组，然后继续分\n\n这个过程中，实际上我们就是将$i$的二进制位前后翻转\n\n所以我们可以暴力处理出$i$分治底层的位置\n\n```cpp\nrep(i,0,n-1) {\n\tint x=i,s=0;\n\tfor(int j=1;(j<<c)<=n;++j) {\n\t\ts=(s<<1)|(x&1);\n\t\tx>>=1;\n\t} // s就是最终位置\n}\n```\n\n当然也是有$O(n)$处理方法的\n\n```cpp\nint N=1,c=-1;\nwhile(N<=n+m) N<<=1,c++;\nrep(i,1,N-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<c);\n```\n\n(建议自己模拟一下)\n\n有了这个翻转数组，我们可以直接从分治底层开始解决整个问题，每次合并操作完全相同\n\n每次分治问题的大小，依次合并每一个子问题区间即可\n\n为了在一个数组上完成操作，还需要注意合并顺序\n\n代码解释$i$:分治子问题大小为$2i$，$l$:合并区间的左端点为$l$，右端点为$l+2i$，$j$枚举合并位置\n\n```cpp\nvoid FFT(int n,Complex *a){\n    for(int i=1;i<n;i<<=1) {\n        Complex w(cos(2*M_PI/n),f*sin(2*M_PI/n));\n        for(int l=0;l<n;l+=i*2) {\n            Complex e(1,0);\n            for(int j=l;j<l+i;++j,e=e*w) {\n                Complex t=a[j+m]*e;   // a'[j]=a[j]+e*a[j+m]\n                                      // a'[j+i]=a[j]-e*a[j+m]\n                a[j+m]=a[j]-t;\n                a[j]=a[j]+t;\n            }\n        }\n    }\n}\n```\n\n事实上我们还有更快的写法，就是将$\\omega_n^i$预处理出来\n\n(注意这个$\\text{FFT}$的预处理很考验double精度，不能每次都直接累乘上去，隔几个就要重新调用依次三角函数)\n\n当然如果自己写复数会更快\n\n$$ \\ $$\n\n### 关于点值式转多项式的优化\n\n由于每次求得点值是$\\omega_n^{-i}=\\omega_n^{n-i}$\n\n所以可以直接用 多项式转点值式的函数， 最后把$[1,n-1]$这一段翻转，每个数除掉$n$即可\n\n$$ \\ $$\n\n### 对于加减运算取模的优化\n\n三目运算\n\n```cpp\na+=b,a=a>=P?a-P:a;\na-=b,a=a<0?a+P:a;\n```\n\n逻辑运算优化(原理是逻辑预算会在第一个确定表达式值的位置停下)\n\n```cpp\na+=b,((a>=P)&&(a-=P));\na-=b,((a<0)&&(a+=P));\n```\n\n$$ \\ $$\n\n### 关于系数预处理优化(以NTT为例)\n\n带入上面已经提到的优化，无预处理系数的$\\text{NTT}$大概是这样的\n\n```cpp\nll qpow(ll x,ll k=P-2){\n    ll res=1;\n    for(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n    return res;\n}\nint a[N];\nvoid NTT(int n,int *a,int f){\n    rep(i,1,n-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n    for(int i=1;i<n;i<<=1) {\n        int w=qpow(3,(P-1)/i/2);\n        for(int l=0;l<n;l+=i*2) {\n            int e=1;\n            for(int j=l;j<l+i;++j,e=1ll*e*w%P) {\n                int t=1ll*a[j+i]*e%P;\n                a[j+i]=a[j]-t,((a[j+i]<0)&&(a[j+i]+=P));\n                a[j]+=t,((a[j]>=P)&&(a[j]-=P));\n            }\n        }\n    }\n    if(f==-1) {\n        reverse(a+1,a+n);\n        int Inv=qpow(n);\n        rep(i,0,n-1) a[i]=1ll*a[i]*Inv%P;\n    }\n}\n```\n\n\n\n一种简单的预处理是，每次对于每个分治大小，预处理依次系数\n\n```cpp\nll qpow(ll x,ll k=P-2){\n    ll res=1;\n    for(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n    return res;\n}\nint a[N],e[N];\nvoid NTT(int n,int *a,int f){\n    rep(i,1,n-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n    e[0]=1;\n    for(int i=1;i<n;i<<=1) {\n        int w=qpow(3,(P-1)/i/2);\n        for(int j=1;j<i;++j) e[j]=1ll*e[j-1]*w%P;\n        //for(int j=i-2;j>=0;j-=2) e[j+1]=1ll*w*(e[j]=e[j>>1])%P;\n        //这个版本是沿用上一次预处理的结果，实际(只有)用这种预处理方法可以极大程度上加强FFT的精度\n        for(int l=0;l<n;l+=i*2) {\n            for(int j=l;j<l+i;++j) {\n                int t=1ll*a[j+i]*e[j-l]%P;\n                a[j+i]=a[j]-t,((a[j+i]<0)&&(a[j+i]+=P));\n                a[j]+=t,((a[j]>=P)&&(a[j]-=P));\n            }\n        }\n    }\n    if(f==-1) {\n        reverse(a+1,a+n);\n        int Inv=qpow(n);\n        rep(i,0,n-1) a[i]=1ll*a[i]*Inv%P;\n    }\n}\n```\n\n另一种是在一开始就把所有的系数用一个数组存下来，具体过程可以描述为\n\n对于每个分治长度$n$，我们只需要访问$\\omega_n^{0},\\omega_n^{1},\\cdots,\\omega_n^{\\frac{n} {2}-1}$\n\n那么对于分治长度$n$，我们在$w$数组的第$\\frac{n} {2}$ ~ $n-1$项依次存储这些值\n\n优化:我们只需要对于最大的分治长度处理，剩下的部分发现可以直接用折半引理访问得到\n\n```cpp\nll qpow(ll x,ll k=P-2){\n    ll res=1;\n    for(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n    return res;\n}\nconst int N=1<<21;\nint a[N],w[N];\nvoid Init(){\n    w[N>>1]=1;\n    int t=qpow(3,(P-1)/N);\n    rep(i,(N>>1)+1,N-1) w[i]=1ll*w[i-1]*t%P;\n    drep(i,(N>>1)-1,1) w[i]=w[i<<1];\n}\nvoid NTT(int n,int *a,int f){\n    rep(i,1,n-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n    for(int i=1;i<n;i<<=1) {\n        int *e=w+i;\n        for(int l=0;l<n;l+=i*2) {\n            for(int j=l;j<l+i;++j) {\n                int t=1ll*a[j+i]*e[j-l]%P;\n                a[j+i]=a[j]-t,((a[j+i]<0)&&(a[j+i]+=P));\n                a[j]+=t,((a[j]>=P)&&(a[j]-=P));\n            }\n        }\n    }\n    if(f==-1) {\n        reverse(a+1,a+n);\n        int Inv=qpow(n);\n        rep(i,0,n-1) a[i]=1ll*a[i]*Inv%P;\n    }\n}\n```\n\n三份代码在duck.ac上的评测结果表明，不预处理系数将近慢一倍\n\n单组数据来看，预处理系数会慢一点\n\n多组来看，预处理系数会快\n\n实际差距不大，都可以使用\n\n但是在某些层面来说，下面这份板子才是最好的(适用NTT,FFT且精度较高)，不需要预处理\n\n```cpp\nll qpow(ll x,ll k=P-2){\n    ll res=1;\n    for(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n    return res;\n}\nint a[N],e[N];\nvoid NTT(int n,int *a,int f){\n    rep(i,1,n-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n    e[0]=1;\n    for(int i=1;i<n;i<<=1) {\n        int w=qpow(3,(P-1)/i/2);\n        for(int j=i-2;j>=0;j-=2) e[j+1]=1ll*w*(e[j]=e[j>>1])%P;\n        for(int l=0;l<n;l+=i*2) {\n            for(int j=l;j<l+i;++j) {\n                int t=1ll*a[j+i]*e[j-l]%P;\n                a[j+i]=a[j]-t,((a[j+i]<0)&&(a[j+i]+=P));\n                a[j]+=t,((a[j]>=P)&&(a[j]-=P));\n            }\n        }\n    }\n    if(f==-1) {\n        reverse(a+1,a+n);\n        int Inv=qpow(n);\n        rep(i,0,n-1) a[i]=1ll*a[i]*Inv%P;\n    }\n}\n```\n\n\n\n\n\n$$ \\ $$\n\n\n# 拓展\n\n## 1.分治+NTT\n\n常用于处理多个**计数背包**的快速合并 (实际**无权值01背包**也是可以的)\n\n我们可以用NTT$n\\log n$合并两个大小为$n$的背包\n\n分治时，每次合并两个分治子问题，总共的时间就是$\\sum size\\log n$\n\n每个背包的$size$会被计算$\\log n$次，所以总共复杂度是$n \\log ^2 n$\n\n$$ \\ $$\n\n## 2.CDQ+NTT\t\n\n[模板题传送门](https://www.luogu.com.cn/problem/P4721)\n\n对于形如$dp_i=\\sum_{j=0}^{i-1}dp_jg_{i-j}$的$dp$转移(就是dp转移与差值有关)\n\n由于求$dp_i$时，需要保证$dp_0,dp_1,\\cdots,dp_{i-1}$才能卷积，这个限制，我们可以用**CDQ分治**解决\n\n对于当前分治区间$[L,R]$\n\n依次考虑$[L,mid]$内部转移，$[L,mid]$向$[mid+1,R]$的转移(用FFT/NTT解决)，$[mid+1,R]$内部转移\n\n算法流程\n\n```cpp\nvoid Solve(l,r){\n    if(l==r) return;\n    mid=(l+r)>>1;\n    Solve(l,mid);\n    (l,mid)->(mid+1,r);\n    Solve(mid+1,r);\n}\n```\n\n$$ \\ $$\n\n## 3.[MTT(任意模数NTT)](https://www.cnblogs.com/chasedeath/p/13498834.html)\n\n\n\n$$ \\ $$\n\n## 4.[$n$元点值式](https://www.cnblogs.com/chasedeath/p/13498798.html)\n\n\n\n$$ \\ $$\n\n练习建议：\n\n1.[高精度乘法](https://www.luogu.com.cn/problem/P1919)\n\n2.简单应用：[HDU-4609](http://acm.hdu.edu.cn/showproblem.php?pid=4609) [题解](https://www.cnblogs.com/chasedeath/p/12092699.html)\n\n3.卷积构造模板： [BZOJ-3527](https://www.lydsy.com/JudgeOnline/problem.php?id=3527) [题解](https://www.cnblogs.com/chasedeath/p/12092699.html)\n\n4.拓展卷积构造：[HDU-5885](http://acm.hdu.edu.cn/showproblem.php?pid=5885) [题解](https://www.cnblogs.com/chasedeath/p/12097980.html)\n\n5.构造卷积的应用：[HDU-6061](http://acm.hdu.edu.cn/showproblem.php?pid=6061) [题解](https://www.cnblogs.com/chasedeath/p/12098078.html)\n\n6.$CDQ$分治+$FFT$：[HDU-5730](http://acm.hdu.edu.cn/showproblem.php?pid=5730) [题解](https://www.cnblogs.com/chasedeath/p/12101353.html)\n\n7.$CDQ$+NTT/降次前缀和优化$dp$：[HDU-5332](http://acm.hdu.edu.cn/showproblem.php?pid=5322) [题解](https://www.cnblogs.com/chasedeath/p/12101410.html)\n\n8.容斥+$MTT$：[HDU-6088](http://acm.hdu.edu.cn/showproblem.php?pid=6088) [题解](https://www.cnblogs.com/chasedeath/p/12101456.html)\n\n9.图上$dp$：\n\n联通图个数：BZOJ-3456 [题解](https://www.cnblogs.com/chasedeath/p/12103345.html)\n\n带环联通图个数：[HDU-5552](http://acm.hdu.edu.cn/showproblem.php?pid=5552) [题解](https://www.cnblogs.com/chasedeath/p/12103411.html)\n\n森林数量和带限制森林数量：[HDU - 5279](http://acm.hdu.edu.cn/showproblem.php?pid=5279) [题解](https://www.cnblogs.com/chasedeath/p/12106476.html)\n\n10.点分治+FFT：[CodeChef-PRIMEDST](https://www.codechef.com/problems/PRIMEDST) [题解](https://www.cnblogs.com/chasedeath/p/12120855.html)\n\n$$ \\ $$\n\n$$ \\ $$\n\n$$ \\ $$\n\n\n\n\n\n\n\n## 更多应用和优化参见毛啸2016论文\n\n(如：两次FFT做卷积，4次FFT做MTT。。。)","tags":["default tag"],"categories":["default category"]},{"title":"「GDOI2020模拟赛day1」Permutation              ","url":"/articles/2021/02/03/ef70be87.html","content":"# 「GDOI2020模拟赛day1」Permutation              \n\n为了便于叙述，设原题中的 $n$ 为$N$\n\n### 题目分析\n\n要求一个$1-n$的环排列，看成是一个环遍历\n\n发现每条边的权值限制了遍历过程中穿过这条边的次数\n\n取$1$为根，强制从$1$开始遍历，考虑以一个个**自由段**（即未确定前后连接关系的子段）的形式维护$u$子树中的序列段\n\n那么，只需要满足$u$子树中自由段的个数为$\\frac{w(u,fa_u)} {2}$ （每一个自由段的两端均对应一次跨越）即可\n\n分析即可发现$w(u,fa_u)$显然是$O(size_u)$级别的，因此考虑树形背包\n\n那么我们就需要支持合并两组自由段\n\n$$ \\ $$\n\n### $O(N^3-N^2\\log N)$\n\n设当前$1\\ldots n$个自由端，合并上$m$个自由段(从子树合并上来是恰好$m$个)\n\n注意这些自由段之间是无序的\n\n先考虑一个简单的模型：\n\n把$n$个无序自由段拼接成$m$个无序自由段，设方案数为$W(n,m)$，则考虑\n\n先把$n$个自由段排列，然后选出$n-m$个间隔连接，然后除掉得到的$m$个段之间的排列\n\n得到{%raw%}$\\begin{aligned} W(n,m)=\\frac{n!} {m!}\\binom{n-1} {n-m} \\end{aligned}${%endraw%}\n\n类似的，可以把$n+m$个自由段排成一排，合并成若干段\n\n但是显然存在的问题就是：可能在两组自由段之间形成了连接，这样的连接是非法的\n\n因此考虑容斥\n\n{%raw%}$\\begin{aligned} dp'_{d}\\longleftarrow\\sum_{i=1}^ndp_{u,i}\\sum_{j=1}^idp_v (-1)^{i-j}W(i,j) \\sum_{k=1}^m (-1)^{m-k}W(m-1,k)\\sum_{d=1}^{j+k}W(j+k,d)\\end{aligned}${%endraw%}\n\n将上式分解为四步转移\n\n$n,i\\rightarrow j,O(n^2)$\n\n$m\\rightarrow k,O(m)$\n\n$j,k\\rightarrow j+k,O(nm)$\n\n$j+k\\rightarrow d,O((n+m)^2)$\n\n其中$O(n^2,(n+m)^2)$的部分如果用卷积优化，即可做到$O(N^2\\log N)$\n\n但是$O(N^3)$就$pts75$了...\n\n\n\nTips:注意在将$1$号节点加入序列时，用上面的方法无法保证它在序列首\n\n需要特殊处理，始终强制它在第一个\n\n### $O(N^2)$\n\n当我发现这个做法不需要任何优化就可以做到$O(N^2)$的时候。。。。\n\n~~把这个容斥的过程爆开~~\n\n先对于每个儿子的$dp$值按照容斥系数进行上文中$m\\rightarrow k$的变换，复杂度为$O(size_u)$\n\n然后进行背包合并，由树形背包的复杂度分析，总复杂度为$O(N^2)$\n\n最后发现其实我们只需要知道$dp_{u,w(u,fa_u)}$，因此这里也只需要$O(size_u)$\n\n综上，复杂度为$O(N^2)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T& a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T& a,T b){ ((a<b)&&(a=b)); }\n\nconst int DEBUG=1;\n#define Log(...) (DEBUG&&(fprintf(stderr,__VA_ARGS__)))\n\nchar IO;\nint rd(){\n\tint s=0,f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nbool Mbe;\nconst int N=5010;\n\nint n,P;\nll qpow(ll x,ll k=P-2){\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint I[N],J[N],C[N][N],W[N][N];\n\nstruct Edge{\n\tint to,nxt,w;\n} e[N<<1];\nint head[N],ecnt;\nvoid AddEdge(int u,int v,int w){\n\te[++ecnt]=(Edge){v,head[u],w};\n\thead[u]=ecnt;\n}\n\nint sz[N],w[N],dp[N][N],T[N];\nint A[N],B[N];\n\nvoid dfs(int u,int f){\n\tsz[u]=0,dp[u][0]=1;\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].to;\n\t\tif(v==f) continue;\n\t\tw[v]=e[i].w,dfs(v,u);\n\t\trep(a,0,sz[u]) T[a]=dp[u][a],dp[u][a]=0;\n\t\trep(a,0,sz[u]) rep(b,1,sz[v]) dp[u][a+b]=(dp[u][a+b]+1ll*T[a]*dp[v][b])%P;\n\t\tsz[u]+=sz[v];\n\t}\n\tint s=0;\n\trep(i,w[u],sz[u]+1) {\n\t\tint e=W[i][w[u]];\n\t\tif(u==1) e=1ll*C[i-1][i-w[u]]*J[i-1]%P*I[w[u]-1]%P;\n\t\ts=(s+1ll*e*dp[u][i-1])%P;\n\t}\n    // 求出我们需要的点值\n\t\n\trep(i,w[u]+1,sz[u]) dp[u][i]=0;\n\tif(!s) puts(\"0\"),exit(0);\n    // 容斥系数变换\n\trep(i,1,w[u]) {\n\t\tdp[u][i]=1ll*s*W[w[u]][i]%P;\n\t\tif((w[u]-i)&1) dp[u][i]=P-dp[u][i];\n\t}\n\tsz[u]=w[u];\n}\n\nbool Med;\nint main(){\n\tLog(\"Memory taken %.2lf\\n\",(&Med-&Mbe)/1024.0/1024.0);\n\tn=rd(),P=rd();\n\trep(i,J[0]=1,n) J[i]=1ll*J[i-1]*i%P;\n\tI[n]=qpow(J[n]);\n\tdrep(i,n,1) I[i-1]=1ll*I[i]*i%P;\n\trep(i,0,n) rep(j,C[i][0]=1,i) C[i][j]=C[i-1][j]+C[i-1][j-1],Mod1(C[i][j]),W[i][j]=1ll*C[i-1][i-j]*J[i]%P*I[j]%P;\n\trep(i,2,n){\n\t\tint u=rd(),v=rd(),w=rd();\n\t\tif(w&1) return puts(\"0\");\n\t\tAddEdge(u,v,w/=2),AddEdge(v,u,w);\n\t}\n\tdfs(w[1]=1,0);\n\tdp[1][1]=1ll*dp[1][1]*n%P;\n\tprintf(\"%d\\n\",dp[1][1]);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","各省OI"],"categories":["题解"]},{"title":"「ROI 2017 Day 1」虎   (计算几何)","url":"/articles/2021/02/01/b9561fd9.html","content":"# 「ROI 2017 Day 1」虎   (计算几何)\n\n题意：（交互题）\n\n已知$n$个点，$m$次询问，每次询问交互器随机生成一个位置的关键点，要求在$k$次查询中给出一个合法解\n\n查询：一个凸包，返回关键点是否在凸包中\n\n解：一个凸包，包含关键点，且不包含其它点，保证有界\n\n对关键点的包含是包括了边界线的，其它点的包含不包括边界线，凸包均要按照顺时针给出\n\n### Solution 1 ~~（未完全实现）~~\n\n先将给定点分层转化为若干凸包，容易通过二分得到关键点所在的层\n\n如果关键点以内不再有凸包，显然得到一个解\n\n否则，一个合法的解一定是在两层凸包中某一层选取两个点，另一层选取一个点得到的三角形\n\n先考虑内层选两个点的情况，令二分边界为内层凸包上点的编号，$l,r$\n\n考虑实现一个操作，对于$l,r$，找到其连接的直线在顺时针方向上在外层凸包上切到的段\n\n由此得到一个凸包进行查询，即可进行二分，最终$l+1=r$时，再进行一次上述操作得到一组解（不一定合法）\n\n如果不合法，同理再在外层上二分一次\n\n最终写道第一种情况弃掉了。。。\n\n$$ \\ $$\n\n$$ \\ $$\n\n### Solution2 随机分裂\n\n良好的随机分裂可以跑到max query times<=33的好成绩\n\n考虑一个非常简单的剖开$n$个点的方法：\n\n1.找到这些点的**凸包**，从点集中删掉\n\n2.从剩余点中选择一个作为**中心**，分别与凸包上的点连边，将平面分开\n\n3.确定每个三角形中包含的点，加上三个顶点，继续进行剖分\n\n最终当凸包以外不再有点时，结束\n\n$$ \\ $$\n\n查询也是比较显然的：\n\n对于当前凸包及其中心，二分找到关键点对应的位置，然后继续进行，直到不存在中心\n\n二分方法：\n\n凸包构成一圈，取一个点为$l$，顺时针180以内的范围最大角度的点为$r$，每次将中心和$l,mid$这连续一段查询判断是否包含\n\n这样存在的问题是：可能不在$l$的180范围内，需要在开始二分前判断一下\n\n十分朴素的实现也可以获得90分的好成绩\n\n优化：\n\n每次选取中心时，多随机几次，估价找到一个最优剖分即可\n\n[Loj Submission -包含大量调试语句和内嵌的交互部分](https://loj.ac/s/1052555)\n\n[Loj Submission](https://loj.ac/s/1053342)\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T& a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T& a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\nint rd(){\n\tint s=0,f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nbool Mbe;\nconst int N=5010;\n\nint n,q;\n\n// 计算几何部分\nnamespace Geometry{\nstruct Node{\n\tll x,y;\n\tNode(){ }\n\tNode(ll x,ll y):x(x),y(y){ }\n\tNode operator - (const Node __) const { return Node(x-__.x,y-__.y); }\n\tNode operator + (const Node __) const { return Node(x+__.x,y+__.y); }\n\tll operator ^ (const Node __) const { return 1ll*x*__.y-1ll*y*__.x; }\n\tbool operator == (const Node __) const { return x==__.x && y==__.y; }\n\tvoid Read(){ x=rd(),y=rd(); }\n} A[N],QuePoint;\ntypedef vector <int> V;\n// check close wise\nint chk(int i,int j,int k,int bound=0){ return ((A[k]-A[i])^(A[j]-A[i]))>=bound; }\nint chk(Node i,int j,int k,int bound=0){ return ((A[k]-i)^(A[j]-i))>=bound; }\n// this is clockwise\nint CheckConvex(const V &P){\n\tint n=P.size();\n\trep(i,0,n-1) {\n\t\tint j=(i+1)%n,k=(j+1)%n;\n\t\tif(!chk(P[j],P[k],P[i])) return 0;\n\t}\n\treturn 1;\n}\n// this is clock-wise\nint CheckIn(const V&P,Node X,int bound=0){\n\trep(i,0,P.size()-1) {\n\t\tint j=(i+1)%P.size();\n\t\tif(chk(X,P[i],P[j],bound)) continue;\n\t\treturn 0;\n\t}\n\treturn 1;\n}\nint Check(V P){\n\tif(P.size()<=2) return 0;\n\tprintf(\"? %llu \",P.size());\n\tfor(int i:P) printf(\"%d \",i); \n\tputs(\"\");\n\tfflush(stdout);\n\tstatic char s[5]; scanf(\"%s\",s);\n\treturn *s=='Y';\n}\nvoid Output(V P){\n\tprintf(\"! %llu \",P.size());\n\tfor(int i:P) printf(\"%d \",i);\n\tputs(\"\");\n\tfflush(stdout);\n}\nV Convex(V P){\n\tif(P.size()<=2) return P;\n\tV Ans;\n\tint n=P.size();\n\tstatic int I[N],mk[N],S[N],T;\n\trep(i,0,n-1) mk[I[P[i]]=i]=0;\n\tsort(P.begin(),P.end(),[&](int x,int y){ return A[x].x<A[y].x || (A[x].x==A[y].x && A[x].y>A[y].y); });\n\tT=0;\n\trep(i,0,n-1) {\n\t\twhile(T>1 && ((A[P[i]]-A[S[T]])^(A[S[T-1]]-A[S[T]]))>0 ) T--;\n\t\tS[++T]=P[i];\n\t}\n\trep(i,1,T) Ans.pb(S[i]),mk[I[S[i]]]=1;\n\tsort(P.begin(),P.end(),[&](int x,int y){ return A[x].x<A[y].x || (A[x].x==A[y].x && A[x].y<A[y].y); });\n\tT=0;\n\trep(i,0,n-1) {\n\t\twhile(T>1 && ((A[P[i]]-A[S[T]])^(A[S[T-1]]-A[S[T]]))<0 ) T--;\n\t\tS[++T]=P[i];\n\t}\n\tdrep(i,T,1) if(!mk[I[S[i]]]) Ans.pb(S[i]);\n\treturn Ans;\n}\n}\nusing namespace Geometry;\n\n\nconst int M=2e5+10;\n\nV C[M],S[M];\nint K[M],D[M],E[M],rt,m,mk[M];\n// 剖分\n// C凸包，S子节点\n// K中心，D凸包上0号点对应的180范围内的最大点，E凸包上D号点对应180范围内的最大点\n// m个数\nvoid Build(int &u,V P) {\n\tsort(P.begin(),P.end());\n\tint n=P.size();\n\tC[u=++m]=Convex(P);\n\trep(i,0,n-1) mk[i]=0;\n\tif(C[u].size()==P.size()) return;\n\tfor(int i:C[u]) mk[lower_bound(P.begin(),P.end(),i)-P.begin()]=1;\n\tV T; rep(i,0,n-1) if(!mk[i]) T.pb(P[i]);\n\tn=C[u].size();\n    // 获取剖分结果\n\tauto Get=[&]() {\n\t\tif(rand()&1) K[u]=T[(T.size()/(rand()%3+2)+rand()%8)%T.size()];\n\t\telse K[u]=T[rand()%T.size()];\n\t\tV P=T; P.erase(lower_bound(P.begin(),P.end(),K[u]));\n\t\tD[u]=E[u]=0;\n\t\twhile(D[u]<n-1 && chk(K[u],C[u][0],C[u][D[u]+1])) D[u]++;\n\t\tE[u]=D[u];\n\t\twhile(E[u]<n-1 && chk(K[u],C[u][D[u]],C[u][E[u]+1])) E[u]++;\n\t\tvector <V> ST(n);\n\t\tfor(int x:P) {\n\t\t\trep(i,0,n-1) {\n\t\t\t\tif(chk(K[u],C[u][i],x) && chk(K[u],x,C[u][(i+1)%n])) {\n\t\t\t\t\tST[i].pb(x);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\trep(i,0,n-1) ST[i].pb(K[u]),ST[i].pb(C[u][i]),ST[i].pb(C[u][(i+1)%n]);\n\t\treturn ST;\n\t};\n\tvector <V> st;\n\tint mi=1e9;\n\trep(kase,1,5) {\n\t\tint d=D[u],e=E[u],k=K[u];\n\t\tauto ST=Get();\n\t\tint now=0;\n\t\tfor(V j:ST) cmax(now,(int)j.size());\n\t\tif(now>mi){ D[u]=d,E[u]=e,K[u]=k; continue; }\n\t\tst=ST,mi=now;\n\t}\n\trep(i,0,n-1) {\n\t\tint x; Build(x,st[i]);\n\t\tS[u].pb(x);\n\t}\n}\n\nvoid Init() {\n\tV T(n);\n\trep(i,0,n-1) T[i]=i+1;\n\tBuild(rt,T);\n}\n\nvoid Find(int u=rt){\n\tif(!S[u].size()) return Output(C[u]);\n\tint n=C[u].size();\n\tint l,r;\n\tauto Get=[&](int l,int r) {\n\t\tV T; T.pb(K[u]);\n\t\tl%=n,r%=n;\n\t\tfor(int i=l;;i=(i+1)%n) {\n\t\t\tT.pb(C[u][i]);\n\t\t\tif(i==r) break;\n\t\t}\n\t\treturn Check(T);\n\t};\n\tif(Get(0,D[u])) l=0,r=D[u];\n\telse if(Get(D[u],E[u])) l=D[u],r=E[u];\n\telse l=E[u],r=n;\n\twhile(l+1<r) {\n\t\tint mid=(l+r)>>1;\n\t\tif(Get(l,mid)) r=mid;\n\t\telse l=mid;\n\t}\n\tFind(S[u][l]);\n}\n\nint main(){ \n\tn=rd();\n\trep(i,1,n) A[i].Read();\n\tInit();\n\tq=rd();\n\trep(_,1,q) Find();\n}\n\n```\n\n","tags":["ROI"],"categories":["题解"]},{"title":"[BJ United Round  3] 押韵","url":"/articles/2021/01/30/d68e278e.html","content":"# [BJ United Round #3] 押韵\n\n先%%%%%%%%%%%%%%%%% EI\n\n$$ \\ $$\n\n$$ \\ $$\n\n下文默认模数为$P$\n\n简要题意：求：用$k$种元素，每种元素使用$d$的倍数次，排成一个长度为$nd$的序列 的方案数\n\n这个题目的设定就让人想到两个离不开的元素 ： ~~(模数暗示了？)~~\n\n指数型生成函数 + 单位根反演\n\n显然可以得到每一种元素的指数型生成函数为\n\n{%raw%}$\\begin{aligned} \\text{EGF(Element)}=F(x)=\\sum_{d|i} \\frac{x^i} {i!}\\end{aligned}${%endraw%}\n\n带入单位根反演{%raw%}$\\begin{aligned}\\ [d|n]=\\frac{\\sum_0^{d-1} \\omega_d^{in} } {d}\\end{aligned}${%endraw%}\n\n即{%raw%}$F(x)=\\begin{aligned}\\frac{1} {d}\\cdot \\sum_{i=0}^{d-1}e^{\\omega_d^ix}\\end{aligned}${%endraw%}\n\n而总的生成函数就是 $G(x)=F^k(x)$\n\n即{%raw%}$\\begin{aligned} G(x)=\\frac{1} {d^k}\\cdot (\\sum_{i=0}^{d-1}e^{\\omega_d^ix})^k\\end{aligned}${%endraw%}\n\n其中的和式幂次展开会得到一个$k^d$项的多项式，我们要求$[x^n]G(x)$，就需要展开得到每一项的幂系数\n\n所以显然我们需要先合并同类项一下。。。\n\n而幂系数是一个单位根之和的形式，这就需要我们寻找单位根之间的关系\n\n这里得到一个思路：用$d$次单位根中的$\\varphi(d)$个作为基底，以简单的 有理数/整系数 表示出所有的$\\omega_d^i$\n\n$$ \\ $$\n\n对于$d=4$的情况比较简单，$\\varphi(d)=2$，可以得到四个单位根分别为$1,\\omega,-1,-\\omega$\n\n可以枚举得到的和为$x+y\\omega$，然后求系数\n\n优先考虑组合意义，可以发现就是在平面上每次可以走四个方向，$k$步之后最终到达$(x,y)$的方案数\n\n两个维度分立的情况，还需要枚举每个维度走了几步，所以用一种巧妙的转化两个维度联系在一起\n\n将平面旋转$\\frac{\\pi} {8}$，并且扩大$\\sqrt 2$倍，得到新的坐标为$(x-y,x+y)$，新的行走方向是$(+1,+1),(-1,-1),(-1,+1),(+1,-1)$\n\n这样以来，每次每个维度都有行走，可以确定每个维度$+1$和$-1$的次数，直接组合数排列即可得到答案\n\n$$ \\ $$\n\n$$ \\ $$\n\n对于$d=6$，甚至是更一般的情况的情况\n\n只在代数层面来看单位根似乎十分抽象，不如从复平面单位根上找一找灵感\n\n下面是$d=6$的情形\n\n![planeomega.png](https://i.loli.net/2021/01/30/Bb3vJq1TGPgtfs2.png)\n\n\n\n$\\varphi(6)=2$，假设以$\\overrightarrow{OA},\\overrightarrow{OB}$作为基底，可以直观地得到基底表达\n\n\n\n|                                  | $\\overrightarrow{OA}=1$ | $\\overrightarrow{OB}=\\omega$ |\n| -------------------------------- | ----------------------- | ---------------------------- |\n| $\\overrightarrow{OA}=\\omega_6^0$ | 1                       | 0                            |\n| $\\overrightarrow{OB}=\\omega_6^1$ | 0                       | 1                            |\n| $\\overrightarrow{OC}=\\omega_6^2$ | -1                      | 1                            |\n| $\\overrightarrow{OD}=\\omega_6^3$ | -1                      | 0                            |\n| $\\overrightarrow{OE}=\\omega_6^4$ | 0                       | -1                           |\n| $\\overrightarrow{OF}=\\omega_6^5$ | 1                       | -1                           |\n\n由此我们得到了一个$\\varphi(d)$维数的表达方法\n\n把每一维看做不同元，也就是说，得到了一个$\\varphi(d)$维，$O(1)$次的多项式，需要我们求高维多项式幂次\n\n令$N=k^{\\varphi(d)}$\n\n直接压位暴力多项式复杂度为$O(N\\log N-N\\log^2N)$，而且面临着模数难以处理，常数大的问题\n\n所以$\\text{EI}$又用出了一个巧妙的暴力方法解决这个问题，以$d=6$为例，先做一下处理，得到要求的多项式\n\n~~似乎每次$k$次幂总是求导+递推？~~\n\n$f(x,y)=x^2y+xy^2+y^2+y+x+x^2,g(x,y)=f^k(x,y)$\n\n$g(x,y)$对于$x$求偏导，得到$g'(x,y)=kf^{k-1}(x,y)f'(x,y)$\n\n即$g'(x,y)f(x,y)=kg(x,y)f'(x,y)$\n\n$f'(x,y)=2xy+2x+y^2+1$\n\n然后我们要解这个方程，考虑乘积为$[x^ny^m]$一项两边的系数\n\n左边$=[x^{n-2}y^{m-1}]+[x^{n-1}y^{m-2}]+[x^{n}y^{m-2}]+[x^{n}y^{m-1}]+[x^{n-1}y^{m}]+[x^{n-2}y^{m}]$\n\n换成$g(x,y)$的系数应该是\n\n左边$=(n-1)[x^{n-1}y^{m-1}]+n[x^{n}y^{m-2}]+(n+1)[x^{n+1}y^{m-2}]+(n+1)[x^{n+1}y^{m-1}]+n[x^{n}y^{m}]+(n-1)[x^{n-1}y^{m}]$\n\n右边$=2k[x^{n-1}y^{m-1}]+2k[x^{n-1}y^m]+k[x^ny^{m-2}]+k[x^ny^m]$\n\n其中$[x^{n+1}y^{m-1}]$只出现了一次，按照先$n$递增再$m$递增的顺序进行递推，即\n\n{%raw%}$\\begin{aligned}\\ [x^ny^m]=\\frac{2k[x^{n-2}y^{m}]+2k[x^{n-2}y^{m+1}]+k[x^{n-1}y^{m-1}]+k[x^{n-1}y^{m+1}]} {n}\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned}-\\frac{(n-2)[x^{n-2}y^{m}]+(n-1)[x^{n-1}y^{m-1}]+n[x^{n}y^{m-1}]+(n-1)[x^{n-1}y^{m+1}]+(n-2)[x^{n-2}y^{m+1}]} {n}\\end{aligned}${%endraw%}\n\n边界条件是 {%raw%}$\\begin{aligned}\\ [x^i]=[y^i](i\\ge k)=\\binom{k} {i-k}\\end{aligned}${%endraw%} (由系数$x,x^2$或$y,y^2$得到)\n\n由此带入递推即可\n\n综上，得到的每项的系数的复杂度为$O(d\\cdot k^{\\varphi(d)})$ ，其中$d$为递推每项需要的时间\n\n由系数得到答案仍然需要一次快速幂，因此依然带一个$\\log P$\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ a=min(a,b); }\ntemplate <class T> inline void cmax(T &a,T b){ a=max(a,b); }\n\nchar IO;\nint rd(){\n    int s=0,f=0;\n    while(!isdigit(IO=getchar())) if(IO=='-') f=1;\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return f?-s:s;\n}\n\nconst int N=2e3+10,P=1049874433,G=7;\n\nint n,k,d;\nll qpow(ll x,ll k=P-2) {\n    k%=P-1;\n    ll res=1;\n    for(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n    return res;\n}\nint w[100],C[N][N],I[N*2];\n\nint main() {\n    n=rd(),k=rd(),d=rd();\n    w[0]=1,w[1]=qpow(G,(P-1)/d);\n    rep(i,2,90) w[i]=1ll*w[i-1]*w[1]%P;\n    rep(i,0,k) rep(j,C[i][0]=1,i) C[i][j]=C[i-1][j]+C[i-1][j-1],Mod1(C[i][j]);\n    I[0]=I[1]=1;\n    rep(i,2,k*2) I[i]=1ll*(P-P/i)*I[P%i]%P;\n    if(d==1){\n        int ans=qpow(k,1ll*d*n);\n        printf(\"%d\\n\",ans);\n    } else if(d==2) {\n        int ans=0;\n        rep(i,0,k) ans=(ans+qpow((1ll*w[0]*i+1ll*w[1]*(k-i))%P,1ll*d*n)*C[k][i])%P;\n        ans=ans*qpow(qpow(d,k))%P;\n        printf(\"%d\\n\",ans);\n    } else if(d==3) {\n        int ans=0;\n        rep(i,0,k) rep(j,0,k-i) \n            ans=(ans+qpow((1ll*w[0]*i+1ll*w[1]*j+1ll*w[2]*(k-i-j))%P,1ll*d*n)*C[i+j][i]%P*C[k][i+j])%P;\n        ans=ans*qpow(qpow(d,k))%P;\n        printf(\"%d\\n\",ans);\n    } else if(d==4) {\n        int ans=0;\n        rep(i,-k,k) rep(j,-k,k) if(abs(i)+abs(j)<=k && (k-i-j)%2==0) {\n            ll x=qpow((1ll*w[0]*i+1ll*w[1]*j)%P,1ll*d*n);\n            ll y=1ll*C[k][(abs(i-j)+k)/2]*C[k][(k+abs(i+j))/2]%P;\n            ans=(ans+x*y)%P;\n        }\n        ans=(ans+P)*qpow(qpow(d,k))%P;\n        printf(\"%d\\n\",ans);\n    } else {\n        static int F[N*2][N*2];\n        int ans=0;\n        rep(i,0,k*2) rep(j,max(k-i,0),min(2*k,3*k-i)) {\n            if(i==0) F[i][j]=C[k][j-k];\n            else if(j==0) F[i][j]=C[k][i-k];\n            else {\n                int s=(2ll*k*(i>1?F[i-2][j]+F[i-2][j+1]:0)+1ll*k*(F[i-1][j-1]+F[i-1][j+1]))%P;\n                int t=((i>1?1ll*(i-2)*(F[i-2][j]+F[i-2][j+1]):0)+\n                    1ll*(i-1)*F[i-1][j-1]+1ll*i*F[i][j-1]+1ll*(i-1)*F[i-1][j+1])%P;\n                F[i][j]=1ll*(s-t+P)*I[i]%P;\n            }\n            ans=(ans+qpow((1ll*w[0]*(i-k)+1ll*w[1]*(j-k))%P,1ll*d*n)*F[i][j])%P;\n        }\n        ans=(ans+P)*qpow(qpow(d,k))%P;\n        printf(\"%d\\n\",ans);\n    }\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「CEOI2020」象棋世界  ","url":"/articles/2021/01/30/26929ebf.html","content":"# 「CEOI2020」象棋世界  \n\n下文默认$n=R,m=C,x=c_1,y=c_R$\n\n### Pawn\n\n略\n\n### Rook\n\n略\n\n### Queen\n\n先判掉一次到达的情况，然后就可以从起点和终点分别画出5条可行线\n\n由此得到若干交点，手动数一下有几个交点在内部的整点上\n\n```cpp\nvoid QQQ(){\n\tint d=abs(x-y);\n\tif(d==n-1 || d==0) puts(\"1 1\"); // 一次到达\n\telse {\n\t\td=(n-1-d)/2;\n\t\tint res=4;\n\t\tif(n==m) {\n            // 一条斜着，一条平着\n\t\t\tif(x==1 || x==n) res++;\n\t\t\tif(y==1 || y==n) res++;\n\t\t}\n\t\tif(((x+1)&1)==((y+n)&1)) { // 先判断整点，然后判断两条斜线相交是否在内部\n\t\t\tif(min(x,y)-d>=1) res++;\n\t\t\tif(max(x,y)+d<=m) res++;\n\t\t}\n\t\tprintf(\"%d %d\\n\",2,res);\n\t}\n}\n```\n\n$$ \\ $$\n\n$$ \\ $$\n\n### Bishop\n\n看起来是很复杂的问题，但是实际上可以从一个简单的贪心入手\n\n#### 判定条件\n\n可以发现，任意一次行走的直线上，坐标$(x,y)$的$(x+y)\\mod 2$不变\n\n所以只要$x+1\\equiv y+n\\pmod 2$即可\n\n#### 贪心策略\n\n首先一定是每次向前走\n\n第一步选择向左/右，然后每次转向，每次走都顶到边界线\n\n但是这样显然会无法到达最终位置\n\n#### 纠正方法\n\n考虑贪心到达的最后位置为$to$，那么得到的差值$|to-y|$是我们要矫正的距离\n\n而矫正方法：在中途出现的每次转向位置，向里面\"凹\"进去一点，每凹进去一格，实际上相当于少走了两格\n\n注意矫正的方向是根据最后一步走的方向而变化的，因此如果矫正方向不对，需要额外增加一步\n\n此时，相当于需要多矫正到沿边界线对称的位置，需要多走$2(to-1)$或者$2(m-to)$的距离\n\n假设走了$c$步，那么我们有$c-1$个转折点，最后将这若干的矫正距离分配到$c-1$个转折点上，可以用一个组合数解决\n\n由于矫正距离是$O(m)$的，所以组合数显然可以在$O(m)$时间内求出\n\n$$ \\ $$\n\n最后将向左向右合并即可\n\n```cpp\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint C(int n,int m) {\n\tif(m>n-m) m=n-m;\n\tint a=1,b=1;\n\trep(i,1,m) a=1ll*a*(n-i+1)%P,b=1ll*b*i%P;\n\treturn a*qpow(b)%P;\n}\nint Divide(int n,int m){ // Divide n elements in to m groups , each can be empty\n\tif(m<=0 && n>0) return 0;\n\treturn C(n+m-1,m-1);\n}\nvoid BBB(){\n\tif(((x+1)&1)!=((y+n)&1)) return puts(\"0 0\"),void();\n\tauto Subsolver=[&](int x,int y){\n        // assume that we go left first\n\t\tint c=0,to=x,dis=n-1; // count , towardsposition\n\t\tc=1,dis-=x-1,to=1; // go left by x-1\n\t\tc+=dis/(m-1),to=((dis/(m-1))&1)?m:1,dis%=m-1; // then each step m-1 opposite\n\t\tif(dis) c++,to=to==1?to+dis:to-dis; // reach destination (NO!)\n\t\tif(to==y) return mp(c,1);\n\t\tint d=abs(to-y)/2;\n\t\tif((c&1)  && y>to) d+=to-1,c++;\n\t\tif((~c&1) && y<to) d+=m-to,c++;\n\t\treturn mp(c,Divide(d,c-1));\n\t};\n\tPii l=Subsolver(x,y),r=Subsolver(m-x+1,m-y+1);\n\tif(l.first>r.first) swap(l,r);\n\tif(r.first==l.first) (l.second+=r.second)%=P;\n\tprintf(\"%d %d\\n\",l.first,l.second);\n}\n```\n\n$$ \\ $$\n\n$$ \\ $$\n\n### King\n\n可以发现，每次一定是向前的三个方向走，由此可以得到一个简单的$O(nm)\\ $ $dp$\n\n用矩阵优化可以做到$O(m^3\\log n)$求出所有的答案\n\n难点在于如果快速求出这个矩阵$A$的$A^{n-1}$，即要加速矩阵求幂\n\n容易想到用 **特征多项式** 解决该问题，[参考 ](https://www.cnblogs.com/chasedeath/p/12949896.html)\n\n问题分为两步\n\n#### 得到$p_m(\\lambda)$\n\n列出我们的转移矩阵$A=$\n\n$\\begin{matrix}1\\ 1\\ 0\\ 0\\ 0\\ 0\\ \\cdots \\ 0\\\\ 1\\ 1\\ 1\\ 0\\ 0\\ 0\\ \\cdots \\ 0\\\\ 0\\ 1\\ 1\\ 1\\ 0\\ 0\\ \\cdots \\ 0\\\\ \\cdots\\cdots\\cdots\\cdots \\\\ 0\\ \\cdots\\ 0\\ 0\\ 1\\ 1\\ 1\\ 0\\\\0\\ \\cdots\\ 0\\ 0\\ 0\\ 1\\ 1\\  1\\\\ 0\\ \\cdots\\ 0\\ 0\\ 0\\ 0\\ 1 \\ 1\\end{matrix}$\n\n\n\n$\\lambda I-A=$\n\n| $\\lambda -1$ | $-1$         | $0$          | $0$      | $0$      | $0$          | $\\cdots$     | $0$          |\n| ------------ | ------------ | ------------ | -------- | -------- | ------------ | ------------ | ------------ |\n| $-1$         | $\\lambda -1$ | $-1$         | $0$      | $0$      | $0$          | $\\cdots$     | $0$          |\n| $0$          | $-1$         | $\\lambda -1$ | $-1$     | $0$      | $0$          | $\\cdots$     | $0$          |\n| $\\cdots$     | $\\cdots$     | $\\cdots$     | $\\cdots$ | $\\cdots$ | $\\cdots$     | $\\cdots$     | $\\cdots$     |\n| $0$          | $0$          | $\\cdots$     | $0$      | $-1$     | $\\lambda -1$ | $-1$         | $0$          |\n| $0$          | $0$          | $\\cdots$     | $0$      | $0$      | $-1$         | $\\lambda -1$ | $-1$         |\n| $0$          | $0$          | $\\cdots$     | $0$      | $0$      | $0$          | $-1$         | $\\lambda -1$ |\n\n每一行有$2/3$个元素，看起来并不是很好得到行列式\n\n但是容易得到一个递推式，设$m$阶转移矩阵的特征多项式为$p_m(\\lambda)$\n\n如果最后一行取第$m$个元素，值为$(\\lambda-1)p_{m-1}(\\lambda)$\n\n如果最后一行取第$m-1$个元素，值为$-p_{m-2}(\\lambda)$\n\n因而得到\n\n{%raw%}$p_m(\\lambda)=\\left\\{\\begin{aligned}1&& m=0\\\\ \\lambda-1 && m=1\\\\ (\\lambda-1)p_{m-1}(\\lambda)-p_{m-2}(\\lambda) && m>1\\end{aligned}\\right.${%endraw%}\n\n可以在$O(m^2)$的时间内暴力求出，也可以得到通项公式(太憨了)\n\n那么得到关系用$\\lambda^n\\mod p_m(\\lambda)$的系数优化计算，可以用暴力实现的多项式取模+快速幂得到$O(m^2\\log n)$\n\n当然也可以优化\n\n$$ \\ $$\n\n#### 求出$A^0,A^1,A^2\\cdots A^m$\n\n直接求显然是$O(m^3)$的，~~卡一卡说不定能过？~~\n\n由于走的是一个$m\\times m$的棋盘，可以用一个简单容斥得到答案\n\n设$f_{x,y}$为从$x$走到$y$，中途允许超出边界的方案数\n\n由于棋盘只有$m\\times m$，中途最多只会可能经过一条边界线\n\n而一旦在某一个时刻超出边界线到达$0/m+1$，那么接下来达到这条边界线两侧对称点的方案数是一样的\n\n即：跨过了某一条边界线$0/m+1$的不合法方案数，可以用到达$y$关于这条边界线的 **对称点的** 不一定合法方案数得到\n\n而不一定合法的$f_{x,y}$实际上只和$|x-y|$有关\n\n由此，可以用$f_{0,i}$表示出$A^i_{x,y}$，那么接下来只需要先计算出$f_{0,i}$对于系数的求和，最终进行一次容斥，减去两侧不合法方案数即可\n\n```cpp\ntypedef vector <int> Poly;\nPoly operator * (const Poly &a,const Poly &b){\n\tint n=a.size()-1,m=b.size()-1;\n\tPoly c(n+m+1);\n\trep(i,0,n) rep(j,0,m) c[i+j]=(c[i+j]+1ll*a[i]*b[j])%P;\n\treturn c;\n}\nPoly operator * (Poly a,const int &b){\n\tfor(int &i:a) i=1ll*i*b%P;\n\treturn a;\n}\nPoly operator + (Poly a,const Poly &b){\n\tif(a.size()<b.size()) a.resize(b.size());\n\trep(i,0,b.size()-1) a[i]+=b[i],Mod1(a[i]);\n\treturn a;\n}\nPoly operator - (Poly a,const Poly &b){\n\tif(a.size()<b.size()) a.resize(b.size());\n\trep(i,0,b.size()-1) a[i]-=b[i],Mod2(a[i]);\n\treturn a;\n}\nPoly operator % (Poly a,const Poly &b){\n\tint n=a.size()-1,m=b.size()-1;\n\tif(n<m) return a;\n\tassert(b[m]==1);\n\tdrep(i,n-m,0) rep(j,0,m) a[i+j]=(a[i+j]+1ll*(P-a[i+m])*b[j])%P;\n\ta.resize(m);\n\treturn a;\n}\nPoly Pow(Poly x,int k,Poly Mod){\n\tPoly res=x; k--;\n\tfor(;k;k>>=1,x=x*x%Mod) if(k&1) res=res*x%Mod;\n\treturn res;\n}\n\nPoly F,G,T=Poly{P-1,1};\nint f[N*2],g[N*2],H[N*2];\nvoid KKKInit(){\n\tG=Poly{1},F=T;\n\trep(i,2,m) swap(F,G),F=G*T-F; // 递推特征多项式\n\tF=Pow(Poly{0,1},n-1,F); // 求出x^{n-1} mod p(x)\n\tf[0]=1,H[0]=F[0];\n\trep(t,1,F.size()-1) { // 求出f_{0,i}，只需要求一半\n\t\trep(i,0,t) g[i]=f[i];\n\t\trep(i,0,t) {\n\t\t\tf[i]=(0ll+(i?g[i-1]:g[1])+g[i]+g[i+1])%P;\n\t\t\tH[i]=(H[i]+1ll*f[i]*F[t])%P; // 乘上系数累和\n\t\t}\n\t}\n}\nvoid KKK(){\n\tint res=H[abs(x-y)];\n    // 两侧对称点\n\t// y -> 0-(y-0)=-y\n\t// y -> m+1+(m+1-y)=2(m+1)-y\n\tres-=H[abs(-y-x)];\n\tres-=H[abs(2*(m+1)-y-x)];\n    // 容斥\n\tres=(res%P+P)%P;\n\tprintf(\"%d %d\\n\",n-1,res);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["CEOI"],"categories":["题解"]},{"title":"[补]NOIP2020T4微信步数","url":"/articles/2021/01/07/3aa5cefa.html","content":"# [补]NOIP2020T4微信步数\n\n题意：一个人在$k$维平面上，每一维范围是$[1,W_i]$上的任意一个位置，初始可以在任何一个位置\n\n这个人在空间上游走，每$n$步为一轮不断重复，每一步是一个方向上走-1或者1，求所有情况下 最后他离开空间范围的时间 之和\n\n分析：\n\n行走是循环的，每一维可以先看做独立，然后离开范围的时间就是每一维取$\\min$\n\n### 一个简单的思路：\n\n求出每一维每一个位置离开的时间，然后$k$路归并得到答案，复杂度为$O((\\sum W_i)k+nk)$\n\n容易想到根据循环来优化计算，但是如果以每一个位置为元素进行考虑，难以处理不同长度循环之间的合并\n\n$$ \\ $$\n\n### 更换思路：\n\n简单的计数方法的转换：\n\n从初始位置离开的时间之和 = 前$i(i\\ge 0)$步还未离开空间的初始位置个数之和\n\n令$F_{i,j}$为$i$这一维$j$步还未离开的初始位置个数，则答案就是 {%raw%}$\\begin{aligned} \\sum_{i\\ge 0}\\prod F_{i,j}\\end{aligned}${%endraw%}\n\n此时观察发现除了第一轮需要特殊考虑以外，其它的$F_{i,j}$可以表示为$\\max\\lbrace0,F_{i,j-n}-D_i\\rbrace$(其中$D_i$为每一轮$i$这一维偏移的量)\n\n对于前面$n$(好像是$2n$)个特殊考虑，后面对于每一个不同的$i\\mod n$可以放在一起考虑，用一个统一的式子表示\n\n然后计算就是类似{%raw%}$\\begin{aligned} \\sum_{i\\ge 0}\\prod (G_j-i D_j)\\end{aligned}${%endraw%}，以$i$为元，所求的就是是一个$k$次多项式前缀和，也就是一个$k+1$次多项式的点值\n\n暴力的方法就是 求出前面$k+2$项的值，然后用 拉格朗日插值/高斯消元 得到答案，复杂度为$O(nk^2-nk^3)$(如果插值写好一点，复杂度主要受限于求值)\n\n~~然后甚至可以无脑吸多项式做到$O(nk\\log ^2k)$~~\n\n求值时可以发现 对于$i$所求的$j$处点值的积式里面 最多只有一项和$i-1$不同，因而可以特殊考虑以优化求值复杂度\n\n下面是$nk^2$，由于求值已经是$k^2$了，所以插值也没优化\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\nchar IO;\nint rd(){\n\tint s=0,f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=5e5+10,P=1e9+7;\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint n,m,W[12],F[12][N*2];\nint A[N],B[N],D[N];\nint ans;\nll X[20],Y[20],I[20];\nint Lag(int n,int x){\n\tll res=0;\n\trep(i,0,n) {\n\t\tll a=1,b=1;\n\t\trep(j,0,n) if(i!=j) a=a*(P+x-X[j])%P,b=b*(X[i]<X[j]?-I[X[j]-X[i]]:I[X[i]-X[j]])%P;\n\t\tres=(res+a*b%P*Y[i])%P;\n\t}\n\treturn res;\n}\nint main() {\n\tI[0]=I[1]=1;\n\trep(i,2,19) I[i]=P-P/i*I[P%i]%P;\n\tn=rd(),m=rd();\n\trep(i,1,m) W[i]=rd();\n\trep(i,1,n) A[i]=rd(),B[i]=rd();\n\tint f=0;\n\trep(i,1,m) {\n\t\tint c=F[i][0]=W[i],now=0,l=0,r=0;\n\t\trep(j,1,n*2) {\n\t\t\tif(A[j<=n?j:j-n]==i) now+=B[j<=n?j:j-n];\n\t\t\tif(now<l) l=now,c--;\n\t\t\tif(now>r) r=now,c--;\n\t\t\tc=max(c,0),F[i][j]=c;\n\t\t}\n\t\tD[i]=abs(now)/2;\n\t\tif(now || c==0) f=1;\n\t}\n\tif(!f) return puts(\"-1\"),0;\n\trep(i,0,n){\n\t\tll t=1;\n\t\trep(j,1,m) t=t*F[j][i]%P;\n\t\tans=(ans+t)%P;\n\t}\n\trep(i,n+1,n*2) {\n\t\tint n=1e9,f=1;\n\t\trep(j,1,m) {\n\t\t\tif(D[j]) n=min(n,F[j][i]/D[j]);\n\t\t\tf&=F[j][i]>0;\n\t\t}\n\t\tif(!f) continue;\n\t\tint t=1;\n\t\trep(j,1,m) t=1ll*t*max(0,F[j][i]-D[j]*(n+1))%P;\n\t\tans=(ans+t)%P;\n\t\tint s=0;\n\t\trep(k,0,m+1) {\n\t\t\tint t=1;\n\t\t\trep(j,1,m) t=1ll*t*(F[j][i]-D[j]*k)%P;\n\t\t\tX[k]=k,Y[k]=s=(s+t)%P;\n\t\t}\n\t\tans=(ans+Lag(m+1,n))%P;\n\t}\n\tans=(ans%P+P)%P,printf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["NOIP"],"categories":["题解"]},{"title":"NOIP2020游记","url":"/articles/2021/01/07/5dd4d224.html","content":"# NOIP2020游记\n\n~~(没想到一直到学考考完才来写这个。。)~~\n\n### Day -1 \n\n最后一张模拟赛，结果 T4放了这个 [「清华集训 2017」小 Y 和地铁](https://loj.ac/p/2323)\n\n哇谁没事搞一个爆搜题在这里\n\n~~结果被我模拟退火搞过去了~~\n\n现在感觉乱搞能力++!!\n\n$$ \\ $$\n\n### Day0\n\n抵达杭州，~~为什么会有一个叫做橘子酒店的东西~~\n\n听说会很冷，但是实际上也并没有\n\n这次似乎有好好休息一下？\n\n$$ \\ $$\n\n### Day1\n\n~~假装慌得不行~~\n\n一大早考试，结果第一次在XJ解决了排泄问题\n\n### T1: -5min\n\n小模拟gogogo！诶是不是要高精\n\n不管了直接莽unsigned long long \n\n~~怎么可能在考场上打高精的~~\n\n$$ \\ $$\n\n### T2\n\nReading.....\n\n1e6 , 5组数据， CCF什么时候这么大方了...\n\n那一定是$O(n)$！kmp! kmp!\n\nWondering.....\n\n这怎么可能$O(n)$写... 果然还是写$n\\cdot (26+\\ln n)$吧\n\n测试...\n\n完了常年开O2差点都不会用register了\n\n2s，感觉i7可以拯救我\n\n### T3\n\n这是一个假的传统题.... CCF居然用Spj了\n\n题目描述还是错的... 过过过\n\n### T4\n\n诶这里怎么有一个愚蠢的80分，我要这个100有何用\n\npts80 ----- 分类讨论中 .....\n\n### T3*2\n\n看起来像是一个排序问题，而且几乎是没有辅助空间的排序\n\n先写一个暴力，强行交换任意两个位置的数字..\n\n分类讨论中...\n\n$$ \\ $$\n\n常见的排序不就是 归并/快排 嘛 ， 那没有辅助空间不就是快排了\n\n似乎已经确定了数字的个数，那么根本就不需要随机，直接自顶向下分治，向两边分开所有的数字即可\n\ncopy ... paste... copy ... paste ...\n\n硬生生写了200行? ~~啊?~~\n\n$O(nm\\log )$还是很稳的\n\n果然是乱搞能力++吗?\n\n$$  \\ $$\n\n稳健稳健，还有将近一个小时时间检查，~~不打分了，不会打了~~\n\nT1 果然还是怕，果然还是不想打高精，优化了一下运算顺序\n\nT2 没毛病\n\nT3 完全没毛病\n\nT4 ~~这个怎么会去写100的。。~~ 写一个基排优化一下常数？果然没用。。。\n\n\n\n### I'm out!\n\n果然全机房几乎没有人动高精.....妙啊\n\n听说所有人都写了hash！我去好像很简单！~~听说大部分都T掉了？~~\n\n听说有很多人T3写了$n^2m,nm^2$\n\n听说外校的人都A了T4?( ⊙ o ⊙ )\n\n\n\n### 出成绩\n\n果然出题人不会卡高精太多分( ^_^ )\n\n浙江居然这么少300+？\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["游记"]},{"title":"CSP-S 2020 游记","url":"/articles/2021/01/07/48ee5331.html","content":"# CSP-S 2020 游记\n\n~~没想到一直到学考考完才来写这个。。~~\n\n\n\n### Day-?,Day0\n\n机房环境极其平和，模拟赛各种花式错误\n\n依然十分坚定，完全没复习，考前还在猛吸多项式~~。。。。\n\n~~哎这太香了嘛~~\n\n\n\n$$ \\  $$\n\n### -3h\n\n中午试图午睡，果然没睡着，起来的时候眼睛都睁不开\n\n~~料想每次模拟赛都是这么考的，应该问题不大~~\n\n## -10min\n\n哇是去年省选一样配置\n\n今年报了Linux，机房四个人1，3，5，7座位，~~md结果我坐在考场第一个位置疯狂爆零~~\n\n~~这次Linux考场文件没出问题~~\n\n预想到Linux机房必然大佬无数，结果旁边的大佬一顿乱敲发现键盘是坏的！\n\n半天，监考人员换了一个，还是坏的！\n\n然后直接换了一个新的键盘。。。\n\n### -3min\n\n又是惊心动魄的输密码，果然~~\n\n熟悉的监考人员，一样~~(更)~~神经病的密码！！\n\n监考人员4次写错密码大小写，终于改完\n\n然后另一个监考人员告诉它外面的括号也是密码。。。~~(结果还是错了大小写)~~\n\n### 0-10min\n\n状态极佳，板子敲了10分钟，结果发现原来我的右括号卡键。。。\n\n现在补换键盘还来得及不。。。\n\n### 10~?min\n\n旁边换了键盘的大佬开始猛敲\n\n啊不，是用手指猛砸键盘，场面一度十分恐怖\n\n~~这就是健壮嘛~~\n\n$$ \\  $$\n\n看T1，我~~啊啊~~大模拟，开始硬刚\n\n刚了20分钟刚完第一份代码，然后发现题目只看了一半。。。重构.jpg\n\n怎么两边闰年不一样的\n\n怎么一个月少了10天\n\n怎么还要特判那一年\n\n啊啊啊啊啊啊啊啊啊啊啊啊啊\n\n曾经妄想$O(1)$写，惨遭毒打\n\n最后写了一大堆封装函数，测一下诶似乎还ko以，溜了溜了\n\n$$ \\  $$\n\n看T2，$k=64$\n\n出题人是不是爱上unsigned long long了。。诶离散一下$q_i$，for三次判一下\n\n哇$q_i$不相同！删掉！\n\n2^64-x肯定可以溢出回来，我相信unsigned long long\n\n~~哇真实，竟然还有答案为$2^{64}$的情况~\n\n$$  \\ $$\n\n看T3，有人奶今年题会很难，这个题看起来这么有b格，那这个我题必做不出来\n\n诶开始爽暴力分.jpg\n\n$n\\leq 20000$，啊怎么没有$n^2$这一档分的。。。。\n\ndis出题人\n\n只凑了50pts\n\n$$  \\ $$\n\nT4。。。每次操作是固定的，诶这怎么是个模拟题。。。\n\n每次取最值操作，最后决策要支持回撤\n\n怕T手莽可删堆，结果本地还是5e4很慢。。。\n\n最后十分钟：T4是不是可以两个队列维护最值！\n\n一直刚到最后一分钟，结果还是没调完。。。差点代码没交上去。。。\n\n### 240min+\n\n出考场：完了所有人都A了T3。。。。。\n\n~~T4两个队列果然是错的。。。~~\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["游记"]},{"title":"Stirling数小记","url":"/articles/2020/12/03/450a91ae.html","content":"# Stirling数小记\n\n------------------------------\n\n### 定义/组合意义\n\n\n\n第一类斯特林数：$\\begin{bmatrix}n\\\\ m\\end{bmatrix}$表示$n$个不同元素分为$m$个圆排列的方案数\n\n有标号的第一类斯特林数$s(n,m)=(-1)^{n-m}\\begin{bmatrix}n\\\\ m\\end{bmatrix}$\n\n第二类斯特林数：$\\begin{Bmatrix}n\\\\ m\\end{Bmatrix}$表示$n$个不同元素分为$m$个集合的方案数\n\n注意圆排列和集合都是相互之间无序的\n\n$$ \\ $$\n\n---------------------\n\n### 递推方法\n\n\n\n第一类斯特林数\n\n$\\begin{bmatrix}n\\\\ m\\end{bmatrix}=\\begin{bmatrix}n-1\\\\ m-1\\end{bmatrix}+(n-1)\\begin{bmatrix}n-1\\\\ m\\end{bmatrix}$\n\n即新建一个圆排列，或者插入前面$n-1$个元素中任意一个的后面\n\n显然的，有标号的第一类斯特林数递推式就是\n\n$\\begin{bmatrix}n\\\\ m\\end{bmatrix}=\\begin{bmatrix}n-1\\\\ m-1\\end{bmatrix}-(n-1)\\begin{bmatrix}n-1\\\\ m\\end{bmatrix}$\n\n$$ \\ $$\n\n第二类斯特林数\n\n$\\begin{Bmatrix}n\\\\ m\\end{Bmatrix}=\\begin{Bmatrix}n-1\\\\ m-1\\end{Bmatrix}+m\\begin{Bmatrix}n-1\\\\ m\\end{Bmatrix}$\n\n即新建一个集合，或者加入前面的$m$个集合\n\n$$ \\ $$\n\n-----------------------\n\n### 第二类斯特林数的通项公式\n\n\n\n{%raw%}$\\begin{aligned} \\begin{Bmatrix} n \\\\ m \\end{Bmatrix}=\\frac{1} {m!}\\sum_{i=0}^{\\infty} (-1)^{m-i}\\binom{m} {i} i^n \\end{aligned}${%endraw%}\n\n其组合意义是枚举生成了多少个有序的集合，然后容斥，最后除去集合的顺序\n\n$$ \\ $$\n\n-----------------------\n\n### 生成函数表示与行/列求解\n\n\n\n固定$n$，以$m$为形式幂指数，则第一类斯特林数的普通生成函数\n\n{%raw%}$\\begin{aligned}\\text{OGF}=\\prod_{i=0}^{n-1}(x+i)=x^{\\overline{n} }\\end{aligned}${%endraw%}\n\n(其意义就是上面的递推公式)\n\n倍增+卷积二项展开求出$F(x+i)$即可做到$O(n\\log n)$求出一行\n\n$$ \\ $$\n\n固定$m$，以$n$为形式幂指数，则第一类斯特林数的指数型生成函数\n\n{%raw%}$\\begin{aligned}\\text{EGF}= & \\frac{1} {m!}\\cdot (\\sum_{i=1}^{\\infty}\\frac{(i-1)!} {i!}x^i)^m\\\\= & \\frac{1} {m!}\\cdot  (\\sum_{i=1}^{\\infty}\\frac{x^i} {i})^m\\end{aligned}${%endraw%}\n\n设$F(x)=\\sum_{i=1}^{\\infty}\\frac{x^i} {i}$\n\n{%raw%}$\\begin{aligned} \\because F'(x)=&\\sum_{i=1}^{\\infty}x^{i-1}=\\frac{1} {1-x}\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned} \\therefore F(x)=\\int \\frac{1} {1-x}=-\\ln(1-x)\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned}\\therefore \\text{EGF} = & \\frac{1} {m!}\\cdot  (-\\ln(1-x))^m\\\\= & \\frac{1} {m!}\\cdot (-1)^m\\cdot \\ln^m(1-x)\\end{aligned}${%endraw%}\n\n(就是百度百科上的那个，它什么都没讲清楚)\n\n多项式快速幂即可做到$O(n\\log n-n\\log ^2n)$求一列\n\n$$ \\ $$\n\n而在上式的推导过程中额外加入$(-1)^m$的常数，并且把$x^i$换成$(-x)^i$可以得到有标号第一类斯特林数的指数型生成函数\n\n{%raw%}$\\begin{aligned} \\text{EGF} = & \\frac{1} {m!}\\cdot  (\\sum_{i=1}^{\\infty}\\frac{(-x)^i} {i})^m\\\\=& \\frac{1} {m!}\\cdot  \\ln^m(1+x)\\end{aligned}${%endraw%}\n\n$$ \\ $$\n\n$$ \\ $$\n\n第二类斯特林数的一行可以直接由通项公式做卷积得到\n\n$$ \\ $$\n\n固定$m$，以$n$为形式幂指数，则第二类斯特林数的指数型生成函数表示为\n\n{%raw%}$\\begin{aligned} \\text{EGF} &=\\frac{1} {m!}({\\sum_{i=1}^{\\infty} \\frac{x^i} {i!} })^m\\\\ &=\\frac{1} {m!}(e^x-1)^m \\\\ &=\\frac{1} {m!}\\sum_{i=0}^m (-1)^{m-1} \\binom{m} {i}e^{ix}\\end{aligned}${%endraw%}\n\n实际上由这个二项展开的形式也可以发现，它就是上面通项公式的生成函数推导\n\n可以求一列，复杂度为$O(n\\log n-n\\log ^2n)$常数很大\n\n$$ \\ $$\n\n虽然没什么意义，但是还是写一下二元形式\n\n第一类斯特林数:\n\n{%raw%}$\\begin{aligned} \\text{EGF}=e^{-\\ln (1-x)y}\\end{aligned}${%endraw%}\n\n第二类斯特林数:\n\n{%raw%}$\\begin{aligned}\\text{EGF}=e^{\\begin{aligned}(e^x-1)y\\end{aligned} }\\end{aligned}${%endraw%}\n\n注意元$x$为指数型，$y$是普通型\n\n$$ \\ $$\n\n--------------------\n\n### 斯特林数与幂指数/上升幂/下降幂\n\n第一类斯特林数：\n\n上面已经说过{%raw%}$\\begin{aligned}x^{\\overline{n} }=\\sum_{i=0}^{n}\\begin{bmatrix}n\\\\i\\end{bmatrix}x^i\\end{aligned}${%endraw%}\n\n同理，用有标号的第一类斯特林数将$x^{\\underline{n} }$展开的式子是\n\n{%raw%}$\\begin{aligned}x^{\\underline{n} }=\\sum_{i=0}^{n}(-1)^{n- i}\\begin{bmatrix}n\\\\i\\end{bmatrix}x^i\\end{aligned}${%endraw%}\n\n\n\n$$ \\ $$\n\n第二类斯特林数：\n\n类似通项公式的求解，组合意义将幂指数展开，视$x^n$为将$n$个元素随意放在$x$个位置，则枚举$x$个位置中那些被选择\n\n{%raw%}$\\begin{aligned} x^n=\\sum_{i=0}^n \\binom{x} {i}i!\\begin{Bmatrix}n\\\\i\\end{Bmatrix} \\end{aligned}${%endraw%}\n\n把$\\binom{x} {i}i!$写成下降幂的形式，得到优美的式子\n\n{%raw%}$\\begin{aligned} x^n=\\sum_{i=0}^n \\begin{Bmatrix}n\\\\i\\end{Bmatrix}x^{\\underline{i} }\\end{aligned}${%endraw%}\n\n$$ \\ $$\n\n而实际上由上式二项反演也可以得到通项公式\n\n{%raw%}$\\begin{aligned} \\begin{Bmatrix} n \\\\ m \\end{Bmatrix}=\\frac{1} {m!}\\sum_{i=0}^{\\infty} (-1)^{m-i}\\binom{m} {i} i^n \\end{aligned}${%endraw%}\n\n关于下降幂多项式的快速转化，可以再借鉴[这个](https://www.cnblogs.com/chasedeath/p/13073206.html)\n\n$$ \\ $$\n\n----------------------\n\n### 斯特林变换/斯特林反演\n\n对于斯特林变换\n\n{%raw%}$\\begin{aligned} a_n=\\sum_{i=0}^n\\begin{Bmatrix}n\\\\i\\end{Bmatrix}b_i \\end{aligned}${%endraw%}\n\n设$A(x),B(x)$为数列$a,b$的指数型生成函数，带入前文推导的式子，则得到上式的生成函数表达就是\n\n$A(x)=B(e^x-1)$\n\n显然得到$B(x)=A(\\ln(x+1))$，而$\\ln(x+1)$显然转化为有标号的第一类斯特林数\n\n因此得到斯特林反演的表达形式是 \n\n{%raw%}$\\begin{aligned}b_n=\\sum_{i=0}^{n}(-1)^{n-i}\\begin{bmatrix}n\\\\i\\end{bmatrix}a_i\\end{aligned}${%endraw%}\n\n~~(不大可能搞类似多项式复合的方法处理这个反演吧，最多可能也就是求一个位置)~~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["学习笔记"]},{"title":"TopCoder - 12584 SRM 582 Div 1 SemiPerfectPower (莫比乌斯反演)","url":"/articles/2020/12/03/e82b2347.html","content":"# TopCoder - 12584 SRM 582 Div 1 SemiPerfectPower (莫比乌斯反演)\n\n### 题目大意：\n\n给定$L,R$，求$[L,R]$中能够表示为$a\\cdot b^c(1\\leq a<b,c>1)$的数(SemiPerfect数)的个数\n\n$R\\leq 8\\cdot 10^{16}$\n\n### 解题思路\n\n首先显然可以通过作差转化为求$[1,n]$内的个数\n\n接下来考虑简化$c$的情形\n\n推论：任何一个SemiPerfect数可以表示为$c\\leq 3$的形式\n\n证明：若$c>3$，对于$n=a\\cdot b^c(c>3)$\n\n当$2|c$时，显然存在形如$n=a\\cdot (b^{\\frac{c} {2} })^{2}$的表示\n\n当$2\\not |c$时，可以表示为$n=(a\\cdot c)\\cdot (b^{\\frac{c-1} {2} })^2$同样合法\n\n接下来考虑对于两种情况分类讨论\n\n为了便于叙述，令$F(n)=\\max \\lbrace k\\in \\N^+|\\ k^2|n\\rbrace$\n\n$G(n)=[\\nexists k>1,k^3|n]$\n\n### Part1 $c=2$\n\n为了避免重复，强制每一个数$n$的唯一表示为\n\n$n=a\\cdot b^2(F(a)=1,a<b)$\n\n由于$a<b$，所以显然$n>a^3$，即$a<n^{\\frac{1} {3} }$\n\n暴力枚举$a$，预处理$n^{\\frac{1} {3} }$中所有的$G(i)$即可\n\n$$ \\ $$\n\n### Part $c=3$\n\n同样的，限制条件为$n=a\\cdot b^3,(G(a)=1,a<b)$，得到$a<n^{\\frac{1} {4} }$\n\n但是由于$c=2,3$两部分有重复，还需额外考虑强制$n$不存在形如$n=a'\\cdot b'^2$的表示\n\n假设已知$n=a\\cdot b^3$，不存在$n=a'\\cdot b'^2$的判定条件是\n\n$a'=\\frac{n} {F^2(n)}\\ge F(n)$，即$F(n)\\leq n^{\\frac{1} {3} }$\n\n同时由于$F(n)=F(a\\cdot b)b$\n\n得到$F(a,b)\\leq a^{\\frac{1} {3} }$\n\n由于等号右边包含$a$，考虑枚举$a$，易求出$L=F(a),d=\\frac{a} {L^2}$，得到$F(a\\cdot b)$的另一种表达形式\n\n$F(a\\cdot b)=L \\cdot \\gcd (d,b)\\cdot F(\\frac{b} {\\gcd(d,b)})\\leq a^{\\frac{1} {3} }$\n\n上面的转化意为：$L$为$a$中已经成对的部分自然取出，然后优先考虑为$D$匹配$b$中的因数成对，对于剩下的部分再重新计算答案\n\n$$  \\ $$\n\n化简该式，得到$L\\cdot \\gcd(d,b)F(\\frac{b} {\\gcd(d,b)})\\leq a^{\\frac{1} {3} }$\n\n式子包含$\\gcd $，似乎具有莫比乌斯反演的性质\n\n考虑计算$b\\in [a+1,(\\frac{n} {a})^{\\frac{1} {3} }]$的数量\n\n观察到$a^{\\frac{1} {3} }\\leq n^{\\frac{1} {12} }$，上限只有$25$左右，可以考虑直接枚举$F(\\frac{b} {\\gcd(b,d)})$\n\n令枚举的$g=\\gcd(b,d),F(\\frac{b} {g})=f$，计算$\\gcd(\\frac{b} {g},\\frac{d} {g})=1,g\\cdot f\\cdot L\\leq a^{\\frac{1} {3} }$的$b$的数量\n\n考虑直接从$\\frac{b} {g}$中把$f^2$的因数提取出来，令{%raw%}$\\begin{aligned} L'=\\lceil \\frac{a+1} {gf^2}\\rceil,R'=\\lfloor \\frac{(\\frac{n} {a})^{\\frac{1} {3} }} {gf^2}\\rfloor \\end{aligned}${%endraw%}，令$i=\\frac{b} {gf^2},x=\\frac{d} {g}$，得到新的限制条件式子为\n\n$\\gcd(x,f)=1,\\gcd(i,x)=1,F(i)=1,i\\in[L',R']$\n\n在确定了$g,f$之后，需要考虑的限制就是$\\gcd(i,x)=1,F(i)=1,i\\in[L',R']$\n\n由于包含$\\gcd$，不妨用莫比乌斯反演计算该式，得到表达式为\n\n$Sum=\\sum_{k|x}\\mu(k)\\sum_{i\\in [L',R']} [k|i\\ \\text{and}\\ F(i)=1]$\n\n对于$k$，计算$\\sum_{i\\in[L',R']}[k|i\\ \\text{and}\\ F(i)=1]$可以归纳为计算\n\n$\\sum_{i=\\frac{n} {k} } [F(ik)=1]$，一共有$n^{\\frac{1} {3} }\\ln n$种不同的权值，可以暴力预处理得到\n\n枚举$d$的因数对于所有的上面的式子计算，可能的$g,f$并不多，可以直接枚举\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nclass SemiPerfectPower {\npublic:\n\tstatic const int N=450000,M=20000;\n\tint w[N],notpri[N],pri[N],pc,F[N],G[N];\n\tvector <int> S[N],Fac[N];\n\tll gcd(ll a,ll b){ return b==0?a:gcd(b,a%b); }\n\tSemiPerfectPower(){\n\t\t// 预处理F,G ,w[i]=\\mu(i) S[k][i]=\\sum_{j \\in [1,i]}  F(i,k)=1\n\t\trep(i,1,sqrt(N)) rep(j,1,(N-1)/i/i) F[i*i*j]=i;\n\t\trep(i,2,pow(N,1/3.0)) rep(j,1,(N-1)/i/i/i) G[i*i*i*j]=1;\n\t\trep(i,1,M-1) for(int j=i;j<M;j+=i) Fac[j].pb(i);\n\t\tw[1]=1;\n\t\trep(i,2,N-1) {\n\t\t\tif(!notpri[i]) pri[++pc]=i,w[i]=-1;\n\t\t\tfor(int j=1;i*pri[j]<N && j<=pc;++j) {\n\t\t\t\tnotpri[i*pri[j]]=1;\n\t\t\t\tif(i%pri[j]==0) {\n\t\t\t\t\tw[i*pri[j]]=0;\n\t\t\t\t\tbreak;\n\t\t\t\t} \n\t\t\t\tw[i*pri[j]]=-w[i];\n\t\t\t}\n\t\t}\n\t\trep(i,1,N-1) if(w[i]) {\n\t\t\tS[i].resize(N/i+1);\n\t\t\trep(j,1,(N-1)/i) S[i][j]=S[i][j-1]+(F[i*j]==1);\n\t\t}\n\t}\n\n\tll Solve2(ll n){\n\t\tll ans=0,UX=pow(n,1/3.0);\n        // 防止浮点误差\n\t\tif((UX+1)*(UX+1)*(UX+1)<=n) UX++;\n\t\tif(UX*UX*UX>n) UX--;\n\t\trep(i,1,UX) if(F[i]==1) {\n\t\t\tll UY=sqrt(n/i);\n            // 防止浮点误差\n\t\t\tif(i*(UY+1)*(UY+1)<=n) UY++;\n\t\t\tif(i*UY*UY>n) UY--;\n\t\t\tans+=max(0ll,UY-i);\n\t\t}\n\t\treturn ans;\n\t}\n\n\tll Solve3(ll n){\n\t\tll UX=pow(n,0.25); \n\t\t// 枚举c的上界\n\t\tll ans=0;\n\t\tif((UX+1)*(UX+1)*(UX+1)*(UX+1)<=n) UX++;\n\t\trep(x,1,UX) if(!G[x]) {\n\t\t\tll UY=pow(n/x,1.0/3.0),U=pow(x,1/3.0);\n\t\t\t\n\t\t\t// 防止浮点误差\n\t\t\tif((U+1)*(U+1)*(U+1)<=x) U++;\n\t\t\tif(U*U*U>x) U--;\n\t\t\tif(x*(UY+1)*(UY+1)*(UY+1)<=n) UY++;\n\t\t\tif(x*UY*UY*UY>n) UY--;\n\n\t\t\tint L=F[x],D=x/L/L;\n\t\t\tfor(int G:Fac[D]) {\n\t\t\t\tfor(int g:Fac[G]) {\n\t\t\t\t\tif(g*L>U) break;\n\t\t\t\t\trep(f,1,U/g/L) if(gcd(f,D/g)==1) {\n\t\t\t\t\t\tint L=x/G/f/f,R=UY/G/f/f;\n\t\t\t\t\t\tans+=w[G/g]*(S[G/g][R]-S[G/g][L]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n\tll Solve(ll n) {\n\t\treturn Solve2(n)+Solve3(n);\n\t}\n\tll count(ll L,ll R) {\n\t\treturn Solve(R)-Solve(L-1);\n\t}\n};\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"Montgomery Reduction 算法流程与实际实现","url":"/articles/2020/12/01/b1996e9.html","content":"# Montgomery Reduction 算法流程与实际实现\n\n下面默认对于模数$m$取模，由于这篇文章的重点是实现~~(其实就是我自己存一下板子)~~，因此没有证明\n\n### 使用注意：\n\nMontgomery Reduction 相较于 Barret Reduction来说，不需要使用__int128\n\n但是有着更高的封装程度，因为**涉及到普通数与Montgomery Reduction运算中间量的转化**\n\n另外，常见的Montgomery Reduction 在编程竞赛中的应用 **要求模数为奇数**\n\n但是在Min25博客上来看，**Montgomery似乎有着更高的效率**\n\n\n\n### Montgomery Reduction算法思想简介\n\n在计算取模运算的过程中，将每一个元素$T$都乘上一个特定的值$R(R>m,\\gcd(R,m)=1)$\n\n用特殊的方法处理相乘时除掉一个$R$的过程，从而避免取模运算\n\n在使用的模数为常量时，编译器通常会自动加入Barrett reduction的优化，因此实际上这个算法对于动态模数的情形更为适用\n\n~~(你自己真不一定写得过STL，但是确实可以比STL块)~~\n\n\n\n$$  \\ $$\n\n### 编程上的应用简介\n\n对于$m$为奇数的情况，取$R=2^{32}$，用 **自然溢出来代替取模/位运算位移代替除法** 来加速运算\n\n我们还需要令$m' = -m^{-1} \\mod R$，有结论\n\n对于某一个数$T,0 \\leq T < mR$，若令$U = Tm’ \\mod R$，则 $\\frac{T+Um} {R}$为整数，且 $\\frac{T+Um} {R}=TR^{-1} \\mod m$\n\n那么我们在计算$\\frac{T} {R}$时，实际上只需要计算$\\frac{T+Um} {R}$，可以预处理$m'$，溢出计算$Tm'$，位运算左移计算$\\frac{T+Um} {R}$\n\n\n\n实际使用时的实现，可以用一个类实现以下方法\n\n在实现时需要尤其注意不要出现溢出\n\n#### 1.预处理$m'$\n\n$(R-\\lfloor \\frac{R} {m}\\rfloor )\\cdot (R\\mod m)$\n\n```cpp\nusing u32=unsigned;\nusing i32=int;\nusing u64=unsigned long long;\nusing i64=long long;\n// inv=m'\nu32 m;\nu32 getinv(){\n\tu32 inv=m;\n\tfor(int i=0;i<4;++i) inv*=2-inv*m;\n}\n```\n\n\n\n#### 2.reduce方法\n\n```cpp\nu32 reduce(u64 x) {\n    u32 y = u32(x >> 32) - u32((u64(u32(x)*inv)*m) >> 32);\n    // 先取u32(x)得到x mod R ，然后再转成u64进行乘法\n    return i32(y) < 0 ? y + m : y;\n}\n```\n\n\n\n#### 3.普通数转Montgomery Reduction\n\n我们要计算$x\\rightarrow xR=x\\cdot 2^{32}$，但是如果直接用取模就失去了意义。。。\n\n方法是快速计算$x\\cdot R^2$，然后reduce一次\n\n```cpp\nu32 R2=-u64(m)%m;\nu32 intToMont(i32 x){\n    return reduce(u64(x)*R2);\n}\n```\n\n$$ \\ $$\n\n#### 4.Montomery运算\n\n```cpp\nu32 Add(u32 x,u32 y) {\n    x+=y-m;\n    return i32(x<0)?x+m:x;\n}\nu32 Dec(u32 x,u32 y){\n    x-=y;\n    return i32(x<0)?x+m:x;\n}\nu32 Mul(u32 x,u32 y){\n    return reduce(u64(x)*y);\n}\n```\n\n$$ \\ $$\n\n#### 5.Montomery Reduction转普通数\n\n```cpp\ni32 get(u32 x){\n    return reduce(x);\n}\n```\n\n封装之后，得到板子一号，这个是动态模数的。。。\n\n实现上可能的误区：\n\n为什么不用-inv?避免加法，原因是加法取模要和m比较\n\n同样的，下面的i32(y)<0语句可以被替换为y>=m(负数溢出)，看似减少一次类型转换，但是实际上0作为常量比较快得多\n\n加法运算时也是类似的原因，x>=m的比较实在太慢，因此强制减去一个m，然后和0比\n\n```cpp\nusing u32=uint32_t;\nusing i32=int32_t;\nusing u64=uint64_t;\nusing i64=int64_t;\n\nstatic u32 m,inv,r2,P;\nu32 getinv(){\n    u32 inv=m;\n    for(int i=0;i<4;++i) inv*=2-inv*m;\n    return inv;\n}\nstruct Mont{\nprivate :\n    u32 x;\npublic :\n    static u32 reduce(u64 x){ \n        u32 y=u32(x>>32)-u32((u64(u32(x)*inv)*m)>>32);\n        return i32(y)<0?y+m:y;\n    }\n    Mont(){ ; }\n    Mont(i32 x):x(reduce(u64(x)*r2)) { }\n    Mont& operator += (const Mont &rhs) { return x+=rhs.x-m,is32(x)<0&&(x+=m),*this; }\n    Mont& operator -= (const Mont &rhs) { return x-=rhs.x,i32(x)<0&&(x+=m),*this; }\n    Mont& operator *= (const Mont &rhs) { return x=reduce(u64(x)*rhs.x),*this; }\n    friend Mont operator + (Mont x,const Mont &y) { return x+=y; }\n    friend Mont operator - (Mont x,const Mont &y) { return x-=y; }\n    friend Mont operator * (Mont x,const Mont &y) { return x*=y; }\n    i32 get(){ return reduce(x); }\n};\nvoid Init(int m) { \n    ::m=m;\n    inv=-getinv();\n    r2=-u64(m)%m;\n}\n```\n\n动态模数的方法，计算$5\\cdot 10^7!\\mod 998244353$在duck.ac上评测结果，时间单位是微秒$\\mu s$\n\n```plain\nNaive Mod     : 213689172  Time: 518352\nMy Montgomery : 213689172  Time: 192195\n```\n\n\n\n\n\n\n\n$$ \\ $$\n\n$$\\ $$\n\n这个是我自己写的静态模数的，因为模数是静态的，所以不需要一定和0比较大小\n\n```cpp\ntemplate <uint32_t m> struct Mont{\nprivate :\n    using u32=uint32_t;\n    using i32=int32_t;\n    using u64=uint64_t;\n    using i64=int64_t;\n    static constexpr u32 getinv(){\n        u32 inv=m;\n        for(int i=0;i<4;++i) inv*=2-inv*m;\n        return inv;\n    }\n    static constexpr u32 inv=-getinv(),r2=-u64(m)%m;\n    u32 x;\npublic :\n    static constexpr u32 reduce(u64 x){ \n        u32 y=(x+u64(u32(x)*inv)*m)>>32;\n        return y>=m?y-m:y;\n    }\n    Mont(){ ; }\n    constexpr Mont(i32 x):x(reduce(u64(x)*r2)) { }\n    constexpr Mont& operator += (const Mont &rhs) { return x+=rhs.x-m,x>=m&&(x+=m),*this; }\n    constexpr Mont& operator -= (const Mont &rhs) { return x-=rhs.x,x>=m&&(x+=m),*this; }\n    constexpr Mont& operator *= (const Mont &rhs) { return x=reduce(u64(x)*rhs.x),*this; }\n    constexpr friend Mont operator + (Mont x,const Mont &y) { return x+=y; }\n    constexpr friend Mont operator - (Mont x,const Mont &y) { return x-=y; }\n    constexpr friend Mont operator * (Mont x,const Mont &y) { return x*=y; }\n    constexpr i32 get(){ return reduce(x); }\n} ;\n\n```\n\n这个是摘自[LOJ多项式乘法 hly1204的提交记录](https://loj.ac/s/864511)\n\n个人解读：实际上每次存储的是$x \\mod 2m$的值，避免了reduce时的加减取模\n\n```cpp\n// from https://min-25.hatenablog.com/entry/2017/08/20/171214\ntemplate <std::uint32_t P> struct MontgomeryModInt32 {\npublic:\n  using i32 = std::int32_t;\n  using u32 = std::uint32_t;\n  using i64 = std::int64_t;\n  using u64 = std::uint64_t;\n\nprivate:\n  u32 v;\n\n  static constexpr u32 get_r() {\n    u32 iv = P;\n    for (u32 i = 0; i != 4; ++i) iv *= 2 - P * iv;\n    return iv;\n  }\n\n  static constexpr u32 r = -get_r(), r2 = -u64(P) % P;\n\n  static_assert((P & 1) == 1);\n  static_assert(r * P == -1);\n  static_assert(P < (1 << 30));\n\npublic:\n  static constexpr u32 pow_mod(u32 x, u64 y) {\n    if ((y %= P - 1) < 0) y += P - 1;\n    u32 res = 1;\n    for (; y != 0; y >>= 1, x = u64(x) * x % P)\n      if (y & 1) res = u64(res) * x % P;\n    return res;\n  }\n\n  static constexpr u32 get_pr() {\n    u32 tmp[32] = { }, cnt = 0;\n    const u64 phi = P - 1;\n    u64 m = phi;\n    for (u64 i = 2; i * i <= m; ++i) {\n      if (m % i == 0) {\n        tmp[cnt++] = i;\n        while (m % i == 0) m /= i;\n      }\n    }\n    if (m > 1) tmp[cnt++] = m;\n    for (u64 res = 2; res <= phi; ++res) {\n      bool flag = true;\n      for (u32 i = 0; i != cnt && flag; ++i) flag &= pow_mod(res, phi / tmp[i]) != 1;\n      if (flag) return res;\n    }\n    return 0;\n  }\n\n  MontgomeryModInt32() = default;\n  ~MontgomeryModInt32() = default;\n  constexpr MontgomeryModInt32(u32 v) : v(reduce(u64(v) * r2)) { }\n  constexpr MontgomeryModInt32(const MontgomeryModInt32 &rhs) : v(rhs.v) { }\n  static constexpr u32 reduce(u64 x) { return x + (u64(u32(x) * r) * P) >> 32; }\n  constexpr u32 get() const {\n    u32 res = reduce(v);\n    return res - (P & -(res >= P));\n  }\n  explicit constexpr operator u32() const { return get(); }\n  explicit constexpr operator i32() const { return i32(get()); }\n  constexpr MontgomeryModInt32 &operator=(const MontgomeryModInt32 &rhs) {\n    return v = rhs.v, *this;\n  }\n  constexpr MontgomeryModInt32 operator-() const {\n    MontgomeryModInt32 res;\n    return res.v = (P << 1 & -(v != 0)) - v, res;\n  }\n  constexpr MontgomeryModInt32 inv() const { return pow(-1); }\n  constexpr MontgomeryModInt32 &operator+=(const MontgomeryModInt32 &rhs) {\n    return v += rhs.v - (P << 1), v += P << 1 & -(i32(v) < 0), *this;\n  }\n  constexpr MontgomeryModInt32 &operator-=(const MontgomeryModInt32 &rhs) {\n    return v -= rhs.v, v += P << 1 & -(i32(v) < 0), *this;\n  }\n  constexpr MontgomeryModInt32 &operator*=(const MontgomeryModInt32 &rhs) {\n    return v = reduce(u64(v) * rhs.v), *this;\n  }\n  constexpr MontgomeryModInt32 &operator/=(const MontgomeryModInt32 &rhs) {\n    return this->operator*=(rhs.inv());\n  }\n  friend MontgomeryModInt32 operator+(const MontgomeryModInt32 &lhs,\n                                      const MontgomeryModInt32 &rhs) {\n    return MontgomeryModInt32(lhs) += rhs;\n  }\n  friend MontgomeryModInt32 operator-(const MontgomeryModInt32 &lhs,\n                                      const MontgomeryModInt32 &rhs) {\n    return MontgomeryModInt32(lhs) -= rhs;\n  }\n  friend MontgomeryModInt32 operator*(const MontgomeryModInt32 &lhs,\n                                      const MontgomeryModInt32 &rhs) {\n    return MontgomeryModInt32(lhs) *= rhs;\n  }\n  friend MontgomeryModInt32 operator/(const MontgomeryModInt32 &lhs,\n                                      const MontgomeryModInt32 &rhs) {\n    return MontgomeryModInt32(lhs) /= rhs;\n  }\n  friend std::istream &operator>>(std::istream &is, MontgomeryModInt32 &rhs) {\n    return is >> rhs.v, rhs.v = reduce(u64(rhs.v) * r2), is;\n  }\n  friend std::ostream &operator<<(std::ostream &os, const MontgomeryModInt32 &rhs) {\n    return os << rhs.get();\n  }\n  constexpr MontgomeryModInt32 pow(i64 y) const {\n    if ((y %= P - 1) < 0) y += P - 1; // phi(P) = P - 1, assume P is a prime number\n    MontgomeryModInt32 res(1), x(*this);\n    for (; y != 0; y >>= 1, x *= x)\n      if (y & 1) res *= x;\n    return res;\n  }\n};\n```\n\n这个是计算$5\\cdot 10^7!\\mod 998244353$在duck.ac上的测试结果\n\n```plain\nNaive Mod      : 213689172  Time: 180649\nMy Montgomery  : 213689172  Time: 178217\nHis Montgomery : 213689172  Time: 152847\n```\n\n这个是计算$7\\cdot 10^7!\\mod 998244353$在duck.ac上的测试结果\n\n```plain\nNaive Mod      : 939830261  Time: 252908\nMy Montgomery  : 939830261  Time: 249476\nHis Montgomery : 939830261  Time: 213986\n```\n\n还可以看Min25博客里下面的ModInt64板本\n\n[传送门](https://min-25.hatenablog.com/entry/2017/08/20/171214)\n\n下面自己实现的$\\mod 2m$版本，差不多也是最终版本了，跑起来和hly1204差不多\n\n静态版本\n\n```cpp\ntemplate <uint32_t m> struct Mont2{\nprivate :\n    using u32=uint32_t;\n    using i32=int32_t;\n    using u64=uint64_t;\n    using i64=int64_t;\n    static constexpr u32 m2=m<<1;\n    static constexpr u32 getinv(){\n        u32 inv=m;\n        for(int i=0;i<4;++i) inv*=2-inv*m;\n        return inv;\n    }\n    static constexpr u32 inv=-getinv(),r2=-u64(m)%m;\n    u32 x;\npublic :\n    static constexpr u32 reduce(u64 x){ \n        return (x+u64(u32(x)*inv)*m)>>32;\n    }\n    Mont2(){ ; }\n    constexpr Mont2(i32 x):x(reduce(u64(x)*r2)) { }\n    constexpr Mont2& operator += (const Mont2 &rhs) { return x+=rhs.x-m2,x>=m2&&(x+=m2),*this; }\n    constexpr Mont2& operator -= (const Mont2 &rhs) { return x-=rhs.x,x>=m2&&(x+=m2),*this; }\n    constexpr Mont2& operator *= (const Mont2 &rhs) { return x=reduce(u64(x)*rhs.x),*this; }\n    constexpr friend Mont2 operator + (Mont2 x,const Mont2 &y) { return x+=y; }\n    constexpr friend Mont2 operator - (Mont2 x,const Mont2 &y) { return x-=y; }\n    constexpr friend Mont2 operator * (Mont2 x,const Mont2 &y) { return x*=y; }\n    constexpr i32 get(){ \n        u32 res=reduce(x); \n        return res>=m?res-m:res;\n    }\n} ;\n```\n\n板子各有优劣.jpg\n\n另外这是Int_To_Montgomery加法的速度,$7\\cdot 10^7$次加法与类型转换\n\n```plain\nNaive :        : 305907824 80074\nMy Montgomery  : 305907824 109479\nMy Montgomery2 : 305907824 99896\nHis Montgomery : 305907824 117449\n```\n\n动态版本\n\n```cpp\nusing u32=uint32_t;\nusing i32=int32_t;\nusing u64=uint64_t;\nusing i64=int64_t;\n\nstatic u32 m,m2,inv,r2,P;\nu32 getinv(){\n    u32 inv=m;\n    for(int i=0;i<4;++i) inv*=2-inv*m;\n    return inv;\n}\nstruct Mont{\nprivate :\n    u32 x;\npublic :\n    static u32 reduce(u64 x){ \n        u32 y=(x+u64(u32(x)*inv)*m)>>32;\n        return i32(y)<0?y+m:y;\n    }\n    Mont(){ ; }\n    Mont(i32 x):x(reduce(u64(x)*r2)) { }\n    Mont& operator += (const Mont &rhs) { return x+=rhs.x-m2,i32(x)<0&&(x+=m2),*this; }\n    Mont& operator -= (const Mont &rhs) { return x-=rhs.x,i32(x)<0&&(x+=m2),*this; }\n    Mont& operator *= (const Mont &rhs) { return x=reduce(u64(x)*rhs.x),*this; }\n    friend Mont operator + (Mont x,const Mont &y) { return x+=y; }\n    friend Mont operator - (Mont x,const Mont &y) { return x-=y; }\n    friend Mont operator * (Mont x,const Mont &y) { return x*=y; }\n    i32 get(){ \n        u32 res=reduce(x);\n        return res>=m?res-m:res;\n    }\n};\nvoid Init(int m) { \n    ::m=m,m2=m*2;\n    inv=-getinv();\n    r2=-u64(m)%m;\n}\n```\n\n这个动态模板计算$5\\cdot 10^7!\\mod 998244353$\n\n```plain\nNaive Mod      : 213689172 494061 (稍微修改了一下暴力的细节。。)\nMy Montgomery2 : 213689172 152849\n```\n\n不得不说duck.ac真的很nb\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「2020联考北附1」命运歧途              ","url":"/articles/2020/11/30/d57162be.html","content":"# 「2020联考北附1」命运歧途              \n\n排列$dp$问题通常想到容斥，因为很难在$dp$的同时保证排列元素不多次出现\n\n对于这个问题，我们只需要考虑相邻关系\n\n我们需要计算包含**0**个非法位置的排列个数，因此容斥容易定义为计算\n\n**包含至少$i$个非法位置的**排列个数，容斥系数可以简单设置为$(-1)^i$\n\n考虑一个序列的合法与非法情况，容易发现是类似下面的情况\n\n![Snipaste_2020-11-30_19-31-05.png](https://i.loli.net/2020/11/30/r5gyxpcMqCKXuiL.png)\n\n序列会被分成若干段，每一段是形如$x,x+k,x+2k,\\cdots$或者$x,x-k,x-2k$\n\n显然$x,y$会产生非法关系的必要条件是$x\\equiv t \\pmod k$，因此按照$x\\mod k$分组\n\n组内实际上是类似$k=1$的子问题，不妨设一组包含$m$个元素\n\n显然不同组之间一定构成不同的段，而对于一组内的元素，我们可以强制某一些位置分段\n\n最终会得到一个若干段的序列，段之间由于不确定相互关系，设最终分成$i$段，则可以有$i!$种段之间排列\n\n(分成$i$段的贡献在我们计算时实际上是至少包含了$n-i$个非法位置)\n\n现在问题就是落到了$dp$序列分成$i$段的方案数，显然对于每一组，是一个分组背包的问题\n\n对于每一个大小为$m$的组，考虑$dp$其分段方案\n\n令$dp_{i,j}$表示当前已经确定的总大小为$i$且已经分成了$j$段\n\n转移可以枚举下一段的大小$k$，由于实际排列中的段是有递增和递减两种情况，因此对于任意$k>1$，有两种段分配方法\n\n转移式子是\n\n$dp_{i,j}\\rightarrow dp_{i+k,j+1} (k=1)$\n\n$2dp_{i,j}\\rightarrow dp_{i+k,j+1} (k>1)$\n\n这个式子容易用前缀和优化，特殊的转移位置只有一个，处理一下即可\n\n于是可以在$O(n^2)$复杂度内计算任何一个大小的组的分段方案\n\n暴力合并组之间的背包，对于每个查询，复杂度为$O(n^2)$\n\n因此总复杂度受限于查询，为$O(qn^2)$\n\n接下来考虑如何削减查询复杂度\n\n由于$q$的上限实际是$n$，下文认为$q=n$\n\n-----------------------\n\n### 优化1\n\n上面的问题中，我们并没有具体地分析分组的情况\n\n实际上对于$n,k$，可能的组大小只有两种，即$\\lfloor \\frac{n} {k}\\rfloor ,\\lceil \\frac{n} {k}\\rceil$\n\n不同的$\\lfloor \\frac{n} {k}\\rfloor $只有$O(\\sqrt n)$种，不妨对于每种$\\lfloor \\frac{n} {k}\\rfloor $从小到大计算每一个$k$的答案\n\n简单观察即可发现：\n\n在每个块内，按照$k$递增，两种组的个数一个递增一个递减\n\n如果在每个$\\lfloor \\frac{n} {k}\\rfloor $中，为最小的$k$暴力$O(n^2)$预处理出答案，然后不断增大\n\n不妨维护两个单调的个数指针\n\n如果能够支持背包回撤一个分组，增加一个分组，那么容易做到每个块内$O(n^2)$递推答案\n\n增加一个分组不必说，而对于去掉一个分组，不好求出模逆元\n\n但是由于上面的$dp_{i,j}$满足$dp_{i,i}=1$，因此考虑从高到低递推每一位\n\n模拟一个长除法即可\n\n合理的常数优化也可以通过此题\n\n```cpp\nconst int N=2010;\n\nint n,m,P;\nint C[N][N],J[N];\nint dp[N][N],S[N],F[N],G[N];\n\nint len;\nint pl=-1,nc1,nc2;\nvoid clear() { \n\trep(i,0,len) F[i]=0;\n\tF[len=0]=1,nc1=nc2=0; \n}\nint cnt=0;\nvoid Mul(int m,int *A){ \n\tdrep(i,len+=m,0) {\n\t\tull t=0;\n\t\trep(j,1,min(i,m)) {\n\t\t\tt+=1ll*F[i-j]*A[j];\n\t\t\t((j&15)==0) && (t%=P);\n\t\t}\n\t\tF[i]=t%P;\n\t}\n}\nvoid Div(int m,int *A){ \n\tstatic int G[N];\n\trep(i,0,len) G[i]=F[i],F[i]=0;\n\tdrep(i,len-=m,0) {\n\t\tull t=G[i+m];\n\t\trep(j,1,m) {\n\t\t\tt+=1ll*F[i+j]*(P-A[m-j]);\n\t\t\t((j&15)==0) && (t%=P);\n\t\t}\n\t\tF[i]=t%P;\n\t}\n}\n\nint Ans[N],Pow1[N],Pow2[N];\nint clr;\nvoid Solve(int m) {\n\tint l=(n-1)/m+1,c1=0,c2=0;\n\trep(i,1,m) if((n-i)/m+1==l) c1++;\n\telse c2++;\n\tif(l==2) {\n\t\trep(i,0,c1+c2) F[i]=0;\n\t\trep(i,0,n-c1-c2) F[i+c1+c2]=1ll*C[c1][i]*Pow1[c1-i]%P*Pow2[i]%P;\n\t\tint x=1;\n\t\trep(i,1,c2) x=1ll*x*dp[1][1]%P;\n\t\trep(i,c1+c2,n) F[i]=1ll*F[i]*x%P;\n\t} else {\n\t\tif(l!=pl) {\n\t\t\tclr++;\n\t\t\tclear(); \n\t\t\tpl=l;\n\t\t}\n\t\tcnt++;\n\t\twhile(c1<nc1) Div(l,dp[l]),nc1--;\n\t\twhile(c2<nc2) Div(l-1,dp[l-1]),nc2--;\n\t\twhile(c1>nc1) Mul(l,dp[l]),nc1++;\n\t\twhile(c2>nc2) Mul(l-1,dp[l-1]),nc2++;\n\t}\n\trep(i,0,n) G[n-i]=1ll*F[i]*J[i]%P;\n\tint ans=0;\n\trep(i,0,n) ans=(ans+1ll*((i&1)?-1:1)*G[i])%P;\n\tans=(ans%P+P)%P;\n\tAns[m]=ans;\n}\n\nint main() {\n\tfreopen(\"fate.in\",\"r\",stdin),freopen(\"fate.out\",\"w\",stdout);\n\tn=rd(),m=rd(),P=rd();\n\trep(i,0,n) rep(j,C[i][0]=1,i) C[i][j]=(C[i-1][j-1]+C[i-1][j])%P;\n\trep(i,J[0]=1,n) J[i]=1ll*J[i-1]*i%P;\n\tdp[0][0]=S[0]=1;\n\trep(i,1,n) {\n\t\tdrep(j,i,1) {\n\t\t\tdp[i][j]=(2ll*S[j-1]+P-dp[i-1][j-1])%P;\n\t\t\tS[j]+=dp[i][j],Mod1(S[j]);\n\t\t}\n\t}\n\trep(i,Pow1[0]=1,n) Pow1[i]=1ll*Pow1[i-1]*dp[2][1]%P;\n\trep(i,Pow2[0]=1,n) Pow2[i]=1ll*Pow2[i-1]*dp[2][2]%P;\n\trep(i,1,n-1) Solve(i);\n\tAns[n]=J[n];\n\tfprintf(stderr,\"%d %d\\n\",cnt,clr);\n\trep(i,1,m) printf(\"%d\\n\",Ans[rd()]);\n}\n```\n\n\n\n$$ \\ $$\n\n### 优化2\n\n从生成函数的角度，我们容易把所求的值归纳为\n\n$H(x)=F^a(x)G^b(x)$\n\n我们知道多项式快速幂的复杂度为$\\exp$的$n\\log n$\n\n当然那是对于长度为$n$的情况\n\n而现在是长度之和为$n$\n\n由于EI在无数道题中介绍了这个东西，看到马上想到可以求导\n\n$H'(x)=aF^{a-1}(x)F'(x)G(x)+bG^{b-1}(x)G'(x)F(x)$\n\n$H'=H(a\\cdot \\frac{F'} {F}+b\\cdot \\frac{G'} {G})$\n\n理想的情况是：对于这个式子，两边从低到高解方程确定每一项的值\n\n然而首先遇到的多项式除法操作就难以解决\n\n要除掉的$F,G$没有常数项，而第一项系数为1或2，因此除法操作只需要计算$2$的逆元\n\n因此可以考虑对于模数中的$2^t$提取出来，然后最后暴力exCRT合并\n\n接下来就是分成两部分\n\n#### 计算$\\mod 2^t$\n\n由上面知道，背包的每一个位置实际对于最后答案的贡献是$i!(-1)^{n-i}$\n\n因此对于$i!\\mod 2^t=0$的位置都不用考虑，只需要求出背包前$O(\\log P)$位，暴力即可\n\n$$ \\ $$\n\n### 计算$\\mod P(2\\not |P)$\n\n接下来就是上面的递推过程\n\n然而还有一个问题就是从$[x^n]H'$得到$[x^{n+1}]H$，显然这里需要一个逆元\n\nEI为我们提供一个很好的思路，或许有助于解决任意模数的逆元问题：\n\n>  因为答案计算的是$k![x^k]H$，因此可以直接在计算过程中加入\n>\n> 这样求导的系数在阶乘中被省略，变成了单纯的平移\n>\n> 而乘法只需要额外添加一个权值$\\binom{i+j} {i}\\cdot x^i\\cdot x^j\\rightarrow x^{i+j}$\n\n接下来具体的方法是：\n\n先将$F(x),G(x)$平移一位去掉空余的项，处理过后$H(x)$被平移了$a+b$的位置，首项为$x^0$\n\n从低到高递推$H(x)$的每一位，同步维护$ \\frac{H} {F},\\frac{H} {G}$\n\n对于$H'(x)$的第$i$项累和得到，然后平移一位得到$H(x)$的$i+1$项\n\n最后需要加上平移部分的贡献，$i!\\rightarrow (i+a+b)!$，可以用一个组合数解决\n\n```cpp\nconst int N=2010;\n\nint n,m,P;\nint J[N];\nint dp[N][N],S[N],F[N],G[N];\n\nstruct Solve2t{\n\tint F[N],P,U;\n\tvoid Init(int x) {\n\t\tP=x;\n\t\tint t=1;\n\t\trep(i,1,n) {\n\t\t\tt=1ll*t*i%P;\n\t\t\tif(t==0) break;\n\t\t\tU=i;\n\t\t}\n\t}\n\tint Solve(int m) {\n\t\trep(i,0,U) F[i]=0;\n\t\tF[0]=1;\n\t\trep(x,1,m) {\n\t\t\tint c=(n-x)/m+1;\n\t\t\trep(i,0,U) G[i]=F[i],F[i]=0;\n\t\t\trep(i,0,U) if(G[i]) rep(j,1,min(c,U)) F[i+j]=(F[i+j]+1ll*G[i]*dp[c][j])%P;\n\t\t}\n\t\tint ans=0;\n\t\trep(i,1,U) {\n\t\t\tF[i]=1ll*F[i]*J[i]%P;\n\t\t\tans=(ans+(((n-i)&1)?-1:1)*F[i])%P;\n\t\t}\n\t\tans=(ans%P+P)%P;\n\t\treturn ans;\n\t}\n} Sol1;\n\nvoid Exgcd(ll a,ll b,ll &x,ll &y) {\n\tif(b==0) {\n\t\tx=1,y=0;\n\t\treturn;\n\t}\n\tExgcd(b,a%b,y,x),y-=a/b*x;\n}\nll Inv(int a,int P) {\n\tll x,y;\n\tExgcd(a,P,x,y);\n\treturn (x%P+P)%P;\n}\n\nstruct SolveP{\n\tint C[N][N];\n\tint F[N],G[N];\n\tint A[N],B[N];\n\tint X[N],Y[N];\n\tint P,I2;\n\tvoid Init(int x) { \n\t\tP=x; \n\t\trep(i,0,n) rep(j,C[i][0]=1,i) C[i][j]=(C[i-1][j-1]+C[i-1][j])%P;\n\t\tI2=(P+1)/2;\n\t}\n\tint Solve(int m) {\n\t\tif(P==1) return 0;\n\t\tint l1=(n-1)/m+1,l2=l1-1;\n\t\tint c1=0,c2=0;\n\t\trep(i,1,m) if((n-i)/m+1==l1) c1++;\n\t\telse c2++;\n\t\tint Inv=dp[l1][1]==1?1:I2;\n\t\trep(i,1,l1) A[i-1]=1ll*J[i-1]*dp[l1][i]%P*Inv%P;\n\t\tInv=dp[l2][1]==1?1:I2;\n\t\trep(i,1,l2) B[i-1]=1ll*J[i-1]*dp[l2][i]%P*Inv%P;\n\t\t// 将A,B偏移补充常数项\n\t\t// 同时除掉常数项，为下面做除法铺路\n\n\t\tint d=c1+c2;\n\t\t// A,B存储偏移之后的值，d为偏移量\n\t\t// X,Y存储除法之后的值\n\t\tF[0]=X[0]=Y[0]=1;\n\t\trep(i,1,n-d) {\n\t\t\tull x=0,y=0;\n\t\t\t// 注意这里计算的是两边次数为x^{i-1}一项的值\n\t\t\trep(j,1,min(l1-1,i)) {\n\t\t\t\t// 将除法的结果乘上求导以后的值，注意求导以后第一位消失了\n\t\t\t\tx+=1ll*X[i-j]*A[j]%P*C[i-1][j-1];\n\t\t\t\t(j&15)==0 && (x%=P);\n\t\t\t\t// 求导以后是j-1位，因此实际应该是x^{i-j}*x^{j-1}\n\t\t\t}\n\t\t\trep(j,1,min(l2-1,i)) {\n\t\t\t\ty+=1ll*Y[i-j]*B[j]%P*C[i-1][j-1];\n\t\t\t\t(j&15)==0 && (y%=P);\n\t\t\t}\n\t\t\t// 由[x^{i-1}]H'(x)一项得到[x^i]H(x)\n\t\t\tF[i]=X[i]=Y[i]=(x%P*c1+y%P*c2)%P;\n\t\t\t// 接下来做二项除法(雾)\n\t\t\tx=0,y=0;\n\t\t\trep(j,1,min(i,l1-1)) {\n\t\t\t\tx+=1ll*(P-A[j])*X[i-j]%P*C[i][j];\n\t\t\t\t(j&15)==0 && (x%=P);\n\t\t\t}\n\t\t\trep(j,1,min(i,l2-1)) {\n\t\t\t\ty+=1ll*(P-B[j])*Y[i-j]%P*C[i][j];\n\t\t\t\t(j&15)==0 && (y%=P);\n\t\t\t}\n\t\t\tX[i]=(X[i]+x)%P,Y[i]=(Y[i]+y)%P;\n\t\t}\n\t\tint ans=0;\n\t\trep(i,0,n-d) {\n\t\t\tF[i]=1ll*F[i]*C[i+d][d]%P*J[d]%P;\n\t\t\tans=(ans+(((n-i-d)&1)?-1:1)*F[i])%P;\n\t\t}\n        // 将除掉的系数乘回来\n\t\trep(i,1,c1) ans=1ll*ans*dp[l1][1]%P;\n\t\trep(i,1,c2) ans=1ll*ans*dp[l2][1]%P;\n\t\tans=(ans%P+P)%P;\n\t\treturn ans;\n\t}\n} Sol2;\n\nint t;\nvoid Init() {\n\tt=1;\n\tfor(t=1;P%2==0;) t*=2,P/=2;\n\tSol1.Init(t),Sol2.Init(P);\n}\n\nvoid Solve(int m) {\n\tint x=Sol1.Solve(m),y=Sol2.Solve(m);\n    // CRT\n\tll res=1ll*((y-x)%P+P)*Inv(t,P)%P;\n\tll mod=t*P;\n\tres=((res*t+x)%mod+mod)%mod;\n\tprintf(\"%lld\\n\",res);\n}\n\nint main() {\n\tfreopen(\"fate.in\",\"r\",stdin),freopen(\"fate.out\",\"w\",stdout);\n\tn=rd(),m=rd(),P=rd();\n\trep(i,J[0]=1,n) J[i]=1ll*J[i-1]*i%P;\n\tdp[0][0]=S[0]=1;\n\trep(i,1,n) {\n\t\tdrep(j,i,1) {\n\t\t\tdp[i][j]=(S[j-1]*2ll+P-dp[i-1][j-1])%P;\n\t\t\tS[j]+=dp[i][j],Mod1(S[j]);\n\t\t}\n\t}\n\tInit();\n\trep(i,1,m) Solve(rd());\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「CodePlus 2017 11 月赛」Yazid 的新生舞会              ","url":"/articles/2020/11/29/172f5601.html","content":"# 「CodePlus 2017 11 月赛」Yazid 的新生舞会              \n\n最基本的分析这里只保留：$cnt>\\frac{len} {2}\\Rightarrow 2cnt>len$\n\n对于每一个合法的区间，合法的众数显然只有一个\n\n考虑对于每一个众数计算答案，把$x$出现的位置拿出来成一个序列$A_i$\n\n如果选择的区间恰好包含$A_i,A_{i+1},\\cdots ,A_j$，那么合法的情况就是$2(j-i+1)>R-L+1,L\\in[A_{i-1}+1,A_i],R\\in[A_{j},A_{j},A_{j+1}-1]$\n\n参数分离得到$2j-R>2i-L$\n\n如果对于每一个$L$更新答案，那么更新的是一段区间，不妨设其为$UL,UR$\n\n对于每个$R$查询则是一段前缀 和 的区间 \n\n我们知道树状数组维护区间修改区间查询需要做一次差分，而这次是区间前缀和\n\n也就是说是再高一维。。\n\n不妨在$UL$上加,$UR$上减，那么在$p$处的更新对于在$k$处的查询的贡献是\n\n$\\cfrac{(k-p+1)(k-p+2)} {2}=\\cfrac{k^2+p^2-2pk+3k-3p+2} {2}$\n\n那么直接处理这个式子即可，需要维护$updval,p\\cdot updval,p^2\\cdot updval$\n\n查询时加入$k$的贡献\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll=long long;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\nint rd(){\n\tint s=0; char c;\n\twhile(c=getchar(),c<48);\n\tdo s=s*10+c-'0';\n\twhile(c=getchar(),c>47);\n\treturn s;\n}\nenum{N=1000010};\nint n;\nvector <int> A[N];\nll ans,s1[N],s2[N],s3[N];\nvoid Add(int p,ll x) {\n\tp--; ll a=x,b=x*p,c=x*p*p;\n\tfor(p+=n+1;p<=n*2;p+=p&-p) s1[p]+=a,s2[p]+=b,s3[p]+=c;\n}\nvoid Add(int l,int r,int x) { Add(l,x),Add(r+1,-x); }\nll Que(int p) {\n\tll r1=0,r2=0,r3=0,tp=p;\n\tfor(p+=n;p;p-=p&-p) r1+=s1[p],r2+=s2[p],r3+=s3[p];\n\treturn ((tp*tp+tp)*r1-(2*tp+1)*r2+r3)/2;\n}\nll Que(int l,int r) { return Que(r)-Que(l-1); }\nint main(){ \n\tfreopen(\"party.in\",\"r\",stdin),n=rd(),rd();\n\trep(i,1,n) A[rd()].push_back(i);\n\trep(k,0,n-1) if(A[k].size()) {\n\t\trep(i,0,A[k].size()-1) {\n\t\t\tint p=A[k][i],l=i?A[k][i-1]:0,r=i<(int)A[k].size()-1?A[k][i+1]:n+1;\n\t\t\tAdd(2*i-p+1,2*i-l,1);\n\t\t\tans+=Que(2*(i+1)-r,2*(i+1)-p-1);\n\t\t}\n\t\trep(i,0,A[k].size()-1) {\n\t\t\tint p=A[k][i],l=i?A[k][i-1]:0;\n\t\t\tAdd(2*i-p+1,2*i-l,-1);\n\t\t}\n\t}\n\tfprintf(fopen(\"party.out\",\"w\"),\"%lld\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"TopCoder - 12349 SRM579 Round1 Div1 RockPaperScissors (概率Dp)","url":"/articles/2020/11/29/4eb1c588.html","content":"# TopCoder - 12349 SRM579 Round1 Div1 RockPaperScissors (概率dp)\n\n### 题目大意：\n\n有$n$个骰子，每个骰子有300个面，其中有$a_i,b_i,c_i$分别为石头/布/剪刀\n\n每轮你选择出石头/剪刀/布，然后会从剩下的骰子中随机取一个再随机结果，但是你不知道取的是什么骰子\n\n赢一局的权值为3，平局为1\n\n求最优情况下最大的权值期望\n\n$$ \\ $$\n\n### 题目分析：\n\n显然当前的局面只和已经抽出的石头/布/剪刀的数量有关（因为这是你唯一的决策依据，也是唯一影响局面的）\n\n乍一看非常抽象的决策过程，实在无法通过分析得到每一种局面下应该作出的决策\n\n于是考虑能否直接把每一种局面出现的概率求出，决策后将期望线性相加\n\n不妨把随机取出的骰子放在一个序列上，一个局面是由已经出现的骰子和当前第$i$次决策的骰子组成的\n\n令$dp_{i,j,k,typ}$表示已经出现的骰子中出现$i,j,k$个石头/布/剪刀，当前决策时骰子结果为$typ$的概率\n\n实际在$dp$时，$typ$一维需要额外加入一个值表示未确定下一个是什么\n\n考虑对于每个骰子，枚举它是已经出现/正在决策/在第$i$次决策之后出现，将其概率累和\n\n$dp$状态为$O(n^3)$，转移次数为$O(n)$,复杂度为$O(n^4)$\n\n最后对于每种局面计算最优的决策即可\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nclass RockPaperScissors {\nprivate:\n\tstatic const int N=53;\n\tstatic const int eps=1e-9;\n\tdouble F[N][N][N][4],G[N][N][N][4],w[3];\n\tdouble C[N][N];\n\npublic:\n\t\n\tdouble bestScore(vector <int> w1, vector <int> w2, vector <int> w3) {\n\t\tint n=w1.size();\n\t\trep(i,0,n) rep(j,C[i][0]=1,i) C[i][j]=C[i-1][j-1]+C[i-1][j];\n\t\tmemset(F,0,sizeof F),F[0][0][0][3]=1;\n\t\trep(i,1,n) {\n\t\t\tw[0]=w1[i-1]/300.0; w[1]=w2[i-1]/300.0; w[2]=w3[i-1]/300.0;\n\t\t\trep(a,0,i) rep(b,0,i-a) rep(c,0,i-a-b) rep(d,0,3) G[a][b][c][d]=F[a][b][c][d];\n\t\t\trep(a,0,i) rep(b,0,i-a) rep(c,0,i-a-b) rep(d,0,3) if(G[a][b][c][d]>eps) {\n\t\t\t\t// 枚举这个骰子在之前出现过了\n\t\t\t\tF[a+1][b][c][d]+=G[a][b][c][d]*w[0];\n\t\t\t\tF[a][b+1][c][d]+=G[a][b][c][d]*w[1];\n\t\t\t\tF[a][b][c+1][d]+=G[a][b][c][d]*w[2];\n\t\t\t\t// 枚举这个骰子为下一个出现的\n\t\t\t\tif(d==3) rep(e,0,2) F[a][b][c][e]+=G[a][b][c][d]*w[e];\n\t\t\t}\n\t\t}\n\t\tdouble ans=0;\n\t\trep(a,0,n-1) rep(b,0,n-1-a) rep(c,0,n-1-a-b) {\n\t\t\t// 决策这一轮出什么\n\t\t\tdouble ma=0;\n\t\t\trep(d,0,2) cmax(ma,F[a][b][c][d]+F[a][b][c][(d+2)%3]*3);\n\t\t\tans+=ma/C[n][a+b+c]/(n-a-b-c);\n\t\t}\n\t\treturn ans;\n\t}\n};\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「JOI 2018 Final」毒蛇越狱                    ","url":"/articles/2020/11/28/6179e8c.html","content":"# 「JOI 2018 Final」毒蛇越狱                    \n\n### Algorithm 1: 暴力计算\n\n对于所有$0,1,?$组成的$3^n$种串处理出答案\n\n具体的，对于当前串包含的最后一个$?$位置，枚举它变成0/1的答案，按照一定的顺序累和即可\n\n(代码可以在Algo2里面看到)\n\n### Algorithm 2 : Meet in the Middle\n\n$3^{20}$太大，优化上面的暴力，容易想到把复杂度从预处理分一部分给查询\n\n取出$n$中前$k$个位置，这些位置不处理$3^k$，而是让每个询问暴力地去枚举这些位置上的$?$变成$0/1$\n\n显然每个询问有最多$2^k$次枚举，即复杂度为$O(Q\\cdot 2^k)$\n\n对于剩下的$n-k$个位置，采取上面的暴力方法预处理，三进制枚举，预处理复杂度为$O(2^k3^{n-k})$\n\n因此复杂度为$O(Q\\cdot 2^k +2^k3^{n-k})$，计算在$k=6,7$时复杂度约为$3.5\\cdot 10^8$\n\n~~(这是一个非常稳的复杂度)~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\n\nchar IO;\nll rd(){\n\tll s=0,f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=20,M=1<<20,M3=1600000;\nconst int DM=7;\n\n\nint n,m,k;\nint Pow[N],S[M3],Low[M3],trans[M3];\nint QX[M],QY[M],QZ[M],Ans[M],rev[M];\nchar val[M],q[N];\n\nint main() {\n\trep(i,Pow[0]=1,N-1) Pow[i]=Pow[i-1]*3;\n\tn=rd(),m=rd(),k=min(DM,n),scanf(\"%s\",val);\n\trep(i,1,(1<<n)-1) {\n\t\trev[i]=(rev[i>>1]>>1)|((i&1)<<(n-1));\n\t\tif(i<rev[i]) swap(val[i],val[rev[i]]);\n\t}\n\tLow[0]=1e9;\n\trep(i,1,Pow[n-k]-1) {\n\t\tLow[i]=(i%3==2)?0:Low[i/3]+1;\n\t\tif(Low[i]>n) trans[i]=(trans[i/3]<<1)|(i%3);\n\t}\n\trep(i,1,m) {\n\t\tscanf(\"%s\",q);\n\t\trep(j,0,n-1) {\n\t\t\tif(q[j]=='?') QY[i]|=1<<j,q[j]='2';\n\t\t\telse QX[i]|=(q[j]-'0')<<j;\n\t\t}\n\t\trep(j,k,n-1) QZ[i]+=Pow[j-k]*(q[j]-'0');\n\t}\n\tint A=(1<<k)-1;\n\trep(i,0,A) {\n\t\trep(j,0,Pow[n-k]-1) {\n\t\t\tif(Low[j]>n) S[j]=val[(trans[j]<<k)|i]-'0';\n\t\t\telse S[j]=S[j-Pow[Low[j]]]+S[j-2*Pow[Low[j]]];\n\t\t} // 暴力预处理前缀和\n\t\trep(j,1,m) if((QX[j]&A)==(i&~QY[j])) Ans[j]+=S[QZ[j]];\n\t}\n\trep(i,1,m) printf(\"%d\\n\",Ans[i]);\n}\n```\n\n\n\n### Algorithm 3 : 高位前缀和+容斥\n\n起始学过高位前缀和/FMT的看到这个题第一反应可能都是这个。。\n\n-> 对于$?$的位置，直接赋值成1，然后对于这个数从高位前缀和里查询\n\n然后你发现不知道怎么对于1的把0的去掉\n\n显然这个可以通过一个暴力的容斥来完成，枚举一些1的位置变成0，然后就是容斥的奇数减偶数加\n\n复杂度为$O(Q\\cdot 2^{1的个数}\\ \\ \\ \\ \\ )$\n\n同理，处理高位后缀和，复杂度为{%raw%}$\\begin{aligned}O(Q\\cdot 2^{0的个数}\\ \\ \\  \\ )\\end{aligned}${%endraw%}\n\n而直接暴力枚举$?$变成0/1，复杂度为{%raw%}$\\begin{aligned}O(Q\\cdot 2^{?的个数}\\ \\ \\ \\ \\ )\\end{aligned}${%endraw%}\n\n综合这三种算法，选一个更优的做，就得到一个复杂度为\n\n{%raw%}$\\begin{aligned}O(Q \\ \\cdot 2^{ \\begin{aligned}\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\min\\lbrace 1的个数,0的个数,?的个数\\rbrace\\end{aligned} })\\ \\ \\ \\ \\ \\ \\end{aligned}${%endraw%}\n\n显然查询复杂度就是$O(Q\\cdot 2^{\\lfloor \\frac{n} {3}\\rfloor }=Q\\cdot 2^6)$\n\n算上预处理，复杂度为$O(2^nn+Q\\cdot 2^6)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nenum{N=1<<20};\nint n,k,m,A[N],B[N],C[N],P[N];\n// A 高位前缀和\n// B 高位后缀和\n// C 点值(打扰了)\n// P __builtin_parity\nchar val[N],q[21];\nint main() {\n\tscanf(\"%d%d%s\",&n,&m,val),k=1<<n;\n\tfor(int i=0;i<k;++i) A[i]=B[i]=C[i]=val[i]-'0',P[i]=P[i>>1]^(i&1);\n\tfor(int i=1;i<k;i<<=1) for(int l=0;l<k;l+=i*2) for(int j=l;j<l+i;++j) A[j+i]+=A[j],B[j]+=B[j+i];\n    //预处理高位前缀和，高位后缀和\n\twhile(m--) {\n\t\tint x=0,y=0,a=0,b=0,ans=0;\n\t\tfor(int i=scanf(\"%s\",q+1);i<=n;++i) {\n\t\t\tif(q[i]=='?') x|=1<<(n-i),a++;\n\t\t\tif(q[i]=='1') y|=1<<(n-i),b++;\n\t\t}\n\t\tif(a<=n/3) for(int S=x;~S;S=S?(S-1)&x:-1) ans+=C[y|S]; // 枚举?变成0/1\n\t\telse if(b<=n/3) for(int S=y;~S;S=S?(S-1)&y:-1) ans+=P[S^y]?-A[S|x]:A[S|x]; // 对于高位前缀和容斥\n\t\telse for(int S=x=(k-1)^x^y;~S;S=S?(S-1)&x:-1) ans+=P[S]?-B[S|y]:B[S|y]; // 对于高位后缀和容斥\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n\n```","tags":["JOI"],"categories":["题解"]},{"title":"伯努利数","url":"/articles/2020/11/27/f141d45a.html","content":"# 伯努利数\n\n","tags":["default tag"],"categories":["default category"]},{"title":"矩阵行列式","url":"/articles/2020/11/27/6ce15294.html","content":"# 矩阵行列式\n\n对于一个$n$行$n$列的矩阵$A$，有矩阵的行列式(常用$\\det(A),|A|$)表示\n\n### 行列式的意义\n\n如果将矩阵的每一行视为一个$n$维向量，则$n$阶行列式的意义可以看做是:\n\n有向长度/面积/体积在$n$为空间下的扩展\n\n具体的例子\n\n$n=1$时，$|A|=A_{1,1}$，即有向长度\n\n$n=2$时，$|A|=A_{1,1}A_{2,2}-A_{1,2}A_{2,1}=\\vec{A_1}\\times \\vec{A_2}$\n\n因此也可以得到常用的一个3维向量外积的表达式\n\n$\\vec{a}\\times \\vec{b}=\\begin{vmatrix} \\vec{x}\\ \\ \\vec{y}\\ \\ \\vec{z} \\\\ a_1\\ a_2\\ a_3\\\\ b_1\\ b_2\\ b_3\\end{vmatrix}$\n\n其中$\\vec{x},\\vec{y},\\vec{z}$是三维平面的三个维度的单位向量\n\n上式即将有向体积中的一个向量改为单位向量后压缩到一个平面上\n\n$$ \\ $$\n\n### 最基本的求法：\n\n枚举$1,2,\\cdots,n$的一个排列$p_i$，设排列$p$的逆序对为$f(p)$\n\n则{%raw%}$\\begin{aligned} |A|=\\sum (-1)^{f(p)} \\Pi A_{i,p_i}\\end{aligned}${%endraw%}\n\n$$ \\ $$\n\n### 矩阵行列式的性质：\n\n1.交换任意两行(列)得到矩阵$A'$，则$|A'|=-|A|$ (交换后每个排列$f(p)$的奇偶性改变)\n\n2.对于某一行(列)乘上一个值$k$得到矩阵$A'$，则$|A'|=k|A|$\n\n3.某一行减去另一行的$k$倍得到矩阵$A'$，则$|A'|=|A|$\n\n### 根据性质得到的快速求法\n\n根据性质1,2,3可以对于矩阵进行高斯消元\n\n而对于一个上三角/下三角矩阵，带入上面的基本求法，显然能够得到非0值的排列只有对角线$p_i=i$\n\n因此得到上/下三角矩阵之后就可以快速求解,复杂度为高斯消元的$O(n^3)$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"数论知识小结 [微提高篇]","url":"/articles/2020/11/27/453ae0f1.html","content":"# 数论知识小结 [微提高篇]\n\n(lastest updated on 2020.08.12)\n\n### 二次剩余和高次剩余\n\n$y^c\\equiv x\\pmod P$则$y$为$x$模$P$的$c$次剩余\n\n关于[二次剩余](https://www.cnblogs.com/chasedeath/p/13043597.html)\n\n$$ \\ $$\n\n### $\\text{Miller_Rabin}$素数检测\n\n$x$是质数的必要条件是\n\n$\\forall a,a^{x-1}\\equiv 1\\pmod x$\n\n同于对于一个质数$x$，必然有\n\n$a^2\\equiv 1\\pmod x$的解只有$1,x-1$\n\n证明是\n\n$\\because a^2\\equiv 1 \\pmod x$\n\n$\\therefore (a-1)(a+1)\\equiv 0 \\pmod x$\n\n因为$x$是质数，所以$a-1\\mod x=0$ 或 $a+1\\mod x=0$，即$a\\in\\{1,x-1\\}$\n\n$$ \\ $$\n\n#### $\\text{Miller_Rabin}$算法的步骤\n\n将$x-1$分解为$x-1=2^s\\cdot t$\n\n找一个$<x$的质数$a$，求出$b\\equiv a^t \\pmod x$\n\n将$b$进行$s$次平方，设这一次平方的结果$b^2\\equiv c \\pmod x$\n\n当出现$c=1$时，$b$只能为$1$,$x-1$否则$x$就不是质数\n\n$s$次平方后，$b\\equiv a^{x-1}\\pmod x$，若$b\\ne 1$，则$x$不是质数\n\n不知道为什么，[模板题](https://loj.ac/problem/143)跑5次就能过了。。。\n\n注意$x\\leq 2\\or 2|x$要特判\n\n注意取模需要快速乘\n\n```cpp\nint Miller_Rabin(ll x){\n\tif(x==2) return 1;\n\tif(x<=1 || ~x&1) return 0;\n\tll s=0,t=x-1;\n\twhile(~t&1) s++,t>>=1;\n\trep(i,1,20) {\n\t\tll a=prime[rand()%primecnt+1],b=qpow(a,t,x),c;\n\t\trep(j,1,s) {\n\t\t\tc=qmul(b,b,x);\n\t\t\tif(c==1 && b!=1 && b!=x-1) return 0;\n\t\t\tb=c;\n\t\t}\n\t\tif(b!=1) return 0;\n\t}\n\treturn 1;\n}\n\n\n```\n\n$$ \\ $$\n\n### 可以结合$\\text{Miller_Rabin}$的$n^{\\frac{1} {3} }$特殊情况质因数分解\n\n实际上，这种方法常用于求$n$的因子个数\n\n方法非常简单，先对于所有$pri_i\\le n^{\\frac{1} {3} }$的因子对于$n$筛去，剩下的部分中，所有质因子$>n^{\\frac{1} {3} }$\n\n因此最多包含两个质因数(可能相同)\n\n用$\\text{Miller_Rabin}$判断是否只包含一个质数，然后简单判别两个质因数是否相同即可\n\n复杂度为$O(\\log n+\\pi (n^{\\frac{1} {3} }))$\n\n小范围内比下面的$\\text{Pollard's_Rho}$更快，更简单\n\n$$ \\ $$\n\n### $\\text{Pollard's_Rho}$质因数分解\n\n核心就是名字里的Rho($\\rho$)，是伪循环的一个形象的表示\n\n伪循环：从某一个时刻开始，进入一个真循环，之前的时间就是$\\rho$的脚\n\n构造**伪随机函数**$G_n(x)=(x^2+c)\\mod n$\n\n构造数列$a_i=G_n(a_{i-1})$\n\n由于函数的值域只有$[0,n-1]$，必然出现伪循环，即在从个位置开始，进入一个未知长度的循环，也就是长成了一个$\\rho$的形状\n\n由于这个函数是**伪随机函数**，所以这个循环大小在期望情况下是$O(\\sqrt n)$的\n\n$$ \\ $$\n\n$\\text{Pollard's_Rho}$算法要找到一个$p\\in[2,n-2],p|n$\n\n考虑用$\\text{Floyd}$算法找环，即定义两个变量，一个每次走一步，一个每次走两步，设他们为$x,y$\n\n当$x=y$时，显然出现循环\n\n由于$p|n$，所以当$x \\equiv y \\pmod p$时，实际上是$G_p(x)$这个函数出现了循环\n\n所以在找$G_n(x)$的循环时，可以通过求出$\\gcd(x-y,n)$判断是否出现$G_p(x)$的循环\n\n注意如果出现$x=y$情况已经找到$n$的循环，说明这个我们这次构造的这个函数找不到$p$的循环\n\n由于$\\forall n\\notin prime,\\exist p\\in[1,\\sqrt n],p|n$\n\n所以期望情况下每$\\sqrt p\\leq \\sqrt {\\sqrt n}=n^{\\frac{1} {4} }$的长度会出现循环\n\n算法复杂度是期望$O(n^{\\frac{1} {4} }\\log n)$的\n\n那么写出$\\text{Pollard's_Rho}$算法的代码\n\n```cpp\nll Pollards_Rho(ll n){\n\tll c=rand(); // 随机生成一个函数\n    ll x=rand(),y=x,d=1; // 随机一个初始值\n    while(d==1){\n\t\tx=(qmul(x,x)+c)%n;\n\t\ty=(qmul(y,y)+c)%n;\n\t\ty=(qmul(y,y)+c)%n;\n\t\td=gcd(n,abs(x-y));\n\t}\n    if(d==n) return Pollards_Rho(n); // 构造失败\n    else return d; // 找到了p\n}\n```\n\n不断调用即可完成对于n的质因数分解\n\n对于质因数分解，更高级的算法可以参考[LOJ-6466](https://loj.ac/problem/6466)\n\n\n\n\n\n\n\n\n\n\n\n\n\n### 莫比乌斯函数\n\n设$n=\\prod_1^m p_i^{c_i}$，其中$c_i>0,p_i$为质数\n\n则莫比乌斯函数 {%raw%}$\\mu(n)=\\left\\{\\begin{aligned}1 && n=1\\\\ (-1)^m && \\nexists c_i>1 \\\\ 0 && \\exists c_i>1\\end{aligned}\\right.${%endraw%}\n\n\n\n### 狄利克雷卷积\n\n对于数列$F,G$，他们的狄利克雷卷积(下简称$F\\oplus G$)为\n\n{%raw%}$$\\begin{aligned} (F\\oplus G)_i=\\sum_{d|i}F_d\\cdot G_{\\frac{i} {d} }\\end{aligned}$${%endraw%}\n\n$$ \\ $$\n\n### 莫比乌斯反演\n\n设元函数$E_i=1$\n\n$G=F\\oplus E$，即$G_i=\\sum_{d|i}F_d$\n\n由$G$反解$F$得到莫比乌斯反演$F_i=\\sum_{d|i}\\mu(d) G_{\\frac{i} {d} }$\n\n$$ \\ $$\n\n### 积性函数\n\n**积性函数**的定义，对于一个定义在$\\Z$上的函数$F(n)$，若满足\n\n$F(1)=1,\\forall (u,v)=1,F(u)\\cdot F(v)=F(u\\cdot v)$，则$F(u)$是一个积性函数\n\n**完全积性函数**对于任意的$u,v$对满足上述性质\n\n常见的积性函数有\n\n1.元函数$e(n)=[n=1]$\n\n2.因数个数函数$d(n)$\n\n3.欧拉函数$\\varphi(n)$\n\n4.莫比乌斯系数$\\mu(n)$\n\n5.约数和函数$\\sigma(n)$\n\n推论：任意两个积性函数的狄利克雷函数卷积 仍然是积性函数\n\n#### 线性筛筛法求解积性函数\n\n把积性函数$F(n)$表示为\n\n{%raw%}$F(n)=\\left\\{\\begin{aligned} 1 && n=1 \\\\ G(n) && n=p_i^t \\\\ \\prod G(p_i^{c_i}) && n=\\prod p_i^{c_i}\\end{aligned}\\right.${%endraw%}\n\n如果能在较短的时间内求得$G(p_i^t)$，则可以用线性筛法求解积性函数$F(n)$的前$n$项\n\n##### 一个最简单的应用: 在$O(n)$时间求解$id^z(n)=n^z$\n\n显然，$id^z(n)$是一个完全积性函数，且直接求复杂度为$O(n\\log z)$\n\n因为是完全积性函数，所以只需要求解$id^z(p_i)$，这一部分复杂度为$O(\\pi(n)\\cdot \\log z)=O(n)$\n\n线性筛法的复杂度为$O(n)$，因此总复杂度也为$O(n)$\n\n~~(这就是传说中的魔法吗！！)~~\n\n##### 一个简单的应用：求解$\\mu(n)$\n\n鉴于$\\mu(n)$的特殊性，也只需要求出$\\mu(p_i)$\n\n写出的代码大致是这样的\n\n```cpp\nint pri[N],notpri[N],pc,mu[N];\nvoid Sieve_Mobius(int n){\n    mu[1]=1;\n    for(int i=2;i<=n;++i) {\n        if(!notpri[i]) pri[++pc]=i,mu[i]=1;\n        for(int j=1;j<=pc && 1ll*i*pri[j]<=n;++j) {\n            notpri[i*pri[j]]=1;\n            if(i%pri[j]==0) {\n                mu[i*pri[j]]=0;\n                break;\n            }\n            mu[i*pri[j]]=-mu[i];\n        }\n    }\n}\n```\n\n##### 真-应用: 大型模板\n\n```cpp\nint CalcG(int n);\n\nint prime[N],primecnt,notprime[N];\nint F[N],D[N];\n// F存储函数值\n// D存储质因数出现的幂次积\n\nvoid Sieve_Multiplicative_Function(int n){\n    F[1]=1;\n    for(int i=2;i<=n;++i){\n        if(!notprime[i]) {\n            prime[++primecnt]=i;\n            for(ll j=i;j<=n;j*=i) F[j]=CalcG(j),D[j]=j;\n            // 计算F(p_i^t)\n        }\n        for(int j=1;j<=primecnt && 1ll*i*prime[j]<=n;++j) {\n            notprime[i*prime[j]]=1;\n            int k=i*prime[j];\n            if(i%prime[j]==0) {\n                D[k]=D[i] * prime[j];\n                F[k]=F[i/D[i]] * F[D[k]];\n                break;\n            }\n            D[k]=prime[j];\n            F[k]=F[i] * F[prime[j]];\n        }\n    }\n}\n\n```\n\n$$ \\ $$\n\n$$\\ $$\n\n### 杜教筛\n\n用于求解 **较大范围** 且 **可以构造出一些性质**的积性函数 前缀和\n\n[不推荐看我的，但是还是放一下链接](https://www.cnblogs.com/chasedeath/p/13092808.html)\n\n$$ \\ $$\n\n### Min25筛\n\n用于求 **较大范围** 且 **使用范围更广** 的积性函数前缀和 ， 但在效率上不敌杜教筛\n\n[还是放一下链接](https://www.cnblogs.com/chasedeath/p/12751225.html)\n\n\n\n\n\n","tags":["default tag"],"categories":["学习笔记"]},{"title":"「JOI 2020 Final」奥运公交  (最短路)","url":"/articles/2020/11/27/2db96091.html","content":"# 「JOI 2020 Final」奥运公交  (最短路)\n\n问题实际上就是要分别求$1-n$和$n-1$对于每一条边翻转之后的最短路\n\n由于$m$的上限为$n^2$，下面所说的$\\text{Dijkstra}$都是没有堆优化的板本，即$n^2$找最小点，$m$更新\n\n以计算$1-n$为例\n\n不妨先考虑计算删除每一条边$(u,v,c)$之后，1为源点的的最短路情况\n\n我们知道从源点$S$出发的最短路可以用最短路图描述，而最短路图是一张拓扑图（fix:这道题含有0边，所以并不是，但是没有关系）\n\n如果从最短路图中提取一棵树，那么显然只有这些树边需要考虑删除之后对于最短路的影响\n\n对于这些边重新求最短路即可，复杂度为$O(n(m+n^2))$\n\n如何考虑翻转一条边之后的贡献？\n\n不妨再求出以$n$为结束的最短路，即求反图$n$为源点的答案\n\n然后在两个最短路上查询一下即可得到$1-n$的最短路\n\n同理得到$n-1$的答案\n\n复杂度为$O(n(m+n^2))$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T& a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T& a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0;int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\n\nbool Mbe;\nconst int N=210,M=5e4+10,INF=2e9+10;\n\nint n,m;\nint E[N][N],E2[N][N],EI[N][N],dis[N],vis[N];\nvoid Dijkstra(int S){\n\trep(i,0,n) dis[i]=INF,vis[i]=0;\n\tdis[S]=0;\n\twhile(1) {\n\t\tint u=0;\n\t\trep(i,1,n) if(!vis[i] && dis[i]<dis[u]) u=i;\n\t\tif(!u) break;\n\t\tvis[u]=1;\n\t\trep(i,1,n) if(E[u][i]<INF) cmin(dis[i],dis[u]+E[u][i]);\n\t}\n}\n\nint U[M],V[M],C[M],D[M];\nint mk[M];\nvoid dfs(int u) {\n\tvis[u]=1;\n\trep(i,1,n) if(!vis[i] && E[u][i]<INF && dis[i]==dis[u]+E[u][i]) mk[EI[u][i]]=1,dfs(i);\n}\n\nint Res1[M][N],Res2[M][N];\nll Ans[M];\n\nvoid Solve(int S,int Res[M][N]){ \n    // 计算删除每条边之后，S为源点的最短路情况，放在Res[M][N]中\n\trep(i,1,n) rep(j,1,n) E[i][j]=INF,E2[i][j]=INF;\n\trep(i,1,m) {\n\t\tint u=U[i],v=V[i],c=C[i];\n\t\tif(E[u][v]>c) E2[u][v]=E[u][v],E[u][v]=c,EI[u][v]=i;\n\t\telse if(E2[u][v]>c) E2[u][v]=c;\n\t}\n\tDijkstra(S);\n\trep(i,1,n) vis[i]=0;\n\trep(i,1,m) mk[i]=0;\n\tdfs(S);\n\trep(i,1,m) if(!mk[i]) rep(j,1,n) Res[i][j]=dis[j];\n\trep(i,1,m) if(mk[i]) {\n\t\tswap(E[U[i]][V[i]],E2[U[i]][V[i]]);\n\t\tDijkstra(S);\n\t\trep(j,1,n) Res[i][j]=dis[j];\n\t\tswap(E[U[i]][V[i]],E2[U[i]][V[i]]);\n\t}\n}\n\nvoid Solve(){ \n\tSolve(1,Res1);\n\trep(i,1,m) swap(U[i],V[i]);\n    // 反图计算\n\tSolve(n,Res2);\n\trep(i,1,m) swap(U[i],V[i]);\n\n\trep(i,1,m) {\n\t\tint t=min(Res1[i][n],Res2[i][1]);\n\t\tif(Res1[i][V[i]]<INF && Res2[i][U[i]]<INF) cmin(t,Res1[i][V[i]]+Res2[i][U[i]]+C[i]);\n\t\tAns[i]+=t; // 合并贡献\n\t}\n}\n\nbool Med;\nint main(){ \n\t//fprintf(stderr,\"%.2lf\\n\",(&Med-&Mbe)/1024.0/1024.0);\n\tn=rd(),m=rd();\n\trep(i,1,m) U[i]=rd(),V[i]=rd(),C[i]=rd(),D[i]=rd();\n\tll ans=0;\n\trep(i,1,n) rep(j,1,n) E[i][j]=INF;\n\trep(i,1,m) cmin(E[U[i]][V[i]],C[i]);\n\tDijkstra(1),ans+=dis[n];\n\tDijkstra(n),ans+=dis[1];\n\t\n    // 计算1-n\n\tSolve();\n    // 计算n-1\n\trep(i,1,m) U[i]=n-U[i]+1,V[i]=n-V[i]+1;\n\tSolve();\n\trep(i,1,m) cmin(ans,Ans[i]+D[i]);\n\tprintf(\"%lld\\n\",ans>=INF?-1:ans);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["JOI"],"categories":["题解"]},{"title":"「Lych_cys模拟题2018」橘子树              ","url":"/articles/2020/11/27/898de7a9.html","content":"# 「lych_cys模拟题2018」橘子树              \n\n你可能需要[一点点简单知识](https://www.cnblogs.com/chasedeath/p/13092822.html)\n\n你可能需要[一点点预先知识](https://www.cnblogs.com/chasedeath/p/13492548.html)\n\n设值域上限为$M=2\\cdot 10^5,T=3\\cdot 10^5$\n\n### 求$F(n)$\n\n筛去$n^{\\frac{1} {3} }$以内的质因数，此时$n$剩下的质因数$>n^{\\frac{1} {3} }$\n\n剩下的$n$中，可能出现贡献的只有$n$是完全平方数的情况，$O(1)$判断即可\n\n复杂度为$O(n^{\\frac{1} {3} })$\n\n$$ \\ $$\n\n### 求出$i$结点长了$t$时间的时候被收掉的答案\n\n预处理$a_i,b_i$的答案$c_i=F(a_i),d_i=F(b_i)$，复杂度为$O(n\\pi(M^{\\frac{1} {3} }))$\n\n那么此时查询的权值就是$a_i\\cdot t$，如果$>b_i$特判掉\n\n否则，显然$c_i$的贡献可以先分离掉考虑进答案\n\n对于剩下的部分，不妨设$x=\\frac{a_i} {c_i}$，显然$x$不包含平方因子\n\n考虑$x$与$t$的合并所产生的贡献，实际上就是$\\gcd(x,t)$ (让$x$的单个因子与$t$匹配一下)\n\n然后对于$t$剩下的部分$\\frac{t} {\\gcd(x,t)}$，由于$t\\leq 3\\cdot 10^5$，可以预处理一下答案\n\n综合一下上面的部分，那么一个点的答案就是$c_i\\gcd(x,t)^2 F(\\frac{x} {\\gcd(t,x)})$\n\n因此查询一个点的复杂度就是$\\gcd$的$O(\\log T)$\n\n$$ \\ $$\n\n综合利用上面的方法，勉强可以拿到$nm\\log T$的20分\n\n剩下的部分，可以考虑把树树剖一下，然后每个查询可以化为在$\\text{dfs}$序上的若干更新区间$L_i,R_i,t_i$\n\n由于题目考虑的实际上是查询总和，因此可以对于每个点计算答案\n\n不妨从$1-n$扫描$\\text{dfs}$序，对于每个区间在$L_i$插入$t_i$，在$R_i+1$删除$t_i$\n\n用一个set来维护$t_i$的顺序，复杂度为$O(n\\log ^2n)$\n\n在插入/删除set元素的同时，维护每一个$\\Delta_i=t_i-t_{i-1}$，也就是我们要查询的每个数\n\n查询单点时，由于这样的$\\sum \\Delta_i\\leq T$，所以最多包含$O(\\sqrt T)$种不同的$\\Delta_i$  \n\n用另一个set之类的东西维护这些不同的位置，然后暴力查询，复杂度为$O(n\\sqrt T\\log T)$\n\n总复杂度为$O(n\\pi(M^{\\frac{1} {3} })+n\\sqrt T\\log T)$左右\n\n$$ \\ $$\n\n$$ \\ $$\n\n$$ \\ $$\n\n------------\n\n后记\n\n由于特(智)殊(力)的(缺)原(陷)因\n\n我考场上写了一个树剖+分块+莫比乌斯反演的做法，而且还没调出来，代码是[这个](http://10.220.121.125/submission/70043)，复杂度大概差不多$O(n\\sqrt n \\log_n^{\\frac{3} {2} })$\n\n不提了。。。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"数论知识小结 [基础篇]","url":"/articles/2020/11/27/f71cb7e0.html","content":"# 数论知识小结 [基础篇]\n\n(latest updated on 2020.08.12)\n\n--------\n\n符号$(a,b)=\\gcd(a,b)$\n\n乘除$a|b\\rightarrow b=ka (k\\in \\N^+)$\n\n$\\sum$求和,$\\prod$求积\n\n任意$\\forall$，存在$\\exists$\n\n$\\lfloor x\\rfloor $ 向下取整，$\\lceil x\\rceil $ 向上取整\n\n$[a,b]$区间，通常指整数即$[a,b]\\cap \\Z$\n\n\n\n### 调和级数\n\n数学上，调和级数为$H_n=\\sum_{i=1}^{n}\\frac{1} {i}$\n\n在**OI**中，我们常用调和级数分析$\\sum_{i=1}^n\\frac{n} {i}\\approx n\\ln n$\n\n把它近似看成是$f(x)=\\frac{n} {x}$在$[1,n]$上的积分，它的原函数$F(x)=n\\ln x$\n\n即{%raw%}$\\begin{aligned} \\sum_{i=1}^n\\frac{n} {i}\\approx \\int_1^nf(x) dx=F(n)-F(1)=n\\ln n-n\\approx n\\ln n\\end{aligned}${%endraw%}\n\n附：广义调和级数 {%raw%}$\\begin{aligned} H^z_n=\\sum_{i=1}^{n}\\frac{1} {i^z} \\end{aligned}${%endraw%}它的无穷形式为黎曼函数{%raw%}$\\begin{aligned}\\zeta(z)=H^{z}_{\\infty}\\end{aligned}${%endraw%}\n\n$$ \\ $$\n\n### 向下取整的性质/数论分段\n\n性质:$\\lfloor \\frac{n} {ab}\\rfloor =\\lfloor \\frac{\\lfloor \\frac{n} {a}\\rfloor } {b}\\rfloor $\n\n$$ \\ $$\n\n数论分段：即对于$i=[1,n]$，把$i$按照$\\lfloor \\frac{n} {i}\\rfloor$的值分成$O(\\sqrt n)$段，(通常为$2\\cdot \\sqrt n$段左右)\n\n证明：对于$i\\leq \\sqrt n$，显然只有$\\sqrt n$个不同的值\n\n对于$i>\\sqrt n$，此时$\\frac{n} {i}<\\sqrt n$，也只有$\\sqrt n$个不同的值\n\n$$ \\ $$\n\n### 素数/质数/质数密度\n\n对于$x>1$，若$\\nexists y\\in[2,n-1],y|x$，则$x$是一个质数，下文称素数集合为$prime$集合\n\n$n$以内的素数个数用函数$\\pi(n)=|prime\\cap[1,n]|$表示，素数密度在**渐进意义**上是$O(\\log n)$的\n\n即可以认为$\\pi(n)=O(\\frac{n} {\\log n})$(实际在$n$较小时完全看不出这一点)\n\n$n$的唯一分解: $n=\\prod_{p_i\\in prime} p_i^{c_i}$\n\n朴素的素数判别法:\n\n一个显然方法的如果$x$不是质数，则$\\exists y\\in [2,\\sqrt n] ,y|x$\n\n所以可以朴素写出一个$O(\\sqrt n)$的素数判别法\n\n利用这一点预先处理小素数，每次只判断素数，可以写出一个$O(\\pi(\\sqrt n))$的素数判别法\n\n朴素的质因数分解法:\n\n即求$n=\\prod p_i^{c_i},p_i\\in prime$，其中$\\sum c_i\\leq \\log _2^n$\n\n由于对于一个数$n$，最多存在一个$y\\in prime \\cap [\\sqrt n,n],y|n$，因此可以先分解掉$y<\\sqrt n$的部分，剩下的一个就知道了\n\n```cpp\nvoid Factor(int n){\n    for(int i=2;i*i<=n;++i) if(n%i==0)  \n        while(n%i==0) printf(\"%d \",i),n/=i; // 分解掉<sqrt(n)的部分\n    if(n>1) printf(\"%d \",n); // 如果还剩下，那么就是>sqrt(n)的一个质数\n}\n```\n\n复杂度是$O(\\sqrt n +\\log n)$\n\n更优化的只枚举质数作为因子，复杂度是$O(\\pi(\\sqrt n)+\\log n)$\n\n\n$$  \\ $$\n\n\n朴素的素数筛法：埃氏筛\n\n对于$[2,n]$每个数$i$，$x=ki(k>1)$均不是质数，直接枚举复杂度为调和级数$O(n\\ln n)$\n\n更优化的，对于$[2,n]$中每个质数$i$，$x=ki(k>1)$均不是质数，由于素数密度为$O(\\log n)$,所以可以近似认为是$O(n\\log \\log n)$(实际我不会证明。。)\n\n### 线性筛(欧拉筛)\n\n筛素数知识一个基础，可以筛很多函数，尤其是适用于积性函数\n\n直接上代码背板子好了\n\n```cpp\nint notpri[N],prime[N],primecnt;\nvoid Sieve(){\n    notpri[1]=1;\n    for(int i=2;i<=n;++i) {\n        if(!notpri[i]) prime[++primecnt]=i;\n        for(int j=1; j<=primecnt && 1ll*i*prime[j]<=n;++j){\n            notpri[i*prime[j]]=1;\n            if(i%prime[j]==0) break;\n        }\n    }\n}\n\n```\n\n其中$i\\mod prime_j= 0$意味着后面的数已经被$\\frac{i} {prime_j}$筛掉了，所以可以break\n\n复杂度是带有一定常数的$O(n)$,还可以用来筛其他的一些函数\n\n$$ \\ $$\n\n$$ \\ $$\n\n### $\\gcd,\\text{lcm}$\n\n最大公因数$\\text{gcd(greatest common divisor)}$常用$\\gcd(x,y)=(x,y)$表示\n\n最小公倍数$\\text{lcm(least common multiple)}$\n\n特别的：$(a,0)=a$\n\n求$\\gcd(a,b)$可以用辗转相除法(也称为欧几里得算法)，即利用性质$(a,b)=(a\\mod b,b)$\n\n每次递归调用$\\gcd(b,a\\mod b)$即可，边界为$(a,0)=a$\n\n复杂度分析：\n\n首先是取模的分析，对于$\\forall a,b,a\\ge b$，必然满足$a\\mod b \\leq \\frac{a} {2}$\n\n所以每次取模至少会减少一倍，复杂度为$O(\\log a)$\n\n$$ \\ $$\n\n#### 附：扩展欧几里得算法\n\n用于求解不定方程$ax+by =1$的一组解$(x,y)$\n\n存在解的条件是$(a,b)=1$，否则$(a,b)|ax+by$，即$ax+by>1$\n\n用类似求$\\text{gcd}$的方法求出\n\n$ax+by=1$\n\n$( a\\mod b)\\cdot x+ \\lfloor \\frac{a} {b}\\rfloor\\cdot b\\cdot x + by=1$\n\n$( a\\mod b)\\cdot x+ b\\cdot (\\lfloor \\frac{a} {b}\\rfloor\\cdot x + y)=1$\n\n那么如果求出$(a\\mod b)\\cdot x'+b\\cdot y'=1$的解\n\n则$x'=x,y'=\\lfloor \\frac{a} {b}\\rfloor \\cdot x+y$\n\n即$x=x',y=y'-\\lfloor \\frac{a} {b}\\rfloor x$\n\n每次都递归求出$(a\\mod b) \\cdot x+ by =1 $\n\n复杂度与$\\gcd$相同，最后的$(a,b)=a=1,b=0$是边界条件，此时$x+0\\cdot y=1$的一组解是$(1,0)$\n\n写成代码\n\n```cpp\n// ax + by =1\nint Exgcd(int a,int b,int &x,int &y) {\n    if(b==0){ \n        if(a!=1) return 0; // (a,b)!=1 ,不存在解\n        x=1,y=0; // 初始解\n        return 1;\n    } \n    Exgcd(b,a%b,y,x),y-=a/b*x; // 带入上面的式子，注意这里带入的是(b,a%b),所以x,y要反过来\n    return 1;\n}\n```\n\n注意求出的$x,y$不保证为正数\n\n$$ \\ $$\n\n$$ \\ $$\n\n$$ \\ $$\n\n### 因数个数\n\n似乎没有找到规范的函数定义，所以下称$d(n)$\n\n即$d(n)=|\\{i|i\\in[1,n]\\and i|n\\}|$\n\n对于$n=\\prod p_i^{c_i}$，列一条小学的公式$d(n)=\\prod (c_i+1)$\n\n因数个数一个非常松的上界是$O(\\sqrt n)$，证明这里略去\n\n实际上，搜索得到的上界大致是\n\n```\nmaxn=10^ 1  max= 4\nmaxn=10^ 2  max= 12\nmaxn=10^ 3  max= 32\nmaxn=10^ 4  max= 64\nmaxn=10^ 5  max= 128\nmaxn=10^ 6  max= 240\nmaxn=10^ 7  max= 448\nmaxn=10^ 8  max= 768\nmaxn=10^ 9  max= 1344\nmaxn=10^10  max= 2304\nmaxn=10^11  max= 4032\nmaxn=10^12  max= 6720\nmaxn=10^13  max= 10752\nmaxn=10^14  max= 17280\nmaxn=10^15  max= 26880\nmaxn=10^16  max= 41472\nmaxn=10^17  max= 64512\nmaxn=10^18  max= 103680\n```\n\n可以看到，因数个数是非常少的\n\n附: \n\n质因数个数$\\Omega(n)=|prime\\cap [1,n]|$，非常松的上界是$\\Omega(n)=O(\\log n)$\n\n约数和函数$\\sigma(n)=\\sum_{i|n}i$\n\n$$ \\ $$\n\n### 费马小定理/欧拉定理/欧拉函数/阶\n\n$$ \\ $$\n\n费马小定理： 对于任意质数$P,x>0,x^{p-1}\\equiv 1 \\pmod P$\n\n\n\n$$ \\ $$\n\n欧拉函数：$\\varphi(n)$为$[1,n-1]$中与$n$互质的数个数，特别的$\\varphi(1)=1$\n\n设$n=\\prod p_i^{c_i}$其中$p_i$是质数,$c_i>0$，则$\\varphi(n)=\\prod p_i^{c_i-1}(p_i-1)=n\\prod\\frac{p_i-1} {p_i}$\n\n对于可以通过类似筛素数的方法求出来$[1,n]$的$\\varphi(i)$\n\n对于数$n$，需要采用质因数分解求出，朴素的做法为$O(\\sqrt n)$，用$\\text{Pollard's Rho}$算法复杂度更低\n\n$$ \\  $$\n\n欧拉定理：对于任意数$P>1,x>0,x^{\\varphi(P)}\\equiv 1\\pmod P$\n\n推论：$x^c\\equiv x^{c\\mod \\varphi (P)} \\pmod P$\n\n很显然，费马小定理是欧拉定理的特殊情况\n\n$$ \\ $$\n\n 阶：对于$(a,n)=1$的整数，满足$a^r≡1 \\pmod n$ 的最小整数$r$,称为$a$模$n$的阶，以下简称$d(a)$\n\n显然$a^i \\mod n$构成了一个以$r$为最小正周期的循环\n\n性质：根据欧拉定理$a^{\\varphi(n)}\\mod n=1$，所以有$d(a)|\\varphi(n)$ \n\n求解阶：先对于 $\\varphi(n)$质因数分解，然后可以\n\n1.依次枚举每个因数判断是否有$a^i\\mod n=1$，取最小的$i$，复杂度为$O(\\sqrt n\\log n)$\n\n2.设$\\varphi(n)=p_i^{c_i}$，令$x=\\varphi(P)$，从$x$开始，如果$a^{\\frac{x} {p_i} }\\mod n=1$，则$x\\rightarrow \\frac{x} {p_i}$\n\n预处理复杂度受限于质因数分解(下文有介绍)\n\n\n\n单次查询复杂度上限是$O(\\log ^2 P)$(为快速幂复杂度乘上$\\sum c_i$)\n\n$$ \\ $$\n\n### 模逆元\n\n对于任意数$x>1,P>1,(x,P)=1$，存在一个数$\\frac{1} {x}\\equiv y\\pmod P$\n\n即$xy\\equiv 1 \\pmod P$，$y$为$x$的一个模逆元\n\n当$P$为质数时，由于$x^{P-1}\\equiv 1 \\pmod P$，所以$y\\equiv x^{P-2}\\pmod P$为$x$的一个逆元\n\n当$P$不为质数时，如果已知$\\varphi (P)$，可以类似得做，否则可以构造$a\\cdot x+b\\cdot P=1$，用扩展欧几里得算法求出一组合法解$(a,b)$，则$a$即为一个答案\n\n$$ \\ $$\n\n### 原根/指标\n\n原根：一个数$P$有原根的条件是他可以表示为$P=1,2,4,p,2p,p^n(p\\in prime)$\n\n对于$P$，令$d(x)$为$x$模$P$的原根，若存在$d(x)=\\varphi(P)$,则$x$是$P$的一个原根\n\n找原根：\n\n设$\\varphi(P)=\\prod p_i^{c_i}$，其中$p_i$是质数\n\n由于$d(x)|\\varphi(P)$，如果$d(x)<\\varphi(P)$那么必然存在一个$x^{\\frac{\\varphi(P)} {p_i} }\\equiv 1\\pmod P$\n\n所以先求一遍质因数分解，然后快速幂判断就可以做到$O(\\log ^2 P)$判断原根\n\n显然原根不唯一\n\n已经被证明对于任意的$P$如果存在原根，则其最小原根最多是$O(P^{\\frac{1} {4} })$级别的\n\n$$ \\ $$\n\n指标：\n\n对于一个数$P$和它的一个原根$x$，对于$\\gcd(y,P)=1$，则$y$一定可以用$x^i$表示，那么$i$就是$y$的指标\n\n同时，$y$模$P$的阶就是$d(y)=\\frac{\\varphi(P)} {\\gcd(\\varphi(P),i)}$，可以认为是数列$a_j=i\\cdot j\\mod \\varphi(P)$的周期问题\n\n可以使用$\\text{BSGS}$算法在$O(\\sqrt P\\log P)$或者$O(\\sqrt P)$的时间内求出一个数的指标\n\n(关于去掉$\\log P$：只需要处理出模逆元直接累乘，每次用$\\text{Hash Table}$访问即可)\n\n指标在二次剩余的较劣做法中也有应用，同时也可以直接套用性质用于阶的求解\n\n$$ \\ $$\n\n### 快速乘\n\n求$x,y\\in[0,P-1],P\\leq 10^{18},x\\cdot y \\mod P$\n\n直接乘法会爆long long \n\n可以用类似快速幂的方法写，复杂度为$O(\\log P)$\n\n```cpp\ntypedef long long ll;\ntypedef unsigned long long ll;\nvoid qmul(ll x,ll y,ll P){\n    ll res=0;\n    for(;y;y>>=1,x=(x+x)%P) if(y&1) res=(res+x)%P;\n    return res;\n}\n```\n\n另一种方法是强行用long double 保证精度，然后计算的时候用unsigned long long 溢出回来，$O(1)$但是很奇怪，通常不会挂\n\n```cpp\ntypedef long long ll;\ntypedef unsigned long long ll;\nvoid qmul(ll x,ll y,ll P){\n    ull z=(long double)x/P*y;\n    ll res=(ull)x*y-(ull)z*P;\n    return (res%P+P)%P;\n}\n```\n\n\n\n$$\\ $$\n\n\n\n\n\n","tags":["default tag"],"categories":["学习笔记"]},{"title":"FWT (快速沃尔什变换)详解 以及 K进制FWT","url":"/articles/2020/11/15/454a92e7.html","content":"# FWT (快速沃尔什变换)详解 以及 K进制FWT\n\n约定：$F'=FWT(F)$\n\n卷积的问题，事实上就是要构造$F'G'=(FG)'$\n\n我们常见的卷积，是二进制位上的or ,and ,xor \n\n但正式来说，是**集合幂指数** 上的 **并 ， 交 ， 对称差**\n\n为了说人话，这里就不带入集合幂指数的概念了\n\n> 一个常识：$\\sum_{T\\sube S}(-1)^{|T|}=[S=\\empty]$\n\n\n-------\n\n## or 和 and 卷积\n\nps: 虽然这两个并不是$\\text{FWT}$，应该叫$\\text{FMT}$(快速莫比乌斯变换)，但是由于常用的是这3个，所以放到一起\n\n这两种卷积的本质是相同的，所以只解释$or$卷积\n\n**or卷积的本质就是高位前缀和**\n\n即:$F'_S=\\sum _{T\\sube S}F_T$\n\n#### 正确性：\n\n即$\\forall S,F'_S \\cdot G'_S=(F\\cup G)'_S$\n\n左边=\n\n$F'_S \\cdot G'_S=\\sum _{T\\sube S}\\sum _{R\\sube S}F_T\\cdot G_R$\n\n右边=\n\n$(F\\cup G)'_S=\\sum_{T\\sube S}(F \\cup G)_S$\n\n$=\\sum_{T\\sube S}\\sum_{A,B,A\\cup B=S}F_A\\cdot G_B$\n\n$=\\sum_{T \\sube S}\\sum_{R \\sube S}F_T \\cdot G_R$\n\n\n\n$$ \\ $$\n\n### 卷积实现\n\n其实第一次层循环的意思是**枚举子集中和自己不同的位最高是**$i$\n\n让$0$向$1$转移即可\n\n```cpp\nvoid FWT(int n,ll *a){\n    for(int i=1;i<n;i<<=1) \n        rep(j,i,n-1) if(j&i) s[j]+=s[j^i];\n}\nvoid FWT(int n,ll *a){\n    for(int i=1;i<n;i<<1)\n        for(int l=0;l<n;l+=i*2)\n            for(int j=0;j<l+i;++j) \n                s[j+i]+=s[j];\n}\n```\n\nTips:如果要卡常，可以写成类似$\\text{FFT}$的形式，因为优化了访问顺序会快一些\n\n$$\\ $$\n\n### 实现逆卷积\n\n把上面的加换成减，这是一个类似容斥的东西\n\n但是因为是反解，所以这个过程我么通常称为**子集反演**\n\n那么每次$0$向$1$的转移意味着多了一个不同的位置\n\n设$F'_S=\\sum_{T\\sube S}F_T$\n\n实际逆卷积就是$F_S=\\sum_{T\\sube S}(-1)^{|T\\oplus S|} F'_S$\n\n证明如下：\n\n$\\Leftrightarrow F_S=\\sum_{T\\sube S}(-1)^{|T\\oplus S|} \\sum _{R\\in T}F_R$\n\n$\\Leftrightarrow F_S=\\sum_{T\\sube S}F_R\\sum _{T\\sube R,R\\sube S}(-1)^{|S\\oplus R|}$\n\n$\\Leftrightarrow F_S=\\sum_{T\\sube S}F_R\\sum _{R\\sube (S\\oplus T)}(-1)^{|R|}$\n\n带入上面所提到的$\\sum_{T\\sube S}(-1)^{|T|}=[S=\\empty]$，成立\n\n```cpp\nvoid FWT(int n,ll *a,int f){\n    for(int i=1;i<n;i<<=1) \n        rep(j,i,n-1) if(j&i) s[j]+=f*s[j^i];\n}\nvoid FWT(int n,ll *a,int f){\n    for(int i=1;i<n;i<<1)\n        for(int l=0;l<n;l+=i*2)\n            for(int j=0;j<l+i;++j) \n                s[j+i]+=f*s[j];\n}\n```\n\n\n$$ \\ $$\n\n$$ \\ $$\n\n### 应用 : 子集卷积(可以看luogu)\n\n问题描述： 给定$F_S,G_T$，求出$H_{R}=\\sum_{S\\cup T=R,S\\cap T=\\empty}F_S\\cdot G_T$，设有$2^n$个元素\n\n我们知道直接枚举的复杂度为$O(3^n)$\n\n直接应用or卷积无法保证$S\\cap T=\\empty$，但是可以再记录一个占位数量，即把$F,G$按照每一位包含1的数量分开成$n+1$部分，卷积完成之后\n\n应该满足1的个数恰好为两者之和，否则清空\n\n需要$n$次卷积，$n^2$次转移，因此复杂度为$O(n^22^n)$，在渐进意义上更优于$O(3^n)$\n\n\n\n-------\n\n## Xor 卷积\n\n\n这里要用到一个小性质\n\n$|A\\cap B|+|A\\cap C|\\equiv |A\\cap (B\\bigoplus C)| \\pmod 2$\n\n思路介绍： \n\n我们是要构造一个$F_S\\rightarrow G_T$的变换，使得该变换满足Xor的性质，且能在较优的时间复杂度内完成，并且能够在较优的时间内**完成反演**\n\n由于上面的这条式子，考虑可以构造$F'_S=\\sum_{T}(-1)^{|S\\cap T|}F_T$，这样$(-1)^k$的系数在$\\mod 2$意义下可以抵消\n\n#### 正确性\n\n即$\\forall S,F'_S \\cdot G'_S=(F\\bigoplus G)'_S$\n\n$F'_S\\cdot G'_S=\\sum_{T} \\sum_{R}(-1)^{|S\\cap T|+|S\\cap R|}F_T\\cdot G_R$\n\n$=\\sum _T\\sum _R(-1)^{|(T\\bigoplus R)\\cap S|}F_T\\cdot G_R$\n\n显然这个式子与右边相同\n\n$$ \\  $$\n\n### 卷积实现\n\n考虑和前面相同的方法，枚举二进制位上最高的$1$\n\n之前由于转移是单向的，所以只需要一次加法，这里由于有了系数同时还是双向的转移，所以要格外注意\n\n转移系数也是比较明显的\n\n$0\\rightarrow 0 = 1$\n\n$0\\rightarrow 1 = 1$\n\n$1\\rightarrow 0 = 1$\n\n$1\\rightarrow 1 = -1$\n\n```cpp\nvoid FWT(int n,ll *a){\n    for(int i=1;i<n;i<<=1) {\n        rep(j,0,n-1) if(~j&i) {\n            ll t=a[j+i];\n            a[j+i]=a[j]-t;\n            a[j]=a[j]+t;\n        }\n    }   \n}\nvoid FWT(int n,ll *a){\n    for(int i=1;i<n;i<<=1){\n        for(int l=0;l<n;l+=i*2) {\n            for(int j=l;j<l+i;++j){\n                ll t=a[j+i];\n                a[j+i]=a[j]-t;\n                a[j]+=t;\n            }\n        }\n    }\n}\n```\n\n\n\n### 实现逆卷积\n\n考虑再卷一次\n\n$F''_S=\\sum_T\\sum_R(-1)^{|S\\cap R|+|T\\cap R|}F_T$\n\n$=\\sum_T \\sum_R (-1)^{|(S\\bigoplus T)\\cap R|}F_T$\n\n$\\because \\sum_T (-1)^{|S\\cap T|}=\\sum_{T\\sube S}(-1)^{|T|}2^{|U|-|S|}=[S=\\empty]2^{|U|-|S|}$(其中$U$是全集)\n\n$\\therefore F''_S=\\sum_S2^{|U|}F_S$\n\n\n所以逆卷积就是再卷一遍，最后除去$n$即可\n\n```cpp\nvoid FWT(int n,ll *a,int f){\n    for(int i=1;i<n;i<<=1) {\n        rep(j,0,n-1) if(~j&i) {\n            ll t=a[j+i];\n            a[j+i]=a[j]-t;\n            a[j]=a[j]+t;\n        }\n    }   \n    if(f==-1) rep(i,0,n-1) a[i]/=n;\n}\nvoid FWT(int n,ll *a,int f){\n    for(int i=1;i<n;i<<=1){\n        for(int l=0;l<n;l+=i*2) {\n            for(int j=l;j<l+i;++j){\n                ll t=a[j+i];\n                a[j+i]=a[j]-t;\n                a[j]+=t;\n            }\n        }\n    }\n    if(f==-1) for(int i=0;i<n;++i) a[i]/=n;\n}\n```\n\n和上面一样的，可以写成类似$\\text{FFT}$的形式卡常\n\n$$ \\ $$\n\n$$ \\ $$\n\n## 拓展 K - FWT\n\n实际上学习了这个拓展能让你更好地理解$\\text{FWT}$\n\n不妨考虑$n$个维度的情况，每个维度是一个$0,1,\\cdots k-1$中的数\n\n由于$k$进制下不好用集合描述，因此考虑用一个向量$\\vec{V}=\\lbrace V_0,V_1,\\cdots,V_{n-1}\\rbrace,V_i\\in[0,k-1]$表示\n\n一个多项式可以具象地用$0,1,\\cdots,k^n-1$这个$k^n$个位置上的系数表示\n\n$\\text{and,or}$卷积在$k$进制下可以拓展为按位取$\\min,\\max$，这个直接累前缀和就可以了，不作赘述\n\n而$k$进制下的$\\text{xor}$可以扩展为两个向量列的取模加法\n\n$\\vec{A}+\\vec{B}=\\vec{C},C_i=(A_i+B_i)\\bmod k$\n\n也可以描述为**不进位的**$k$进制数加法\n\n其实用$\\text{K-FWT}$称呼这个似乎不是很形象，更好的可以称之为$\\text{n-DFT}$\n\n也就是说$\\text{K-FWT}$实际上就是在$n$个维度上**分别做大小为$k$的循环卷积**，使用一种结合$\\text{FWT-DFT}$的方法(因此需要用到$k$次单位根$\\omega_k$)\n\n### 卷积构造\n\n原多项式$F$向卷积多项式$F'$的转换系数为$[x^A]F\\rightarrow [x^B]F':\\omega_k^{A\\cdot B}$\n\n其中$A\\cdot B$为向量内积，即$\\sum A_i\\cdot B_i$\n\n从中也可以很好地看到$\\text{xor}$卷积的影子\n\n实现方法上，可以依次枚举$0,1,\\cdots,n-1$每一位，将除了这一位上都相同的数取出来\n\n按照这一位上的值做一次$\\text{DFT}$\n\n需要$n$位枚举，每次枚举需要做$k^{n-1}$次$k^2$的$\\text{DFT}$，因而复杂度为$O(nk^{n+1})$\n\n对于$k$比较大的情况，如果$k=2^t$可以直接用$\\text{FFT/NTT}$，否则还可以参考[这个](https://www.cnblogs.com/chasedeath/p/13498798.html)\n\n可以优化到$O(nk^n\\log k)$ \n\n### 逆卷积\n\n当然是换成$\\text{IDFT}$，最后全部除掉$k^n$\n\n正确性上，如果你对于$\\text{IDFT}$的原理(单位根反演) 有所了解，就能发现\n\n只有所有位置上都相同的情况才会转移出$k^n$的系数\n\n$$ \\ $$\n\n```cpp\nint w[20]; // 单位根的幂次\nvoid K_FWT(int *F,int n,int f){ // 这个n实际上是上面叙述中的n^k\n    static int t[20];\n    for(int i=1;i<n;i*=k){\n        for(int l=0;l<n;l+=i*k){\n            for(int j=l;j<l+i;++j){\n                for(int a=0;a<k;++a) \n                    for(int b=t[a]=0;b<k;++b) \n                        t[a]=(t[a]+1ll*F[j+b*i]%P*w[b*(k+f*a)%k])%P;\n                for(reg int a=0;a<k;++a) F[j+a*i]=t[a];\n            }\n        }\n    }\n\tif(f==-1) {\n        ll base=qpow(n);\n        rep(i,0,n-1) F[i]=F[i]*base%P;\n    }\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"CodeChef November Challenge2019  Winning Ways (3-FWT)","url":"/articles/2020/11/15/669720f5.html","content":"# CodeChef November Challenge2019  Winning Ways (3-FWT)\n\n显然每个把每个数换成其因子个数-1，就能转为一个扩展的$\\text{Nim}$游戏\n\n每次操作$1,2,\\cdots,k$堆的$\\text{Nim}$游戏，其判定方法是：\n\n将每个数二进制分解，对于每个二进制位上分别计算1的个数$\\mod (k+1)$，如果均为0则先手必败\n\n对于这道题$k=3$，我们考虑将其转为二进制之后的形式累成3进制，然后就能进行3进制按位不进位加法，即类异或\n\n然后问题实际上有非常多的部分需要考虑\n\n## Part1 如何求因子个数\n\n一个简单的方法是枚举$[1,\\sqrt n]$判断是否整除，复杂度过高\n\n对于$n=\\prod p_i^{c_i}$($p_i$为质数)，其因子个数为$\\prod (c_i+1)$\n\n由这个式子对于$n$进行质因数分解，枚举$[1,\\sqrt n]$中的质数，复杂度为$O(\\pi(\\sqrt n))=O(\\frac{\\sqrt n} {\\log n})$，这个应该够了？\n\n然后是一个常规套路型的分解方法：\n\n先对于$[1,n^{\\frac{1} {3} }]$的质数筛$n$，剩余的部分只有3种情况\n\n1.$n$被筛成1了\n\n2.$n$被筛到只剩一个质数，可以用$\\text{Miller_Rabin}$算法快速判断，[**可以参考**](https://www.cnblogs.com/chasedeath/p/13492548.html)\n\n3.$n$仍然是若干质数的乘积，此时质因子必然$>n^{\\frac{1} {3} }$，因此最多只有两个\n\n那么只需要判断$n$是否是完全平方数即可\n\n总复杂度为$O(w\\cdot \\log n+\\frac{n^{\\frac{1} {3} }} {\\log n})$，其中$w$为$\\text{Miller_Rabin}$筛选次数\n\n```cpp\nconst int N=2e5+10;\nint notpri[N],pri[N],pc;\n\nll qpow(ll x,ll k=P-2,int P=::P) {\n    ll res=1;\n    for(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n    return res;\n}\nint Trans(int x){ \n    static int buf[20],l=0;\n    l=0;\n    while(x) buf[++l]=x%2,x/=2;\n    int s=0;\n    drep(i,l,1) s=s*3+buf[i];\n    cmax(ma,s);\n    return s;\n}\n\nint Miller_Rabin(int x) {\n    if(x<N) return !notpri[x];\n    if(x==2) return 1;\n    if(x<=1 || ~x&1) return 0;\n    ll s=0,t=x-1;\n    while(~t&1) s++,t>>=1;\n    rep(i,1,4) {\n        ll a=pri[rand()%pc+1],b=qpow(a,t,x),c;\n        rep(j,1,s) {\n            c=1ll*b*b%x;\n            if(c==1 && b!=1 && b!=x-1) return 0;\n            b=c;\n        }\n        if(b!=1) return 0;\n    }\n    return 1;\n}\nint CheckSqr(int n){\n    int y=round(sqrt(n));\n    return y*y==n;\n}\n\nint Count(int n){\n    int res=1;\n    for(int i=1;i<=pc && pri[i]*pri[i]*pri[i]<=n;++i) if(n%pri[i]==0) {\n        int c=0;\n        while(n%pri[i]==0) n/=pri[i],c++;\n        res*=c+1;\n    }\n    if(n==1) return res;\n    if(CheckSqr(n)) return res*3;\n    if(Miller_Rabin(n)) return res*2;\n    return res*4;\n}\n\nvoid Init(){\n    rep(i,2,N-1) if(!notpri[i]) {\n        pri[++pc]=i;\n        for(int j=i+i;j<N;j+=i) notpri[j]=1;\n    }\n}\n```\n\n\n\n## Part2 快速计算答案\n\n$10^9$以内的数，最大因子个数为$1334$，这个数为$931170240$\n\n转成二进制之后最多包含$11$位，三进制下最大为$3^{11}-1=177146$，令这个上界为$M$\n\n一种非常暴力的方法就是直接枚举，$NM$计算每次选择一个数，复杂度为$O(NMK)$，应该可以通过$N\\leq 12$的数据\n\n一个比较浅显的优化可以用快速幂维护乘法，复杂度为$O(M^2\\log K)$\n\n由于是3进制类异或，接下来考虑用$\\text{3-FWT}$优化乘法，[**可以参考**](https://www.cnblogs.com/chasedeath/p/12785842.html)\n\n模数为$P=10^9+7$，不存在整数$3$阶单位根，因此要用类似拆系数$\\text{FFT}$方法做\n\n复杂度为$O(M\\log M\\log K)$，似乎已经比较小了，但是常数非常大，应该难以通过\n\n```cpp\nint R;// R为上界\nstruct Cp{\n    db x,y;\n    Cp(){ }\n    Cp(db x,db y):x(x),y(y) { }\n    Cp operator + (const Cp t){ return Cp(x+t.x,y+t.y); }\n    Cp operator - (const Cp t){ return Cp(x-t.x,y-t.y); }\n    Cp operator * (const Cp t){ return Cp(x*t.x-y*t.y,x*t.y+y*t.x); }\n} A[N],B[N],C[N],D[N];\nCp w[30];\n\nint Add(int x,int y) {\n    static int A[20],B[20];\n    rep(i,0,19) A[i]=x%3,x/=3;\n    rep(i,0,19) B[i]=y%3,y/=3;\n    int ans=0;\n    drep(i,19,0) ans=ans*3+((A[i]+B[i])%3);\n    return ans;\n}\n\nvoid FWT(Cp *a,int f) {\n    for(int i=1;i<R;i*=3) {\n        for(int l=0;l<R;l+=i*3) {\n            for(int j=l;j<l+i;++j) {\n                static Cp t[3];\n                if(f==1) {\n                    t[0]=a[j]+a[j+i]+a[j+i*2];\n                    t[1]=a[j]+w[1]*a[j+i]+w[2]*a[j+i*2];\n                    t[2]=a[j]+w[2]*a[j+i]+w[1]*a[j+i*2];\n                } else {\n                    t[0]=a[j]+a[j+i]+a[j+i*2];\n                    t[1]=a[j]+w[2]*a[j+i]+w[1]*a[j+i*2];\n                    t[2]=a[j]+w[1]*a[j+i]+w[2]*a[j+i*2];\n                }\n                a[j]=t[0],a[j+i]=t[1],a[j+i*2]=t[2];\n                if(f==-1) {\n                    rep(d,0,2) {\n                        a[j+i*d].x/=3,a[j+i*d].y/=3;\n                    }\n                }\n            }\n        }\n    }\n}\n\nconst int S=(1<<15)-1;\n\n#define FWTs\n\nstruct Poly{ \n    int a[N];\n    Poly operator * (const Poly __) const {\n        Poly res;\n        // 拆系数，任意模数3-FWT\n#ifdef FWTs\n        rep(i,0,R-1) A[i]=Cp((a[i]&S),(a[i]>>15)),B[i]=Cp((a[i]&S),0);\n        rep(i,0,R-1) C[i]=Cp((__.a[i]&S),(__.a[i]>>15));\n        FWT(A,1),FWT(B,1),FWT(C,1);\n#define E(x) ((ll)(x+0.5))%P\n        rep(i,0,R-1) A[i]=A[i]*C[i];\n        rep(i,0,R-1) B[i]=B[i]*C[i];\n        FWT(A,-1),FWT(B,-1);\n        rep(i,0,R-1) {\n            ll a=E(B[i].x),b=E(A[i].y),c=E(B[i].x-A[i].x);\n            res.a[i]=(a+1ll*b*(S+1)+1ll*c*(S+1)*(S+1))%P;\n        }\n#else\n        rep(i,0,R-1) res.a[i]=0;\n        rep(i,0,R-1) if(a[i]) rep(j,0,R-1) if(__.a[j]) {\n            int k=Add(i,j);\n            res.a[k]=(res.a[k]+1ll*a[i]*__.a[j])%P;\n        }\n#endif\n        return res;\n    }\n} x,res;\n\n\n\nll qpow(ll x,ll k=P-2) {\n    ll res=1;\n    for(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n    return res;\n}\n\nint main(){\n    rep(i,2,N-1) if(!notpri[i]) {\n        pri[++pc]=i;\n        for(int j=i+i;j<N;j+=i) notpri[j]=1;\n    }\n    w[0]=Cp(1,0);\n    rep(i,1,29) w[i]=w[i-1]*Cp(cos(2*Pi/3),sin(2*Pi/3));\n    // 复平面3阶单位根\n\n    n=rd(),m=rd();\n    rep(i,1,n) x.a[Count(rd())]++;\n    for(R=1;R<=ma;R*=3);\n\n    res.a[0]++;\n    for(;m;m>>=1) {\n        if(m&1) res=res*x;\n        x=x*x;\n    }\n    int ans=0;\n    rep(i,1,R-1) ans+=res.a[i],Mod1(ans);\n    printf(\"%d\\n\",ans);\n}\n\n```\n\n### Further\n\n对于形式幂级数多项式，我们知道$K$次幂的循环卷积可以直接 $\\text{DFT}$一次，每一位快速幂，然后$\\text{IDFT}$\n\n同理的，如果你学习了$\\text{K-FWT}$就知道这就是一个按$K$进制位，每一位分别进行循环卷积，因此也可以用类似的方法做\n\n但是遇到一个非常大的问题就是无法找到模意义下的$3$阶单位根(指$3\\not |(P-1)$)\n\n如果用复平面单位根$\\omega_n=cos(\\frac{2\\pi} {n})+sin(\\frac{2\\pi} {n})\\cdot i$($i=\\sqrt {-1})$，无法在计算时保证值域精度\n\n这里由于$n=3$比较特殊，发现$\\omega_3=cos(\\frac{2\\pi} {3})+sin(\\frac{2\\pi} {3})\\cdot i=-\\frac{1} {2}+\\frac{\\sqrt 3} {2}\\cdot i$\n\n而$3$在$\\mod 10^9+7$下存在二次剩余，因此可以用一个模意义下的复数描述复平面单位根\n\n应该是有通行的单位根求法，会根据$n$不同要用更复杂的高维复数描述，但是我并不会.jpg\n\n总复杂度为$O(M(\\log M+\\log K))$，分别为进行$\\text{3-FWT}$以及快速幂的复杂度\n\nCode总览:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\nint rd(){\n    int s=0,f=0;\n    while(!isdigit(IO=getchar())) if(IO=='-') f=1;\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return f?-s:s;\n}\nbool Mbe;\nconst int N=2e5,P=1e9+7;\nconst int Quad3=82062379; // 3在Mod P意义下的二次剩余\nconst db Pi=acos((db)-1);\n\nconst int MaxX=931170240;\n\n\nint n,m,ma,R;\nint notpri[N],pri[N],pc;\n\nll qpow(ll x,ll k=P-2,int P=::P) {\n    ll res=1;\n    for(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n    return res;\n}\nint Trans(int x){ \n    static int buf[20],l=0;\n    l=0;\n    while(x) buf[++l]=x%2,x/=2;\n    int s=0;\n    drep(i,l,1) s=s*3+buf[i];\n    cmax(ma,s);\n    return s;\n}\n\nint Miller_Rabin(int x) {\n    if(x<N) return !notpri[x];\n    if(x==2) return 1;\n    if(x<=1 || ~x&1) return 0;\n    ll s=0,t=x-1;\n    while(~t&1) s++,t>>=1;\n    rep(i,1,4) {\n        ll a=pri[rand()%pc+1],b=qpow(a,t,x),c;\n        rep(j,1,s) {\n            c=1ll*b*b%x;\n            if(c==1 && b!=1 && b!=x-1) return 0;\n            b=c;\n        }\n        if(b!=1) return 0;\n    }\n    return 1;\n}\nint CheckSqr(int n){\n    int y=round(sqrt(n));\n    return y*y==n;\n}\n\nint Count(int n){\n    int res=1;\n    for(int i=1;i<=pc && pri[i]*pri[i]*pri[i]<=n;++i) if(n%pri[i]==0) {\n        int c=0;\n        while(n%pri[i]==0) n/=pri[i],c++;\n        res*=c+1;\n    }\n    if(n==1) return res;\n    if(CheckSqr(n)) return res*3;\n    if(Miller_Rabin(n)) return res*2;\n    return res*4;\n}\n\nstruct Cp{\n    int x,y;\n    Cp(){ }\n    Cp(int x,int y):x(x),y(y) { }\n    Cp operator + (const Cp t){ \n        Cp res(x+t.x,y+t.y);\n        Mod1(res.x),Mod1(res.y);\n        return res;\n    }\n    Cp operator * (const Cp t){ return Cp((1ll*x*t.x+1ll*(P-y)*t.y)%P,(1ll*x*t.y+1ll*y*t.x)%P); }\n} A[N]; // 模意义下 模拟复平面单位根\nCp w1,w2; // 3阶单位根及其平方\n\nCp qpow(Cp x,ll k=P-2) {\n    Cp res(1,0);\n    for(;k;k>>=1,x=x*x) if(k&1) res=res*x;\n    return res;\n}\n\n// 下面是展开的FWT式子\nvoid FWT() {\n    for(int i=1;i<R;i*=3) {\n        for(int l=0;l<R;l+=i*3) {\n            for(int j=l;j<l+i;++j) {\n                Cp a=A[j]+A[j+i]+A[j+i*2];\n                Cp b=A[j]+w1*A[j+i]+w2*A[j+i*2];\n                Cp c=A[j]+w2*A[j+i]+w1*A[j+i*2];\n                A[j]=a,A[j+i]=b,A[j+i*2]=c;\n            }\n        }\n    }\n}\n\nvoid IFWT() {\n    for(int i=1;i<R;i*=3) {\n        for(int l=0;l<R;l+=i*3) {\n            for(int j=l;j<l+i;++j) {\n                Cp a=A[j]+A[j+i]+A[j+i*2];\n                Cp b=A[j]+w2*A[j+i]+w1*A[j+i*2];\n                Cp c=A[j]+w1*A[j+i]+w2*A[j+i*2];\n                A[j]=a,A[j+i]=b,A[j+i*2]=c;\n            }\n        }\n    }\n    ll base=qpow(R);\n    rep(i,0,R-1) A[i].x=A[i].x*base%P;\n}\n\nint main(){\n    rep(i,2,N-1) if(!notpri[i]) {\n        pri[++pc]=i;\n        for(int j=i+i;j<N;j+=i) notpri[j]=1;\n    }\n    w1=Cp(P-(P+1)/2,1ll*Quad3*(P+1)/2%P);\n    w2=w1*w1;\n\n    rep(kase,1,rd()) {\n        n=rd(),m=rd();\n        rep(i,1,n) A[Trans(Count(rd())-1)].x++;\n        for(R=1;R<=ma;R*=3);\n        FWT();\n        rep(i,0,R-1) A[i]=qpow(A[i],m);\n        IFWT();\n        int ans=0;\n        rep(i,1,R-1) ans+=A[i].x,Mod1(ans);\n        rep(i,0,R-1) A[i].x=A[i].y=0;\n        printf(\"%d\\n\",ans);\n    }\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codechef"],"categories":["题解"]},{"title":"「2019五校联考-雅礼」大凯的疑惑              ","url":"/articles/2020/11/14/b2bb6508.html","content":"# 「2019五校联考-雅礼」大凯的疑惑              \n\n首先判断是否有无穷解，即判断$\\gcd(a,b)>1$时有无穷解\n\n接下来我们由小凯的疑惑知道最大的无法表示的数是$ab-a-b$，这能确定一个上界\n\n考虑计算$[1,R](R<ab)$中能用$a,b$表示出来的数\n\n因为$\\gcd(a,b)=1,R<ab$，所以每个数最多只有一种构成法，可以枚举其包含了几个$b$，剩下的部分直接任意放$a$\n\n即得到计算能够被构成的个数的方法为{%raw%}$\\begin{aligned}\\sum_{i=0}^{\\lfloor \\frac{R} {a}\\rfloor} \\lfloor \\frac{R-ib} {a}\\rfloor+1 \\end{aligned}${%endraw%}\n\n其中+1是计算了包含0个$a$的情况\n\n如果二分答案，复杂度为$O(a\\log (ab))$，恐怕难以通过\n\n优化：\n\n我的思路是是先确定了$\\lfloor \\frac{R} {a}\\rfloor$，那么此时确定了所有$b$的个数的贡献\n\n那么考虑枚举，找到答案所属的$\\lfloor \\frac{R} {a}\\rfloor$的区间，在这段区间里，判断一个数$x$是否可以被构成即:\n\n$x\\equiv ib\\pmod a(i\\leq \\lfloor \\frac{R} {a}\\rfloor)$，即考虑了不同$b$的个数的贡献\n\n用一个数组存下$ib\\bmod a$，那么可以$O(1)$判断一个数是否合法，如果直接for过去是$O(b)$的\n\n显然这在一段中，构成情况每$a$个一循环，那么先快速跳循环即可\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nconst int N=2e7+10;\n\nll a,b,k;\nll gcd(ll a,ll b){ return b==0?a:gcd(b,a%b); }\nbool mk[N];\nint main() {\n\tfreopen(\"math.in\",\"r\",stdin),freopen(\"math.out\",\"w\",stdout);\n\tscanf(\"%lld%lld%lld\",&a,&b,&k);\n\tif(gcd(a,b)!=1 || a==1) return puts(\"-1\"),0;\n\tif(a>b) swap(a,b);\n\tif(k==1) return printf(\"%lld\\n\",a*b-a-b),0;\n\tll s=(a-1)*(b-1)/2,c=0; // s为总的个数\n\tif(s<k) return puts(\"-1\"),0;\n\tk=s-k+1; // 改为求第k小\n\tint p=mk[0]=1;  // p为所属区间\n\trep(i,1,a-1) {\n\t\tc+=i*b/a;\n\t\tll t=i*(b-1)-c; // t为这段区间内无法被表示的个数\n\t\tif(t>=k){ p=i; break; }\n\t\tmk[i*b%a]=1;  // 把区间内的ib mod a 放进去\n\t}\n\tk-=(p-1)*(b-1)-(c-p*b/a); //还需要做的个数\n\tll l=(p-1)*b+1,d=l%a; //l为区间开始位置\n\tll i=l+(k-1)/(a-p)*a; // 每个长度为a的循环中已经有p个位置被标记，可以被表示，因此还有a-p个位置无法表示\n\tk-=(k-1)/(a-p)*(a-p); // 跳过循环\n\tfor(;;++i,d++,d==a&&(d=0)) if(!mk[d] && --k==0) return printf(\"%lld\\n\",i),0; // 暴力for最后a个\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"CodeChef 2020 November Challenge - Scalar Product Tree (莫队)","url":"/articles/2020/11/13/4e259898.html","content":"# CodeChef 2020 November Challenge - Scalar Product Tree (莫队)\n\n题目大意：给定一棵根为1的树，每个点有权值$A_i$，每个点按照其从根开始的路径记录下来一串数$(A_1,\\cdots,A_u)$构成一个向量$v_u$\n\n每次查询两个点$(x,y)$，查询$v_x\\cdot v_y$\n\n$$ \\ $$\n\n由于向量点积是对位相乘的，不好用数据结构维护\n\n考虑用一个序列描述$\\text{dfs}$遍历树时每个点入栈出栈的过程，扫描一段前缀即可得到遍历到每个点时$\\text{dfs}$栈的情况，也就得到了题目指定的向量\n\n每次查询两个点$x,y$，那么就是查询了两段前缀，用莫队维护两个前缀指针的移动，同时维护每个深度上两个前缀对应的值以及这些值的乘积即可\n\n复杂度为$O(n\\sqrt n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef pair <int,int> Pii;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=6e5+10,P=1e9+7;\n\nint n,m;\nstruct Edge{\n\tint to,nxt;\n}e[N];\nint head[N],ecnt;\nvoid AddEdge(int u,int v) {\n\te[++ecnt]=(Edge){v,head[u]};\n\thead[u]=ecnt;\n}\nint id[N],dfn;\n\ntypedef unsigned U;\nU A[N];\nint L[N],K[N]; // L,K维护括号序列，L为编号,K为左括号还是右括号\nU Sum,Ans[N];\nint dep[N];\n\nvoid dfs(int u,int f) {\n\tL[id[u]=++dfn]=u,K[dfn]=1;\n\tdep[u]=dep[f]+1;\n\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif(v==f) continue;\n\t\tdfs(v,u);\n\t}\n\tL[++dfn]=u,K[dfn]=-1;\n}\n\nint len;\nstruct Que{\n\tint l,r,id;\n\tbool operator < (const Que __) const {\n\t\tif(l/len!=__.l/len) return l/len<__.l/len;\n\t\treturn ((l/len)&1)?r<__.r:r>__.r;\n\t}\n} Q[N];\n\nU S[2][N];\nvoid Add(int d,int x,int k) {\n\tint p=dep[x];\n\tSum-=S[d][p]*S[!d][p];\n\tS[d][p]=k==1?A[x]:0;\n\tSum+=S[d][p]*S[!d][p];\n}\n\nint main() {\n\tn=rd(),m=rd();\n\trep(i,1,n) A[i]=rd();\n\trep(i,2,n) {\n\t\tint u=rd(),v=rd();\n\t\tAddEdge(u,v),AddEdge(v,u);\n\t}\n\tdfs(1,0),len=sqrt(dfn);\n\trep(i,1,m) {\n\t\tint l=rd(),r=rd();\n\t\tl=id[l],r=id[r];\n\t\tif(l>r) swap(l,r);\n\t\tQ[i]=(Que){l,r,i};\n\t}\n\tsort(Q+1,Q+m+1);\n\tint l=1,r=1;\n\tAdd(0,1,1),Add(1,1,1);\n\trep(i,1,m) {\n\t\twhile(l<Q[i].l) ++l,Add(0,L[l],K[l]);\n\t\twhile(l>Q[i].l) Add(0,L[l],-K[l]),l--;\n\t\t\n\t\twhile(r<Q[i].r) ++r,Add(1,L[r],K[r]);\n\t\twhile(r>Q[i].r) Add(1,L[r],-K[r]),r--;\n\t\tAns[Q[i].id]=Sum;\n\t}\n\trep(i,1,m) printf(\"%u\\n\",Ans[i]);\n}\n```\n\n\n\n\n\n\n\n","tags":["Codechef"],"categories":["题解"]},{"title":"CodeChef 2020 November Challenge - Red-Black Boolean Expression","url":"/articles/2020/11/13/390cee77.html","content":"# CodeChef 2020 November Challenge - Red-Black Boolean Expression\n\n吐槽：这题很蠢，很套路\n\n题目大意：\n\n给定$n$个布尔变量$x_i$，每个变量有其反变量$ \\overline {x_i}$\n\n有$n$组关系$a_i,b_i$，要求$a_i\\lor b_i$为真\n\n并且保证所有$a_i,b_i$关系构成一张二分图，其中$x_i$与$\\overline{x_i}$有一条边相连\n\n给定每个变量的初始值$s_i$，以及翻转其所需的代价$C_i$，求最小满足条件的代价\n\n$$  \\ $$\n\n$a_i\\lor b_i$为真即不存在$a_i,b_i$均为假的情况\n\n如果是2-sat上的理解，即可以由$a_i$假推$b_i$真，$b_i$假推$a_i$真，但是$2-sat$没法带权\n\n由于题目保证了关系的二分图性质，不妨把所有变量分成两个集合$A,B$\n\n这个问题令人联想到网络流最小割模型，我们用一条边$(u,v)$限制$(u,v)$不同时为假的情况\n\n对于$A$中的点，我们令源点$S$向$u$连的边$(S,u,w)$表示$u$变成$0$所需代价，令$(u,T,w)$表示$u$变成1的代价\n\n对于$B$中的点，采取相反的连接方式\n\n任意一个关系的两点不在同一集合，不妨对于$u\\in A$的情况考虑，实际上可以分为两类考虑\n\n1.$(u,v)$不同时为0，那么连接一条边$(v,u,\\infty)$，表示如果合法必然有一条让$u$或$v$变成1的边被割掉\n\n2.$(u,v)$不同时为1，连接一条边$(v,u,\\infty)$，原理类似\n\n然后就可以跑网络流最小割了\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef double db;\ntypedef unsigned long long ull;\ntypedef pair <int,int> Pii;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=1e5+10,INF=1e9+10;\n\nint n,m,S,T;\nchar s[N];\nstruct Edge{\n\tint to,nxt,w;\n}e[N<<1];\nint head[N],ecnt=1;\nvoid AddEdge(int u,int v,int w) {\n\te[++ecnt]=(Edge){v,head[u],w};\n\thead[u]=ecnt;\n}\nvoid Link(int u,int v,int w){ \n\tAddEdge(u,v,w),AddEdge(v,u,0);\n}\n\nint F[N],X[N],Y[N],col[N],A[N];\n// 这里我用带权并查集实现了二分图\nint Find(int x){ \n\tif(F[x]==x) return x;\n\tint f=F[x]; F[x]=Find(F[x]);\n\tcol[x]^=col[f];\n\treturn F[x];\n}\n\nint dis[N];\nint Bfs() {\n\trep(i,1,T) dis[i]=INF;\n\tstatic queue <int> que;\n\tdis[S]=0; que.push(S);\n\twhile(!que.empty()) {\n\t\tint u=que.front(); que.pop();\n\t\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\t\tint v=e[i].to,w=e[i].w;\n\t\t\tif(!w || dis[v]<=dis[u]+1) continue;\n\t\t\tdis[v]=dis[u]+1,que.push(v);\n\t\t}\n\t}\n\treturn dis[T]<INF;\n}\n\nint Dfs(int u,int in) {\n\tif(u==T) return in;\n\tint out=0;\n\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to,w=e[i].w;\n\t\tif(!w || dis[v]!=dis[u]+1) continue;\n\t\tint t=Dfs(v,min(in-out,w));\n\t\te[i].w-=t,e[i^1].w+=t,out+=t;\n\t\tif(in==out) break;\n\t}\n\tif(!out) dis[u]=0;\n\treturn out;\n}\n\nint Dinic() {\n\tint ans=0; \n\twhile(Bfs()) ans+=Dfs(S,INF);\n\treturn ans;\n}\n\n\nint main() {\n\trep(kase,1,rd()) {\n\t\tn=rd(),m=rd();\n\t\trep(i,1,n) F[i]=i,col[i]=0;\n\t\tscanf(\"%s\",s+1);\n\t\tS=n+1,T=n+2;\n\t\trep(i,1,n) A[i]=rd();\n\t\trep(i,1,m) {\n\t\t\tX[i]=rd(),Y[i]=rd();\n\t\t\tint x=abs(X[i]),y=abs(Y[i]);\n\t\t\tint u=Find(x),v=Find(y);\n\t\t\tif(u==v) continue;\n\t\t\tF[u]=v,col[u]=col[x]^col[y]^(X[i]<0)^(Y[i]<0)^1;\n\t\t}\n\t\trep(i,1,n) Find(i);\n\t\trep(i,1,n) {\n\t\t\tif(col[i]^s[i]^'0') Link(S,i,A[i]);\n\t\t\telse Link(i,T,A[i]);\n\t\t}\n\t\trep(i,1,m) {\n\t\t\tint t=col[abs(X[i])]^(X[i]<0);\n\t\t\tassert(col[abs(X[i])]^col[abs(Y[i])]^(X[i]<0)^(Y[i]<0));\n\t\t\tif(t) Link(abs(X[i]),abs(Y[i]),INF);\n\t\t\telse Link(abs(Y[i]),abs(X[i]),INF);\n\t\t}\n\t\tprintf(\"%d\\n\",Dinic());\n\t\trep(i,1,T) head[i]=0; ecnt=1;\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codechef"],"categories":["题解"]},{"title":"Codechef November Chanllenge 2019 Div1 PrettyBox (贪心，线段树)","url":"/articles/2020/11/11/c756e26.html","content":"# Codechef November Chanllenge 2019 Div1 PrettyBox (贪心，线段树)\n\n[原题链接](https://www.codechef.com/NOV19A/problems/PBOXES)\n\n前言：这篇文章主要讲如何用线段树优化贪心，关于贪心的证明建议看[官方题解](https://discuss.codechef.com/t/pboxes-editorial/44102)\n\n贪心思路：\n\n首先肯定要按照$(S_i,P_i)$递增的顺序排序\n\n每次选取两个点，一个标记为左括号，权值为$-P_i$，一个标记为右括号，权值为$P_i$，显然只要是一个合法的括号序列即可\n\n题解证明了在不断增加括号时，不会出现一个位置的括号情况改变\n\n现在我们的贪心问题就在于怎样找到一对最优的括号，注意每次选出的 **两个括号之间并不一定匹配**\n\n为了便于描述，把左括号看做1，右括号看做-1，一个合法括号序列满足任何一个前缀和$\\ge 0$\n\n考虑什么样的情况可以放置左右括号，设分别放在$x,y$\n\n1.$x<y$显然合法\n\n2.$x>y$时，如果存在一个括号对，将$(x,y)$包含在一起，即$(y,x)$这一段区间不跨过一个前缀和为$0$的位置\n\n如果把序列 看做 由一段段 **前缀和为0的位置**   分割开来的  一个个**联通块**，似乎比较好理解\n\n也就是块内随意选，之间只能由小到大匹配\n\n接下来考虑用线段树维护这样的块的信息，下面只讨论$x>y$的情况\n\n由于线段树每个结点统计区间$[l,r]$的信息，所以实际上块之间的间隔并不为0\n\n设$[l,r]$中最小的前缀和为$Min$(是指从$l$开始的前缀和)\n\n不妨统计$[l,r]$中不跨过一个前缀和为$Min$的位置的答案$Ans$，以及跨过的答案$Ans2$\n\n合并两个区间时，需要找到\n\n左区间中  右边连续的一段不跨过最小值 的最大权值 $R$\n\n右区间中  左边连续的一段不跨过最小值 的最小权值 $L$\n\n以及任意的最小值最大值$mi,ma$\n\n然后按照$Min$的权值大小关系 ，判断这4种权值的合并应该被分配到$Ans$还是$Ans2$\n\n合并$L,R$时注意$L$优先看左儿子，$R$优先看右儿子，具体实现看代码中的$Up$函数\n\n每次存下答案找到最优配对后，在序列上对应放置-1,1单点修改即可，复杂度为$O(n\\log n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef pair <int,int> Pii;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ a=min(a,b); }\ntemplate <class T> inline void cmax(T &a,T b){ a=max(a,b); }\n\nchar IO;\nint rd(){\n\tint s=0,f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=2e5+10,M=N<<2;\n\nint n;\nPii T[N];\nint A[N];\n\nint S[M]; // 区间和\nint Min[M]; // 前缀最小值\nstruct Node{\n\tint x;\n\tNode(){ }\n\tNode(int x):x(x){ }\n\tint operator < (const Node __) const { return A[x]<A[__.x]; }\n} L[M],R[M]; // 左最小，右最大  , 记录的是不跨过最小值的权值\nNode mi[M],ma[M]; // 区间最大最小，没有限制\n\nstruct Pair{\n\tint x,y;\n\tPair(){ }\n\tPair(int x,int y):x(x),y(y){ }\n\tPair(Node x,Node y):x(x.x),y(y.x){ }\n\tint Val() const { return A[y]-A[x]; }\n\tint operator < (const Pair __) const { return Val()<__.Val(); }\n} Ans[M],Ans2[M]; // 不跨过最小值的答案以及x<y的答案，包含最小值的答案\n// 区间答案\n\nvoid Up(int p){\n\tS[p]=S[p<<1]+S[p<<1|1];\n\tMin[p]=min(Min[p<<1],S[p<<1]+Min[p<<1|1]);\n\tmi[p]=min(mi[p<<1],mi[p<<1|1]),ma[p]=max(ma[p<<1],ma[p<<1|1]);\n\n\tAns[p]=max(Ans[p<<1],Ans[p<<1|1]);\n\tAns2[p]=Pair(mi[p<<1|1],ma[p<<1]);\n\tcmax(Ans2[p],Ans2[p<<1]);\n\tcmax(Ans2[p],Ans2[p<<1|1]);\n\n\tcmax(Ans[p],Pair(mi[p<<1],ma[p<<1|1]));\n\tAns[p]=max(Ans[p],Pair(L[p<<1|1],R[p<<1]));\n\n\tif(Min[p<<1]!=Min[p]) {\n\t\tcmax(Ans[p],Ans2[p<<1]);\n\t\tcmax(Ans[p],Pair(L[p<<1|1],ma[p<<1]));\n\t\tL[p]=min(mi[p<<1],L[p<<1|1]);\n\t} else {\n\t\tL[p]=L[p<<1];\n\t}\n\n\tif(S[p<<1]+Min[p<<1|1]!=Min[p]) {\n\t\tcmax(Ans[p],Ans2[p<<1|1]);\n\t\tcmax(Ans[p],Pair(mi[p<<1|1],R[p<<1]));\n\t\tR[p]=max(R[p<<1],ma[p<<1|1]);\n\t} else {\n\t\tR[p]=R[p<<1|1];\n\t}\n\n}\n\nvoid Build(int p,int l,int r){\n\tif(l==r) {\n\t\tS[p]=Min[p]=0;\n\t\tL[p]=n+1,R[p]=n+2;\n\t\tmi[p]=ma[p]=l;\n\t\tAns[p]=Ans2[p]=Pair(n+1,n+2);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tBuild(p<<1,l,mid),Build(p<<1|1,mid+1,r);\n\tUp(p);\n}\nvoid Upd(int p,int l,int r,int x,int k) {\n\tif(l==r) {\n\t\tS[p]=Min[p]=k;\n\t\tL[p]=n+1,R[p]=n+2;\n\t\tmi[p]=n+1,ma[p]=n+2;\n\t\tAns[p]=Ans2[p]=Pair(n+1,n+2);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tx<=mid?Upd(p<<1,l,mid,x,k):Upd(p<<1|1,mid+1,r,x,k);\n\tUp(p);\n}\n\nint main(){\n\trep(i,1,n=rd()) T[i].first=rd(),T[i].second=rd();\n\tsort(T+1,T+n+1);\n\trep(i,1,n) A[i]=T[i].second;\n\tA[n+1]=1e9+10,A[n+2]=-1e9-10;\n\tll ans=0;\n\tint i=1;\n\tBuild(1,1,n);\n\twhile(i<=n/2) {\n\t\tPair res=Ans[1];\n\t\tif(res.Val()<=0) break;\n\t\tprintf(\"%lld\\n\",ans+=res.Val());\n\t\tUpd(1,1,n,res.x,1),Upd(1,1,n,res.y,-1);\n\t\ti++;\n\t}\n\twhile(i<=n/2) printf(\"%lld\\n\",ans),i++;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Codechef"],"categories":["题解"]},{"title":"「2019 集训队互测 Day 1」最短路径  (点分治+NTT/FFT+线段树)","url":"/articles/2020/11/10/ee49be2f.html","content":"# 「2019 集训队互测 Day 1」最短路径  (点分治+NTT/FFT+线段树)\n\n题意：给定了一棵基环树，求所有的$d(u,v)^k$的期望\n\n当$k$较小时，可以想到用斯特林数/二项式定理展开 维护+1操作，对于树的可以从儿子合并上来，对于环上可以枚举每个块求得答案\n\n复杂度为$O(nk)$\n\n当图为一棵树时，由于不好处理$x^k$，考虑直接求出$d(u,v)=i$的数量\n\n比较容易想到用用点分治+$\\text{NTT}$求解，复杂度为$O(n\\log ^2n)$\n\n环上的情况比较麻烦，不妨为每个块标号$1,2,\\cdots m$，每个块包含$sz_i$个结点\n\n显然$(i,j)$的距离为$\\min\\lbrace|i-j|,m-|i-j|\\rbrace$\n\n考虑计算所有块$(i,j)(i<j)$之间的贡献，令$d=\\lfloor \\frac{m} {2}\\rfloor $，则对于$j\\in[i+1,i+d]$在环上的距离为$j-i$，否则距离为$m-(j-i)$\n\n对于两种情况分类讨论，这里以计算$j\\in[i+1,i+d]$为例\n\n因为是一段区间，考虑直接在线段树的$[i+1,i+d]$加入$i$，然后对于线段树上每个结点计算\n\n推论1：能够被添加到线段树结点$[l,r]$上的$i$构成一段连续的区间\n\n推论2：从区间$[l,r]$的一端出发，$\\text{dfs}$区间内的块得到的$\\max dis_u\\leq \\sum_{i=l}^r sz_i$\n\n因此同样考虑用$\\text{NTT}$维护该答案，每次更新答案可以看做是区间$[l1,r1],[l2,r2](r1<l2)$之间的贡献\n\n分别从$r1,l2$开始$\\text{dfs}$得到$dis_u$，然后$\\text{NTT}$合并，不把$[r1+1,l2-1]$这一部分在环上的加入$\\text{NTT}$大小\n\n这样就能保证卷积大小$\\leq \\sum_{i=l1}^{r1} sz_i+\\sum_{i=l2}^{r2} sz_i$\n\n同理可以类似处理$j>i+d$的情况\n\n分析复杂度：每个$i$会出现在线段树上$\\log n$个位置，每个$j$会在线段树上$\\log n$层被计算\n\n因此每个点被加入卷积大小的次数为$O(\\log n)$，复杂度为$O(n\\log ^2 n)$与前面的点分治同阶\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\nint rd(){\n\tint s=0,f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nbool Mbe;\nconst int N=1<<18|10,P=998244353;\n\nint n,m,k;\nint A[N];\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint Pow[N];\nstruct Edge{\n\tint to,nxt;\n}e[N];\nint head[N],ecnt,deg[N];\nvoid AddEdge(int u,int v) {\n\te[++ecnt]=(Edge){v,head[u]};\n\thead[u]=ecnt,deg[v]++;\n}\n#define erep(u,i) for(int i=head[u];i;i=e[i].nxt)\n\nint w[N];\nvoid Init() {\n\tint R=1<<18;\n\tint t=qpow(3,(P-1)/R);\n\tw[R/2]=1;\n\trep(i,R/2+1,R-1) w[i]=1ll*w[i-1]*t%P;\n\tdrep(i,R/2-1,1) w[i]=w[i<<1];\n}\n\nint rev[N];\nvoid NTT(int n,int *a,int f) {\n\tstatic int e[N>>1];\n\trep(i,0,n-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n\tfor(int i=e[0]=1,t;i<n;i<<=1) {\n\t\tint *e=w+i;\n\t\tfor(int l=0;l<n;l+=i*2) {\n\t\t\tfor(int j=l;j<l+i;++j) {\n\t\t\t\tt=1ll*a[j+i]*e[j-l]%P;\n\t\t\t\ta[j+i]=a[j]-t,Mod2(a[j+i]);\n\t\t\t\ta[j]+=t,Mod1(a[j]);\n\t\t\t}\n\t\t}\n\t}\n\tif(f==-1) {\n\t\treverse(a+1,a+n);\n\t\tll base=qpow(n);\n\t\trep(i,0,n-1) a[i]=a[i]*base%P;\n\t}\n}\nint Init(int n) {\n\tint R=1,c=-1;\n\twhile(R<=n) R<<=1,c++;\n\trep(i,0,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<c);\n\treturn R;\n}\n\nint Q[N],L,R,vis[N];\n\nnamespace pt1{ \n\tconst int N=1010;\n\tint dis[N];\n\tvoid Bfs(int u) {\n\t\trep(i,1,n) dis[i]=-1;\n\t\tdis[Q[L=R=1]=u]=0;\n\t\twhile(L<=R) {\n\t\t\tu=Q[L++];\n\t\t\terep(u,i){\n\t\t\t\tint v=e[i].to;\n\t\t\t\tif(~dis[v]) continue;\n\t\t\t\tdis[v]=dis[u]+1,Q[++R]=v;\n\t\t\t}\n\t\t}\n\t}\n\tvoid Solve() {\n\t\tint ans=0;\n\t\trep(i,2,n) {\n\t\t\tBfs(i);\n\t\t\trep(j,1,i-1) ans=(ans+Pow[dis[j]])%P;\n\t\t}\n\t\tans=ans*qpow(n*(n-1)/2)%P;\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n\nint Ans[N],sz[N];\nnamespace pt2{ \n\tint mi=1e9,rt;\n\tvoid FindRt(int n,int u,int f) {\n\t\tint ma=0; sz[u]=1;\n\t\terep(u,i) {\n\t\t\tint v=e[i].to;\n\t\t\tif(v==u || v==f || vis[v]) continue;\n\t\t\tFindRt(n,v,u),sz[u]+=sz[v],cmax(ma,sz[v]);\n\t\t}\n\t\tcmax(ma,n-sz[u]);\n\t\tif(mi>ma) mi=ma,rt=u;\n\t}\n\n\tint F[N],A[N],B[N];\n\tvoid Solve(int n,int k) {\n        // 容斥型 点分治\n\t\tint R=Init(n*2+1);\n\t\trep(i,0,R) F[i]=0;\n\t\trep(i,0,n) F[i]=A[i];\n\t\tNTT(R,F,1);\n\t\trep(i,0,R-1) F[i]=1ll*F[i]*F[i]%P;\n\t\tNTT(R,F,-1);\n\t\tif(k==1) rep(i,0,n*2) Ans[i]+=F[i],Mod1(Ans[i]);\n\t\telse rep(i,0,n*2) Ans[i]-=F[i],Mod2(Ans[i]);\n\t}\n\tint maxd;\n\tvoid dfs(int u,int f,int d=0) {\n\t\tA[d]++,sz[u]=1,cmax(maxd,d);\n\t\terep(u,i) {\n\t\t\tint v=e[i].to;\n\t\t\tif(v==u || v==f || vis[v]) continue;\n\t\t\tdfs(v,u,d+1),sz[u]+=sz[v];\n\t\t}\n\t}\n\tvoid Divide(int n,int u) {\n\t\tmi=1e9,FindRt(n,u,0),u=rt;\n\t\tvis[u]=1;\n\t\tint D=0;B[0]=1;\n\t\terep(u,i) {\n\t\t\tint v=e[i].to;\n\t\t\tif(vis[v]) continue;\n\t\t\tmaxd=0,dfs(v,u,1);\n\t\t\tSolve(maxd,-1);\n\t\t\trep(j,0,maxd) B[j]+=A[j],A[j]=0;\n\t\t\tcmax(D,maxd);\n\t\t}\n\t\trep(i,0,D) A[i]=B[i],B[i]=0;\n\t\tSolve(D,1);\n\t\trep(i,0,D) A[i]=0;\n\t\terep(u,i) {\n\t\t\tint v=e[i].to;\n\t\t\tif(vis[v]) continue;\n\t\t\tDivide(sz[v],v);\n\t\t}\n\t}\n\tvoid Solve() {\n\t\trep(i,1,n) vis[i]=0;\n\t\tDivide(n,1);\n\t\tint ans=0;\n\t\trep(i,1,n) ans=(ans+1ll*Ans[i]*Pow[i])%P;\n\t\tans=ans*qpow(1ll*n*(n-1)%P)%P;\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n\nint QL[N<<2],QR[N<<2];\nvoid Add(int p,int l,int r,int ql,int qr,int x) {\n    // 在线段树上加入结点\n\tif(ql<=l && r<=qr) {\n\t\tif(!QL[p]) QL[p]=x;\n\t\tQR[p]=x;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(ql<=mid) Add(p<<1,l,mid,ql,qr,x);\n\tif(qr>mid) Add(p<<1|1,mid+1,r,ql,qr,x);\n}\n\nint typ;\nint X[N],Y[N],D;\n\nvoid dfs(int *C,int u,int f,int d) {\n\tcmax(D,d),C[d]++;\n\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\tint v=e[i].to;\n\t\tif(v==f || vis[v])  continue;\n\t\tdfs(C,v,u,d+1);\n\t}\n}\n\nvoid Mark(int i,int k) {\n\tint l=A[i==1?m:i-1],r=A[i==m?1:i+1];\n\tvis[l]=vis[r]=k;\n}\n\nvoid Get(int p,int l,int r) { \n\tif(QL[p]) {\n        // 计算区间QL,QR到l,r的贡献\n\t\tif(typ==0) {\n\t\t\tint qr=QR[p];\n\t\t\trep(x,QL[p],QR[p]) Mark(x,1),dfs(X,A[x],0,qr-x),Mark(x,0);\n\t\t\tint T=D; D=0;\n\t\t\trep(x,l,r) Mark(x,1),dfs(Y,A[x],0,x-l),Mark(x,0);\n\t\t\tint R=Init(T+D+1);\n\t\t\tNTT(R,X,1),NTT(R,Y,1);\n\t\t\trep(i,0,R-1) X[i]=1ll*X[i]*Y[i]%P;\n\t\t\tNTT(R,X,-1);\n\t\t\trep(i,0,T+D) Ans[i+l-qr]+=X[i],Mod1(Ans[i+l-qr]);\n\t\t\trep(i,0,R) X[i]=Y[i]=0;\n\t\t} else {\n\t\t\tint ql=QL[p];\n\t\t\trep(x,QL[p],QR[p]) Mark(x,1),dfs(X,A[x],0,x-ql),Mark(x,0); \n\t\t\tint T=D; D=0;\n\t\t\trep(x,l,r) Mark(x,1),dfs(Y,A[x],0,r-x),Mark(x,0);\n\t\t\tint R=Init(T+D+1);\n\t\t\tNTT(R,X,1),NTT(R,Y,1);\n\t\t\trep(i,0,R-1) X[i]=1ll*X[i]*Y[i]%P;\n\t\t\tNTT(R,X,-1);\n\t\t\tint d=ql+m-r;\n\t\t\trep(i,0,T+D) Ans[i+d]+=X[i],Mod1(Ans[i+d]);\n\t\t\trep(i,0,R) X[i]=Y[i]=0;\n\t\t}\n\t\tQL[p]=QR[p]=0;\n\t}\n\tif(l==r) return;\n\tint mid=(l+r)>>1;\n\tGet(p<<1,l,mid),Get(p<<1|1,mid+1,r);\n}\n\nint main() {\n\tfreopen(\"path.in\",\"r\",stdin),freopen(\"path.out\",\"w\",stdout);\n\tn=rd(),k=rd();\n\trep(i,1,n) Pow[i]=qpow(i,k);\n\trep(i,1,n) {\n\t\tint u=rd(),v=rd();\n\t\tAddEdge(u,v),AddEdge(v,u);\n\t}\n\tif(n<=1000) return pt1::Solve(),0;\n\tInit(),L=1;\n    // 拓扑求环\n\trep(i,1,n) if(deg[i]==1) sz[Q[++R]=i]=1;\n\twhile(L<=R) {\n\t\tint u=Q[L++]; vis[u]=1;\n\t\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\t\tint v=e[i].to;\n\t\t\tif(deg[v]<=1) sz[u]+=sz[v];\n\t\t\tif(--deg[v]==1) Q[++R]=v;\n\t\t}\n\t}\n\tfor(int u=1;u<=n;++u) if(!vis[u]) {\n\t\twhile(1) {\n\t\t\tvis[u]=1,A[++m]=u;\n\t\t\tint nxt=-1;\n\t\t\tfor(int i=head[u];i;i=e[i].nxt) {\n\t\t\t\tint v=e[i].to;\n\t\t\t\tif(!vis[v]) nxt=v;\n\t\t\t}\n\t\t\tif(nxt==-1) break;\n\t\t\tu=nxt;\n\t\t}\n\t\tbreak;\n\t}\n\tif(m==1) return pt2::Solve(),0;\n\tfprintf(stderr,\"Circle Length =%d\\n\",m);\n\trep(i,1,n) vis[i]=0;\n\n\tk=m/2;\n\trep(i,1,m) {\n\t\tMark(i,1);\n\t\tpt2::Divide(sz[A[i]],A[i]);\n\t\tMark(i,0);\n\t}\n\trep(i,1,n) Ans[i]=1ll*Ans[i]*(P+1)/2%P;\n\trep(i,1,n) vis[i]=0;\n\trep(i,1,m-1) Add(1,1,m,i+1,min(i+k,m),i);\n\ttyp=0,Get(1,1,m);\n\trep(i,1,m-k-1) Add(1,1,m,i+k+1,m,i);\n\ttyp=1,Get(1,1,m);\n\tint ans=0;\n\trep(i,1,n) ans=(ans+1ll*Ans[i]*Pow[i])%P;\n\tans=ans*qpow(1ll*n*(n-1)/2%P)%P;\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「清华集训 2017」小 Y 和二叉树              ","url":"/articles/2020/11/09/c6a7899.html","content":"# 「清华集训 2017」小 Y 和二叉树              \n\n原题数据好像没有卡这个情况\n\n```plain\n5\n1 2\n2 1 3\n3 2 4 5\n1 3\n1 3\n```\n\n输出是\n\n```plain\n1 2 3 4 5\n```\n\n首先考虑一个$O(n^2)$的暴力：\n\n枚举一个点为根，向下展开树，此时只需要决策左儿子和右儿子的顺序\n\n当两个子树都存在时，由于两个子树包含的元素不同，所以可以直接把 **两个子树序列首较小** (显然不会出现相同的情况) 的一个放在前面即可\n\n实际上我们可以发现，这样得到的序列第一个元素必然是 **编号最小的** 、**不同时包含左右儿子** 的结点\n\n不妨称固定根之后，这样的结点为叶子\n\n$$ \\ $$\n\n显然的性质：任何一个度数$\\leq 2$的点可以作为答案序列的第一个点\n\n设原树上最小的$\\leq 2$的点为$root$，接下来对于$root$的不同情况讨论，要在强制$root$为序列首的情况下，求得最小的序列\n\n不妨先预处理出结点$u$子树里最小的叶子$mi_u$\n\n1.没有相邻结点，结束\n\n2.有两个相邻结点，此时要使自己为序列首，必然有一个结点是自己的父亲，有一个结点是自己的右儿子\n\n右儿子会被先遍历到，所以可以直接考虑比较两个相邻结点 作为 右儿子时谁的序列首  较小\n\n即比较两个子树中最小的叶子即可\n\n3.只有一个相邻结点，设其为$v$\n\n此时要使得自己为序列第一个，只有两种可能，此时同样可以考虑比较序列首元素\n\n3-1.让相邻结点作为自己的父亲，此时下一个元素一定是$v$\n\n3-2.让相邻结点作为自己的右儿子，此时下一个元素一定是$mi_v$\n\n如果$v\\ne mi_v$，显然好决策\n\n当$v=mi_v$时，必然满足$v$是一个叶子，此时如果将$v$放在父亲上，$v$的另一个相邻结点(如果存在)\n\n可以放在$v$的父亲或者是$v$的右子树，如果放在$v$的右子树，那么这种情况与$v$被放在$u$的子树等价\n\n也就是说，把$v$放在父亲可以决策出的序列情况，包含了把$v$放在右儿子的情况\n\n所以这种情况也应当把$v$放在父亲上\n\n\n\n实现上，不妨用两个$dfs$处理最后的决策，一个强制当前结点$u$为序列首，一个求出$u$子树的最优方案\n\n在代码里就是$Solve,dfs\\_get$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\n\nchar IO;\nint rd(){\n\tint s=0,f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=1e6+10;\n\nint n;\nint c[N],s[N][3];\nint mi[N];\n\nint rt=1e9;\nvoid dfs(int u,int f) {\n\tmi[u]=1e9;\n\tint cnt=0;\n\trep(i,0,c[u]-1) if(s[u][i]!=f) {\n\t\tint v=s[u][i]; cnt++;\n\t\tdfs(v,u),cmin(mi[u],mi[v]);\n\t}\n\tif(cnt<=1) cmin(mi[u],u);\n}\n\nint vis[N];\nvoid dfs_get(int u) {\n\tvis[u]=1;\n\tint a=-1,b=-1;\n\trep(i,0,c[u]-1) if(!vis[s[u][i]]) {\n\t\tint v=s[u][i];\n\t\tif(~a) b=v;\n\t\telse a=v;\n\t}\n\tif(a==-1) printf(\"%d \",u);\n\telse if(b==-1) {\n\t\tif(mi[a]<u) dfs_get(a),printf(\"%d \",u);\n\t\telse printf(\"%d \",u),dfs_get(a);\n\t} else {\n\t\tif(mi[a]>mi[b]) swap(a,b);\n\t\tdfs_get(a),printf(\"%d \",u),dfs_get(b);\n\t}\n}\n\nvoid Solve(int u) {\n\tint cnt=0;\n\trep(i,0,c[u]-1) if(!vis[s[u][i]]) cnt++;\n\tvis[u]=1,printf(\"%d \",u);\n\tif(cnt==1) {\n\t\trep(i,0,c[u]-1) if(!vis[s[u][i]]) {\n\t\t\tint v=s[u][i];\n\t\t\tif(v>mi[v]) dfs_get(s[u][i]);\n\t\t\telse Solve(v);\n\t\t}\n\t} else if(cnt==2) {\n\t\tint a=-1,b=-1;\n\t\trep(i,0,c[u]-1) if(!vis[s[u][i]]) {\n\t\t\tint v=s[u][i];\n\t\t\tif(~a) b=v;\n\t\t\telse a=v;\n\t\t}\n\t\tif(mi[a]>mi[b]) swap(a,b);\n\t\tdfs_get(a),Solve(b);\n\t}\n}\n\nint main(){\n\t//freopen(\"binary.in\",\"r\",stdin),freopen(\"binary.out\",\"w\",stdout);\n\tn=rd();\n\tif(n==1) return puts(\"1\"),0;\n\trep(i,1,n) {\n\t\tc[i]=rd();\n\t\tif(c[i]<=2) cmin(rt,i);\n\t\trep(j,0,c[i]-1) s[i][j]=rd();\n\t}\n\tdfs(rt,0);\n\tSolve(rt);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"[CSP-S 2020 T3] 动物园 (拓扑排序)","url":"/articles/2020/11/08/1e683601.html","content":"# [CSP-S 2020 T3] 动物园 (拓扑排序)\n\n很难考虑每个操作的顺序，但由于操作比较简单，可以直接考虑每个操作贡献的权值\n\n一个操作的权值可以定义为：每次这个操作执行之后后，后面所有的乘法操作的积\n\n如果没有递归，只需要倒序枚举一次调用情况，就能知道所有的权值\n\n对于递归的情况，显然函数之间的递归关系构成一张拓扑图，可以考虑预处理出每个操作的乘法操作之积\n\n对于所有的函数，同样能得到一个权值，接下来的操作只需要把每个存在递归的函数不断将权值向下传给子函数\n\n如果把最终的调用序列看做一个主函数，那么对于这个操作实际也是一样的做法\n\n即：倒序枚举一次累积，然后乘上自己的权值下传即可\n\nTips: 最后加入贡献时，注意先将所有数的权值乘上全局乘法倍数，然后再依次处理每个加法操作\n\n````cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\nint rd(){ \n\tint s=0,f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=1e5+10,P=998244353;\n\nint n,m;\nint A[N],T[N],H[N]; \n// A为原数组，T为乘法积，H为函数调用权值\nint O[N],X[N],Y[N];\nint B[N*11],C,L[N],R[N],ind[N];\nint Q[N],QL,QR;\n\nint main() {\n\t//freopen(\"call.in\",\"r\",stdin),freopen(\"call.out\",\"w\",stdout);\n\trep(i,1,n=rd()) A[i]=rd();\n\tm=rd()+1; // 令m+1号为主函数\n\trep(i,1,m) {\n\t\tO[i]=i<m?rd():3,T[i]=1;\n\t\tif(O[i]==1) X[i]=rd(),Y[i]=rd();\n\t\telse if(O[i]==2) T[i]=rd();\n\t\telse {\n\t\t\tL[i]=C+1,R[i]=C+=rd();\n\t\t\trep(j,L[i],R[i]) ind[B[j]=rd()]++;\n\t\t}\n\t}\n\trep(i,QL=1,m) if(!ind[i]) Q[++QR]=i;\n\twhile(QL<=QR) {\n\t\tint u=Q[QL++];\n\t\tif(O[u]==3) rep(j,L[u],R[u]) if(--ind[B[j]]==0) Q[++QR]=B[j];\n\t}\n\tdrep(k,m,1){\n\t\tint u=Q[k];\n\t\tif(O[u]==3) rep(j,L[u],R[u]) T[u]=1ll*T[u]*T[B[j]]%P;\n\t}\n\t\n\trep(i,H[m]=1,n) A[i]=1ll*A[i]*T[m]%P;\n\trep(k,1,m) {\n\t\tint u=Q[k],x=1;\n\t\tdrep(j,R[u],L[u]){\n\t\t\tint v=B[j];\n\t\t\tH[v]=(H[v]+1ll*x*H[u])%P;\n\t\t\tx=1ll*x*T[v]%P;\n\t\t}\n\t\tif(O[u]==1) A[X[u]]=(A[X[u]]+1ll*H[u]*Y[u])%P;\n\t}\n\trep(i,1,n) printf(\"%d \",A[i]); puts(\"\");\n}\n````\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["CSP"],"categories":["题解"]},{"title":"CTSC2016 香山的树 (KMP+dp)","url":"/articles/2020/11/08/4b6d98b6.html","content":"# CTSC2016 香山的树 (KMP+dp)\n\n我的做法比较奇怪\n\n约定$\\Sigma$为字符集\n\n显然是要枚举答案，不断增大答案$S$的字典序，求出字典序$>S$的个数，考虑$dp$求解\n\n比较大小可以想到要不断进行前缀匹配，因此考虑 $\\text{kmp}$\n\n因为要 $dp$ 的是一个循环同构串，不妨直接扩展为无限循环的串，$dp$一个 **最小** 的循环节\n\n不妨先考虑没有字典序限制的简单情形，也就是抛开$\\text{kmp}$判断字典序，计算长度为$i$的方案数\n\n显然此时一个合法的长度为$i$的串只需要满足$i$中不会出现循环\n\n设$f_i$为最小循环节为$i$的答案，一种Naive的思路是直接拿$|\\Sigma|^i$计算，但是显然长度为$i$的会包含长度为$\\forall d,d|i$的\n\n即$g_i=|\\Sigma|^i=\\sum_{d|i}f(d)$，然后直接$O(n\\ln n)$减去重复部分即可\n\n由于题目要求是最小的循环，因此实际上每个循环有$i$中不同开始位置，所以答案应是$\\frac{f_i} {i}$\n\n接下来考虑字典序的问题：不妨枚举一个无限循环串$S$的**最优匹配位置**为$st$，然后$dp$一个长度为$i$的循环节\n\n显然要满足的条件是：\n\n1.$dp$了$i$个字符之后匹配状态为$st$\n\n2.在$dp$过程中如果$\\text{kmp}$出现失配，必须满足当前字符更大\n\n注意这里有一个问题，当匹配位置恰好等于$|S|$时，可能会将恰好为$S$的情况算入，因此要特判\n\n3.中途不能匹配到比$st$更大的位置\n\n同样的会出现两种重复计算：\n\n1.串内出现了循环\n\n可以考虑同样的容斥方法\n\n2.多个不同的开始位置都合法\n\n这个我的处理方法非常暴力，考虑直接记录匹配过程中恰好为$st$的次数，这些位置都是可能的开始位置\n\n不妨令$dp_{i,j,d}$表示当前$dp$了$i$位，匹配状态为$j$，中途出现了$d$个恰好为$st$的匹配位置\n\n可以得到一个$O(n^3|\\Sigma|)$的暴力dp，算上枚举起始位置，复杂度为$O(n^4|\\Sigma|)$\n\n由于还需要按位二分答案，所以复杂度为$O(n^5|\\Sigma|\\log |\\Sigma|)$，实际可以通过\n\n一个小优化：每次二分时，只有$st=|S|$或者$st=|S|-1$的部分需要重新$dp$\n\n因此实际复杂度为$O(n^4|\\Sigma|\\log |\\Sigma|)$\n\n~~感觉这个$dp$明显太麻烦了，显然可以删掉一些东西~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef __int128 ll;\n//本地测试可以改成long long ，并且把下面的U=1e36改为U=1e18\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) f|=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=52,S=26;\nconst ll U=1e36;\n\nvoid chk(ll &a){ a>U && (a=U); }\n\nint n,m;\nll k;\nchar s[N];\nint nxt[N],trans[N][S];\nvoid Init_KMP(){\n\trep(i,2,m) {\n\t\tint j=nxt[i-1];\n\t\twhile(j && s[i]!=s[j+1]) j=nxt[j];\n\t\tif(s[i]==s[j+1]) j++;\n\t\tnxt[i]=j;\n\t}\n\trep(i,0,m) {\n\t\trep(j,0,S-1) {\n\t\t\tint k=i,f=1;\n\t\t\twhile(s[k+1]!=j+'a') {\n\t\t\t\tf&=j+'a'>s[k+1];\n\t\t\t\tif(!k) break;\n\t\t\t\tk=nxt[k];\n\t\t\t}\n\t\t\tif(s[k+1]==j+'a') k++;\n\t\t\ttrans[i][j]=f?k:-1;\n\t\t}\n\t}\n}\n\nll dp[N][N][N];\nll Ans[N];\n\nll Calc(int k=0){\n\tm=strlen(s+1),Init_KMP();\n\tll ans=0;\n\trep(st,(k?0:m-1),m) {\n\t\tAns[st]=0;\n\t\trep(i,0,n) rep(j,0,st) rep(d,0,n) dp[i][j][d]=0;\n\t\tdp[0][st][0]=1;\n\t\trep(i,1,n) {\n\t\t\trep(j,0,st) rep(d,0,i) if(dp[i-1][j][d]){ \n\t\t\t\trep(c,j==m?0:s[j+1]-'a',S-1) if(~trans[j][c]) {\n\t\t\t\t\tchk(dp[i][trans[j][c]][d+(trans[j][c]==st)]+=dp[i-1][j][d]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\trep(i,1,n) rep(d,0,n) if(dp[i][st][d]) {\n\t\t\tif(dp[i][st][d]==U) return U;\n\t\t\trep(j,2,min(n/i,n/d)) dp[i*j][st][d*j]-=dp[i][st][d];\n\t\t\tif(i>m || st!=m) chk(Ans[st]+=dp[i][st][d]/d); // 特判了恰好为S的情况\n\t\t}\n\t}\n\trep(i,0,m) chk(ans+=Ans[i]);\n\treturn ans;\n}\n\nint main(){ \n\t//freopen(\"treelabel.in\",\"r\",stdin),freopen(\"treelabel.out\",\"w\",stdout);\n\tscanf(\"%d%lld%s\",&n,&k,s+1);\n\tk=Calc(1)-k+1;\n\tif(k<0) return puts(\"-1\"),0;\n\trep(i,1,n) {\n\t\tint l='a',r='a'+S-1,res=0;\n\t\twhile(l<=r){\n\t\t\tint mid=(l+r)>>1;\n\t\t\ts[i]=mid,s[i+1]=0;\n\t\t\tif(Calc()>=k) res=mid,l=mid+1;\n\t\t\telse r=mid-1;\n\t\t}\n\t\ts[i]=res,s[i+1]=0;\n\t\tif(!res || Calc()==k) break;\n\t}\n\tputs(s+1);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["CTSC"],"categories":["题解"]},{"title":"[学军20201104CSP模拟赛] 二维码              ","url":"/articles/2020/11/05/6fc3de75.html","content":"# [学军20201104CSP模拟赛] 二维码              \n\n简要题意：\n\n对于$n\\times m$的网格图，初始时全部为白色，现在 通过下面的方法染色\n\n每次选择一个行或者列，把它全部染成黑色或者全部染成白色\n\n求任意操作的情况下，可以得到的不同网格图的数量$\\mod 998244353$\n\n$$ \\ $$\n\n\n\n判定一个染色方案是否有解的条件是：\n\n染色完成的矩阵不包含一个子矩阵满足四个角分别为\n\n01\n\n10\n\n或者\n\n10\n\n01\n\n但是这样看这个条件似乎比较抽象，如果具体对于一个行上考虑，就是满足\n\n每一行**所包含的1的位置**的集合之间  **互为子集**\n\n显然一个方案可以任意交换行/列，不妨把按照每一行1的个数将每一行排序，设每一行有$a_i$个1，边界条件为$a_0=0$\n\n那么对于行上的1考虑排列，方案数为{%raw%}$\\begin{aligned} \\prod \\binom{m-a_{i-1} } {a_i-a_{i-1} }\\end{aligned}${%endraw%}，即从空的$m-a_{i-1}$个位置里选出多出的$a_i-a_{i-1}$个位置\n\n而对于列之间的排列需要考虑$a_i$与$a_{i+1}$的关系，因为如果$a_i=a_{i+1}$时，必然满足这两行相同\n\n设所有的$a_i$构成若干个相同的组，每一组包含$b_i(i\\in[1,k])$个元素，则方案数显然为{%raw%}$\\begin{aligned} \\frac{n!} {\\prod b_i!}\\end{aligned}${%endraw%}\n\n而组内的$a_i$之间显然是没有{%raw%}$\\begin{aligned} \\sum \\binom{m-a_{i-1} } {a_i-a_{i-1} }\\end{aligned}${%endraw%}的贡献的，可以跳过\n\n由此，不妨令$dp_{i,j}$表示$dp$了前$i$行，最后一行$a_i=j$，每次枚举每个组$b_i$转移\n\n复杂度为$O(n^4)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\nconst int N=2010,P=998244353;\nint n,m,C[N][N],dp[N][N],I[N],J[N];\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint main(){\n\trep(i,J[0]=1,N-1) J[i]=1ll*J[i-1]*i%P;\n\tI[N-1]=qpow(J[N-1]);\n\tdrep(i,N-2,0) I[i]=1ll*I[i+1]*(i+1)%P;\n\trep(i,0,N-1) rep(j,C[i][0]=1,i) C[i][j]=(C[i-1][j]+C[i-1][j-1])%P;\n\n\tscanf(\"%d%d\",&n,&m);\n\trep(i,0,n) dp[i][0]=I[i]; // 第一个块\n\trep(i,1,n) rep(j,1,m) {\n\t\trep(a,0,i-1) rep(b,0,j-1) {\n\t\t\tdp[i][j]=(dp[i][j]+1ll*dp[a][b]*I[i-a]%P*C[m-b][j-b])%P;\n\t\t}\n\t}\n\tint ans=0;\n\trep(i,0,m) ans=(ans+dp[n][i])%P;\n\tans=1ll*ans*J[n]%P;\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n优化：\n\n发现两维$dp$之间是相互独立的，分别是把$n,m$分组\n\n令$F_{i,j}$表示把$n$分成了$i$个组，当前总和为$j$的方案数，$G_{i,j}$表示把$m$分成$i$组，当前总和为$j$\n\n 按照上面的系数转移，最后$O(n)$合并，复杂度为$O(n^3)$\n\n$$ \\ $$\n\n进一步优化：\n\n为了方便下面的叙述，不妨先整理一下$a_i$之间转移的系数，不妨设边界$a_{n+1}=m$\n\n{%raw%}$\\begin{aligned} \\prod \\binom{m-a_{i-1} } {a_i-a_{i-1} }=\\prod_{i=1}^n \\frac{(m-a_{i-1})!} {(a_i-a_{i-1})!(m-a_{i})!}= \\frac{m!} {\\prod_{i=1}^{n+1} (a_{i}-a_{i-1})!}\\end{aligned}${%endraw%} \n\n发现实际上和列之间的系数是类似的，每次枚举$a_i-a_{i-1}$即可\n\n而实际上只有$k$个$b_i$直接相交的位置$a_{i}-a_{i-1}$有效，因此行和列实际上分别是将$n,m$分成了$k$组\n\n观察上面的转移系数，行构成的块，首个块大小可以为$0$，而列构成的块最后一个块大小可以为$0$，所以这个并不是严格分成$k$组，下面会讨论这个问题\n\n我们计算答案的复杂度消耗在计算分成若干块的方案，而实际上，把$n$分成$k$块的方案数就是$\\begin{Bmatrix} n\\\\ k\\end{Bmatrix}\\cdot k!$\n\n用$n^2$递推第二类斯特林数的方法即可计算\n\n对于并不是严格分成$k$组的问题，可以考虑把开头/结尾那一个大小为$0$的块删掉，即同时还要考虑$\\begin{Bmatrix}n \\\\ k-1\\end{Bmatrix}(k-1)!$\n\n最后再枚举$k$，复杂度为$O(n^2)$\n\n更优化的就是$\\text{NTT}$计算斯特林数，带入通项公式\n\n{%raw%}$\\begin{aligned} \\begin{Bmatrix}n\\\\ m\\end{Bmatrix}m!=\\sum_{i=0}^m i^n(-1)^{m-i}\\binom{m} {i} \\end{aligned}${%endraw%}\n\n显然把组合数拆开$\\text{NTT}$即可\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nconst int N=1<<18|10,P=998244353;\n\nint n,m,ans;\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nint I[N],J[N];\n\nint rev[N];\nint Init(int n){ \n\tint R=2,c=0;\n\twhile(R<=n) R<<=1,c++;\n\trep(i,0,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<c);\n\treturn R;\n}\n\nvoid NTT(int n,int *a,int f){\n\tstatic int e[N>>1];\n\trep(i,1,n-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n\tfor(int i=e[0]=1;i<n;i<<=1) {\n\t\tll t=qpow(f==1?3:(P+1)/3,(P-1)/i/2);\n\t\tfor(int j=i-2;j>=0;j-=2) e[j+1]=(e[j]=e[j>>1])*t%P;\n\t\tfor(int l=0;l<n;l+=i*2) {\n\t\t\tfor(int j=l;j<l+i;++j) {\n\t\t\t\tint t=1ll*a[j+i]*e[j-l]%P;\n\t\t\t\ta[j+i]=a[j]-t,Mod2(a[j+i]);\n\t\t\t\ta[j]+=t,Mod1(a[j]);\n\t\t\t}\n\t\t}\n\t}\n\tif(f==-1) {\n\t\tll base=qpow(n);\n\t\trep(i,0,n-1) a[i]=a[i]*base%P;\n\t}\n}\n\nint A[N],B[N],C[N];\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tif(n<m) swap(n,m);\n\trep(i,J[0]=1,N-1) J[i]=1ll*J[i-1]*i%P;\n\tI[N-1]=qpow(J[N-1]);\n\tdrep(i,N-2,0) I[i]=1ll*I[i+1]*(i+1)%P;\n\n\tint R=Init(n+n+2);\n\trep(i,0,n) A[i]=qpow(i,n)*I[i]%P;\n\trep(i,0,n) B[i]=(i&1)?P-I[i]:I[i];\n\tNTT(R,A,1),NTT(R,B,1);\n\trep(i,0,R-1) A[i]=1ll*A[i]*B[i]%P;\n\tNTT(R,A,-1);\n\trep(i,n+1,R) A[i]=0;\n\n\trep(i,0,m) C[i]=qpow(i,m)*I[i]%P;\n\tNTT(R,C,1);\n\trep(i,0,R-1) C[i]=1ll*C[i]*B[i]%P;\n\tNTT(R,C,-1);\n\trep(i,m+1,R) C[i]=0;\n\n\tint ans=0;\n\trep(i,0,min(n,m)) ans=(ans+1ll*(1ll*A[i]*J[i]%P+1ll*A[i+1]*J[i+1]%P)*(1ll*C[i]%P*J[i]%P+1ll*C[i+1]*J[i+1]%P))%P;\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["CSP"],"categories":["题解"]},{"title":"零化多项式/特征多项式/最小多项式/常系数线性齐次递推","url":"/articles/2020/11/03/f8425ab9.html","content":"# 零化多项式/特征多项式/最小多项式/常系数线性齐次递推\n\n### 约定:\n\n$I_n$是$n$阶单位矩阵，即主对角线是$1$的$n$阶矩阵\n\n一个矩阵$A$的$|A|$是$A$的行列式\n\n默认$A$是一个$n\\times n$的矩阵\n\n------\n\n### 定义\n\n#### 零化多项式:\n\n对于一个矩阵$A$，它的一个零化多项式$f(\\lambda)$是满足$f(A)=0$的多项式，定义域包含矩阵\n\n$$ \\ $$\n\n#### 最小多项式:次数最低的零化多项式\n\n#### 特征多项式\n\n对于一个$n$阶的矩阵$A$，它的特征多项式\n\n$p(\\lambda)=|\\lambda I_n-A|$\n\n$\\lambda$定义域不止是$\\R$，还可以是矩阵\n\n$p(\\lambda)$是关于$\\lambda$的一个不超过$n+1$次的多项式\n\n即$p(\\lambda )=\\sum_0^{n}a_ix^i$\n\n----\n\n### Cayley-Hamilton定理:矩阵的特征多项式也是它的零化多项式\n\n---------\n\n### 求解特征多项式\n\n带入$n$个数，求出得$|x I_n-A|$,得到$n$个矩阵，通过高斯消元可以$O(n^3)$地求出行列式\n\n然后可$O(n^2)$拉格朗日插值求出原来的多项式，总复杂度受限于高斯消元，为$O(n^4)$\n\n\n\n### 求解最小多项式\n\n构造矩阵序列$a_i=A^i$\n\n求出它的一个线性递推$r_i$，即\n\n{%raw%}$\\begin{aligned} \\sum_{j=0}^{m} r_j a_{i-j}=\\sum_{j=0}^{m} r_j A^{i-j}=(\\sum_{j=0}^m r_{m-j}A^j)\\cdot A^{i-m}=0\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned} \\therefore  \\sum_{j=0}^m r_{m-j}A^j=0\\end{aligned}${%endraw%}\n\n所以可以由$r_i$翻转得到$f(\\lambda)$\n\n求解$a_i$前$n$项的复杂度受限于矩阵乘法为$O(n^4)$，求解递推式的复杂度为$O(n^3)$\n\n考虑到实际求解递推式时，随机生成了两个向量$u,v$\n\n实际是计算标量序列$\\{uA^iv\\}$的递推式，所以实际每次求出$uA^i$复杂度应为$O(n^2)$\n\n求这个递推式需要用到$a_i$前$2n$项，求解复杂度为$O(n^3)$\n\n因此总复杂度为$O(n^3)$\n\n(但是如果只是求出来并没有什么用，因为求解方法是随机的，甚至连检查一次保证正确都需要$O(n^2(n+e))$的时间($e$为矩阵非0位置个数))\n\n$$ \\ $$\n\n## 求解稀疏方程组\n\n设方程系数用矩阵$A$表示，右侧每个方程的常数用向量$b$表示，答案用向量$x$表示，则满足关系式\n\n$Ax=b$，即$x=A^{-1}b$\n\n求出$\\{A^ib\\}$线性递推式，反推出$A^{-1}b$即可\n\n反推方法:\n\n带入线性递推的$m$项，则$\\sum_{i=0}^{m} A^{m-i}b\\cdot r_i=0$\n\n两边同乘$A^{-1}$，得到$A^{-1}b\\cdot r_m +\\sum_{i=0}^{m-1}A^{m-i}br_i=0$\n\n$$ \\ $$\n\n-----------\n\n### 求解矩阵$k$次幂\n\n我们要求解$A^k$，常规做法是直接用快速幂\n\n设矩阵$A$的一个零化多项式是$f(\\lambda)$\n\n显然，$A^k$可以用一个多项式表示$A^k=\\sum_0^k w_i A^i$\n\n$\\{w_i\\}$构成了一个$k+1$次多项式$F_k(x)$\n\n存在一种合法的表示是$F_k(x)=x^k$\n\n$\\because f(A)=0 \\therefore \\forall i, f(A)A^i=0$\n\n也就是相当于我们要求出$x^k$对于$f(x)$这个$n+1$多项式取模\n\n显然可以通过类似快速幂的方式倍增求解这个多项式，每次对$f(x)$取模复杂度是$O(n\\log n)$\n\n就能在$O(n\\log m\\log n)$时间得求出$F(x)$\n\n最后得到的$F(x)$是一个$n$次多项式\n\n那么带入就可以快速求出$A_k$\n\n可以认为这个复杂度是受限于求解$A^0,A^1,\\cdots,A^{n-1}$的$O(n^4)$\n\n对于元矩阵$A$为**稀疏矩阵**的情况，设其包含$e$个非零位置\n\n那么求解$B\\cdot A$的过程是$O(n\\cdot e)$的，求解$A_0,A^1,\\cdots,A^{n-1}$的过程，是$O(n^2e)$的\n\n求解零化多项式的复杂度也是$O(n^2(n+e))$的，因此总复杂度为$O(n^2(n+e))$\n\n而一般的矩阵快速幂是$O(n^3\\log k)$的，这种方法适用情况非常特殊\n\n另外，对于并不需要知道整个矩阵的答案，并且$A^0,A^1,\\cdots,A^{n-1}$特殊的具体问题，这个方法也十分有效\n\n$$  \\ $$\n\n-----------------\n\n###求解常系数线性齐次递推\n\n问题是要求数列$f_i=\\sum _{j=1}^{n}a_j\\cdot f_{i-j}$\n\n给出$f_0,f_1,\\cdots,f_{n-1}$，求第$k$项的值\n\n线性递推显然可以用 **初始向量列** 与 **转移矩阵的幂次** 的乘积表示，即$f_i=(S \\cdot A^i)_n$，其中$A$为转移矩阵，$S$为初始向量列，我们求的是第$n$项\n\n对于$n=4$的情况，我们的转移矩阵$A$是\n\n|      |  1   |  2   |  3   |   4   |\n| :--: | :--: | :--: | :--: | :---: |\n|  1   |      |      |      | $a_4$ |\n|  2   |  1   |      |      | $a_3$ |\n|  3   |      |  1   |      | $a_2$ |\n|  4   |      |      |  1   | $a_1$ |\n\n鉴于它的特殊性，我们可以直接求出它的特征多项式表达式\n\n由$\\lambda I_n-A=$\n\n|      |     1     |     2     |     3     |       4        |\n| :--: | :-------: | :-------: | :-------: | :------------: |\n|  1   | $\\lambda$ |           |           |     $-a_4$     |\n|  2   |   $-1 $   | $\\lambda$ |           |     $-a_3$     |\n|  3   |           |   $-1$    | $\\lambda$ |     $-a_2$     |\n|  4   |           |           |   $-1$    | $\\lambda -a_1$ |\n\n带入行列式最暴力的求法\n\n> 枚举一个排列$p_i$，设排列$p$的逆序对为$f(p)$，$|A|=\\sum (-1)^{f(p)} \\Pi A_{i,p_i}$\n\n实际上合法的排列只有$n$个，就是\n\n枚举$p_i=n$\n\n那么{%raw%}$p_j=\\left\\{\\begin{aligned} j && j<i \\\\ n && j=i \\\\ j-1 && j> i\\end{aligned}\\right.${%endraw%}\n\n当$i=n$时，$(-1)^{f(p)} \\Pi A_{i,p_i}=\\lambda ^n-a_1\\lambda ^{n-1}$\n\n当$i>1$时，\n\n$f(p)=n-i$\n\n$\\Pi A_{i,p_i}=(-1)^{n-i+1}\\lambda^i\\cdot a_{n-i+1}$\n\n$(-1)^{f(p)} \\Pi A_{i,p_i}=-\\lambda^i a_{n-i+1}$\n\n综上,转移矩阵$A$的特征多项式有简单的表达\n\n>  $p(\\lambda) = |\\lambda I_n-A|=\\lambda^n-a_1\\lambda^{n-1} -a_2\\lambda^{n-2} -\\cdots -a^n$\n\n假设有$f_0$这一项(不需要知道是多少)，那么认为初始向量列为$S=(f_{-(n-1)},f_{-(n-2)},\\cdots ,f_{0})$\n\n这个问题，**我们要求的是$S\\cdot A^k$的第$n$项，不需要知道整个矩阵**\n\n类似求出$A^k$的过程，求出$F_k(x)\\mod p(\\lambda)$\n\n我们要求解$(S\\cdot A^k)_n=\\sum_1^{n}[x^i]{F(x)}(S\\cdot A^i)_n$\n\n而$(S\\cdot A^i)_n=f_i$已知，求出$F(x)$后直接带入即可\n\n需要用到多项式取模，求解这个表达式是$O(n\\log n\\log k)$的，求完直接带入即可\n\n[用最朴素的$\\text{NTT}$，完全不卡常，甚至过不掉模板题](https://www.luogu.com.cn/problem/P4723)\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"[TopCoder - 12244 SRM 559 Round1 Div1] CircusTents","url":"/articles/2020/11/02/b7e7ec66.html","content":"# [TopCoder - 12244 SRM 559 Round1 Div1] CircusTents\n\n小而精的计算几何题\n\n题目大意：有$n$个实心圆（不能从内部经过）\n\n在第一个圆上选出一个点，使得**从其他任意圆上到达它的最小距离** 最大\n\n分析：要最小值最大，显然可以想到二分答案\n\n不能穿过其他圆这一条件让计算答案变得十分困难，但是可以发现，如果路径经过了一号圆以外的圆\n\n那么从路径与该圆的交点直接过去的距离一定更近\n\n也就是说，可以把 距离 看做 可以穿过一号圆以外的圆 的距离\n\n考虑从一个圆$O$到达一号圆上的某一点$X$的最小距离，大致可以成两种情况\n\n1.$OX$连线不穿过一号圆，那么可以直接走$OX$连线\n\n![QQ截图20201102162335.png](https://i.loli.net/2020/11/02/RHD3wZ6kJSYGfez.png)\n\n最优路径就是绿色线\n\n2.先走一条切线，然后绕着圆周走一段\n\n![QQ截图20201102162651.png](https://i.loli.net/2020/11/02/8hYsmXMJkcq9DUS.png)\n\n其中$Y$是$O$点对于一号圆的切线的切点，绿色线+圆弧是最优路径\n\n那么二分答案$mid$之后，可以发现满足距离$\\ge mid$的选点位置是一段圆弧，可以从角度取交集判断是否有解\n\n实现上，可以先把一号圆平移到远点\n\n然后对于其他的圆，按照角度范围是否在切线内部可以分类讨论\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef double db;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,const T &b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,const T &b){ ((a<b)&&(a=b)); }\n\nconst int N=110;\nconst db eps=1e-10,Pi=acos(-1),D=2*Pi;\n\nint n;\nstruct Cir{\n    int x,y,r;\n}A[N];\n\ndb X[N],Y[N],H[N];\nint C,S[N];\ndb Norm(db x){ return x<0?x+D:x; }\nint I(db x){ return lower_bound(H+1,H+C+1,x)-H; }\n\nint Check(db L){\n    memset(S,0,sizeof S);\n    H[1]=0,H[C=2]=D;\n    rep(i,1,n) {\n        db dis=A[i].x*A[i].x+A[i].y*A[i].y;\n        db t=sqrt(dis-A[0].r*A[0].r)-A[i].r;\n        //t为走过切线的距离\n        dis=sqrt(dis);\n        if(dis-A[0].r-A[i].r>=L){ X[i]=0,Y[i]=D; continue; }\n        db l,r;\n        if(t>=L) {\n            // 说明范围在切线位置以内\n            // 此时，满足d=dis((x0,y0),A[i].O)-A[i].r>=L\n            db a=dis,b=A[0].r,c=L+A[i].r;\n            db co=(a*a+b*b-c*c)/(2*a*b);\n            //余弦定理\n            db x=acos(co),y=atan2(A[i].y,A[i].x);\n            l=y+x,r=y-x+D;\n        } else {\n            db d=acos(A[0].r/dis);\n            db x=atan2(A[i].y,A[i].x);\n            db y=(L-t)/A[0].r+d;\n            // 圆弧长度/半径得到圆弧弧度\n            if(y>Pi) return 0; // 特判一下全部覆盖的情况\n            l=x+y,r=x-y+D;\n        }\n        // 求 [l,r] 的交\n        if(r>D) l-=D,r-=D;\n        if(r<=0) l+=D,r+=D;\n        H[++C]=Norm(X[i]=l),H[++C]=Y[i]=r;\n    }\n\n    sort(H+1,H+C+1);\n    rep(i,1,n) {\n        if(X[i]>=0) S[I(X[i])]++,S[I(Y[i])]--;\n        else S[I(0)]++,S[I(Y[i])]--,S[I(X[i]+D)]++,S[I(D)]--;\n    }\n    // 暴力求交\n    rep(i,1,C) if((S[i]+=S[i-1])==n) return 1;\n    return 0;\n}\n\nclass CircusTents {\n    public:\n        double findMaximumDistance(vector <int> _x, vector <int> _y, vector <int> _r) {\n            n=_x.size()-1;\n            rep(i,0,n) A[i]=(Cir){_x[i]-_x[0],_y[i]-_y[0],_r[i]};\n\n            db l=0,r=1e5;\n            while(r-l>eps) {\n                db mid=(l+r)/2;\n                if(Check(mid)) l=mid;\n                else r=mid;\n            }\n            return l;\n        }\n};\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"LOJ 2882. 「JOISC 2014 Day4」两个人的星座 ","url":"/articles/2020/11/02/dbed4db0.html","content":"# LOJ 2882. 「JOISC 2014 Day4」两个人的星座 \n\n对于任意两个凸多边形相离，一定可以找到一条直线将它们分在平面的两个区域\n\n而对于三角形的情况更为特殊\n\n分析可以发现，很难直接枚举三角形外直线计算，而对于任意的两个合法的三角形，在其6点中较近的4个点中\n\n一定可以从两个三角形中各选一个点，连出两条交错的合法的分界线，例如下图\n\n![QQ截图20201102153211.png](https://i.loli.net/2020/11/02/9Yc4vJuLlxtjbBG.png)\n\n那么可以考虑枚举这样的一条直线，即确定了两个分界线上的端点，然后从两个半平面内选出不同颜色的点\n\n直接枚举，然后$O(n)$数出这样的点，复杂度为$O(n^3)$\n\n显然可以想到枚举一个顶点，然后对于其他极角排序，旋转另一个点，同步统计半平面内的点个数，复杂度为$O(n^2\\log n)$\n\n实现上，可以枚举一个点，尺取一个半平面内的点\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll=int64_t;\nenum{N=3010};\nint n,X[N],Y[N],I[N],C[N],c,s[2][3],i;\ndouble T[N];\nll ans;\nll E(int j,int k){ return 1ll*(X[j]-X[i])*(Y[k]-Y[i])-1ll*(Y[j]-Y[i])*(X[k]-X[i]); }\n\nint main(){\n\tfor(int i=scanf(\"%d\",&n);i<=n;++i) scanf(\"%d%d%d\",X+i,Y+i,C+i);\n\tfor(i=1;i<=n;++i) {\n\t\tc=0;\n\t\tmemset(s,0,sizeof s);\n\t\tfor(int j=1;j<=n;++j) if(i!=j) I[++c]=j,T[j]=atan2(Y[j]-Y[i],X[j]-X[i]),s[0][C[j]]++;\n\t\tsort(I+1,I+n,[&](int x,int y){ return T[x]<T[y]; });\n\t\tint p=1;\n\t\tfor(int j=1;j<n;++j) {\n\t\t\twhile(E(I[j],I[p])>=0) {\n\t\t\t\ts[0][C[I[p]]]--,s[1][C[I[p]]]++;\n\t\t\t\tp=p%c+1;\n\t\t\t\tif(p==j) break;\n\t\t\t}\n\t\t\tans+=1ll*s[0][(C[i]+1)%3]*s[0][(C[i]+2)%3]*s[1][(C[I[j]]+1)%3]*s[1][(C[I[j]]+2)%3];\n\t\t\ts[1][C[I[j]]]--,s[0][C[I[j]]]++;\n\t\t}\n\t}\n\tcout<<ans/2;\n}\n```\n\n\n\n一个更好的写法是把在$y$轴以下的点中心对称上来，统计时每跨过一个点改变一次\t\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nenum{N=3010};\nint n,X[N],Y[N],C[N],c,s[2][3],i,j,d,a,b,x,y;\nint64_t ans;\nstruct Node{\n\tint x,y,d,c;\n\tNode(){ }\n\tNode(int p,int q,int r) {\n\t\tx=p,y=q,c=r,d=0;\n\t\tif(y<0||(x<0&&y==0)) d=1,x=-x,y=-y; \n\t\ts[d][c]++;\n\t}\n} A[N];\nstruct cmp{ int operator () (const Node &a,const Node &b){ return 1ll*a.x*b.y<1ll*a.y*b.x; } };\nint main(){\n\tfor(i=scanf(\"%d\",&n);i<=n;++i) scanf(\"%d%d%d\",X+i,Y+i,C+i);\n\tfor(i=1;i<=n;++i) {\n\t\tmemset(s,c=0,sizeof s),a=(C[i]+1)%3,b=(a+1)%3;\n\t\tfor(j=1;j<=n;++j) if(i!=j) A[++c]=Node(X[j]-X[i],Y[j]-Y[i],C[j]);\n\t\tfor(sort(A+1,A+n,cmp()),j=1;j<n;++j) {\n\t\t\ts[A[j].d][c=A[j].c]--,x=(c+1)%3,y=(x+1)%3;\n\t\t\tfor(d=0;d<2;++d) ans+=1ll*s[d][a]*s[d][b]*s[!d][x]*s[!d][y];\n\t\t\ts[!A[j].d][c]++;\n\t\t}\n\t}\n\tcout<<ans/4;\n}\n```\n\n\n\n\n\n\n\n","tags":["各大OJ","JOI"],"categories":["题解"]},{"title":"「300iq Contest 2」[LOJ 6719] 数仙人掌 Counting Cactus ","url":"/articles/2020/10/28/713a6cc8.html","content":"# 「300iq Contest 2」[LOJ 6719] 数仙人掌 Counting Cactus \n\nLOJ上的 $n\\leq 18$ \n\n如果把仙人掌上的树边看做二元环，那么可以认为仙人掌就是由很多环嵌套在一起的结构\n\n## $n\\leq 13$\n\n状压$dp$，300iq的题解里给出了状态，但是也只告诉了你状态。。。\n\n令$f(i,S)$为$i$号节点为根，子树集合为$S$的方案数\n\n令$g(i,S)$为$i$号节点为根，子树集合为$S$的方案数，并且强制根上只接了一个环\n\n令$dp(u,v,S)$为钦定一个当前环的开头为$u$，环尾扩展到了$v$，当前包含$S$的方案数\n\n由此得到转移为\n\n1.$f(i,S)\\cdot g(j,T)(S\\cap T=\\empty)\\rightarrow f(i,S\\cup T)$\n\n2.$dp(u,v,S)\\cdot f(d,T)(S\\cap T=\\empty,(u,v)\\in E) \\rightarrow dp(u,d,S\\cup T)$\n\n3.$dp(u,v,S) ((u,v)\\in E)\\rightarrow g(u,S)$\n\n实际上涉及到很多计算重复，因此需要在转移过程中加入一些调整:\n\n1.在转移环时，**钦定的环开头节点下方不应该接有任何其他节点**\n\n2.转移1中$S,T$合并上来时，可以保证$S<T$来避免集合加入顺序的重复\n\n3.当环长>2时，同一个环，同一个开始位置会由于环遍历顺序的不同被转移两次\n\n对于这个问题我的解决方法是: 让$\\frac{dp(u,v,S)} {2}\\rightarrow g(u,S)$，然后把环长为2的部分加上去\n\n转移过程中涉及到集合运算都是枚举子集，因此复杂度一个很松的上限为$O(n^33^n)$\n\n转移顺序不难解决，代码比较丑\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define reg register\ntypedef long long ll;\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n\nchar IO;\nint rd(){\n\tint s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=13,M=1<<N|3,P=998244353;\n\nint n,m;\nint G[N];\nint f[M][N],g[M][N];\nint dp[M][N][N];\n\nint main(){\n\tn=rd(),m=rd();\n\tif(n==1) return puts(\"1\"),0;\n\trep(i,1,m) {\n\t\tint u=rd()-1,v=rd()-1;\n\t\tG[u]|=1<<v,G[v]|=1<<u;\n\t}\n\tint A=(1<<n)-1;\n\trep(i,0,n-1) g[1<<i][i]=1,dp[1<<i][i][i]=1;\n\trep(S,1,A) {\n\t\t// dp[S][u][v]转移\n\t\trep(u,0,n-1) rep(v,0,n-1) if(S&(1<<u) && S&(1<<v)) {\n\t\t\tint R=S^(1<<u);\n\t\t\tif(u!=v) R^=(1<<v);\n\t\t\tfor(int T=R&(R-1);;T=(T-1)&R){\n\t\t\t\tint X=T|(1<<u)|(1<<v),Y=S^X;\n\t\t\t\tif(dp[X][u][v]) rep(d,0,n-1) if(f[Y][d] && G[v]&(1<<d)) \n\t\t\t\t\tdp[S][u][d]=(dp[S][u][d]+1ll*dp[X][u][v]*f[Y][d])%P;\n\t\t\t\tif(!T) break;\n\t\t\t}\n\t\t}\n\t\t// dp反馈给g\n\t\trep(u,0,n-1) rep(v,0,n-1) if(dp[S][u][v] && G[u]&(1<<v)) \n\t\t\tg[S][u]=(g[S][u]+1ll*(P+1)/2*dp[S][u][v])%P;\n\t\t// 特判环长为2的情况\n\t\trep(i,0,n-1) rep(j,0,n-1) if(i!=j && S&(1<<i) && S&(1<<j) && G[i]&(1<<j)) \n\t\t\tg[S][i]=(g[S][i]+1ll*(P+1)/2*f[S^(1<<i)][j])%P;\n\t\t// f[S][i]合并\n\t\trep(i,0,n-1) f[S][i]+=g[S][i],Mod1(f[S][i]);\n\t\trep(i,0,n-1) if(S&(1<<i)) {\n\t\t\tint R=S^(1<<i);\n\t\t\tfor(int T=R&(R-1);T;T=(T-1)&R) {\n\t\t\t\tint X=T,Y=T^R;\n\t\t\t\tif(X>Y) continue;\n\t\t\t\t// 防止转移顺序重复\n\t\t\t\tf[S][i]=(f[S][i]+1ll*f[X|(1<<i)][i]*g[Y|(1<<i)][i])%P;\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%d\\n\",f[A][0]);\n}\n```\n\n\n\n## $n\\leq 18$\n\n前置知识：[集合幂级数的$\\ln ,\\exp$](https://www.cnblogs.com/chasedeath/p/13891189.html)\n\n同样上面的，一颗仙人掌可以看做若干$\\ge 2$环，两两之间在某一个节点上相接构成\n\n不妨先求出环的集合幂级数，枚举环上编号最小的点，然后走环，复杂度为$O(n^32^n)$，常数较小\n\n接下来当然想到枚举环的交点$i$，将当前所有包含$i$的项取出，去掉$i$后求出$\\exp$，然后放回去，就能计算相交在$i$上的方案\n\n两部分复杂度均为$O(n^32^n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,b) for(int i=a;i<=b;++i)\nenum{N=20,M=1<<18|10,P=998244353};\nstruct U{\n\tint x;\n\tU(){ } U(int x):x(x){ }\n\tinline void operator += (const U &t){ x+=t.x,x>=P&&(x-=P); }\n\tinline void operator -= (const U &t){ x-=t.x,x<0&&(x+=P); }\n\tinline U operator * (const U &t){ return U(static_cast<unsigned long long>(x)*t.x%P); }\n}I[N],F[M][N],H[M][N];\nint n,m,G[N],C[M],B[M];\nvoid FWT(int f) {\n\tfor(int i=1;i<m;i<<=1) {\n\t\tfor(int l=0;l<m;l+=i*2) {\n\t\t\tfor(int j=l;j<l+i;++j) {\n\t\t\t\tif(f==1) rep(d,1,n) F[j+i][d]+=F[j][d];\n\t\t\t\telse rep(d,1,n) F[j+i][d]-=F[j][d];\n\t\t\t}\n\t\t}\n\t}\n}\nvoid Exp(U *a){\n\tstatic U b[N];\n\trep(i,0,n-1) b[i]=a[i+1]*(i+1);\n\trep(i,0,n-1) {\n\t\tU t=b[i];\n\t\trep(j,1,i) t+=a[j]*b[i-j];\n\t\ta[i+1]=t*I[i+1];\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tif(n==1) return puts(\"1\"),0;\n\tfor(int x,y;m--;) scanf(\"%d%d\",&x,&y),x--,y--,G[x]|=1<<y,G[y]|=1<<x;\n\tI[0]=I[1]=1,m=1<<n;\n\trep(i,0,n-1) B[1<<i]=i;\n\trep(i,2,n) I[i]=U(P-P/i)*I[P%i];\n\trep(i,1,m-1) C[i]=C[i&(i-1)]+1;\n\trep(st,0,n-1) {\n\t\tH[1<<st][st]=1;\n\t\trep(S,0,m-1) rep(i,st,n-1) if(H[S][i].x) {\n\t\t\tfor(int T=G[i]&~S;T;T&=T-1) \n\t\t\t\tH[S|(T&-T)][B[T&-T]]+=H[S][i];\n\t\t\tif(G[i]&(1<<st)) F[S][C[S]]+=H[S][i]*I[1+(C[S]>2)];\n\t\t\tH[S][i]=0;\n\t\t}\n\t}\n\tFWT(1);\n\tfor(int i=1;i<m;i<<=1){\n\t\tfor(int l=0;l<m;l+=i*2) for(int j=l;j<l+i;++j) {\n\t\t\trep(k,1,n) F[j+i][k]-=F[j][k];\n\t\t\tExp(F[j+i]+1);\n\t\t\trep(k,1,n) F[j+i][k]+=F[j][k];\n\t\t}\n\t}\n\tFWT(-1),printf(\"%d\\n\",F[m-1][n].x);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["各大OJ"],"categories":["题解"]},{"title":"LOJ 6719. 「300iq Contest 2」数仙人掌 加强版 (集合幂级数)","url":"/articles/2020/10/28/671aee9f.html","content":"# LOJ 6719. 「300iq Contest 2」数仙人掌 加强版 (集合幂级数)\n\n前置知识：[集合幂级数的$\\ln ,\\exp$](https://www.cnblogs.com/chasedeath/p/13891189.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,b) for(int i=a;i<=b;++i)\nenum{N=20,M=1<<18|10,P=998244353};\nstruct U{\n\tint x;\n\tU(){ } U(int x):x(x){ }\n\tinline void operator += (const U &t){ x+=t.x,x>=P&&(x-=P); }\n\tinline void operator -= (const U &t){ x-=t.x,x<0&&(x+=P); }\n\tinline U operator * (const U &t){ return U(static_cast<unsigned long long>(x)*t.x%P); }\n}I[N],F[M][N],H[M][N];\nint n,m,G[N],C[M],B[M];\nvoid FWT(int f) {\n\tfor(int i=1;i<m;i<<=1) {\n\t\tfor(int l=0;l<m;l+=i*2) {\n\t\t\tfor(int j=l;j<l+i;++j) {\n\t\t\t\tif(f==1) rep(d,1,n) F[j+i][d]+=F[j][d];\n\t\t\t\telse rep(d,1,n) F[j+i][d]-=F[j][d];\n\t\t\t}\n\t\t}\n\t}\n}\nvoid Exp(U *a){\n\tstatic U b[N];\n\trep(i,0,n-1) b[i]=a[i+1]*(i+1);\n\trep(i,0,n-1) {\n\t\tU t=b[i];\n\t\trep(j,1,i) t+=a[j]*b[i-j];\n\t\ta[i+1]=t*I[i+1];\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tif(n==1) return puts(\"1\"),0;\n\tfor(int x,y;m--;) scanf(\"%d%d\",&x,&y),x--,y--,G[x]|=1<<y,G[y]|=1<<x;\n\tI[0]=I[1]=1,m=1<<n;\n\trep(i,0,n-1) B[1<<i]=i;\n\trep(i,2,n) I[i]=U(P-P/i)*I[P%i];\n\trep(i,1,m-1) C[i]=C[i&(i-1)]+1;\n\trep(st,0,n-1) {\n\t\tH[1<<st][st]=1;\n\t\trep(S,0,m-1) rep(i,st,n-1) if(H[S][i].x) {\n\t\t\tfor(int T=G[i]&~S;T;T&=T-1) \n\t\t\t\tH[S|(T&-T)][B[T&-T]]+=H[S][i];\n\t\t\tif(G[i]&(1<<st)) F[S][C[S]]+=H[S][i]*I[1+(C[S]>2)];\n\t\t\tH[S][i]=0;\n\t\t}\n\t}\n\tFWT(1);\n\tfor(int i=1;i<m;i<<=1){\n\t\tfor(int l=0;l<m;l+=i*2) for(int j=l;j<l+i;++j) {\n\t\t\trep(k,1,n) F[j+i][k]-=F[j][k];\n\t\t\tExp(F[j+i]+1);\n\t\t\trep(k,1,n) F[j+i][k]+=F[j][k];\n\t\t}\n\t}\n\tFWT(-1),printf(\"%d\\n\",F[m-1][n].x);\n}\n```\n\n","tags":["各大OJ"],"categories":["题解"]},{"title":"集合幂级数的  Ln, Exp ","url":"/articles/2020/10/28/edc2a775.html","content":"# 集合幂级数的$\\ln,\\exp$\n\n起始：求联通子图个数\n\n令$F(x)$为联通的生成子图个数的形式幂级数，可以简单求出$G(x)$为生成子图个数的形式幂级数\n\n下可能略写$F(x)$为$F$\n\n不连通的子图可以通过联通子图做集合并运算得到，即构造卷积\n\n{%raw%}$\\begin{aligned} F\\times G=\\sum_{S\\ne \\empty}\\sum_{T\\ne \\empty,S\\cap T=\\empty} [x^S]F\\cdot [x^T]G\\cdot x^{S\\cup T} \\end{aligned}${%endraw%}\n\n显然满足关系式{%raw%}$\\begin{aligned} G=\\sum_{i\\ge 1} \\frac{F^i} {i!}=e^{F}-1\\end{aligned}${%endraw%}\n\n$F=\\ln (G+1)$\n\n计算集合幂级数$\\ln$的方法似乎非常抽象\n\n方法是：\n\n1.类似子集卷积，把所有项按照占位数(集合包含元素个数)分开，记录在第二维\n\n2.求出$\\text{FMT}$\n\n3.对于集合幂级数每一位(现在是一个形式幂级数)求出其$\\ln$的前$n$项\n\n4.求出$\\text{IFMT}$\n\n求出形式幂级数$\\ln$的$n^2$方法是\n\n$F=\\ln (G+1)$\n\n$F'=\\frac{G'} {G+1}$\n\n$F'(G+1)=G'$\n\n{%raw%}$\\begin{aligned}F'_i=G'_i-\\sum_{j=1}G_jF'_{i-j}\\end{aligned}${%endraw%}\n\n类似的，可以计算集合幂级数的$\\exp$，即由上面的$F$求$G$\n\n{%raw%}$\\begin{aligned}G'_i=F'_i+\\sum_{j=1}G_jF'_{i-j}\\end{aligned}${%endraw%}\n\n可能在子图计数题中出现\n\n[LOJ6729 ](https://loj.ac/problem/6729) \n\n[LOJ6719](https://loj.ac/problem/6719) \n\n[LOJ6730](https://loj.ac/problem/6730)\n\n下面是代码实现上的参考\n\n```cpp\n\n\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a;i<=b;++i)\n\nint I[N];// 模逆元\nvoid FMT(int F[M][N],int f){\n\tfor(int i=1;i<m;i<<=1) for(int l=0;l<m;l+=i*2) \n\t\tfor(int j=l;j<l+i;++j) if(f==1) rep(d,1,n) F[j+i][d]+=F[j][d],Mod1(F[j+i][d]);\n\t\telse rep(d,1,n) F[j+i][d]-=F[j][d],Mod2(F[j+i][d]);\n}\n\nvoid Ln(int *a){\n\tstatic int b[N];\n\trep(i,0,n-1) {\n\t\tint t=0;\n\t\trep(j,0,i-1) t=(t+1ll*b[j]*a[i-j])%P;\n\t\tb[i]=(1ll*a[i+1]*(i+1)-t+P)%P;\n\t}\n\trep(i,1,n) a[i]=1ll*b[i-1]*I[i]%P;\n}\nvoid Exp(int *a){\n\tstatic int b[N];\n\trep(i,0,n-1) b[i]=1ll*a[i+1]*(i+1)%P;\n\trep(i,0,n-1) {\n\t\tint t=b[i];\n\t\trep(j,1,i) t=(t+1ll*a[j]*b[i-j])%P;\n\t\ta[i+1]=1ll*t*I[i+1]%P;\n\t}\n}\n\nvoid Ln(int F[M][N]) {\n    FMT(F,1);\n\trep(i,1,m-1) Ln(F[i]);\n\tFMT(F,-1);\n}\nvoid Exp(int F[M][N]) {\n    FMT(F,1);\n\trep(i,1,m-1) Exp(F[i]);\n\tFMT(F,-1);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"LOJ6729. 点双连通生成子图计数 (集合幂级数)","url":"/articles/2020/10/28/1e2a4812.html","content":"# LOJ6729. 点双连通生成子图计数 (集合幂级数)\n\n基础： 由子图的集合幂级数取$\\ln$可以得到连通子图的集合幂级数，[可以参考?](https://www.cnblogs.com/chasedeath/p/13891189.html)\n\n根据点双连通的定义，我们先求得连通子图的集合幂级数\n\n然后考虑枚举每个节点$i$，把所有删去$i$之后不连通的方案去掉\n\n具体实现上，可以把所有包含$i$的项提出，删除$i$之后取$\\ln$得到连通的方案数，然后替换回去\n\n每次取$\\ln$的复杂度为$O(n^22^n)$，因此总复杂度为$O(n^32^n)$\n\n常数优化：每次实际上只会修改包含$i$的项，不需要每次都把多项式莫比乌斯反演回去\n\n刚开始进行一次莫比乌斯变换之后\n\n每次可以直接从前缀和的作差得到这一项 除了$i$以外的位置 累和之后的结果，然后直接对于形式幂级数取$\\ln$，具体实现见代码\n\n注意去掉$i$后，占位数量$-1$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,b) for(int i=a;i<=b;++i)\nconst int N=20,M=1<<18|3,P=998244353;\nstruct U{\n\tint x;\n\tU(){ } U(int x):x(x){ }\n\tinline void operator += (const U &t){ x+=t.x,x>=P&&(x-=P); }\n\tinline void operator -= (const U &t){ x-=t.x,x<0&&(x+=P); }\n\tinline U operator * (const U &t){ return U(static_cast<unsigned long long>(x)*t.x%P); }\n} I[N],F[M][N],b[N];\nint n,m,G[N],C[M],Pow[N*N];\nvoid FWT(int f){\n\tfor(int i=1;i<m;i<<=1) for(int l=0;l<m;l+=i*2) \n\t\tfor(int j=l;j<l+i;++j) if(f==1) rep(d,1,n) F[j+i][d]+=F[j][d];\n\t\telse rep(d,1,n) F[j+i][d]-=F[j][d];\n}\nvoid Ln(U *a){\n\trep(i,0,n-1) {\n\t\tU t=0;\n\t\trep(j,0,i-1) t+=b[j]*a[i-j];\n\t\tb[i]=a[i+1]*(i+1),b[i]-=t;\n\t}\n\trep(i,1,n) a[i]=b[i-1]*I[i];\n}\nint main() {\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int u,v;m--;) scanf(\"%d%d\",&u,&v),u--,v--,G[u]|=1<<v,G[v]|=1<<u;\n\tm=1<<n,I[0]=I[1]=1;\n\trep(i,1,m-1) C[i]=C[i&(i-1)]+1;\n\trep(i,2,n) I[i]=U(P-P/i)*I[P%i];\n\trep(i,Pow[0]=1,N*N-1) Pow[i]=Pow[i-1]*2%P;\n\trep(i,1,m-1) {\n\t\tint c=0;\n\t\trep(j,0,n-1) if(i&(1<<j)) c+=C[G[j]&i];\n\t\tF[i][C[i]]=Pow[c/2];\n\t}\n\tFWT(1);\n\trep(i,1,m-1) Ln(F[i]);\n    // 先取一次ln得到连通子图的集合幂级数\n\tfor(int i=1;i<m;i<<=1){\n\t\tfor(int l=0;l<m;l+=i*2) {\n\t\t\tfor(int j=l;j<l+i;++j) {\n\t\t\t\trep(k,1,n) F[j+i][k]-=F[j][k]; // 前缀和作差得到\n\t\t\t\tLn(F[j+i]+1); // 取出自己后大小-1\n\t\t\t\trep(k,1,n) F[j+i][k]+=F[j][k];\n\t\t\t}\n\t\t}\n\t}\n\tFWT(-1);\n\tprintf(\"%d\\n\",F[m-1][n].x);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["各大OJ"],"categories":["题解"]},{"title":"「517模拟赛1」ABC难题","url":"/articles/2020/10/28/4d08478.html","content":"# 「517模拟赛1」ABC难题\n\nTips: 模数是$10^8+7$\n\n不妨令序列总长为$n$，包含$m$种不同的数字\n\n发现存在$ABC$的子序列只需要满足最左边的$A$和最右边的$C$之间有一个$B$\n\n由于可能出现多个$ABC$，考虑计算不存在$ABC$的情况\n\n那么可以枚举最左边的$A$和最右边的$C$分别为$X,Y$，那么需要不存在$ABC$，并且枚举的$X,Y$合法 的充要条件是\n\n$[1,X-1]$中不存在$A$，$[X+1,Y-1]$中不存在$B$，$[Y+1,n]$中不存在$C$\n\n这三个限制，每一个限制会让一种颜色能够选择的字母数量-1\n\n那么枚举$X$，扫描每一个$Y$(注意不一定满足$X< Y$)，同时记录每个数字是否出现在$[1,X-1],[X+1,Y-1],[Y+1,n]$中\n\n在每次扫描时改变限制，同步统计出受到$0,1,2,3$个限制的数字的个数，然后答案就是$(3-i)^k$之积\n\n然而这样还不够，因为可能根本不存在$A,C$，不存在$A$或者$C$的答案为$2^m$，同时不存在$A,C$的答案为$1^m$，容斥一下即可","tags":["default tag"],"categories":["default category"]},{"title":"Codechef Oct Chanllenge Queries on Matrix-JIIT ","url":"/articles/2020/10/26/c77625a4.html","content":"# Codechef Oct chanllenge Queries on Matrix-JIIT \n\n首先发现矩阵的两个维度显然是互不相干的，假设最后操作后有$x$列被操作奇数次，$y$行操作奇数次\n\n那么最后为奇数的格子个数就是$x(m-y)+(n-x)y$\n\n考虑求出$q$操作后有$x$个位置被操作奇数次的方案数\n\n考虑一个Naive的$dp$，令$dp_{i,j}$为操作$i$次后有$j$位置操作奇数的方案数，显然得到转移为\n\n$dp_{i,j}\\cdot j\\rightarrow dp_{i+1,j-1}$\n\n$dp_{i,j}\\cdot (n-j)\\rightarrow dp_{i+1,j+1}$\n\n直接$dp$复杂度为$O(nq)$，用矩阵优化复杂度为$O(n^3\\log q)$\n\n没有考虑过求向量列的现行递推式？说不定暴力求递推然后。。。\n\n## $O(n^3)$\n\n~~由于笔者不会数学，所以~~考虑一个非常暴力非常直观的理解，可以完全抛开组合意义\n\n每次是挑选一个位置异或上1，用形式幂级数可能比较蛋疼，不如直接搞成集合幂级数\n\n即令集合$S$包含所有被操作奇数次的位置，用一个多项式$F=\\sum_S a_S x^S$表示答案\n\n那么转移多项式即为$F=\\sum_{i=1}^{n} x^{\\lbrace i \\rbrace}$，转移运算为集合对称差运算~~(哎就是异或)~~\n\n那么实际就是要求出$F^q$，可以直接用$\\text{FWT}$优化，先$\\text{FWT}$，然后求出每一项的$q$次幂，然后$\\text{FWT}$回来\n\n~~(这样不是$n2^n$的吗)~~\n\n显然的可以发现，$F^i$的任意位置系数$[x^S]F^i$只与$|S|$有关，所以实际上只需要存下含有$0,1,2\\cdots,n$个元素的项的系数即可\n\n考虑在这样的多项式上模拟原先的$\\text{FWT}$过程\n\n--------\n\n按照快速沃尔什变换的式子，令$G=\\text{FWT(F)}=\\sum_{S}x^S \\sum_{T}(-1)^{|S\\cap T|}\\cdot  [x^T]F $\n\n考虑枚举$|S|,|T|,|S\\cap T|$，然后组合数计算系数，令$F_i$表示$[x^S]F(|S|=i)$\n\n则有{%raw%}$\\begin{aligned} G_i=\\sum_{j}F_j\\sum_k C_i^k\\cdot C_{n-i}^{j-k}(-1)^{k}\\end{aligned}${%endraw%}，其中$C_{n-i}^{j-k}$表示从不相交的部分里选出$j$中剩下的元素\n\n按照该式即可完成$O(n^3)$模拟$\\text{FWT}$，注意$\\text{IFWT}$时需要除掉$2^n$\n\n算上快速幂复杂度应为$O(n^3+n\\log q)$\n\n## $O(n^2\\log n)$\n\n用$\\text{NTT}$优化上式\n\n## $O(n^2)$\n\n依然考虑上面$\\text{FWT}$的转移式，发现$i$项得到$j$项的贡献为一个常数，考虑直接计算这个常数$W_{i,j}=\\sum_k C_i^k\\cdot C_{n-i}^{j-k}(-1)^{k}$\n\n我们知道组合数就是二项展开的结果，所以发现实际就是$W_{i,j}=[x^j] (-x+1)^i\\cdot (x+1)^{n-i}$\n\n该式可以$O(n^2)$按照$i$递推求出，每次乘上一个$\\frac{1-x} {1+x}$即可\n\n实际复杂度为$O(n^2+n\\log q)$\n\n实际上应该还可以处理一些稍微复杂点的问题，比如每次可以操作若干个位置\n\n不知道能否优化到$n^2$以下\n\n\n\n```cpp\n// NTT Version\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ldb;\ntypedef pair <int,int> Pii;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nbool Mbe;\n\nconst int N=2050,P=998244353;\n\nint n,m,Z; ll k;\nint A[N],B[N];\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nint C[N][N];\nint rev[N],T[N],IT[N];\nvoid NTT(int n,int *a,int f){\n\trep(i,0,n-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n\tstatic int e[N>>1];\t\n\tfor(reg int i=e[0]=1;i<n;i<<=1) {\n\t\tll t=f==1?T[i]:IT[i];\n\t\t//qpow(f==1?3:(P+1)/3,(P-1)/i/2);\n\t\tfor(reg int j=i-2;j>=0;j-=2) e[j+1]=t*(e[j]=e[j>>1])%P;\n\t\tfor(reg int l=0;l<n;l+=i*2) {\n\t\t\tfor(reg int j=l;j<l+i;++j) {\n\t\t\t\treg int t=1ll*a[j+i]*e[j-l]%P;\n\t\t\t\ta[j+i]=a[j]-t,Mod2(a[j+i]);\n\t\t\t\ta[j]+=t,Mod1(a[j]);\n\t\t\t}\n\t\t}\n\t}\n\tif(f==-1) {\n\t\tll base=qpow(n);\n\t\trep(i,0,n-1) a[i]=a[i]*base%P;\n\t}\n}\n\nint Init(int n){\n\tint R=1,cc=-1;\n\twhile(R<=n) R<<=1,cc++;\n\trep(i,1,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<cc);\n\treturn R;\n}\n\n\nint mk1[N],mk2[N];\nvoid FWT(int n,int *A,int *B,int f,int *mk){\n\t\tstatic int X[N],Y[N];\n\t\trep(i,0,n) {\n\t\t\tmemset(X,0,sizeof X),memset(Y,0,sizeof Y);\n\t\t\trep(k,0,i) X[i-k]=(k&1)?P-C[i][k]:C[i][k];\n\t\t\trep(j,0,n) Y[j]=A[j];\n\t\t\tint R=Init(n+i+1);\n\t\t\tNTT(R,X,1),NTT(R,Y,1);\n\t\t\trep(j,0,R-1) X[j]=1ll*X[j]*Y[j]%P;\n\t\t\tNTT(R,X,-1);\n\t\t\trep(j,0,n-i) B[i]=(B[i]+1ll*C[n-i][j]*X[i+j])%P;\n\t\t}\n}\n\nvoid Solve(int n,int *A,int *mk) {\n\tstatic int X[N],Y[N];\n\tmemset(X,0,sizeof X),memset(Y,0,sizeof Y);\n\tX[1]=1,FWT(n,X,Y,1,mk);\n\trep(i,0,n) Y[i]=qpow(Y[i],k);\n\tmemset(X,0,sizeof X);\n\tFWT(n,Y,X,2,mk);\n\tll base=qpow(qpow(2,n),P-2);\n\trep(i,0,n) A[i]=X[i]*base%P*C[n][i]%P;\n}\n\n\nbool Med;\nint main(){\n\t//fprintf(stderr,\"%.2lf\\n\",(&Med-&Mbe)/1024.0/1024.0);\n\tfreopen(\"clone.in\",\"r\",stdin),freopen(\"clone.out\",\"w\",stdout);\n\trep(i,0,N-1) rep(j,C[i][0]=1,i) C[i][j]=(C[i-1][j-1]+C[i-1][j])%P;\n\tfor(int i=1;i<N;i<<=1) {\n\t\tT[i]=qpow(3,(P-1)/i/2);\n\t\tIT[i]=qpow((P+1)/3,(P-1)/i/2);\n\t}\n\tscanf(\"%d%d%lld%d\",&n,&m,&k,&Z);\n\trep(i,0,n) rep(j,0,m) {\n\t\tif(i*(m-j)+j*(n-i)!=Z) continue;\n\t\tmk1[i]=1,mk2[j]=1;\n\t}\n\tSolve(n,A,mk1),Solve(m,B,mk2);\n\tint ans=0;\n\trep(i,0,n) rep(j,0,m) {\n\t\tif(i*(m-j)+j*(n-i)!=Z) continue;\n\t\tans=(ans+1ll*A[i]*B[j])%P;\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n\n\n// n^2\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nconst int N=2050,P=998244353;\n\nint n,m,Z; ll k;\nint A[N],B[N];\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint C[N][N],W[N][N],mk1[N],mk2[N];\n\nvoid Solve(int n,int *A,int *mk) {\n\tstatic int X[N],Y[N];\n\trep(i,0,n) W[0][i]=C[n][i];\n\trep(i,1,n) {\n\t\trep(j,0,n) W[i][j]=W[i-1][j]-(j?W[i][j-1]:0),Mod2(W[i][j]);\n\t\tdrep(j,n,0) W[i][j]=(j?-W[i][j-1]:0)+W[i][j],Mod2(W[i][j]);\n\t}\n\n\tmemset(Y,0,sizeof Y);\n\trep(i,0,n) X[i]=qpow(W[i][1],k);\n\trep(i,0,n) if(mk[i]) rep(j,0,n) Y[i]=(Y[i]+1ll*W[i][j]*X[j])%P;\n\tll base=qpow(qpow(2,n),P-2);\n\trep(i,0,n) A[i]=Y[i]*base%P*C[n][i]%P;\n}\n\nint main(){\n\tfreopen(\"clone.in\",\"r\",stdin),freopen(\"clone.out\",\"w\",stdout);\n\tscanf(\"%d%d%lld%d\",&n,&m,&k,&Z);\n\trep(i,0,max(n,m)) rep(j,C[i][0]=1,i) C[i][j]=C[i-1][j-1]+C[i-1][j],Mod1(C[i][j]);\n\trep(i,0,n) rep(j,0,m) {\n\t\tif(i*(m-j)+j*(n-i)!=Z) continue;\n\t\tmk1[i]=mk2[j]=1;\n\t}\n\tSolve(n,A,mk1),Solve(m,B,mk2);\n\tint ans=0;\n\trep(i,0,n) rep(j,0,m) {\n\t\tif(i*(m-j)+j*(n-i)!=Z) continue;\n\t\tans=(ans+1ll*A[i]*B[j])%P;\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","各大OJ","Codechef"],"categories":["题解"]},{"title":"「PA 2019」Szprotki I Szczupaki","url":"/articles/2020/10/02/733edfb3.html","content":"# 「PA 2019」Szprotki i szczupaki\n\n根据题意模拟，得到一种浅显的贪心方法是: 每次选择能吃的最大的一个吃掉\n\n如果用set维护，就能得到一个$O(n^2\\log n)$的算法!\n\n考虑用加速这个贪心:\n\n设当前重量为$now$，目标是$des$\n\n每次找到存在$\\ge now$的最小的一条鱼$nxt$\n\n那么这一次决策的目标就是吃最少的鱼让自己能够吃掉$nxt$或者直接达到$des$\n\n在达到这一次的决策目标之前，能够吃的鱼的集合都是一样的\n\n那么就可以找到最短的一段以$now-1$为右端点的区间使得区间的和达到目标\n\n发现每做一次决策之后，下一次吃一条鱼就会翻倍，所以只有$\\log 10^{18}$次决策\n\n那么考虑如何用数据结构维护这个目标\n\n注意一个比较难维护的问题，每次决策之后，被吃掉的鱼应当**暂时消失**\n\n暂时消失的问题，常见的思路可能是:可持久化 或者 删除之后存下来回撤\n\n### 平衡树\n\n涉及到插入，删除，二分区间，删除区间和复原区间\n\n可以用$\\text{Splay}$或者非旋$\\text{Treap}$维护这个问题\n\n复原区间的过程可以写成一个伪平衡树合并的样子\n\n~~非常慢~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef pair <int,int> Pii;\n#define mp make_pair\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,const T &b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,const T &b){ ((a<b)&&(a=b)); }\n \nchar IO;\ntemplate <class T=int> T rd(){\n    T s=0; int f=0;\n    while(!isdigit(IO=getchar())) if(IO=='-') f=1;\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return f?-s:s;\n}\n \nconst int N=4e5+10;\nconst ll U=1e12;\n \nint n,m;\nint rt,c[N],ls[N],rs[N],key[N],ma[N],mi[N];\nll s[N],val[N];\n \nint cmp(int x,int y){ return val[x]!=val[y]?val[x]<val[y]:x>y; }\nvoid Up(int p) {\n    s[p]=s[ls[p]]+s[rs[p]]+val[p];\n    c[p]=c[ls[p]]+c[rs[p]]+1;\n    ma[p]=mi[p]=p;\n    if(ma[ls[p]] && cmp(ma[p],ma[ls[p]])) ma[p]=ma[ls[p]];\n    if(ma[rs[p]] && cmp(ma[p],ma[rs[p]])) ma[p]=ma[rs[p]];\n    if(mi[ls[p]] && cmp(mi[ls[p]],mi[p])) mi[p]=mi[ls[p]];\n    if(mi[ls[p]] && cmp(mi[ls[p]],mi[p])) mi[p]=mi[rs[p]];\n}\nvoid Show(int x) {\n    if(ls[x]) Show(ls[x]);\n    printf(\"(%d,%lld,%lld) \",x,val[x],s[x]);\n    if(rs[x]) Show(rs[x]);\n}\n \n \nint Union(int x,int y) {\n    if(!x || !y) return x|y;\n    if(key[x]<key[y]) return rs[x]=Union(rs[x],y),Up(x),x;\n    return ls[y]=Union(x,ls[y]),Up(y),y;\n}\n \nPii Split(int x,int k) {\n    if(c[x]<=k) return mp(x,0);\n    if(!x || !k) return mp(0,x);\n    if(c[ls[x]]+1<=k) {\n        Pii y=Split(rs[x],k-c[ls[x]]-1);\n        return rs[x]=y.first,Up(x),mp(x,y.second);\n    } else {\n        Pii y=Split(ls[x],k);\n        return ls[x]=y.second,Up(x),mp(y.first,x);\n    }\n}\nPii Split2(int x,int k) {\n    if(!x) return mp(0,0);\n    if(cmp(ma[x],k)) return mp(x,0);\n    if(cmp(k,mi[x])) return mp(0,x);\n    if(cmp(x,k)) {\n        Pii y=Split2(rs[x],k);\n        return rs[x]=y.first,Up(x),mp(x,y.second);\n    } else {\n        Pii y=Split2(ls[x],k);\n        return ls[x]=y.second,Up(x),mp(y.first,x);\n    }\n}\nPii Split3(int x,ll k) {\n    if(!x) return mp(0,0);\n    if(s[x]<=k) return mp(0,x);\n    if(s[rs[x]]>=k) {\n        Pii y=Split3(rs[x],k);\n        return rs[x]=y.first,Up(x),mp(x,y.second);\n    } else {\n        Pii y=Split3(ls[x],k-s[rs[x]]-val[x]);\n        return ls[x]=y.second,Up(x),mp(y.first,x);\n    }\n}\n \nvoid Insert(){\n    val[++n]=rd<ll>(),s[n]=val[n],ma[n]=mi[n]=n,c[n]=1,key[n]=rand();\n    Pii t=Split2(rt,n); \n    rt=Union(Union(t.first,n),t.second);\n}\nvoid Erase() {\n    Pii x=Split2(rt,0);\n    Pii y=Split(x.second,1);\n    rt=Union(x.first,y.second);\n}\n \nint T[N],cnt;\nint main(){\n    rep(i,1,rd()) Insert();\n    rep(kase,1,rd()) {\n        int opt=rd();\n        if(opt==2) Insert();\n        else if(opt==3) val[0]=rd<ll>()-1,Erase();\n        else {\n            ll now=rd<ll>(),des=rd<ll>(),ans=cnt=0;\n            while(now<des) {\n                val[n+1]=now;\n                Pii x=Split2(rt,n+1);\n                ll nxt=x.second?val[mi[x.second]]+1:1e18;\n                cmin(nxt,des);\n                ll d=nxt-now;\n                Pii y=Split3(x.first,d);\n                now+=s[y.second],ans+=c[y.second];\n                rt=Union(y.first,x.second);\n                T[++cnt]=y.second;\n                if(now<nxt) break;\n            }\n            drep(i,cnt,1) {\n                Pii x=Split2(rt,T[i]); \n                rt=Union(Union(x.first,T[i]),x.second);\n            }\n            if(now>=des) printf(\"%lld\\n\",ans);\n            else puts(\"-1\");\n        }\n    }\n}\n```\n\n## 线段树\n\n离线之后写，让每个位置只包含一个数会更好写\n\n关于用线段树维护暂时删除的问题，有很多写法\n\n1.强行标记，把被标记的节点全部存下来然后复原\n\n2.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「USACO 2020 US Open Platinum」Exercise","url":"/articles/2020/09/30/c1ba6452.html","content":"# 「USACO 2020 US Open Platinum」Exercise\n\n做法与模数是否是质数无关\n\n问题可能比较复杂，需要多步分析\n\n1.对于一个已知的排列\n\n显然这样的置换会构成若干个环，设每个环长度为$a_i,i\\in [1,m]$，显然答案就是$lcm(a_i)$\n\n2.对于已知的$a_i$序列(注意这里说的是有序的)，计算其方案数\n\n考虑已经排列的个数为$i$，加入一个环大小为$j$\n\n为了避免重复，应当固定这个环的初始位置为1号点，其余位置按照原先顺序插入\n\n则方案数可以分为两部分考虑:\n\n2-1.环内排列，固定的环首不可排列，即$(j-1)!$\n\n2-2.剩下的$j-1$一个点位置未知，从未固定的$i+j-1$个点中选择\n\n即$C(i+j-1,j-1)$\n\n所以就是$C(i+j-1,j-1)(j-1)!=\\frac{(i+j-1)!} {i!}$\n\n归纳一下，发现更形象的描述就是{%raw%}$\\begin{aligned}\\frac{n!} {\\prod_{i=1}^{m} (\\sum_{j=1}^i a_j)}\\end{aligned}${%endraw%}\n\n也就是每次除掉转移时的大小，将$n!$分成若干段，这似乎有利于理解下面的dp优化\n\n\n\n3.计算$lcm$之积\n\n考虑对于每个质因数计算其出现的幂次，注意这个幂次是对于$\\varphi$取模的\n\n原先是求恰好包含$x^k$的方案数，得到的$dp$不好优化，考虑转换为: \n\n求质因数$x$出现在答案里的幂次$\\ge k$的方案数$F_k$，答案就是$x^{\\sum F_k}$\n\n## Solution 1\n\n那么反向求解，令$dp_i$表示当前已经确定了$i$个点，没有出现$x^k$倍数大小的联通块\n\n暴力转移，枚举$i$从所有$x^k\\not|j$转移过来即可，单次求解复杂度为$O(n^2)$，不可行\n\n优化1:\n\n考虑分解系数$\\frac{(i+j-1)!} {i!}$，累前缀和，对于$j$为$x^k$倍数的情况枚举减掉\n\n这样单次求解复杂度为$O(\\frac{n^2} {x^k})$，总复杂度为$O(n^2\\ln n)$，且不好处理阶乘逆元\n\n优化2:\n\n不枚举$x^i$的倍数，直接再用一个前缀和数组$s_i$记录下来，让$s_i$从$s_{i-x^k}$转移过来即可\n\n如何将系数$\\frac{(i+j-1)!} {i!}$分解？\n\n每次$i+j$增大1，就多乘上一个$i+j$即可\n\n当$s_{i}$从$s_{i-x^k}$转移过来时，需要补上{%raw%}$\\begin{aligned}\\prod_{j=i-x^k+1}^{i-1}j\\end{aligned}${%endraw%}\n\n也就是模拟了上面提到的把$n!$分段的过程\n\n这样就去掉了阶乘逆元的求解\n\nTips:发现需要预处理$T_{i,j}=\\prod_{k=i}^j k$，可以滚动一下会快一点，内存为$O(n)$\n\n$$ \\ $$\n\n不同的$x^i$上限为$O(n)$种，实际大概可能是$O(\\pi(n)\\log \\log n=\\frac{n\\log \\log n} {\\log n})$?\n\n因此复杂度为$O(n^2)$\n\n可以看到代码还是很简单的\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define Mod2(x) ((x<0)&&(x+=P2))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n \nconst int N=7510;\n \nint n,P,P2;\nint mk[N];\nint s[N],T[N],dp[N];\n \nll qpow(ll x,ll k=P-2) {\n    ll res=1;\n    for(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n    return res;\n}\n \n \nint main(){\n    scanf(\"%d%d\",&n,&P),P2=P-1;\n    int ans=1;\n    rep(i,2,n) if(!mk[i]) {\n        for(int j=i+i;j<=n;j+=i) mk[j]=1;\n        for(int x=i;x<=n;x*=i) mk[x]=i;\n    }\n    rep(i,1,n) T[i]=1;\n    int r=1;\n    rep(i,1,n) r=1ll*r*i%P2;\n    rep(x,2,n) {\n        rep(j,1,n-x+1) T[j]=1ll*T[j]*(j+x-2)%P2;\n        // 滚动求解区间乘积\n        if(mk[x]<=1) continue;\n        dp[0]=1,s[0]=1;\n        int sum=1;\n \n        rep(i,1,n) {\n            s[i]=0;\n            if(i>=x) s[i]=1ll*s[i-x]*T[i-x+1]%P2;\n            dp[i]=sum-s[i]; Mod2(dp[i]);\n            s[i]=(1ll*s[i]*i+dp[i])%P2;\n            sum=(1ll*sum*i+dp[i])%P2;\n        }\n        ans=1ll*ans*qpow(mk[x],P2+r-dp[n])%P;\n    }\n    printf(\"%d\\n\",ans);\n}\n```\n\n\n\n## Solution 2\n\n为了便于表达，设满足条件为至少出现一个$x$的倍数\n\n实际用min-max容斥确实比较好理解，设对于集合$S$，求其最大值\n\n{%raw%}$\\begin{aligned} \\max \\lbrace S\\rbrace =\\sum_{T\\sube S} (-1)^{|T|+1}\\min\\lbrace T \\rbrace\\end{aligned}${%endraw%}\n\n简要证明的话:\n\n把$S$中的元素倒序排成一排分别为$S_i$\n\n对于$S_1$即最大值，显然被计算一次\n\n对于剩下的值$S_i(i>1)$，则它作为最小值产生贡献意味着选的数都在$1-i$内，显然有$2^{i-1}$次为奇数集合大小，$2^{i-1}$为偶数集合大小，两部分抵消\n\n$$ \\ $$\n\n要计算最大值为1的方案数，那么就要计算最小值为1的子集方案数\n\n考虑强制一个子集中每一个环大小均为$x$的倍数，设选出了$i$个这样的环，总大小为$j$的方案数为$dp_{i,j}$\n\n则实际对答案的贡献还要考虑这样的子集出现的次数\n\n考虑选择子集的位置，以及剩下的$n-j$个点任意排布，方案数应该为$C(n,j)\\cdot (n-j)!=\\frac{n!} {j!}$\n\n如果真的用$dp_{i,j}$，复杂度显然太高，考虑$i$这一维的影响只在于系数$(-1)^{|T|+1}$，可以直接在转移过程中解决\n\n因此可以直接记录大小$i$，从前面转移过来\n\n(可以看到依然需要访问上面提到的$T_{i,j}$，要滚动的话还会更难处理)\n\n这样的$dp$状态有$\\frac{n} {x}$种，转移为$(\\frac{n} {x})^2$，最后统计复杂度为$O(\\frac{n} {x})$\n\n实际上这样的复杂度已经足够了，是$O(\\sum \\frac{n^2} {i^2}\\approx n^2)$\n\n以下是$O(n^2)$内存的代码\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,b) for(int i=a;i<=b;++i)\n#define drep(i,a,b) for(int i=a;i>=b;--i)\ntypedef long long ll;\n\nconst int N=7510;\n\nint n,P,P2,T[N][N],mk[N],dp[N];\nll qpow(ll x,ll k) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint Calc(int x){\n\tint m=n/x,s=P2-1;\n\trep(i,1,m) {\n\t\ts=1ll*s*T[(i-1)*x+1][i*x-1]%P2;\n\t\tdp[i]=P2-s;\n\t\ts=(1ll*s*i*x+dp[i])%P2;\n\t}\n\tint ans=0;\n\trep(i,1,m) ans=(ans+1ll*dp[i]*T[i*x+1][n])%P2;\n\treturn ans;\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&P),P2=P-1;\n\trep(i,2,n) if(!mk[i]) {\n\t\tfor(int j=i;j<=n;j+=i) mk[j]=1;\n\t\tfor(int j=i;j<=n;j*=i) mk[j]=i;\n\t}\n\trep(i,1,n+1){\n\t\tT[i][i-1]=1;\n\t\trep(j,i,n) T[i][j]=1ll*T[i][j-1]*j%P2;\n\t}\n\tint ans=1;\n\trep(i,2,n) if(mk[i]>1) ans=ans*qpow(mk[i],Calc(i))%P;\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n$$ \\ $$\n\n### 最终优化\n\n可以看到，这个做法和Sol1的转移有十分的相同之处，因此考虑用同样的方法优化掉\n\n但是预处理系数的部分依然是$O(n^2)$的，如何解决呢?\n\n1.线段树大法\n\n预处理复杂度为$O(n)$，查询复杂度为$O(\\log n)$，总复杂度$O(n\\log^2 n)$\n\n空间复杂度为$O(n)$\n\nOh这个代码是ZKW线段树\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,b) for(int i=a;i<=b;++i)\ntypedef long long ll;\n\nconst int N=7510;\n\nint n,P,P2;\nstruct Tree {\n\tint s[N<<2],bit;\n\tvoid Build() {\n\t\tfor(bit=1;bit<=n;bit<<=1);\n\t\trep(i,1,n) s[i+bit]=i;\n\t\tfor(int i=bit;i>=1;--i) s[i]=1ll*s[i<<1]*s[i<<1|1]%P2;\n\t}\n\tint Que(int l,int r){\n\t\tif(l>r) return 1;\n\t\tif(l==r) return l;\n\t\tint res=1;\n\t\tfor(l+=bit-1,r+=bit+1;l^r^1;l>>=1,r>>=1){\n\t\t\tif(~l&1) res=1ll*res*s[l^1]%P2;\n\t\t\tif(r&1) res=1ll*res*s[r^1]%P2;\n\t\t}\n\t\treturn res;\n\t}\n} T;\n\nint mk[N];\nll qpow(ll x,ll k) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nint dp[N];\nint Calc(int x){\n\tint m=n/x,s=P2-1;\n\trep(i,1,m) {\n\t\ts=1ll*s*T.Que((i-1)*x+1,i*x-1)%P2;\n\t\tdp[i]=P2-s;\n\t\ts=(1ll*s*i*x+dp[i])%P2;\n\t}\n\tint ans=0;\n\trep(i,1,m) ans=(ans+1ll*dp[i]*T.Que(i*x+1,n))%P2;\n\treturn ans;\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&P),P2=P-1;\n\tT.Build();\n\trep(i,2,n) if(!mk[i]) {\n\t\tfor(int j=i;j<=n;j+=i) mk[j]=1;\n\t\tfor(int j=i;j<=n;j*=i) mk[j]=i;\n\t}\n\tint ans=1;\n\trep(i,2,n) if(mk[i]>1) ans=ans*qpow(mk[i],Calc(i))%P;\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n2.模数分解+CRT(Chinese Remainder Theory)\n\n分解后，可以用模逆元处理，然后就直接做，最后CRT合并一下，其实我并不会实现。。。\n\n\n\n3.猫树~~(嘿嘿)~~\n\n这是一个$O(n\\log n)$预处理，$O(1)$查询的数据结构，空间复杂度为$O(n\\log n)$\n\n因此复杂度为$O(n\\log n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,b) for(int i=a;i<=b;++i)\n#define drep(i,a,b) for(int i=a;i>=b;--i)\ntypedef long long ll;\n\nconst int N=7510;\n\nint n,P,P2;\nstruct SuckCat{\n\tint s[14][8200],Log[8200],bit;\n\tvoid Build() {\n\t\tfor(bit=1;bit<=n;bit<<=1);\n\t\trep(i,2,bit) Log[i]=Log[i>>1]+1;\n\t\tfor(int l=1,d=0;l*2<=bit;l<<=1,d++){\n\t\t\tfor(int i=l;i<=bit;i+=l*2){\n\t\t\t\ts[d][i-1]=i-1,s[d][i]=i;\n\t\t\t\tdrep(j,i-2,i-l) s[d][j]=1ll*s[d][j+1]*j%P2;\n\t\t\t\trep(j,i+1,i+l-1) s[d][j]=1ll*s[d][j-1]*j%P2;\n\t\t\t}\n\t\t}\n\t}\n\tint Que(int l,int r){\n\t\tif(l>r) return 1;\n\t\tif(l==r) return l;\n\t\tint d=Log[l^r];\n\t\treturn 1ll*s[d][l]*s[d][r]%P2;\n\t}\n} T;\n\nint mk[N];\nll qpow(ll x,ll k) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nint dp[N];\nint Calc(int x){\n\tint m=n/x,s=P2-1;\n\trep(i,1,m) {\n\t\ts=1ll*s*T.Que((i-1)*x+1,i*x-1)%P2;\n\t\tdp[i]=P2-s;\n\t\ts=(1ll*s*i*x+dp[i])%P2;\n\t}\n\tint ans=0;\n\trep(i,1,m) ans=(ans+1ll*dp[i]*T.Que(i*x+1,n))%P2;\n\treturn ans;\n}\n\nint main(){\n\tscanf(\"%d%d\",&n,&P),P2=P-1;\n\tT.Build();\n\trep(i,2,n) if(!mk[i]) {\n\t\tfor(int j=i;j<=n;j+=i) mk[j]=1;\n\t\tfor(int j=i;j<=n;j*=i) mk[j]=i;\n\t}\n\tint ans=1;\n\trep(i,2,n) if(mk[i]>1) ans=ans*qpow(mk[i],Calc(i))%P;\n\tprintf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","USACO"],"categories":["题解"]},{"title":"Sprinklers 2  Return of the Alfalfa P","url":"/articles/2020/09/27/b6c8a0c4.html","content":"# Sprinklers 2: Return of the Alfalfa P\n\n条件是: 每个点都要被覆盖，且不能被两种覆盖，那么最后覆盖的情况一定是形如下图的\n\n![](http://10.220.121.203/judge/tutorial/php/../uploads/20200927043851_95341.png)\n\n其中红色和黄色的点表示**关键的**覆盖点，其他点按照其所属的颜色可以选择放或者不放\n\n那么考虑从上到下，依次对于每一层$dp$竖线的位置，那么有两种转移方法\n\n1.保留上层竖线，两边空白位置的可行点用2的幂次乘进答案即可\n\n2.将当前层的竖线右移，必须选择两个位置，其他位置依然按照2的幂次加入答案\n\n直接转移是$O(n^3)$的，对于第2中转移应用前缀和优化即可做到$O(n^2)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#pragma GCC optimize(2)\ntypedef double db;\ntypedef long double ldb;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair <int,int> Pii;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,const T &b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,const T &b){ ((a<b)&&(a=b)); }\n \nchar IO;\ntemplate <class T=int> T rd(){\n    T s=0; int f=0;\n    while(!isdigit(IO=getchar())) if(IO=='-') f=1;\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return f?-s:s;\n}\n \nconst int N=2e3+10,P=1e9+7;\n \nint n;\nchar A[N][N];\n \nint dp[N][N];\nint c[N][N],rc[N][N]; \nint Pow[N];\n \nint main(){\n    n=rd();\n    rep(i,1,n) scanf(\"%s\",A[i]+1);\n    rep(i,1,n) rep(j,1,n) c[i][j]=c[i][j-1]+(A[i][j]=='.');\n    rep(i,1,n) drep(j,n,1) rc[i][j]=rc[i][j+1]+(A[i][j]=='.');\n    rep(i,Pow[0]=1,n) Pow[i]=Pow[i-1]*2%P;\n    dp[0][0]=1;\n    rep(i,1,n) {\n        int s=0;\n        rep(j,0,n) {\n            dp[i][j]=(dp[i][j]+1ll*dp[i-1][j]*Pow[c[i][j]+rc[i-1][j+1]])%P;\n            // 空白位置的可行点按照2的幂次加入答案\n            if(A[i][j]!='W') dp[i][j]=(dp[i][j]+1ll*s*(j?Pow[c[i][j]-1]:1))%P;\n            //把两个强制选择的关键点分开，在累入前缀和 和 从前缀和中拿出时考虑即可\n            \n            if(A[i-1][j+1]!='W') s=(s+1ll*dp[i-1][j]*(i>1&&j<n?Pow[rc[i-1][j+1]-1]:1))%P;\n        }\n    }\n    int ans=0;\n    rep(i,0,n) if(A[n][i+1]!='W') ans=(ans+1ll*(i<n?Pow[rc[n][i+1]-1]:1)*dp[n][i])%P;\n    printf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"Equilateral Triangles","url":"/articles/2020/09/25/4e5cd8bd.html","content":"# Equilateral Triangles\n\n题意: 求所有三个点哈密顿距离相等的无序三元点对个数\n\n推论1: 到平面中一点$(x,y)$哈密顿距离为$d$的点，构成一个以$(x,y)$为中心，$d$为半对角线长的菱形\n\n菱形不好搞，转一下，令旋转后的点$x'=x+y,y'=x-y$，(也就是曼哈顿距离转切比雪夫距离)\n\n这样得到的就是一个正方形了\n\n推论2: 选出的三点中，一定存在两个点$x$或者$y$坐标相同\n\n如果选出点$A,B$不满足，由下图可以看到，可行的部分(就是相交部分$C1,C2$)也必然满足\n\n![te1.png](https://i.loli.net/2020/09/25/QgiP6kuB8JaH9to.png)\n\n接下来以$x$相同为例，枚举点$A,B$，设其距离为$d$\n\n![te2.png](https://i.loli.net/2020/09/25/zAwO29WRSK5sXnL.png)\n\n可以看到比较显然就是两条红色的相交线段，$O(n^3)$枚举$A,B$两点后，直接用前缀和维护即可\n\n对于$x$相同，对于$y$相同分别做一次即可，注意考虑的时候不要把$x,y$都有相同的算两次\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#pragma GCC optimize(2)\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n\nconst int N=610;\n\nint n;\nchar A[N][N],B[N][N];\nint S[N][N];\nint D[N],C;\n\nint main() {\n\tscanf(\"%d\",&n);\n\trep(i,1,n) {\n\t\tscanf(\"%s\",A[i]+1);\n\t\trep(j,1,n) if(A[i][j]=='*') B[i+j][i-j+n]=1;\n\t}\n\tint ans=0;\n\trep(i,1,n*2) rep(j,1,n*2) S[i][j]=S[i][j-1]+B[i][j];\n\trep(i,1,n*2) {\n\t\tC=0;\n\t\trep(x,1,n*2) if(B[i][x]) D[++C]=x;\n\t\trep(a,1,C) rep(b,a+1,C) {\n\t\t\tint d=D[b]-D[a];\n\t\t\ti-d>=1 && (ans+=S[i-d][D[b]]-S[i-d][D[a]-1]);\n\t\t\ti+d<=n*2 && (ans+=S[i+d][D[b]]-S[i+d][D[a]-1]);\n\t\t}\n\t}\n\trep(i,1,n*2) rep(j,1,n*2) S[i][j]=S[i][j-1]+B[j][i];\n\trep(i,1,n*2) {\n\t\tC=0;\n\t\trep(x,1,n*2) if(B[x][i]) D[++C]=x;\n\t\trep(a,1,C) rep(b,a+1,C) {\n\t\t\tint d=D[b]-D[a];\n\t\t\ti-d>=1 && (ans+=S[i-d][D[b]-1]-S[i-d][D[a]]);\n\t\t\ti+d<=n*2 && (ans+=S[i+d][D[b]-1]-S[i+d][D[a]]);\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n}\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder"],"categories":["题解"]},{"title":"[USACO 2020 February Platinum]Help Yourself","url":"/articles/2020/09/25/11c9902.html","content":"# [USACO 2020 February Platinum]Help Yourself\n\n真的很套路。。。\n\n考虑将区间$(L_i,R_i)$按照左端点排序，依次考虑每个区间的贡献\n\n\n\n令$dp_i$表示当前所有选择的右端点中最大的为$i$时的方案数\n\n加入区间$(L,R)$时\n\n1.所有$i<L$的部分一定会断开成两个区间，转移时个数+1\n\n2.当$i\\ge L$时，$dp_i$向$dp_{\\max\\lbrace R,i\\rbrace}$转移，分两类讨论即可\n\n不考虑个数的问题，直接转移是$O(n^2)$的，但是可以用线段树优化到$n\\log n$\n\n(比较麻烦，需要实现区间查询，单点修改，区间乘法)\n\n考虑个数$k$次幂，一种暴力的办法是存下$dp_{i,j}$，但是转移会变成$O(n^2\\log n)$\n\n对于当前个数为$c$的情况，如果新增一个联通块，即变为$c+1$，答案由$c^k$ 变为$(c+1)^k$\n\n考虑直接用二项式定理展开这个式子，需要记录$c^i(i\\in [0,k])$的所有答案，再$O(k^2)$完成+1操作\n\n结合线段树，维护$nk$个值，复杂度为$O(n(k\\log n +k^2))$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair <int,int> Pii;\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=2e5+10,P=1e9+7;\n\nint n,k;\nPii A[N];\nint C[11][11];\nint s[N<<2][11],res[11];\nint t[N<<2];\nvoid Up(int p) {\n\trep(i,0,k) s[p][i]=s[p<<1][i]+s[p<<1|1][i],Mod1(s[p][i]);\n}\nvoid Down(int p) {\n\tif(t[p]==1) return;\n\tt[p<<1]=1ll*t[p<<1]*t[p]%P;\n\tt[p<<1|1]=1ll*t[p<<1|1]*t[p]%P;\n\trep(i,0,k) {\n\t\ts[p<<1][i]=1ll*s[p<<1][i]*t[p]%P;\n\t\ts[p<<1|1][i]=1ll*s[p<<1|1][i]*t[p]%P;\n\t}\n\tt[p]=1;\n}\n\nvoid Que(int p,int l,int r,int ql,int qr) {\n\tif(ql<=l && r<=qr) {\n\t\trep(i,0,k) res[i]+=s[p][i],Mod1(res[i]);\n\t\treturn;\n\t}\n\tDown(p);\n\tint mid=(l+r)>>1;\n\tif(ql<=mid) Que(p<<1,l,mid,ql,qr);\n\tif(qr>mid) Que(p<<1|1,mid+1,r,ql,qr);\n}\n\nvoid Upd(int p,int l,int r,int ql,int qr) {\n\tif(ql<=l && r<=qr) {\n\t\trep(i,0,k) s[p][i]*=2,Mod1(s[p][i]);\n\t\tt[p]*=2,Mod1(t[p]);\n\t\treturn;\n\t}\n\tDown(p);\n\tint mid=(l+r)>>1;\n\tif(ql<=mid) Upd(p<<1,l,mid,ql,qr);\n\tif(qr>mid) Upd(p<<1|1,mid+1,r,ql,qr);\n\tUp(p);\n}\nvoid Upd(int p,int l,int r,int x){\n\tif(l==r){\n\t\trep(i,0,k) s[p][i]+=res[i],Mod1(s[p][i]);\n\t\treturn;\n\t}\n\tDown(p);\n\tint mid=(l+r)>>1;\n\tx<=mid?Upd(p<<1,l,mid,x):Upd(p<<1|1,mid+1,r,x);\n\tUp(p);\n}\n\n\nint main(){\n\tn=rd(),k=rd();\n\trep(i,1,n) A[i].first=rd(),A[i].second=rd();\n\tsort(A+1,A+n+1);\n\trep(i,1,N*4-1) t[i]=1;\n\trep(i,0,k) rep(j,C[i][0]=1,i) C[i][j]=(C[i-1][j-1]+C[i-1][j])%P;\n\t\n\tres[0]=1;\n\tUpd(1,0,n*2,0);\n\n\trep(t,1,n) {\n\t\tint l=A[t].first,r=A[t].second;\n\t\tUpd(1,0,n*2,r,n*2);\n\t\t\n\t\tmemset(res,0,sizeof res);\n\t\tQue(1,0,n*2,0,l-1);\n\t\tdrep(i,k,0) rep(j,0,i-1) res[i]=(res[i]+1ll*C[i][j]*res[j])%P;\n\t\tUpd(1,0,n*2,r);\n\n\t\tmemset(res,0,sizeof res);\n\t\tQue(1,0,n*2,l,r-1);\n\t\tUpd(1,0,n*2,r);\n\t\t\n\t}\n\tprintf(\"%d\\n\",s[1][k]);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","USACO"],"categories":["题解"]},{"title":"美丽的桥梁","url":"/articles/2020/09/11/ec4a25b7.html","content":"# 美丽的桥梁\n\n可以得到一个Naive的暴力方法来判断在$(L,R)$上修桥是否合法:\n\n显然的性质: 如果有相交，则一定存在一个关键点相交\n\n设得到的圆半径为$r=\\frac{x_R-x_L} {2}$，圆心为$(x,y)=(\\frac{x_L+x_R} {2},h-r)$\n\n枚举每个$i\\in [L,R]$判断是否点$x_i,y_i$是否相交，如果相交，只需要满足\n\n$y_i>y$，且 其与圆心距离$>r$\n\n$$ \\ $$\n\n考虑优化判断，将生成的拱形分为左右两部分，分别考虑即可\n\n推论: 对于每个$L$，其左半边不相交的半径为描述为一个范围$[0,A_L]$\n\n同理的，对于每个$R$也是如此，能求得一个范围$[0,B_R]$\n\n考虑对于每个$L$，枚举每个$i>L$ 来求出$A_L$\n\n设半径为$r$，列出圆心与点$x_i,y_i$距离的表达式，必须满足距离$\\leq r$，就能得到一个二次方程\n\n二次方程的解集为$x_1,x_2$，但是实际上$[0,x_1]$这一段不满足$y_i>y$，因此也是合法的\n\n即将每次求得的$[0,x_2]$区间取交集即可\n\n复杂度为$O(n^2)$\n\n同理求得每个$B_R$\n\n考虑朴素的dp，令$dp_i$表示解决了$[1,i]$前缀的最小代价\n\n枚举$j$，$O(1)$判断$(i,j)$是否合法，然后进行转移\n\ntips: 题目的代价计算方法可能没讲清楚。。。\n\n复杂度为$O(n^2)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#pragma GCC optimize(2)\ntypedef double db;\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,const T &b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,const T &b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=1e4+10;\nconst db eps=1e-9;\nconst ll INF=4e18;\n\nint n,h,a,b;\nint X[N],Y[N];\ndb L[N],R[N];\ndb Sqr(db x){ return x*x; }\nll dp[N];\n\nint main(){\n\tn=rd(),h=rd(),a=rd(),b=rd();\n\trep(i,1,n) X[i]=rd(),Y[i]=rd();\n\trep(i,1,n) {\n\t\tL[i]=min((db)(X[n]-X[i])/2,(db)(h-Y[i]));\n\t\trep(j,i+1,n) {\n\t\t\tif(X[j]-X[i]>L[i]+eps) break;\n\t\t\tdb a=1,b=2*(X[i]-X[j]+Y[j]-h),c=Sqr(X[i]-X[j])+Sqr(Y[j]-h);\n\t\t\tdb d=sqrt(b*b-4*a*c);\n\t\t\tdb r=(-b+d)/(2*a);\n\t\t\tcmin(L[i],r);\n\t\t}\n\t\tL[i]*=2;\n\t}\n\trep(i,1,n) {\n\t\tR[i]=min((db)(X[i]-X[1])/2,(db)(h-Y[i]));\n\t\tdrep(j,i-1,1) {\n\t\t\tif(X[i]-X[j]>R[i]+eps) break;\n\t\t\tdb a=1,b=2*(X[j]-X[i]+Y[j]-h),c=Sqr(X[j]-X[i])+Sqr(Y[j]-h);\n\t\t\tdb d=sqrt(b*b-4*a*c);\n\t\t\tdb r=(-b+d)/(2*a);\n\t\t\tcmin(R[i],r);\n\t\t}\n\t\tR[i]*=2;\n\t}\n\tdp[1]=1ll*a*(h-Y[1]);\n\trep(i,2,n) {\n\t\tdp[i]=INF;\n\t\tdrep(j,i-1,1) {\n\t\t\tif(X[i]-X[j]>R[i]+eps) break;\n\t\t\tif(X[i]-X[j]>L[j]+eps) continue;\n\t\t\tcmin(dp[i],dp[j]+1ll*a*(h-Y[i])+1ll*(X[i]-X[j])*(X[i]-X[j])*b);\n\t\t}\n\t}\n\tif(dp[n]<INF) printf(\"%lld\\n\",dp[n]);\n\telse puts(\"impossible\");\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"何以伊名始","url":"/articles/2020/09/11/c91f3f73.html","content":"# 何以伊名始\n\n本题现已知四种做法，如果不会后缀系列结构可以直接看Solution4\n\n设初始树大小和查询总长均为$O(n)$\n\n### Solution1\n\n由于查询只有1e6，因此出现的不同查询串长度最多$\\sqrt {10^6}=1000$种\n\n考虑对于每一种做一次dfs，在$\\text{Hash Table}$中查询，复杂度为$O(n\\sqrt n)$\n\n### Solution2\n\n将树上节点后缀排序，然后每次插入需要询问的字符就二分后缀区间\n\n预处理复杂度为$O(n\\log n)$，查询涉及二分和倍增，复杂度为$O(n\\log ^2 n)$\n\n### Solution3\n\n给定的树看做trie树，可以对于trie树建广义后缀自动机，然后倒着让询问串去匹配，一旦失配答案为0，\n\n需要预处理$link$树的子树和，时间复杂度为$O(n)$，空间复杂度为$O(n|\\Sigma|)$\n\n### Solution4\n\n将询问的串倒着插入，构建AC自动机\n\n由于AC自动机预处理，时间空间复杂度为$O(n|\\Sigma|)$\n\n然后考虑对于树上每一个前缀在AC自动机上匹配，每次从父亲转移过来，复杂度为$O(n)$\n\n然后是常见的AC自动机操作，$fail$树上的子树累和即可\n\n需要询问离线，因此有一定局限性\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#pragma GCC optimize(2)\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\nchar IO;\nint rd(){\n\tint s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\n\nconst int N=1e6+10;\n\nint n,m,len,F[N],A[N];\nchar s[N],t[N];\nint nxt[N][26],fail[N],cnt,pos[N];\nint Q[N],L=1,R;\nvoid Build(){\n\trep(i,0,25) if(nxt[0][i]) Q[++R]=nxt[0][i];\n\twhile(L<=R) {\n\t\tint u=Q[L++];\n\t\trep(i,0,25) {\n\t\t\tint &v=nxt[u][i];\n\t\t\tif(v) fail[v]=nxt[fail[u]][i],Q[++R]=v;\n\t\t\telse v=nxt[fail[u]][i];\n\t\t}\n\t}\n}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,1,n) scanf(\"%c\",s+i),F[i]=rd();\n\trep(i,1,m) {\n\t\tscanf(\"%s\",t+1);\n\t\tint now=0;\n\t\tdrep(j,strlen(t+1),1) {\n\t\t\tint c=t[j]-'A';\n\t\t\tif(!nxt[now][c]) nxt[now][c]=++cnt;\n\t\t\tnow=nxt[now][c];\n\t\t}\n\t\tpos[i]=now;\n\t}\n\tBuild();\n\trep(i,1,n) A[F[i]=nxt[F[F[i]]][s[i]-'A']]++;\n\tdrep(i,R,1) A[fail[Q[i]]]+=A[Q[i]];\n\trep(i,1,m) printf(\"%d\\n\",A[pos[i]]);\n}\n\n```\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"COCI20162017 Contest 7 F","url":"/articles/2020/09/10/fa32eb3c.html","content":"# COCI20162017 Contest#7 F\n\n### [前置知识](https://www.cnblogs.com/chasedeath/p/13396877.html)\n\n沿用上面的定义，设字符串$S$的$\\text{border}$集合为$B(S)$\n\n考虑对于单串$S$求答案，设答案为$Ans$\n\n将所有可能出现的字符串分为两个集合$A,B$\n\n其中$A$为所有恰好出现$S$的字符串集合，$B$为所有还未出现匹配的字符串集合\n\n我们知道每个字符串出现有一定的概率，即为$\\frac{1} {n^{|T|} }$\n\n设$A$集合中所有长度为$i$的串出现的概率总和为$A_i$，同理得到$B_i$ \n\n$A$中的概率是不重复的，因为每个匹配过程只有一次会恰好匹配，因此可以得到 $\\sum A_i=1$\n\n(而$B$中每个不匹配的串概率会被算多次)\n\n最后的答案期望可以表示为\n\n1.每个匹配的串概率*匹配时串的长度之和，即$Ans=\\sum_i i\\cdot A_i$\n\n2.将匹配成功的长度，转化为匹配失败的次数之和(包含空串)，可以表示为$Ans=\\sum B_i$\n\n直接计算似乎比较麻烦\n\n$$ \\ $$\n\n考虑如果在$B$中所有字符串的后面接上一个原串$S$（同时概率乘上$\\frac{1} {n^{|S|} }$），那么得到的新字符串一定完成匹配\n\n但是实际上，这样的串并不一定完全合法，因为可能在更早的位置出现匹配\n\n由上面的定义，假设原先在$B$中的串为$T$，原先已经在$S$中匹配了$T'$作为前缀\n\n那么直接强行加上$S$后，如果$T'$会影响第一个出现匹配位置，设出现匹配时加入的字符串为$R$\n\n则显然满足: $R$即是$S$的一段前缀，又是$S$的一段后缀，也就是$R\\in B(S)$\n\n而剩下部分($|S|-|R|$)，实际上是无效的，因此概率会被算小了\n\n$$ \\ $$\n\n不妨设$B$集合接上一个$S$串得到的集合为$C$\n\n可以把$C$中的字符串，按照多余的部分$|S|-|R|$为多个部分$D_{R}$其中$R\\in B(S)$\n\n发现，实际上去掉多余的部分后，每个$D_R$集合就与$A$集合对应，但是多余部分的要乘回去\n\n即 $A_i=D_{|R|,i+|S|-|R|}\\cdot n^{|S|-|R|}$ (偏移多出的部分)\n\n由$B,C$的关系，有$\\sum_R D_{R,i}=C_i=B_i\\cdot \\frac{1} {n^{|S|} }$\n\n也就是$B_i\\frac{1} {n^{|S|} }=\\sum _R D_{R,i+|S|-|R|}=\\sum _R \\frac{A_{i+|S|-|R|} } {n^{|S|-|R|} }$\n\n即 $B_i=\\sum _R A_{i+|S|-|R|}n^{|R|}$\n\n将上式求和对于$i$求和，得到$\\sum B_i=\\sum_i\\sum_R A_{i+|S|-|R|}n^{|R|}$\n\n由于$\\sum  A_i=1$ ($\\sum A_i$和$\\sum A_{i+|S|-|R|}$等价)， 即\n\n$Ans=\\sum B_i=\\sum_{R\\in B(S)} n^{|R|}$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["COCI"],"categories":["题解"]},{"title":"COCI20162017 Contest 6 F ","url":"/articles/2020/09/10/7e45e64c.html","content":"# COCI20162017 Contest#6 F \n\n其实这个题不是很难的。。。\n\n设值域为$M$\n\n考虑如果没有幸运数的限制，那么从$A$变成$B$，实际上只与$\\frac{A} {B}$有关\n\n不妨令$dp_{i,j}$为从$i$走了$j$步变成1，显然这个$j$的最大值为$\\log M=19$，即$2^{19}$最多操作19次\n\n从$i$枚举倍数进行转移，同时也暴力处理每个数的因数个数，复杂度为$O(M\\ln M\\log M)$\n\n$$ \\ $$\n\n接下来考虑幸运数的限制\n\n推论: 最多只会在一个幸运数上停留\n\n如果经过多个，显然在代价最小的那个上面停留\n\n因此考虑枚举停留的幸运数$x$\n\n那么转移可以分为两步$\\frac{A} {x}$和$\\frac{x} {B}$，可以暴力合并两个$dp$数组，单次查询复杂度为$O(T\\cdot \\log^2 M)$\n\n合并得到的结果，可以描述为: \n\n可以在$x$上用$C(x)$的代价停留，并且其他部分的转移花了$j$的时间，$y$的代价\n\n如果考虑停留的时间，那么得到的答案显然是一条直线，斜率就是停留的代价\n\n关于一群直线，一群查询，不难想到可以斜率优化求解，这一部分复杂度为$O(T\\log M\\log (T\\log M)+m)$（排序复杂度）\n\n总复杂度可以认为就是$O(M\\log^2 M+Q(T\\log ^2 M+m))$\n\n斜率优化的实现可以参考代码\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#pragma GCC optimize(2)\ntypedef long long ll;\n#define reg register\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,const T &b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,const T &b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=1e6+10,INF=1e9;\n\nint n,m;\nint F[N],A[N],B[N];\nint L[N];\n// A: 因子个数\n// B: 将B变成1需要的最大步数\nint C[N],D[N];\nint dp[N][20];\n// 用了j步，将i变为1的最小代价\n\nstruct Node{ \n    // 描述一条直线\n\tll x,y;\n\t// 答案为 x*i+y\n\tll operator [](const ll i)const {\n\t\treturn i*x+y;\n\t} //求直线点值\n\tbool operator < (const Node __) const {\n\t\tif(x!=__.x) return x<__.x;\n\t\treturn y<__.y; //按照斜率排序\n\t}\n} U[N];\n\nint Uc,T[21],R[21];\n\nint main(){\n\trep(i,1,N-1) {\n\t\tA[i]++;\n\t\tfor(reg int j=i+i;j<N;j+=i) A[j]++,cmax(B[j],B[i]+1);\n\t}\n\trep(i,1,rd()) F[i]=rd();\n\trep(i,1,m=rd()) L[i]=rd();\n\tsort(L+1,L+m+1);\n\trep(i,1,N-1) rep(j,0,B[i]) dp[i][j]=INF;\n\tdp[1][0]=0;\n\trep(i,1,N-1) rep(j,0,B[i]) if(dp[i][j]<INF) for(reg int k=i+i;k<N;k+=i) cmin(dp[k][j+1],dp[i][j]+F[A[k/i]]);\n\trep(i,1,n=rd()) C[i]=rd(),D[i]=rd();\n\n\trep(kase,1,rd()) {\n\t\tint x=rd(),y=rd(),d=x/y;\n\t\tif(x%y!=0){\n\t\t\tprintf(\"%d\\n\",-m);\n\t\t\tcontinue;\n\t\t}\n\t\tmemset(R,63,sizeof R);\n\t\tUc=0;\n\t\trep(i,1,n) if(x%C[i]==0 && C[i]%y==0){\n\t\t\tint dx=x/C[i],dy=C[i]/y;\n\t\t\tmemset(T,63,sizeof T);\n\t\t\trep(a,0,B[dx]) if(dp[dx][a]<INF) rep(b,0,B[dy]) cmin(T[a+b],dp[dx][a]+dp[dy][b]);\n\t\t\trep(j,0,B[dx]+B[dy]) if(T[j]<INF) {\n\t\t\t\tll a=D[i],b=T[j]-a*j;\n\t\t\t\tU[++Uc]=(Node){a,b};\n\t\t\t\trep(k,j,B[d]) cmin(R[k],(int)U[Uc][k]);\n\t\t\t}\n\t\t}\n\t\trep(i,0,B[d]) cmin(R[i],dp[d][i]);\n\t\tll ans=0;\n\t\tll mi=1e18;\n\t\tsort(U+1,U+Uc+1);\n\t\tint R=0;\n\t\trep(i,1,Uc) {\n\t\t\tif(mi<U[i].y) continue;\n\t\t\tmi=U[i].y;\n\t\t\twhile(R>1 && (U[i].y-U[R].y)*(U[R].x-U[R-1].x)<=(U[R].y-U[R-1].y)*(U[i].x-U[R].x)) R--;\n\t\t\tU[++R]=U[i]; // 单调栈处理凸包，注意加入时满足x递增，y递减\n\t\t}\n\t\trep(i,1,m) if(L[i]<=B[d]) ans+=::R[L[i]]<INF?::R[L[i]]:-1;\n\t\telse {\n\t\t\twhile(R>1 && U[R-1][L[i]]<=U[R][L[i]]) R--;\n\t\t\tif(!R) ans--;\n\t\t\telse ans+=U[R][L[i]];\n\t\t}\n\t\tprintf(\"%lld\\n\",ans);\n\t}\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["COCI"],"categories":["题解"]},{"title":"COCI2016/2017 Contest 3 F Meksikanac","url":"/articles/2020/09/09/547a0d94.html","content":"# COCI2016/2017 Contest#3 F Meksikanac\n\n设$M=\\max\\lbrace X_p,Y_p\\rbrace$\n\n## 分析:\n\n给定的多边形很难直接处理\n\n如果直接枚举平移位置，然后判断每个点是否在多边形内部\n\n由于不是凸包，判断点的位置可以用1.射线法,2.转角判断是否是360\n\n一次判断复杂度为$O(K)$，因此复杂度为$O(M^2\\cdot N\\cdot K)$，显然不可取\n\n但是观察题目的条件，不管怎么移动，多边形都只包含一些整点\n\n由于多边形内的整点只有 $O(M^2)$ 个，如果能全部求出，直接匹配判断会方便很多，且复杂度降为$O(M^4)$\n\n那么如何求出多边形内部的整点?\n\n### 做法1\n\n考虑枚举每个点，暴力判断，复杂度为$O(M^2K)$\n\n### 做法2\n\n考虑枚举$x$一维，像写扫描线一样，把所有合法的$y$扫描出来(跨过奇数次在内部)\n\n复杂度为$O(MK\\log K)$或者可能$O(MK)$\n\n$$ \\ $$\n\n### 优化\n\n发现转化后，问题变为了 :\n\n给定点集$A,B$，判断将$A$点集平移$(dx,dy)$后，是否存在点与$B$中重合\n\n考虑这个问题的一维情形:\n\n在给定的数轴上的$[0,M]$内部有$A,B$两个数集\n\n那么出现重合的平移量即$B_i-A_j$，这个问题可以用一次卷积解决，复杂度为$O(M\\log M)$\n\n$$ \\ $$\n\n类似的，将$x,y$两维压在一起，做类似的卷积就可以判断$(dx,dy)$是否合法了\n\n复杂度为$O(M^2\\log M^2)=O(M^2\\log M)$\n\n实现上的话，把$(x,y)$变为$x\\cdot (y_p+2)+y$即可\n\n注意这里的减法向下溢出没有关系，因为溢出的部分恰好不会被调用到\n\n$$ \\ $$\n\n\n\n综上，总复杂度为$O(KM+M^2\\log M)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define reg register\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\nchar IO;\nint rd(){\n    int s=0,f=0;\n    while(!isdigit(IO=getchar())) if(IO=='-') f=1;\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return f?-s:s;\n}\n \nconst int N=510,M=10010,P=998244353;\nconst double eps=1e-9;\n \nint X,Y,D,n,m;\nstruct Point{\n    int x,y;\n    void Read(){ x=rd(), y=rd(); }\n} A[M];\n \nconst int K=N*N*4.2;\nint F[K],G[K];\ndouble U[M];\nint cnt,rev[K];\nll qpow(ll x,ll k=P-2) {\n    ll res=1;\n    for(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n    return res;\n}\nvoid NTT(int n,int *a,int f){\n    static int e[K>>1];\n    rep(i,1,n-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n    e[0]=1;\n    for(int i=1;i<n;i<<=1) {\n        int w=qpow(f==1?3:(P+1)/3,(P-1)/i/2);\n        for(int j=i-2;j>=0;j-=2) e[j+1]=1ll*(e[j]=e[j>>1])*w%P;\n        for(int l=0;l<n;l+=i*2) {\n            for(int j=l;j<l+i;++j) {\n                int t=1ll*a[j+i]*e[j-l]%P;\n                a[j+i]=a[j]-t,Mod2(a[j+i]);\n                a[j]+=t,Mod1(a[j]);\n            }\n        }\n    }\n    if(f==-1) {\n        ll base=qpow(n);\n        rep(i,0,n-1) a[i]=a[i]*base%P;\n    }\n}\n \nvoid Cover(int x,int y){\n    F[(X+1-x)*D+Y-y]=1;\n}\n \n \nint main(){\n    X=rd(),Y=rd(),D=Y+2;\n    rep(i,1,n=rd()) {\n        int x=rd(),y=rd();\n        G[x*D+y]=1;\n    }\n    int mix=1e9,miy=1e9,max=-1e9,may=-1e9;\n    rep(i,1,m=rd()) {\n        A[i].Read();\n        cmin(mix,A[i].x),cmax(max,A[i].x);\n        cmin(miy,A[i].y),cmax(may,A[i].y);\n    }\n    max-=mix,may-=miy;\n    if(max>X || may>Y) return puts(\"0\"),0;\n    rep(i,1,m) A[i].x-=mix,A[i].y-=miy;\n    A[m+1]=A[1];\n    rep(i,0,X) {\n        cnt=0;\n        rep(j,1,m) {\n            Point L=A[j],R=A[j+1];\n            if(L.x>R.x) swap(L,R);\n            if(i<L.x || i>R.x) continue;\n            if(L.x==R.x) {\n                rep(y,min(L.y,R.y),::max(L.y,R.y)) Cover(i,y);\n                continue;\n            }\n            double y=1.0*(R.y-L.y)/(R.x-L.x)*(i-L.x)+L.y;\n            if(i<R.x) U[++cnt]=y;\n            if(abs(y-int(y))<eps) Cover(i,y);\n        }\n         \n        sort(U+1,U+cnt+1);\n        for(int j=1;j<=cnt;j+=2) for(int y=ceil(U[j]);y<=U[j+1]+eps;++y) Cover(i,y);\n    }\n \n    int R=1,cc=-1;\n    while(R<=(X+1)*2*D) R<<=1,cc++;\n    rep(i,1,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<cc);\n    NTT(R,F,1),NTT(R,G,1);\n    rep(i,0,R-1) F[i]=1ll*F[i]*G[i]%P;\n    NTT(R,F,-1);\n    int ans=0;\n    rep(i,0,X-max) rep(j,0,Y-may) if(!F[(X+1+i)*D+Y+j]) ans++;\n    printf(\"%d\\n\",ans);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["COCI"],"categories":["题解"]},{"title":"COCI2016-2017 Contest 2 F ","url":"/articles/2020/09/08/73ef4e1c.html","content":"# COCI2016-2017 Contest#2 F \n\n首先分析题意: 任意走都能在$k$步内结束，也就是说，一定可以在$k$步内封锁所有出路\n\n注意游戏停止的条件是后手不能走，因此即使在$k$步封住了出路，下一轮依然要标记一个点\n\n因此必须是$<k$的\n\n设树根1的$dep=0$，第$i$层表示所有$dep=i$的节点\n\n发现第$i$次操作，一定是从$i-1$层走到了$i$\n\n假设最后的封路决策在$i$层封掉了2个点，那么这个决策一定是不优的\n\n因为在$i$层花2的时间一定不如在$i-1$层和$i$层各花1的时间\n\n因此，问题可以转化为: 在$1-k$层每层选择一个点，判断是否存在一种方案使得选择完成后完全封死出路\n\n显然在最优情况下，选择的点之间不会有祖先关系，并且我们可以删掉所有$dep>k$的点\n\n\n\n因此可以写出一个$n\\cdot 2^k$的$dp$\n\n由于最后要阻塞其实是阻塞所有的叶子($dep=k$的点)\n\n因此考虑令选择每个节点是覆盖了一段叶子，将叶子按照$\\text{dfs}$序从小到大依次标号，设选择$i$子树能覆盖叶子范围$L_i,R_i$\n\n因此按照$L_i$从小到大依次考虑每个节点，加入的转移就是\n\n{%raw%}$\\begin{aligned} dep_i\\notin S,dp_{L_i,S}\\rightarrow dp_{R_i+1,S\\cup \\lbrace dep_i\\rbrace }\\end{aligned} ${%endraw%}\n\n如果用bitset实现，时间/空间复杂度均为$O(n \\cdot 2^{k-5})$\n\n如果直接$dp$显然。。。考虑缩小$k$的范围\n\n\n\n推论1: 当$n< \\frac{(k-1)\\cdot (k+2)} {2}$时，一定有解\n\n考虑一个浅显的贪心： 在第$i$层用$\\leq i$的代价标记这层所有点\n\n这个方法不可用的条件就是第$i$层的点个数$>i$，那么就有$n\\ge 2+3+\\cdots+k=\\frac{(k-1)(k+2)} {2}$\n\n可以看到此时$k$的上界已经缩小到$O(\\sqrt n)$级别，但由于实际常数，还是太大了\n\n$$ \\ $$\n\n推论2: 当$n\\leq k\\cdot k$时，一定有解\n\n假设删除原树的1节点，则我们决策的对象变为一片森林\n\n考虑依次决策每一层，每次推进一层，都会把选择一棵树删除，并且当前森林所有顶端的节点删除\n\n要求$k$次决策后森林为空\n\n设森林第一层包含$d$个节点\n\n此时一定存在一个子树大小$\\ge \\frac{n} {d}$\n\n删除这个子树后，规模变为$n-d-\\frac{n} {d}+1$\n\n我们知道$d+\\frac{n} {d}\\ge 2\\sqrt n$\n\n$n-d-\\frac{n} {d}+1\\leq n-2\\sqrt n+1=(\\sqrt n-1)^2$\n\n因此得证\n\n此时$k$的上界已经缩小到19，完全可以通过\n\n带入优化的复杂度为$O(n\\cdot 2^{15})$\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n#pragma GCC optimize(2)\ntypedef long long ll;\n#define reg register\n#define pb push_back\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\nint rd(){\n\tint s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\n\nconst int N=410;\n\nint n,m;\nvector <int> G[N],Q[N];\nint dep[N],L[N],R[N],cnt;\n\nvoid pre_dfs(int u,int f) {\n\tdep[u]=dep[f]+1;\n\tif(dep[u]==m-1) { L[u]=cnt++,R[u]=cnt; return; }\n\tL[u]=cnt;\n\tfor(int v:G[u]) if(v!=f) pre_dfs(v,u);\n\tR[u]=cnt;\n}\n\nbitset <1<<19> dp[401],rev[20];\nint F[N]; \n\nint main(){\n\tn=rd(),m=rd();\n\tif(m*m>=n) return puts(\"DA\"),0;\n\trep(i,2,n) {\n\t\tint u=rd(),v=rd();\n\t\tG[u].pb(v),G[v].pb(u);\n\t}\n\tmemset(dep,-1,sizeof dep),dep[0]=-2,pre_dfs(1,0);\n\trep(i,1,n) if(~dep[i]) Q[L[i]].pb(i);\n\tdp[0][0]=1;\n\trep(i,0,m-1) rep(j,0,(1<<m)-1) if(~j&(1<<i)) rev[i][j]=1;\n\trep(i,0,cnt-1) \n\t\tfor(int v:Q[i]) {\n\t\t\tdp[R[v]]|=(dp[i]&rev[dep[v]])<<(1<<dep[v]);\n\t\t}\n\tputs(dp[cnt].count()?\"DA\":\"NE\");\n}\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["COCI"],"categories":["题解"]},{"title":"TopCoder SRM 570 Div1 CurvyonRails ","url":"/articles/2020/09/07/c8a42437.html","content":"# TopCoder SRM 570 Div1 CurvyonRails \n\n题意: 一个$n\\times m$的网格图，其中有一些点需要建铁路，有一些点为关键点，在关键点上修直铁路会产生1的代价，求最小的代价\n\n由于$n,m\\leq 25$显然不可以插头$\\text{dp}$。。。\n\n考虑轨道联通实际上类似网络流的形式\n\n考虑一个常见的思路: 网格图可以简化为二分图 然后 跑网络流\n\n先不考虑代价的问题，判断是否存在合法方案\n\n每个格子要有两条出边，因此可以让$S$向左侧点连边权为2的边，右侧点向$T$连边权为2的边\n\n然后可以让每个左侧点向相邻的右侧点连边，即考虑了联通关系\n\n下面考虑代价的计算，加入边的代价，即为费用流\n\n连同向边会产生代价，因此考虑为每个节点新增两个节点，表示向上下/左右连边\n\n对于让原节点对于新增的上下和左右节点  分别连两条代价为0和1的边  \n\n这样如果流了同向边，就会产生代价\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef pair <int,int> Pii;\n#define pb push_back\n#define mp make_pair\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\nint rd(){\n\tint s=0;\n\tint f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=25*30*3,M=N<<3,INF=1e9+10;\n\nint n,m,k;\nint a[30][30];\n\n// Max Flow Min Cost\n\nint id[30][30][2];\nstruct Edge{\n\tint to,nxt,w,c;\n}e[M];\nint head[N],ecnt,S,T,V;\nvoid Clear(){\n\trep(i,1,V) head[i]=0;\n\tecnt=1,V=0;\n}\nvoid AddEdge(int u,int v,int w,int c) {\n\te[++ecnt]=(Edge){v,head[u],w,c};\n\thead[u]=ecnt;\n}\nvoid Link(int u,int v,int w,int c=0){ AddEdge(u,v,w,c),AddEdge(v,u,0,-c); }\n#define erep(u,i) for(int i=head[u],v=e[i].to,w=e[i].w,c=e[i].c;i;i=e[i].nxt,v=e[i].to,w=e[i].w,c=e[i].c)\n\nint dis[N];\nint SPFA(){\n\tstatic int inq[N];\n\tstatic queue <int> que;\n\trep(i,1,V) dis[i]=INF;\n\tque.push(S),dis[S]=0;\n\twhile(!que.empty()) {\n\t\tint u=que.front(); que.pop();\n\t\tinq[u]=0;\n\t\terep(u,i) if(w && dis[v]>dis[u]+c) {\n\t\t\tdis[v]=dis[u]+c;\n\t\t\tif(!inq[v]) inq[v]=1,que.push(v);\n\t\t}\n\t}\n\treturn dis[T]<INF;\n}\nint Dfs(int u,int in) {\n\tif(u==T) return in;\n\tint out=0,t=dis[u]; dis[u]=INF;\n\terep(u,i) if(w && dis[v]==t+c) {\n\t\tint t=Dfs(v,min(in-out,w));\n\t\te[i].w-=t,e[i^1].w+=t,out+=t;\n\t\tif(in==out) break;\n\t}\n\tif(out) dis[u]=t;\n\treturn out;\n}\n\nPii Dinic(){\n\tint flow=0,cost=0;\n\twhile(SPFA()) \n\t\tfor(int t;(t=Dfs(S,INF));) flow+=t,cost+=dis[T]*t;\n\treturn mp(flow,cost);\n}\n\nclass CurvyonRails {\n\tpublic:\n\t\tint getmin(vector <string> field) {\n\t\t\tn=field.size(),m=field[0].size();\n\t\t\trep(i,0,n-1) rep(j,0,m-1) a[i+1][j+1]=field[i][j];\n\t\t\tk=0,Clear();\n\t\t\trep(i,1,n) rep(j,1,m) if(a[i][j]!='w') {\n\t\t\t\tk++;\n\t\t\t\trep(d,0,1) id[i][j][d]=++V;\n\t\t\t}\n\t\t\tS=++V,T=++V;\n\t\t\trep(i,1,n) rep(j,1,m) if(a[i][j]!='w') {\n\t\t\t\tif((i+j)&1){\n\t\t\t\t\tLink(S,++V,2,0);\n\t\t\t\t\trep(d,0,1) {\n\t\t\t\t\t\tLink(V,id[i][j][d],1,0);\n\t\t\t\t\t\tLink(V,id[i][j][d],1,a[i][j]=='C');\n\t\t\t\t\t\t// 如果两条走了同向，就会产生1的代价\n\t\t\t\t\t}\n\t\t\t\t\tif(i<n && a[i+1][j]!='w') Link(id[i][j][0],id[i+1][j][0],1,0);\n\t\t\t\t\tif(j<m && a[i][j+1]!='w') Link(id[i][j][1],id[i][j+1][1],1,0);\n\t\t\t\t} else {\n\t\t\t\t\tLink(++V,T,2,0);\n\t\t\t\t\trep(d,0,1) {\n\t\t\t\t\t\tLink(id[i][j][d],V,1,0);\n\t\t\t\t\t\tLink(id[i][j][d],V,1,a[i][j]=='C');\n\t\t\t\t\t\t// 如果两条走了同向，就会产生1的代价\n\t\t\t\t\t}\n\t\t\t\t\tif(i<n && a[i+1][j]!='w') Link(id[i+1][j][0],id[i][j][0],1,0);\n\t\t\t\t\tif(j<m && a[i][j+1]!='w') Link(id[i][j+1][1],id[i][j][1],1,0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tPii ans=Dinic();\n\t\t\tif(ans.first!=k) return -1;\n\t\t\treturn ans.second;\n\t\t}\n};\n//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"[BZOJ4331] [JSOI2012]越狱老虎桥","url":"/articles/2020/09/05/59479430.html","content":"# [BZOJ4331] [JSOI2012]越狱老虎桥\n\n题意: 在任意加入一条边的情况下，求 割一条边使图不从1联通的最小割边的 最大值\n\n首先根据题目的意思，可以下对这个无向图中 进行**边双联通分量** 缩点\n\n建出一棵边双生成树，树边即为原图的割边，树边带权\n\n割掉双联通分量内部的边显然没有意义，所以忽略掉他们，下文所提的均是树上节点和边\n\n在不额外加边的情况下，而割掉树边会使子树内部的点断开\n\n在加入边的情况下，若加入一条$1-u$的边，则形成了一个$1-u$的环，环是无法通过割开一条边断开的\n\n而连接树上两个节点$(u,v)$的情况，把图展开后，就会发现，就是把$u,v$路径上所有的点都缩进了同一个环\n\n此时断掉环上的边显然不合法，而不在环上的边，只需要随便断掉一条，就能让一个点不连通\n\n也就是说，答案是 (去掉某个点对$(u,v)$路径上的所有边，剩下的边中最小值) 的最大值\n\n设答案为$ans$\n\n这个问题实际上等价于所有的$e\\in E,w(e)\\leq ans$的边无法被一条路径完全覆盖\n\n做法1:\n\n考虑二分答案，把每条$e\\in E,w(e)\\leq ans$的边的权值设为1，求出直径长度判断是否可以用一条路径完全覆盖即可\n\n复杂度为$O(n\\log n)$\n\n做法2:\n\n实际上这个问题就是 (选择了合法的3条边中边权的最大值) 的最小值\n\n对于当前节点$u$，实际合法情况有\n\n1.选择了一条祖先的边，和2条儿子岔开的边\n\n2.选择了3条垂下的岔开的边，这个合并时比较诡异可以看代码\n\n$\\text{dp}$维护即可，复杂度为$O(n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#pragma GCC optimize(2)\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,const T &b){ ((a>b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=5e5+10,INF=1e9+10;\n\nint n,m;\nstruct Edge{\n\tint to,nxt,w;\n} e[N*6];\nint head[N],ecnt;\nvoid AddEdge(int u,int v,int w) {\n\te[++ecnt]=(Edge){v,head[u],w};\n\thead[u]=ecnt;\n}\n#define erep(u,i) for(int i=head[u],v=e[i].to;i;i=e[i].nxt,v=e[i].to)\n\nint low[N],t[N],id[N],scc,dfn;\nint stk[N],top;\nvoid dfs(int u,int f) {\n\tlow[u]=t[u]=++dfn;\n\tstk[++top]=u;\n\terep(u,i) if(v!=f) {\n\t\tif(!t[v]) dfs(v,u),cmin(low[u],low[v]);\n\t\telse cmin(low[u],t[v]);\n\t}\n\tif(low[u]==t[u]){\n\t\tint v; ++scc;\n\t\tdo v=stk[top--],id[v]=scc;\n\t\twhile(v!=u);\n\t}\n}\n\nint head2[N];\nvoid AddEdge2(int u,int v,int w) {\n\te[++ecnt]=(Edge){v,head2[u],w};\n\thead2[u]=ecnt;\n}\n#define erep2(u,i) for(int i=head2[u],v=e[i].to,w=e[i].w;i;i=e[i].nxt,v=e[i].to,w=e[i].w)\n\nint ans=INF;\nint dp[N][4],tmp[4],g[N];\n\nvoid dfs1(int u,int f) {\n\tdp[u][0]=0,dp[u][1]=dp[u][2]=dp[u][3]=INF;\n\terep2(u,i) if(v!=f) {\n\t\tg[v]=min(g[u],w),dfs1(v,u);\n\t\tmemset(tmp,63,sizeof tmp);\n\t\trep(j,0,3) {\n\t\t\tcmin(tmp[j],dp[u][j]);\n\t\t\tif(j<3) cmin(tmp[j+1],max(dp[u][j],w));\n\t\t\trep(k,0,3-j) cmin(tmp[j+k],max(dp[u][j],dp[v][k]));\n\t\t}\n\t\trep(j,0,3) dp[u][j]=tmp[j];\n\t}\n\tcmin(ans,dp[u][3]);\n\tcmin(ans,max(g[u],dp[u][2]));\n}\n\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,1,m) {\n\t\tint u=rd(),v=rd(),w=rd();\n\t\tAddEdge(u,v,w),AddEdge(v,u,w);\n\t}\n\tdfs(1,0);\n\trep(u,1,n) erep(u,i) if(id[u]!=id[v]) AddEdge2(id[u],id[v],e[i].w);\n\tg[id[1]]=INF,dfs1(id[1],0);\n\tprintf(\"%d\\n\",ans==INF?-1:ans);\n}\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["各省OI"],"categories":["题解"]},{"title":"[BZOJ2688]Green Hackenbush","url":"/articles/2020/09/05/bd3920fe.html","content":"# [BZOJ2688]Green Hackenbush\n\n题意: 有$n$棵随机的二叉树，每棵只知道大小为$a_i$\n\n博弈:每次选取一个子树删掉，只剩根不能操作，求先手获胜概率\n\n考虑这个博弈，求出一棵树的$\\text{SG}$值\n\n显然有:\n\n1.只有一个点的树的$\\text{SG}$值为0\n\n2.多个树组合的问题为$\\text{SG}$值异或\n\n暴力$dp$，对于树$T$求答案，设$T$所有可行的后继状态集合为$N(T)$，则得到$\\text{SG}$值的表达式为\n\n$\\text{SG}(T)=\\text{mex}_{R\\in N(T)}\\lbrace\\text{SG(R)}\\rbrace $\n\n直接求解复杂度过高，考虑归纳性质\n\n性质:\n\n1.一棵根节点只有一个儿子的树，其$\\text{SG}$值为儿子的$\\text{SG}$值+1\n\n考虑归纳证明:\n\n设子树为$T$，令$T+u$表示$T$子树上面接上自己作为根，问题变为求证$\\text{SG}(T+u)=\\text{SG}(T)+1$\n\n设已经归纳证明所有$T$的子联通块成立\n\n我们要求$\\text{SG}(T+u)$\n\n$\\text{SG}(T+u)=\\text{mex} \\{\\text{SG}(u),\\forall _{R\\in N(T)}\\text{SG}(R+u)\\}$\n\n由归纳的性质有\n\n$\\forall _{R\\subsetneq T}\\text{SG}(R+T)=\\text{SG}(R)+1$\n\n又因为$\\text{SG}(u)=0$，看做把所有儿子的情况平移了1，0的位置由自己占据，因而上式成立\n\n2.多叉树的问题可以归纳为 **根分别接上每个儿子得到的树** 的问题的组合\n\n因为儿子之间实际互不干扰，比较容易理解\n\n由此得到，一棵树的$\\text{SG}$值为其所有儿子的$\\text{SG}$值+1的异或和\n\n令$dp_{n,i}$为一棵$n$个节点的二叉树$\\text{SG}$值为$i$的概率，为了便于转移，设空树的$\\text{SG}$值为-1\n\n考虑直接枚举两棵子树的大小和$\\text{SG}$值\n\n考虑对于$n$个节点的二叉树，设其左儿子为$i$时的总概率为$F_i$\n\n得到的$\\text{dp}$转移是\n\n$dp_{n,(a+1)\\oplus (b+1)}\\leftarrow {dp_{i,a}\\cdot dp_{n-i-1,b}\\cdot F_i}$\n\n我们知道$n$个节点的二叉树方案数为$Catalan(n)=\\frac{(2n)!} {n!(n+1)!}$\n\n由此得到{%raw%}$\\begin{aligned} F_i=\\frac{Catalan(i)Catalan(n-i-1)} {Catalan(n)}\\end{aligned} ${%endraw%}\n\n此题范围可以直接带入$Catalan(i)$求解，但是依然要提一下递推的做法（似乎精度更有保障?）\n\n{%raw%}$\\begin{aligned} F_i=\\frac{\\frac{(2i)!} {i!(i+1)!}\\cdot \\frac{(2n-i-2)!} {(n-i-1)!(n-i)!} } {\\frac{(2n)} {n!(n+1)!} }\\end{aligned} ${%endraw%}\n\n递推求解$F_i$，每次$i$改变一阶乘只会改变1或者2，因此由$F_{i-1}$得到$F_i$的递推式为\n\n{%raw%}$F_i=\\left\\{ \\begin{aligned}\\frac{n(n+1)} {2n(2n-1)}&& i=0\\\\ F_{i-1}\\cdot \\frac{2i(2i-1)} {(i+1)i}\\frac{(n-i+1)(n-i)} {2(n-i)(2n-2i-1)} && i\\in[1,n-1]\\end{aligned}\\right.${%endraw%}\n\n化简之后应该是\n\n{%raw%}$F_i=\\left\\{ \\begin{aligned}\\frac{(n+1)} {2(2n-1)}&& i=0\\\\ F_{i-1}\\cdot \\frac{(2i-1)} {(i+1)}\\frac{(n-i+1)} {(2n-2i-1)} && i\\in[1,n-1]\\end{aligned}\\right.${%endraw%}\n\n至此得到一个朴素的$O(n^4)$预处理，由于是异或，可以用$\\text{FWT}_{\\oplus}$求解，复杂度为$O(n^3)$\n\n对于输入的每棵树，类似背包地叠加概率即可，复杂度为$O(n^3)$\n\n以下是朴素dp代码\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef double db;\n#define rep(i,a,b) for(reg int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(reg int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=128;\n\nint n;\ndb dp[N][N];\n\nvoid FWT(db *a,int f){\n\tfor(int i=1;i<N;i<<=1){\n\t\tfor(int l=0;l<n;l+=i*2) {\n\t\t\tfor(int j=l;j<l+i;j++){\n\t\t\t\tdb t=a[j+i];\n\t\t\t\ta[j+i]=a[j]-t;\n\t\t\t\ta[j]+=t;\n\t\t\t}\n\t\t}\n\t}\n\tif(f==-1) rep(i,0,N-1) a[i]/=N;\n}\n\ndb F[N],G[N];\n\nint main(){\n\tdp[0][0]=1,dp[1][0]=1;\n\trep(i,2,100) {\n\t\tF[0]=1.0/(2*i)/(2*i-1)*(i+1)*i;\n\t\trep(j,1,i-1) {\n\t\t\tF[j]=F[j-1] *  (2*j)*(2*j-1)/(j+1)/j   * 1.0/(2*(i-j))/(2*(i-j)-1)*(i-j+1)*(i-j);\n\t\t}\n\t\trep(a,0,i-1) rep(h1,0,N-1) if(dp[a][h1]>0) {\n\t\t\trep(h2,0,N-1) if(dp[i-a-1][h2]) {\n\t\t\t\tint nxt=0;\n\t\t\t\tif(a>0) nxt^=h1+1;\n\t\t\t\tif(i-1-a>0) nxt^=h2+1;\n\t\t\t\tdp[i][nxt]+=dp[a][h1]*dp[i-a-1][h2]*F[a];\n\t\t\t}\n\t\t}\n\t}\n\tn=rd();\n\trep(i,0,N-1) F[i]=0;\n\tF[0]=1;\n\trep(i,1,n) {\n\t\tint x=rd();\n\t\trep(j,0,N-1) G[j]=0;\n\t\trep(j,0,N-1) if(F[j]) rep(k,0,N-1) G[j^k]+=F[j]*dp[x][k];\n\t\trep(j,0,N-1) F[j]=G[j];\n\t}\n\tdb ans=0;\n\trep(i,1,N-1) ans+=F[i];\n\tprintf(\"%.6lf\\n\",ans);\n}\n\n\n```\n\n以下是FWT优化代码\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef double db;\n#define rep(i,a,b) for(reg int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(reg int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=128;\n\nint n;\ndb dp[N][N],T[N][N];\n\nvoid FWT(db *a,int f){\n\tfor(int i=1;i<N;i<<=1){\n\t\tfor(int l=0;l<N;l+=i*2) {\n\t\t\tfor(int j=l;j<l+i;j++){\n\t\t\t\tdb t=a[j+i];\n\t\t\t\ta[j+i]=a[j]-t;\n\t\t\t\ta[j]+=t;\n\t\t\t}\n\t\t}\n\t}\n\tif(f==-1) rep(i,0,N-1) a[i]/=N;\n}\n\ndb F[N],G[N];\n\nint main(){\n\tdp[0][0]=1,dp[1][0]=1;\n\tT[0][0]=1,T[1][1]=1;\n\tFWT(T[0],1),FWT(T[1],1);\n\n\trep(i,2,100) {\n\t\tF[0]=1.0/(2*i)/(2*i-1)*(i+1)*i;\n\t\trep(j,1,i-1) {\n\t\t\tF[j]=F[j-1] *  (2*j)*(2*j-1)/(j+1)/j   * 1.0/(2*(i-j))/(2*(i-j)-1)*(i-j+1)*(i-j);\n\t\t}\n\t\trep(j,0,i-1) rep(k,0,N-1) dp[i][k]+=T[j][k]*T[i-j-1][k]*F[j];\n\t\tFWT(dp[i],-1);\n\t\trep(j,0,N-2) T[i][j+1]=dp[i][j];\n\t\tFWT(T[i],1);\n\t}\n\tn=rd();\n\trep(i,0,N-1) F[i]=0;\n\tF[0]=1;\n\trep(i,1,n) {\n\t\tint x=rd();\n\t\trep(j,0,N-1) G[j]=0;\n\t\trep(j,0,N-1) if(F[j]) rep(k,0,N-1) G[j^k]+=F[j]*dp[x][k];\n\t\trep(j,0,N-1) F[j]=G[j];\n\t}\n\tdb ans=0;\n\trep(i,1,N-1) ans+=F[i];\n\tprintf(\"%.6lf\\n\",ans);\n}\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"Topcoder SRM 569 Div1 - MegaFactorial (矩阵)","url":"/articles/2020/09/05/8bd66f83.html","content":"# Topcoder SRM 569 Div1 - MegaFactorial (矩阵)\n\n首先是对于末尾0个数的处理，设最后得到的数中包含$i$的指数为$F(i)$\n\n对于$B=2,3,5,7$的情况，可以直接计算答案$\\sum_{i=1}\\sum_{j=1}F(j\\cdot B^i)$\n\n对于$B$为质因子组合的情况，即$B=6(2\\times 3),10(2\\times 5)$，因为$F(i)$实际有单调性，可以直接取较大的质因子\n\n对于$B$为质因子次方的情况，即$B=2^2,2^3,3^2$的情况，设$B=p^k$则答案可以表示为\n\n{%raw%}$\\begin{aligned} \\lfloor \\frac{\\sum_{i=1}\\sum_{j=1}F(j\\cdot p^i)} {k}\\rfloor \\end{aligned} ${%endraw%}\n\n由于要取模，实际上要做一点魔改，设模数为$m$，答案可以表示为$c=ak+b$的形式，这个式子求出的是$a$\n\n则$\\lfloor \\frac{(ak+b)\\mod km } {k}\\rfloor =a+\\lfloor \\frac{(b\\mod km)} {k}\\rfloor =a$\n\n由于$k\\leq 3$，扩大模数后可以用unsigned int 存\n\n下面考虑用矩阵求解上式\n\n$nk!$(下面用$f(n,k)$表示)这个东西可以看作从$n$向下的一个递推式\n\n因此考虑以$k$为矩阵元素，求出每个$f(n,k)$被调用的次数\n\n注意这样递推就是反向的了\n\n递推的转移式子是$f(n,k)\\rightarrow f(n,k-1),f(n-1,k)$，其中$f(n,k-1)$的转移需要在层内完成\n\n据此构造矩阵即可，注意$f(n,0)$不能向$f(n-1,0)$转移\n\n考虑对于$\\sum_{i=1}\\sum_{j=1}F(j\\cdot B^i)$的每个$i$求解，一共有$\\frac{n} {B^i}$个$j$，每个$j$出现的递推层数为等差数列\n\n即$n\\mod B^i,n\\mod B^i+B^i,n\\mod B^i +2 \\cdot B^i\\cdots $\n\n我们要求的其实是每一层的$f(i,0)$，所以考虑求出每次$B^i$层的转移矩阵\n\n然后是依次累和，把矩阵的转移中$0\\rightarrow 0$的转移赋为1即可做到\n\ntips:首项是$n\\mod B^i$\n\n一共有$\\log _Bn$种不同的$i$，因此复杂度为$O(\\log_Bn\\log_2 n\\cdot k^3)$\n\n~~当然更优的做法，咕咕咕~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define reg register\ntypedef long long ll;\ntypedef unsigned int U;\n#define rep(i,a,b) for(reg int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(reg int i=a,i##end=b;i>=i##end;--i)\n\n#define pb push_back\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\nint rd(){\n\tint s=0;\n\tint f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=20;\n\n\nint n,d;\nU P=1e9+9;\nstruct Mat{\n\tU a[N][N];\n\tMat(){ memset(a,0,sizeof a);} \n\tvoid One(){ rep(i,0,d) a[i][i]=1; }\n\tU* operator [] (int x){ return a[x]; }\n\tMat operator * (const Mat &x) const {\n\t\tMat res;\n\t\trep(i,0,d) rep(j,0,d) rep(k,0,d) res.a[i][k]=(res.a[i][k]+1ll*a[i][j]*x.a[j][k])%P;\n\t\treturn res;\n\t}\n\tvoid Show(){\n\t\trep(i,0,d) { rep(j,0,d) printf(\"%d \",a[i][j]); puts(\"\"); }\n\t}\n} A,B,C;\n\nMat qpow(Mat x,int k){\n\tMat res; res.One();\n\tfor(;k;k>>=1,x=x*x) if(k&1) res=res*x;\n\treturn res;\n}\nint Factor(int &x) {\n\tint p=-1,c=0;\n\trep(i,2,x) if(x%i==0) {\n\t\twhile(x%i==0) c++,x/=i;\n\t\tp=i;\n\t\tbreak;\n\t}\n\treturn x=p,c;\n}\n\nclass MegaFactorial {\n\tpublic:\n\t\tint countTrailingZeros(int N, int K, int b) {\n\t\t\tA=Mat(),n=N,d=K;\n\n\t\t\tif(b==10) b=5;\n\t\t\tif(b==6) b=3;\n\t\t\tint t=Factor(b);\n\t\t\tP*=t;\n\n\t\t\tdrep(i,d,0) {\n\t\t\t\tA[i][i]=1;\n\t\t\t\trep(j,0,d) A[j][i]+=A[j][i+1];\n\t\t\t}\n\t\t\tA[0][0]=0;\n\t\t\tll ans=0;\n\t\t\tfor(ll i=b;i<=n;i*=b) {\n\t\t\t\tB=qpow(A,i); B[0][0]=1;\n\t\t\t\tMat res=qpow(A,n%i)*qpow(B,n/i-1);\n\t\t\t\trep(i,0,d) (ans+=res[i][0])%=P;\n\t\t\t}\n\t\t\tP/=t,ans/=t;\n\n\t\t\treturn ans;\n\t\t}\n};\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"COCI2013-2014 Contest 3 F 单调栈","url":"/articles/2020/09/03/b4fdaba7.html","content":"# COCI2013-2014 Contest#3 F 单调栈\n\n考虑每个小区间$[x_i,x_{i+1}]$中，外部光照进来只能是这样\n\n![Light1.png](https://i.loli.net/2020/09/03/ZojvbGetxOIMmXF.png)\n\n其中两边是光源，红色表示被照到了\n\n那么所有合法的被照到的段可以表示为$[x_i,x_{i+1}]$中的两个小段，即\n\n1.左边照进来的$[s0_i,x_{i+1}]$\n\n2.右边照进来的$[x_i,s1_i]$\n\n考虑从左到右维护可能照到右边的**较优光源**\n\n显然对于每一个光源都有一个**当前能遮住它最多**的城市，构成(光源，限制城市)这样的点对\n\n对于每一个**较优的**这样的点对 可以维护一个**单调栈**，维护出来应该是这样的\n\n![Light2.png](https://i.loli.net/2020/09/03/jgtAk8omSYafON3.png)\n\n有几个较为显然的性质:\n\n1.所有点对的$h_i$**递减**，否则要么是上一个光源被完全遮住了，要么是这个点可以遮住上一个光源更多\n\n2.靠右的点对能够覆盖的范围较大，即可行区间的左端点较小\n\n否则它此时不会产生贡献，而当后面较高的点进来时，相对更矮的它也更容易被遮住\n\n实际上，这样的形状就会构成一个类似上凸包的东西，但是凸包上只有一部分点产生贡献\n\n$$  \\ $$\n\n考虑依次加入点$(x_i,h_i)$，显然可以弹掉$h_j<h_i$的所有点对(为了防止下面计算左端点时出现问题)\n\n接下来的情况，类似维护凸包，但是要考虑更新限制城市 或者 弹掉点对 \n\n$$ \\ $$\n\n对于向左的情况，反着求一遍即可，最后可以减去两种区间都覆盖不到的部分\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef double db;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=3e5+10;\n\nint n,D;\nstruct City{ int k,x,h; } C[N];\n\nstruct Lightpair{\n\t//描述一个灯塔和右边遮住它最多的城市\n\tint x,y;\n\tLightpair(const int &_x=0,const int &_y=0) : x(_x),y(_y) { }\n\tdb Left(){\n\t\treturn C[y].x+1.0*(C[y].x-C[x].x)/(C[x].h-C[y].h)*C[y].h;\n\t}\n\t// z这个发光对能照到的范围为[Left(),+oo)\n} stk[N];\nint top;\nvoid Cover(Lightpair &x,int y){ if(Lightpair(x.x,y).Left()>x.Left()) x.y=y; }\ndb s[2][N];\n// 将所有可能的发光区间描述为 [C[i].x,s[k][i]]\n\n\nint main(){\n\tn=rd(),D=rd();\n\trep(i,1,n) C[i].k=rd(),C[i].x=rd(),C[i].h=rd();\n\tC[n+1].x=D;\n\trep(k,0,1) {\n\t\trep(i,0,n) {\n\t\t\twhile(top && C[stk[top].x].h<=C[i].h) top--; // 完全被遮住的，先弹掉\n\t\t\tif(top) {\n\t\t\t\tCover(stk[top],i);\n\t\t\t\twhile(top>1){\n\t\t\t\t\tCover(stk[top-1],i);\n\t\t\t\t\tif(stk[top-1].Left()>stk[top].Left()) break;\n\t\t\t\t\ttop--;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(C[i].k) stk[++top]=i,s[k][i]=C[i].x; // 一定覆盖C[i].x,C[i+1].x\n\t\t\telse if(top) s[k][i]=min(stk[top].Left(),(db)C[i+1].x); // 尝试让当前最优的点对覆盖过来\n\t\t\telse s[k][i]=C[i+1].x; // 无覆盖\n\t\t}\n\t\tif(!k) {\n\t\t\treverse(C+1,C+n+1),top=0;\n\t\t\trep(i,1,n) C[i].x=D-C[i].x;\n\t\t} else {\n\t\t\treverse(s[k],s[k]+n+1);\n\t\t\trep(i,0,n) s[k][i]=D-s[k][i];\n\t\t}\n\t}\n\tdb ans=D; // 减去不合法的\n\trep(i,0,n) if(s[0][i]>s[1][i]) ans-=s[0][i]-s[1][i];\n\tprintf(\"%.3lf\\n\",ans);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["COCI"],"categories":["题解"]},{"title":"Topcoder SRM568 Div1 DisjointSemicircles (二分图染色)","url":"/articles/2020/09/02/49c6f513.html","content":"# Topcoder SRM568 Div1 DisjointSemicircles (二分图染色)\n\n题意: 给定数轴上排列的$2n$个点，每个点需要找到另一个点和它匹配，并且以他们为直径两端，向上或者向下作一个半圆\n\n有一些点已经匹配好了，要求判断是否存在一个合法的方案，满足所有的半圆不相交\n\n###思路:\n\n 枚举已经确定的匹配半圆的方向(设有$m$对已匹配)，然后$O(n)$判断自由点是否存在合法方案\n\n### 判断合法方案的核心性质:\n\n定义一个**点的方向**为其所连接的**半圆的方向**(上为0，下为1)\n\n则自由点存在合法方案的充要条件是: \n\n整个序列上每种方向的点数为偶数，且所有已匹配的半圆所覆盖的区间下，和**半圆同向的点**个数为**偶数**\n\n必要性:\n\n如果某个半圆下同向点个数为奇数，则必然有一个点与其同向并且不得不连到区间外，这显然不合法\n\n充分性:\n\n一种合法的构造方法是:\n\n按照$L$从左到右，遍历每个已匹配的半圆，如果包含同向子半圆优先解决同向的子半圆\n\n剩下的点依然是偶数个，从左到右依次和上一个匹配即可\n\n$$\\  $$\n\n### 判断是否存在合法方案\n\n那么问题转化为判断是否存在一种合法的定向方案，使得某一些区间里0/1的个数为偶数\n\n考虑构建二分图染色，令点集$V=\\{0,1,\\cdots,n,0',1',\\cdots,n'\\}$，则$(u,v)\\in E$表示$col(u)\\ne col(v)$\n\n其中$i$号节点表示$1-i$中所有未匹配节点方向的异或和，$i'$表示$i$的反点$(i,i')\\in E$\n\n(到这里可以自己想一下怎么连边)\n\n对于已匹配圆$[L,R]$ (注意不要忘了$[1,n]$)\n\n如果它方向为$1$，显然只需要$col(L-1)=col(R)$\n\n如果方向为0，设$[L,R]$未染色个数为$k$，则显然有$col(L-1)=col(R)\\oplus (k\\mod 2)$，即考虑反向的个数\n\n同时对于已匹配点$i$，显然有$col(i)=col(i-1)$\n\n由此，得到一个$O(n)$点数边数的图\n\n如果在$\\text{dfs}$枚举时同步加边和回撤，总复杂度就为$O(2^m\\cdot n)$\n\n由于不可能所有方案都合法，实际应该是一个比较松的上界\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nconst int N=110;\n\nint n;\nint a[N];\nint cnt[N];\nint L[N],R[N],m,Cross[N][N];\nint vec[2][N],c[2];\n\nstruct Edge{\n\tint u,v,nxt;\n}e[N*10];\nint head[N],ecnt;\nvoid AddEdge(int u,int v) {\n\te[++ecnt]=(Edge){u,v,head[u]};\n\thead[u]=ecnt;\n}\nvoid Link(int u,int v){ \n\tAddEdge(u,v),AddEdge(v,u); \n}\nvoid Back(){\n\thead[e[ecnt].u]=e[ecnt].nxt,ecnt--;\n\thead[e[ecnt].u]=e[ecnt].nxt,ecnt--;\n}\n\nint ans,fl;\nint vis[N];\nvoid dfs_col(int u,int c){\n\tvis[u]=c;\n\tfor(int i=head[u];i;i=e[i].nxt){\n\t\tint v=e[i].v;\n\t\tif(!vis[v]) dfs_col(v,3-c);\n\t\telse if(vis[v]==vis[u]) fl=0;\n\t}\n}\n\nvoid dfs(int p) {\n\tif(ans) return;\n\tif(p>m){\n\t\trep(i,0,n*2+1) vis[i]=0;\n\t\tfl=1;\n\t\trep(i,0,n*2+1) if(!vis[i]) dfs_col(i,1);\n\t\tans|=fl;\n\t\treturn;\n\t}\n\trep(i,0,1){\n\t\tint fl=1;\n\t\trep(j,1,c[i]) if(R[vec[i][j]]>L[p] && R[vec[i][j]]<R[p]) fl=0;\n\t\tif(!fl) continue;\n\t\tvec[i][++c[i]]=p;\n\t\tif(i || ~(cnt[R[p]]-cnt[L[p]])&1) Link(L[p]+n+1,R[p]-1);\n\t\telse Link(L[p],R[p]-1);\n\t\tdfs(p+1);\n\t\tc[i]--,Back();\n\t}\n}\n\nclass DisjointSemicircles {\npublic:\n\tstring getPossibility(vector <int> labels) {\n\t\tn=labels.size(),m=0;\n\t\trep(i,1,n) a[i]=labels[i-1];\n\t\trep(i,1,n) {\n\t\t\tcnt[i]=cnt[i-1]+(a[i]==-1);\n\t\t\tif(~a[i]) rep(j,i+1,n) if(a[j]==a[i]) L[++m]=i,R[m]=j;\n\t\t}\n\t\tif(!m) return \"POSSIBLE\";\n\t\trep(i,0,(n+1)*2) head[i]=ecnt=0;\n\t\trep(i,1,n) if(~a[i]) Link(i+n+1,i-1);\n\t\trep(i,0,n) Link(i,i+n+1);\n\t\tLink(n+1,n);\n\t\tans=0,dfs(1);\n\t\treturn ans?\"POSSIBLE\":\"IMPOSSIBLE\";\n\t}\n};\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["JOI"],"categories":["题解"]},{"title":"COCI20102011 Contest Final D (Dp)","url":"/articles/2020/09/02/517d8319.html","content":"# COCI20102011 Contest#Final D (dp)\n\n我们将一个操作序列看做由左右括号，空格构成的字符串，则序列大致长这个样子\n\n$\\text{_ ( ( ) _ ( ) ) ( _ ( ( ) ) ( }$\n\n很显然，一个失配的左括号只能在最外层出现，而空格可以出现在任意位置\n\ndp一个括号序列让人想到区间dp，但是这个题目的区间实际只需要用长度就可以描述\n\n令$dp[t][l][r][f1][f2]$表示用$t$的时间从$l$走到$r$，$f1$表示是不是最外层括号，$f2$表示当前$dp$是否受到**单纯括号序列**的限制\n\n其中，引入的**单纯括号序列**是为了防止出现重复转移，其意思就是这个括号序列两端必须是一对匹配的左右括号，而中间随意\n\n转移大致如下:\n\n1.那么对于非单纯的括号序列，可以在序列插入空格或者失配的左括号(需要满足$f1$)，从$dp[t-1]$转移过来\n\n2.对于任何的括号序列，都可以在两端找到匹配的的左右括号，从$dp[t-2]$转移过来，且完成匹配后$f1$应为$0$\n\n3.且一个非单纯的括号序列是可以分割的，为了不重复，强制分割的左序列是单纯的即可\n\n实际会发现，一个单纯的括号序列可以认为一定不是最外层括号，即$f2$为真时，$f1$一定为假，所以可以压缩为三种状态\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define reg register\n#define rep(i,a,b) for(reg int i=a;i<=b;++i)\n#define drep(i,a,b) for(reg int i=a;i>=b;--i)\nchar IO;\nint rd(){\n    int s=0;\n    while(!isdigit(IO=getchar()));\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return s;\n}\n\nconst int N=51,P=10007;\n\nint n,m,T;\nint E[N][N];\nint dp[N][N][N][2][2];\n\nint main(){\n    n=rd(),m=rd(),T=rd();\n    memset(E,-63,sizeof E);\n    rep(i,1,m) {\n        int u=rd(),v=rd(),c=IO==' '?getchar():IO;\n        if(c>='A' && c<='Z') E[u][v]=c-'A'+1;\n        else if(c>='a' && c<='z') E[u][v]='a'-c-1;\n        else E[u][v]=0;\n    }\n    rep(i,1,n) rep(j,0,1) dp[0][i][i][j][0]=1;\n    rep(k,1,T){\n        rep(l,1,n) rep(r,(k<T?1:n),n) rep(fl,0,1) rep(fl2,0,1) {\n            ll res=0;\n            if(!fl2) {\n                rep(i,2,k-1) rep(j,1,n) res+=dp[i][l][j][0][1]*dp[k-i][j][r][fl][0];\n                rep(i,1,n) if(E[l][i]>=0 && (!E[l][i] || fl)) res+=dp[k-1][i][r][fl][fl2];\n            }\n            if(k>1) rep(i,1,n)\n                if(E[l][i]>0) rep(j,1,n) \n                    if(E[j][r]+E[l][i]==0) res+=dp[k-2][i][j][0][0];\n            dp[k][l][r][fl][fl2]=res%P;\n        }\n    }\n    int ans=0;\n    rep(i,1,T) ans+=dp[i][1][n][1][0];\n    printf(\"%d\\n\",ans%P);\n}\n\n\n\n```\n\n","tags":["COCI"],"categories":["题解"]},{"title":"COCI2013-2014 Contest 1 F  SLASTIČAR","url":"/articles/2020/09/01/c5d36d9e.html","content":"# COCI2013-2014 Contest#1 F  SLASTIČAR\n\n其实挺妙的一个数据结构题\n\n题意: 给定一个A串，对于查询的每个$B$串，从头开始匹配匹配$A$的每个后缀，每次匹配失败的代价是$\\text{LCP}+1$可，匹配成功的代价是$|B|$，且立即停止，求代价总和\n\n设$A$串长为$n$，查询个数为$q$，查询总长为$m$\n\n我们知道求两个串的$\\text{LCP}$可以把两个串中间放一个符号分开，跑后缀数组/后缀自动机\n\n但是首先是$m=3\\cdot 10^6$，内存就开不下\n\n而且发现，如果$|B|$的某个前缀未出现在$A$中，后面的部分都不造成贡献，所以可以在$A$串中定位$B$的每个前缀\n\n这样就只需要求$A$的后缀数组即可，然而，这个并不好实现\n\n假设当前已经定位了一个长度为$i$的前缀，其对应的合法后缀排名范围为$[L_i,R_i]$\n\n那么接下来就是在当前前缀上接上下一个字符$c$，这个如果再外加数据结构并不好实现\n\n考虑后缀数组的性质，$[L_i,R_i]$这些后缀前$d$个字符相同，$d+1$个字符呈单调非递减\n\n所以字符$c$出现的范围也一定是一段区间，可以直接两次二分得到\n\n这样查询$[L_i,R_i]$的复杂度为$\\log n$，这样就用$O(m\\log n)$的复杂度完成了串定位\n\n如果不考虑每次完成匹配后停止，其实答案就是$\\sum R_i-L_i+1$，即$\\sum_i LCP_i=\\sum_i \\sum_j [LCP_j\\ge i]$\n\n设最终的匹配位置为$p$，这个位置可以用线段树在最后的一段$[L_{|B|},R_{|B|}]$中求最小值得到\n\n考虑减掉多余的部分，即减去实际位置$>p$的且在后缀数组排名在$[L_i,R_i]$中的部分\n\n可以把所有的$[L_i,R_i]$拿出来作为，离线询问，用树状数组维护查询，复杂度为$O((n+m)\\log n)$\n\n因此总复杂度为$O((n+m)\\log n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair <int,int> Pii;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,const T &b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,const T &b){ ((a<b)&&(a=b)); }\n\nconst int N=1e5+10,M=3e6+10;\n\nint n,m;\nchar s[N],t[N];\n\nint rk[N<<1],tmp[N],cnt[N],sa[N];\n\nvoid Build(int n){\n    rep(i,1,n) cnt[int(s[i])]++;\n    rep(i,1,200) cnt[i]+=cnt[i-1];\n    rep(i,1,n) rk[i]=cnt[(int)s[i]],sa[i]=i;\n    for(reg int k=1;k<n;k<<=1) {\n        for(reg int i=0;i<=n;++i) cnt[i]=0;\n        for(reg int i=1;i<=n;++i) cnt[rk[i+k]]++;\n        for(reg int i=1;i<=n;++i) cnt[i]+=cnt[i-1];\n        for(reg int i=n;i>=1;--i) tmp[cnt[rk[i+k]]--]=i;\n\n        for(reg int i=0;i<=n;++i) cnt[i]=0;\n        for(reg int i=1;i<=n;++i) cnt[rk[i]]++;\n        for(reg int i=1;i<=n;++i) cnt[i]+=cnt[i-1];\n        for(reg int i=n;i>=1;--i) sa[cnt[rk[tmp[i]]]--]=tmp[i];\n\n        for(reg int i=1;i<=n;++i) tmp[sa[i]]=tmp[sa[i-1]]+(rk[sa[i]]!=rk[sa[i-1]]||rk[sa[i]+k]!=rk[sa[i-1]+k]);\n        for(reg int i=1;i<=n;++i) rk[i]=tmp[i];\n    }\n}\n\nvoid FindChar(int &l,int &r,int len,int c){\n    int tl=l,tr=r;\n    int lres=-1,rres=-1;\n    while(l<=r){\n        int mid=(l+r)>>1;\n        if(s[sa[mid]+len]<=c) l=mid+1,lres=mid;\n        else r=mid-1;\n    }\n    if(lres==-1 || s[sa[lres]+len]!=c) { l=0; return; }\n    l=tl,r=tr;\n    while(l<=r){\n        int mid=(l+r)>>1;\n        if(s[sa[mid]+len]>=c) r=mid-1,rres=mid;\n        else l=mid+1;\n    }\n    l=rres,r=lres;\n}\n\n\nll ans[N];\nint ql[M],qr[M],qid[M],qnxt[M];\nint head[N],qc;\nint L[N],R[N];\n\nstruct BIT{\n    int s[N];\n    void Add(int p) { while(p<=n) s[p]++,p+=p&-p; }\n    int Que(int p) {\n        int res=0;\n        while(p) res+=s[p],p-=p&-p;\n        return res;\n    }\n    int Que(int l,int r){ return Que(r)-Que(l-1); }\n} T;\nstruct Tree{\n    int s[N<<2];\n    void Build(int p,int l,int r){\n        if(l==r) { s[p]=sa[l]; return ;}\n        int mid=(l+r)>>1;\n        Build(p<<1,l,mid),Build(p<<1|1,mid+1,r);\n        s[p]=min(s[p<<1],s[p<<1|1]);\n    }\n    int Que(int p,int l,int r,int ql,int qr){\n        if(ql<=l && r<=qr) return s[p];\n        int mid=(l+r)>>1,res=1e9;\n        if(ql<=mid) cmin(res,Que(p<<1,l,mid,ql,qr));\n        if(qr>mid) cmin(res,Que(p<<1|1,mid+1,r,ql,qr));\n        return res;\n    }\n}SGT;\n\nint main(){\n    scanf(\"%d%s\",&n,s+1);\n    Build(n),scanf(\"%d\",&m);\n    SGT.Build(1,1,n);\n    rep(i,1,m) {\n        scanf(\"%s\",t+1);\n        L[0]=1,R[0]=n;\n        int len=0,pos=1;\n        for(int j=1;t[j];++j) {\n            L[len=j]=L[j-1],R[j]=R[j-1];\n            FindChar(L[j],R[j],j-1,t[j]);\n            if(!L[j]){ pos=0; break; }\n            ans[i]+=R[j]-L[j]+1;\n        }\n        if(pos && (pos=SGT.Que(1,1,n,L[len],R[len]))<n) {\n            ans[i]+=pos-1,pos++;\n            rep(j,1,len){\n                qc++,ql[qc]=L[j],qr[qc]=R[j],qid[qc]=i,qnxt[qc]=head[pos];\n                head[pos]=qc;\n            }\n        } else ans[i]+=n;\n    }\n    drep(i,n,1){\n        T.Add(rk[i]);\n        for(int j=head[i];j;j=qnxt[j]) ans[qid[j]]-=T.Que(ql[j],qr[j]);\n    }\n    rep(i,1,m) printf(\"%lld\\n\",ans[i]);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n","tags":["COCI"],"categories":["题解"]},{"title":"TopCoder SRM 561 Orienteering 树形Dp","url":"/articles/2020/09/01/7965ba9b.html","content":"# TopCoder SRM 561 Orienteering 树形dp\n\n题意: 给定了一棵树，以及树上一些节点为关键点，求出随机选出$k$个关键点后遍历它们的最短路径的期望\n\n遍历关键点相当于要遍历一棵树，考虑遍历一棵树的最优决策\n\n假设我们确定了一个根$u$，递归考虑每棵子树的问题\n\n发现除了最后留在的那个点对应的路径$(u,v)$以外，所有的边都要被遍历两次\n\n即答案$\\sum _{e\\in E} 2\\cdot w(e)-dis(u,v)$\n\n所以改变根就会发现，答案就是总长*2-直径长度\n\n设总点数为$n$，包含的总关键点数为$m$，要选出$k$个点\n\n## Part1 总长计算\n\n考虑对于每一条边计算产生的树跨过它的概率\n\n设这条边两边的关键点的个数分别为$a,b(a+b=m)$\n\n显然，这条边被跨过的概率就是\n\n{%raw%}$\\begin{aligned} 1-\\frac{C(a,k)} {C(m,k)}-\\frac{C(b,k)} {C(m,k)}\\end{aligned}${%endraw%} (即减去所有选出的关键点都在两边的概率)\n\n设{%raw%}$\\begin{aligned} f(i)=\\frac{C(i,k)} {C(m,k)}=\\frac{i!(m-k)!} {m!(i-k)!}\\end{aligned} ${%endraw%}\n\n因为这个题目要计算double，所以求阶乘的精度会比较有问题\n\n考虑递推求出$f(i)$，则有\n\n{%raw%}$f(i)=\\left\\{\\begin{aligned}1 && i=m \\\\ \\frac{f(i+1)(i+1-k)} {i+1} && i<m\\end{aligned}\\right.${%endraw%}\n\n这样递推就能比好得保证精度，然后直接对于每条边计算即可，复杂度为$O(n)$\n\n$$ \\ $$\n\n## Part2 直径长度计算\n\n直径似乎是一个很难在树形$\\mathrm{dp}$中确定的东西，因此考虑直接先枚举直径的两个端点\n\n定义一棵树的直径两端点为最小的二元组$(A,B)$满足\n\n{%raw%}$\\begin{aligned} A<B，dis(A,B)=\\max_{u,v\\in V} \\{dis(u,v)\\}\\end{aligned} ${%endraw%}\n\n因为$k>1$，所以两端点一定不同，不妨设两个端点分别为$A,B(A<B)$\n\n则一个点$C$可以出现在树上的充要条件是\n\n$(dis(A,C)>dis(A,B) \\or dis(A,C)=dis(A,B)\\and C \\ge B)$\n\n$\\and (dis(B,C)>dis(A,B) \\or dis(B,C)=dis(A,B)\\and C \\ge A)$\n\n数出所有可以出现在树上的点个数$i$，则$(A,B)$为直径的概率应为$\\frac{C(i-2,k-2)} {C(m,k)}$\n\n即强制选取了$(A,B)$两个点\n\n依然考虑递推求出\n\n{%raw%}$\\begin{aligned} f(i)=\\frac{C(i-2,k-2)} {C(m,k)}=\\frac{(i-2)!k(k-1)(m-k)!} {m!(i-k)!}\\end{aligned}${%endraw%}\n\n类似地，得到其递推式为\n\n{%raw%}$f(i)=\\left\\{\\begin{aligned}\\frac{k(k-1)} {m(m-1)} && i=m \\\\ \\frac{f(i+1)(i+1-k)} {i-1} && i<m\\end{aligned}\\right.${%endraw%}\n\n这一部分复杂度为$O(m^3)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef pair <int,int> Pii;\ntypedef long long ll;\ntypedef double db;\n#define mp make_pair\n#define pb push_back\n#define reg register\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(reg int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(reg int i=a,i##end=b;i>=i##end;--i)\n\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\nint rd(){\n\tint s=0;\n\tint f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=51;\n\nint n,m,k;\nint id[N][N],mk[2510],sz[2510],p[310];\nvector <int> G[2520];\ndb dp[2510],ans;\nint dis[2500][2500];\n\nvoid Dfs(int u,int f) {\n\tsz[u]=mk[u]>0;\n\tfor(int v:G[u]) if(v!=f) {\n\t\tDfs(v,u),sz[u]+=sz[v];\n\t\tans+=1-dp[sz[v]]-dp[m-sz[v]];\n\t}\n}\nvoid Dfs_Getdis(int rt,int u,int f){\n\tfor(int v:G[u]) if(v!=f) \n\t\tdis[rt][v]=dis[rt][u]+1,Dfs_Getdis(rt,v,u);\n}\n\nint A,B;\n\nint Check(int u){\n\tif(dis[A][u]>dis[A][B]) return 0;\n\tif(dis[A][u]==dis[A][B] && u<B) return 0;\n\tif(dis[B][u]>dis[A][B]) return 0;\n\tif(dis[B][u]==dis[A][B] && u<A) return 0;\n\treturn 1;\n}\n\nclass Orienteering {\n\tpublic:\n\t\tdouble expectedLength(vector <string> field, int K) {\n\t\t\trep(i,1,n) G[i].clear(); memset(id,0,sizeof id),memset(mk,0,sizeof mk);\n\t\t\tn=m=0,k=K;\n\t\t\trep(i,0,field.size()-1) rep(j,0,field[i].size()-1) if(field[i][j]!='#') {\n\t\t\t\tid[i][j]=++n;\n\t\t\t\tif(field[i][j]=='*') p[mk[n]=++m]=n;\n\t\t\t}\n\t\t\trep(i,0,field.size()-1) rep(j,0,field[i].size()-1) if(id[i][j]) {\n\t\t\t\tif(i<iend && id[i+1][j]) G[id[i][j]].pb(id[i+1][j]),G[id[i+1][j]].pb(id[i][j]);\n\t\t\t\tif(j<jend && id[i][j+1]) G[id[i][j]].pb(id[i][j+1]),G[id[i][j+1]].pb(id[i][j]);\n\t\t\t}\n\t\t\trep(i,0,m) dp[i]=0;\n\t\t\tdp[m]=1;\n\t\t\tdrep(i,m-1,k) dp[i]=dp[i+1]/(i+1)*(i+1-k);\n\t\t\tans=0,Dfs(1,0),ans*=2; // 期望总长\n\t\t\t// 下面求期望直径长度\n\t\t\trep(i,1,n) if(mk[i]) Dfs_Getdis(i,i,dis[i][i]=0);\n\t\t\t\n\t\t\tdp[m]=1.0*k*(k-1)/m/(m-1);\n\t\t\tdrep(i,m-1,k) dp[i]=dp[i+1]/(i-1)*(i+1-k);\n\t\t\trep(i,1,m) rep(j,i+1,m) {\n\t\t\t\tint c=0; A=p[i],B=p[j];\n\t\t\t\trep(k,1,m) c+=Check(p[k]);\n\t\t\t\tif(c>=k) ans-=dis[A][B]*dp[c];\n\t\t\t}\n\t\t\treturn ans;\n\t\t}\n};\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{%raw%}$\\begin{aligned} \\frac{\\begin{aligned} \\sum_{i=0}^{min(k,sz[u]) } C(sz[u],i)\\cdot C(m-sz[u],k-i)\\end{aligned} } {C(m,k)}\\end{aligned}${%endraw%}\n\n\n\n{%raw%}$\\begin{aligned} \\frac{\\begin{aligned} \\sum_{i=0}^{min(k,sz[u]) } sz[u]!(m-sz[u])!k!(m-k)!\\cdot \\end{aligned} } {m!i!(sz[u]-i)!(k-i)!(m-sz[u]-k+i)!}\\end{aligned}${%endraw%}\n\n\n\n{%raw%}$\\begin{aligned} 1-\\frac{C(sz[u],k)} {C(m,k)}-\\frac{C(m-sz[u],k)} {C(m,k)}\\end{aligned}${%endraw%}\n\n$\\frac{C(i,k)} {C(m,k)}=\\frac{i!(m-k)!} {m!(i-k)!}$\n\ni从m for 到 k\n\nf(i)=f(i+1)/i(k-i+1)\n\n$\\frac{C(i-2,k-2)} {C(m,k)}=\\frac{(i-2)!k(k-1)(m-k)!} {m!(i-k)!}$\n\ni=m时，$f(m)=\\frac{k(k-1)} {m(m-1)}$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"COCI20122013 Contest 5 F ","url":"/articles/2020/08/31/7ef411bf.html","content":"# COCI20122013 Contest#5 F \n\n~~不知道题解在写什么.jpg~~\n\n### Part1 : Naive的dp\n\n令$dp_{i,a,b,j}$表示当前时刻$i$，两队比分为$a,b$，球在$j$手上的概率\n\n转移非常简单就不说了，单次转移为$O(n)$，复杂度为$O(n^2r^2T)$\n\n在优秀卡常+O2下跑进700ms\n\n优化的话:\n1.float\n\n~~2.分小块加速~~\n\n3.循环展开\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#pragma GCC optimize(2)\ntypedef float db;\n#define reg register\n#define rep(i,a,b) for(reg int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(reg int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,const T &b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,const T &b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int INF=1e9+10;\nconst db eps=1e-12;\n\nint n,R,T;\ndb dp[510][11][11][210],p[410],sz[410],ans[11][11];\nstruct Edge{\n\tint to,nxt;\n} e[80000];\nint head[410],ecnt;\nvoid AddEdge(int u,int v) {\n\te[++ecnt]=(Edge){v,head[u]};\n\thead[u]=ecnt;\n}\nint E[410][410],G[410][410]; \nconst int D=5;\ndb tmp[210][1<<D];\n\nint main(){\n\tn=rd(),R=rd(),T=rd();\n\tint m=(n*2+D-1)/D;\n\trep(i,1,n*2) {\n\t\tscanf(\"%f\",&p[i]);\n\t\tint e=rd(),f=rd();\n\t\tsz[i]=e+f+1;\n\t\trep(j,1,e) {\n\t\t\tint x=rd();\n\t\t\tif(i>n) x+=n;\n\t\t\tE[i][x]=1;\n\t\t}\n\t\trep(j,1,f) {\n\t\t\tint x=rd();\n\t\t\tif(i<=n) x+=n;\n\t\t\tE[i][x]=1;\n\t\t}\n\t\trep(j,1,m) {\n\t\t\tint f=(j-1)*D+1;\n\t\t\trep(k,0,D-1) G[i][j]|=E[i][f+k]<<k;\n\t\t\tif(G[i][j]) AddEdge(i,j);\n\t\t}\n\t}\n\tdp[0][0][0][1]=1;\n\tfor(reg int i=0;i<=T;++i) {\n\t\tfor(reg int a=0;a<=R;++a) {\n\t\t\tfor(reg int b=0;b<=R;++b) {\n\t\t\t\tfor(reg int j=1;j<=n*2;++j) if(dp[i][a][b][j]>eps) {\n\t\t\t\t\tif(a==R || b==R || i==T) { ans[a][b]+=dp[i][a][b][j]; continue; }\n\t\t\t\t\tdb t=dp[i][a][b][j]/sz[j];\n\t\t\t\t\tfor(reg int k=1;k<=m;k+=4) {\n\t\t\t\t\t\ttmp[k][G[j][k]]+=t;\n\t\t\t\t\t\ttmp[k+1][G[j][k+1]]+=t;\n\t\t\t\t\t\ttmp[k+2][G[j][k+2]]+=t;\n\t\t\t\t\t\ttmp[k+3][G[j][k+3]]+=t;\n\t\t\t\t\t}\n\t\t\t\t\tif(j<=n) {\n\t\t\t\t\t\tdp[i+1][a][b][n+1]+=t*(1-p[j]);\n\t\t\t\t\t\tdp[i+1][a+1][b][n+1]+=t*p[j];\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdp[i+1][a][b][1]+=t*(1-p[j]);\n\t\t\t\t\t\tdp[i+1][a][b+1][1]+=t*p[j];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor(reg int j=1;j<=m;++j) {\n\t\t\t\t\tint f=(j-1)*D+1;\n\t\t\t\t\trep(k,1,(1<<D)-1) {\n\t\t\t\t\t\t(k&1) &&  (dp[i+1][a][b][f]+=tmp[j][k]);\n\t\t\t\t\t\t(k&2) &&  (dp[i+1][a][b][f+1]+=tmp[j][k]);\n\t\t\t\t\t\t(k&4) &&  (dp[i+1][a][b][f+2]+=tmp[j][k]);\n\t\t\t\t\t\t(k&8) &&  (dp[i+1][a][b][f+3]+=tmp[j][k]);\n\t\t\t\t\t\t(k&16) &&  (dp[i+1][a][b][f+4]+=tmp[j][k]);\n\t\t\t\t\t\ttmp[j][k]=0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\trep(i,0,R) rep(j,0,R) if(i!=R || j!=R) printf(\"%.10f\\n\",ans[i][j]);\n}\n\n```\n\n$$\\  $$\n\n### Part2: 状态割裂\n\n定义每个球进的时间为关键点，我们发现关键点的状态非常单一，只有两种\n\n一个合法的转移序列可以被分为若干关键点的段以及最后一段到达$T$之后停止转移\n\n考虑预处理两个关键点之间的转移概率\n\n令$g_{a,b,i}$为当球在$a$队一号队员时，$i$次后$b$队进球的概率\n\n可以枚举$a$，类似上面的$dp$，去掉比分的一维即可\n\n预处理复杂度为$O(Tn^2)$\n\n然后$dp$时直接枚举两个关键点转移，令\n\n$h_{i,a,b,j}$时刻$i$比分为$a,b$，球在$j$队一号队员手上的概率\n\n转移分两种\n\n1.枚举下一个在$T$以内的关键点转移\n\n复杂度为$O(T)$\n\n2.考虑在$T$以内的时间不再出现进球了\n\n需要预处理出当球在$i$队手上时，$j$次内出现进球的概率$s_{i,j}$，这个直接由$g$数组累前缀和即可\n\n$dp$关键点的复杂度为$O(T^2r^2)$\n\n大概比上面代码快4-5倍\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#pragma GCC optimize(2)\ntypedef float db;\n#define reg register\n#define rep(i,a,b) for(reg int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(reg int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n    T s=0; int f=0;\n    while(!isdigit(IO=getchar())) if(IO=='-') f=1;\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return f?-s:s;\n}\n\nconst int INF=1e9+10;\nconst db eps=1e-12;\n\nint n,R,T;\nstruct Edge{\n    int to,nxt;\n} e[80000];\nint head[410],ecnt;\nvoid AddEdge(int u,int v) {\n    e[++ecnt]=(Edge){v,head[u]};\n    head[u]=ecnt;\n}\ndb p[410],sz[410],ans[11][11],f[510][210],g[2][2][510],s[2][510];\n// g[i][j][k] 在i拿球的情况下，j在第k次进球了\ndb h[510][11][11][2];\n\nint main(){\n    n=rd(),R=rd(),T=rd();\n    rep(i,1,n*2) {\n        scanf(\"%f\",&p[i]);\n        int e=rd(),f=rd();\n        sz[i]=e+f+1;\n        rep(j,1,e) {\n            int x=rd();\n            if(i>n) x+=n;\n            AddEdge(i,x);\n        }\n        rep(j,1,f) {\n            int x=rd();\n            if(i<=n) x+=n;\n            AddEdge(i,x);\n        }\n    }\n    rep(d,0,1) {\n        f[0][d*n+1]=1;\n        rep(i,0,T) {\n            rep(j,1,n*2) if(f[i][j]>eps) {\n                db t=f[i][j]/sz[j];\n                for(reg int k=head[j];k;k=e[k].nxt) f[i+1][e[k].to]+=t;\n                f[i+1][j>n?1:n+1]+=t*(1-p[j]);\n                g[d][j>n][i+1]+=t*p[j];\n                f[i][j]=0;\n            }\n        }\n        rep(i,0,T) {\n            s[d][i]=g[d][0][i]+g[d][1][i];\n            if(i) s[d][i]+=s[d][i-1];\n        }\n    }\n    h[0][0][0][0]=1;\n    rep(i,0,T) {\n        rep(a,0,R) rep(b,0,R) rep(j,0,1) if(h[i][a][b][j]>eps) {\n            if(a==R || b==R || i==T){ ans[a][b]+=h[i][a][b][j]; continue; }\n            rep(k,1,T-i) {\n                // 能在结束前产生一次进球\n                h[i+k][a+1][b][1]+=h[i][a][b][j]*g[j][0][k];\n                h[i+k][a][b+1][0]+=h[i][a][b][j]*g[j][1][k];\n            }\n            ans[a][b]+=h[i][a][b][j]*(1-s[j][T-i]);\n        }\n    }\n    rep(i,0,R) rep(j,0,R) if(i<R || j<R) printf(\"%.10f\\n\",ans[i][j]);\n}\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["COCI"],"categories":["题解"]},{"title":"2014多校6 Another Letter Tree","url":"/articles/2020/08/31/727d6e9a.html","content":"# 2014多校6 Another Letter Tree\n\n## 点分治做法\n\n就裸地离个线，放到点分治上，从每个根开始，维护$dp_{u,l,r}$表示这条链匹配了序列中$[l,r]$的部分\n\n注意dp数组要一正一反，俩家伙一个含根一个不含\n\n查询要合并两个dp数组，但是只需要知道$dp_{1,|s_0|}$，因此合并复杂度是$O(|s_0|)$的\n\n最终复杂度，处理为$O(n\\log n|s_0|^2+q|s_0|)$\n\n\n\n\n\n## 树剖线段树做法\n\n类似上面的dp，线段树维护即可\n\n### 问题1\n\n需要存正反！\n\n然后你发现内存从中间裂开！！\n\n正反分两次，离线跑两次就可以了啊啊啊啊\n\n### 问题2\n\n如果直接查询合并，合并两个dp数组复杂度为$O(|s_0|^3)$\n\n查询复杂度为$O(q\\log ^2n|s_0|^3)$\n\n妙啊!!比$n^2$还大!!\n\n所以最后不能合并dp数组，而应该直接累加到答案数组上\n\n### 问题3\n\n没错现在我们的复杂度为$O(q\\log ^2n|s_0|^2)$\n\n依然大得令人无法忍受\n\n~~但是没想到吧，数据全部都是链，树剖是$O(1)$的~~\n\n优化：查询重链时，只有最后依次是在链上查询$[l,r]$都在中间的，而对于直接跳到top的部分，可以预处理出来\n\n算上线段树的预处理，这样总复杂度就是$O(n|s_0|^3+q\\log n |s_0|^2)$\n\n\n\n## 并查集做法\n\n把问题拆成查询两条$u$到它的祖先$v$的答案\n\n每个节点存储一个dp矩阵，用带权并查集维护\n\n具体方法是:将询问按照$\\text{LCA}$深度逆序排序后，每次查询一直将$u$合并到$v$为止\n\n复杂度为$O(n\\alpha(n)|s_0|^3)$，理论上来说，这个转移矩阵应当很稀疏，乘法应该很快，但是实际常数比较大\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#pragma GCC optimize(2)\n#define reg register\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define rep(i,a,b) for(reg int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(reg int i=a,i##end=b;i>=i##end;--i)\nchar IO;\nint rd(){\n\tint s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\n\nconst int N=5e4+10,P=10007;\n\nint n,m,len;\nchar str[N],t[N];\nstruct Node{\n\tint a[31][31];\n\tvoid clear(){ memset(a,0,sizeof a); }\n\tvoid Init(int u) { clear(); rep(i,1,len) if(t[i]==str[u]) a[i][i]=1; }\n\tNode operator + (const Node &x) const {\n\t\tNode res; res.clear();\n\t\trep(i,1,len) for(int j=i;j<len && a[i][j];++j) for(int k=j+1;k<=len && x.a[j+1][k];++k) res.a[i][k]=(res.a[i][k]+a[i][j]*x.a[j+1][k])%P;\n\t\trep(i,1,len) rep(j,i,len) {\n\t\t\tres.a[i][j]+=a[i][j],Mod1(res.a[i][j]);\n\t\t\tres.a[i][j]+=x.a[i][j],Mod1(res.a[i][j]);\n\t\t}\n\t\treturn res;\n\t}\n} s[N];\n\nstruct Edge{\n\tint to,nxt;\n}e[N<<1];\nint head[N],ecnt;\nvoid AddEdge(int u,int v) {\n\te[++ecnt]=(Edge){v,head[u]};\n\thead[u]=ecnt; \n}\n#define erep(u,i) for(int i=head[u];i;i=e[i].nxt)\n\nint QX[N],QY[N],QL[N];\nint dep[N],id[N],fa[N][18];\nvoid pre_dfs(int u,int f) {\n\tdep[u]=dep[fa[u][0]=f]+1;\n\trep(i,1,17) fa[u][i]=fa[fa[u][i-1]][i-1];\n\terep(u,i) {\n\t\tint v=e[i].to;\n\t\tif(v==f) continue;\n\t\tpre_dfs(v,u);\n\t}\n}\nint LCA(int x,int y) {\n\tif(dep[x]<dep[y]) swap(x,y);\n\tfor(int i=0,del=dep[x]-dep[y];(1<<i)<=del;++i) if(del&(1<<i)) x=fa[x][i];\n\tif(x==y) return x;\n\tdrep(i,17,0) if(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i];\n\treturn fa[x][0];\n}\n\nint F[N],ans[N][31],Ans[N];\nint Find(int x,int k=0) {\n\tif(F[x]==x) return x;\n\tint f=F[x]; F[x]=Find(f,k);\n\tif(F[f]!=f){\n\t\tif(!k) s[x]=s[x]+s[f];\n\t\telse s[x]=s[f]+s[x];\n\t}\n\treturn F[x];\n}\n\nint main(){\n\trep(kase,1,rd()) {\n\t\tn=rd(),m=rd();\n\t\trep(i,1,n) head[i]=ecnt=0;\n\t\trep(i,2,n) {\n\t\t\tint u=rd(),v=rd();\n\t\t\tAddEdge(u,v),AddEdge(v,u);\n\t\t}\n\t\tscanf(\"%s%s\",str+1,t+1),len=strlen(t+1);\n\t\tpre_dfs(1,0);\n\t\trep(i,1,m) id[i]=i,QX[i]=rd(),QY[i]=rd(),QL[i]=LCA(QX[i],QY[i]);\n\t\tsort(id+1,id+m+1,[&](int x,int y){ return dep[QL[x]]>dep[QL[y]]; });\n\n\t\trep(i,1,n) F[i]=i,s[i].clear();\n\t\trep(k,1,m){\n\t\t\tint i=id[k],x=QX[i];\n\t\t\twhile(1){\n\t\t\t\tint y=Find(x);\n\t\t\t\tif(y==QL[i]) break;\n\t\t\t\tF[y]=fa[y][0],s[y].Init(y);\n\t\t\t}\n\t\t\tans[i][0]=1;\n\t\t\trep(j,1,len) ans[i][j]=s[x].a[1][j];\n\t\t\tdrep(j,len,1) if(str[QL[i]]==t[j]) ans[i][j]+=ans[i][j-1],Mod1(ans[i][j]);\n\t\t}\n\n\t\trep(i,1,n) F[i]=i,s[i].clear();\n\t\trep(k,1,m){\n\t\t\tint i=id[k],x=QY[i]; Ans[i]=0;\n\t\t\twhile(1){\n\t\t\t\tint y=Find(x,1);\n\t\t\t\tif(y==QL[i]) break;\n\t\t\t\tF[y]=fa[y][0],s[y].Init(y);\n\t\t\t}\n\t\t\trep(j,0,len-1) Ans[i]=(Ans[i]+ans[i][j]*s[x].a[j+1][len])%P;\n\t\t\tAns[i]=(Ans[i]+ans[i][len])%P;\n\t\t}\n\t\trep(i,1,m) printf(\"%d\\n\",Ans[i]);\n\t}\n}\n\n```\n\n$$ \\ $$\n\n## 伪矩阵求逆做法\n\n同样的，把问题拆成查询两条$u$到它的祖先$v$的答案(不包含v)\n\n以从$v$到$u$的字符串为例，设$dp_u$为$u$的祖先链的dp矩阵，我们要求的部分答案是$x$\n\n则$dp_v\\cdot x=dp_u, x=\\frac{dp_u} {dp_v}$\n\n一般来说，矩阵求逆是一个很难实现的东西\n\n但是发现对于一种$dp$，它的矩阵一定是一个上/下对角的矩阵\n\n我们需要求出矩阵第一维为1或者第二维为$|s_0|$的部分\n\n如果暴力求，可以看做求解一个$|s_0|$元的线性方程组，可以用高斯消元在$O(|s_0|^3)$时间内求解\n\n而实际上，这个线性方程组是含拓扑序关系的，任何一个含拓扑关系的线性方程组求解是不需要高斯消元的\n\n而且这个问题列出的方程矩阵就已经是上对角矩阵了\n\n所以写出来就是容斥吧\n\ntips: 预处理部分一次只插入一个字符，复杂度为$O(n|s_0|^2)$ (也可以认为是稀疏矩阵乘法)\n\n查询部分求解线性方程复杂度为$O(|s_0|^2)$，合并答案复杂度为$O(|s_0|)$\n\n因此复杂度为$O((n+q)|s_0|^2)$\n\nCode: 注意两种dp共用了一个数组\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define reg register\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(reg int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(reg int i=a,i##end=b;i>=i##end;--i)\nchar IO;\nint rd(){\n\tint s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\n\nconst int N=5e4+10,P=10007;\n\nint n,m,len;\nchar str[N],t[N];\nstruct Edge{\n\tint to,nxt;\n}e[N<<1];\nint head[N],ecnt;\nvoid AddEdge(int u,int v) {\n\te[++ecnt]=(Edge){v,head[u]};\n\thead[u]=ecnt; \n}\n#define erep(u,i) for(int i=head[u];i;i=e[i].nxt)\n\nint dep[N],id[N],fa[N][18];\nint dp[N][31][31];\nint f1[31],f2[31];\n\nvoid pre_dfs(int u,int f) {\n\tdep[u]=dep[fa[u][0]=f]+1;\n\trep(i,1,17) fa[u][i]=fa[fa[u][i-1]][i-1];\n\trep(i,1,len) rep(j,1,len) {\n\t\tdp[u][i][j]=dp[f][i][j];\n\t\tif(str[u]==t[j]) {\n\t\t\tif(i==j) dp[u][i][j]++,Mod1(dp[u][i][j]);\n\t\t\tif(i<j) dp[u][i][j]+=dp[f][i][j-1],Mod1(dp[u][i][j]);\n\t\t\tif(i>j) dp[u][i][j]+=dp[f][i][j+1],Mod1(dp[u][i][j]);\n\t\t}\n\t}\n\terep(u,i) {\n\t\tint v=e[i].to;\n\t\tif(v==f) continue;\n\t\tpre_dfs(v,u);\n\t}\n}\nint LCA(int x,int y) {\n\tif(dep[x]<dep[y]) swap(x,y);\n\tfor(int i=0,d=dep[x]-dep[y];(1<<i)<=d;++i) if(d&(1<<i)) x=fa[x][i];\n\tif(x==y) return x;\n\tdrep(i,17,0) if(fa[x][i]!=fa[y][i]) x=fa[x][i],y=fa[y][i];\n\treturn fa[x][0];\n}\n\nvoid Calcdp1(int u,int f) {\n\trep(i,f1[0]=1,len) {\n\t\tf1[i]=dp[u][i][1];\n\t\trep(j,0,i-1) f1[i]=(f1[i]-f1[j]*dp[f][i][j+1])%P;\n\t\tMod2(f1[i]);\n\t}\n}\n\nvoid Calcdp2(int u,int f) {\n\tdrep(i,len,f2[len+1]=1) {\n\t\tf2[i]=dp[u][i][len];\n\t\trep(j,i+1,len+1) f2[i]=(f2[i]-dp[f][i][j-1]*f2[j])%P;\n\t\tMod2(f2[i]);\n\t}\n}\nint Que(int x,int y) {\n\tint lca=LCA(x,y);\n\tCalcdp1(x,fa[lca][0]),Calcdp2(y,lca);\n\tint ans=0;\n\trep(i,0,len) ans=(ans+f1[i]*f2[i+1])%P;\n\treturn ans;\n}\n\nint main(){\n\trep(kase,1,rd()) {\n\t\tn=rd(),m=rd();\n\t\trep(i,1,n) head[i]=ecnt=0;\n\t\trep(i,2,n) {\n\t\t\tint u=rd(),v=rd();\n\t\t\tAddEdge(u,v),AddEdge(v,u);\n\t\t}\n\t\tscanf(\"%s%s\",str+1,t+1),len=strlen(t+1);\n\t\tpre_dfs(1,0);\n\t\trep(i,1,m) {\n\t\t\tint x=rd(),y=rd();\n\t\t\tprintf(\"%d\\n\",Que(x,y));\n\t\t}\n\t}\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"2016 多校5 ATM","url":"/articles/2020/08/30/c8ff4ca3.html","content":"# 2016 多校5 ATM\n\n题意: \n\n有个人富到不知道自己有多少钱，但是知道钱数$x\\in \\Z \\cap [0,K]$\n\n它最多可以有$W$次查询超过钱数，$W\\ge 1$\n\n要求在最优决策的情况下，最小次数取出所有钱的期望次数\n\n$$ \\ $$\n\n设$K,W$上界为$O(n)$\n\n先考虑边界情况，如果它手里有$0$块钱，那么需要查询一次才知道自己吃土了\n\n如果手头$W=1$，那么只能每次取$1$，否则就可能被抓走\n\n众所周知，**情况个数有限**的期望问题，可以先直接计数然后除掉情况数，所以\n\n定义$dp_{i,j}$为已知手头的票子上限$i$，且还剩$j$次会被抓去干奇怪的事情的最小代价总和\n\n对于$j>1$的情况，我们需要决策这一次选出多少钱\n\n假设这一次我们选择取出$k$块钱\n\n1.那么对于实际钱数为$[0,k-1]$的部分，查询会超限，并且知道上界变为$k-1$\n\n2.对于实际钱数$[k,i]$的部分，上界变为$i-k$\n\n而这次决策产生的代价要计算所有情况的代价，即为$i+1$\n\n因此，转移的表达式应是{%raw%}$\\begin{aligned} dp_{i,j}=\\min_{k=1}^i\\lbrace dp_{k-1,j-1}+dp_{i-k,j}+i+1\\rbrace\\end{aligned}${%endraw%}\n\n~~因为不是期望而是计数，决策应该更好理解了吧~~\n\n直接转移，复杂度为$O(n^3)$\n\n### 优化1\n\n不会证明，但是$dp_{k-1,j-1}+dp_{i-k,j}$构成了关于$k$的 **斜率单调非递减的函数**(俗称**单峰函数**)，可以直接三分\n\n复杂度为$O(n^2\\log n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long double ldb;\n#define reg register\n#define rep(i,a,b) for(reg int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(reg int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,const T &b){ ((a>b)&&(a=b)); }\n\nconst int N=2e3+10;\n \nint n,m;\nint dp[N][N];\n \nint main(){\n    rep(i,1,N-1) dp[1][i]=2;\n    rep(i,1,N-1) dp[i][1]=i*(i+1)/2+i;\n    rep(i,2,N-1) rep(j,2,N-1) {\n        dp[i][j]=1e9;\n        int l=1,r=i;\n        cmin(dp[i][j],dp[0][j-1]+dp[i-1][j]+i+1);\n        cmin(dp[i][j],dp[i-1][j-1]+dp[0][j]+i+1);\n        while(l<r) {\n            int a=(l+r)>>1,b=a+1;\n            int x=dp[a-1][j-1]+dp[i-a][j]+i+1,y=dp[b-1][j-1]+dp[i-b][j]+i+1;\n            cmin(dp[i][j],x),cmin(dp[i][j],y);\n            if(x>=y) l=b;\n            else r=a;\n        }\n    }\n    while(~scanf(\"%d%d\",&n,&m)) printf(\"%.6Lf\\n\",(ldb)dp[n][m]/(n+1));\n}\n \n \n```\n\n### 优化2\n\n感性理解，钱的上界越大，显然我们每次最优决策要取出的也就越多\n\n即$dp_{i,j}$的最优决策位置关于$i$ **单调非递减**\n\n由于转移的式子比较奇怪，这个题目不好使用决策单调性的分治优化方法~~(或许很简单吗)~~\n\n但是由于转移是一个单峰函数，不存在波动的问题，所以可以直接记录决策位置$g_{i,j}$\n\n或者说，就是单峰函数的最值位置是递增的，每次从$g_{i-1,j}$的最优位置开始向后找到$g_{i,j}$的峰的位置即可停止\n\n对于每个$j$，$g_{i,j}$最多从$1$移动到$K$，所以复杂度为$O(n^2)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long double ldb;\n#define rep(i,a,b) for(reg int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(reg int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,const T &b){ ((a>b)&&(a=b)); }\n \nconst int N=2e3+10;\n \nint n,m;\nint dp[N][N],G[N][N];\n \nint main(){\n    rep(i,1,N-1) dp[1][i]=2;\n    rep(i,1,N-1) dp[i][1]=i*(i+1)/2+i;\n    rep(i,2,N-1) rep(j,2,N-1) {\n        dp[i][j]=1e9;\n        rep(k,max(G[i-1][j],1),i) { // 从上一个决策位置开始for\n            int x=dp[k-1][j-1]+dp[i-k][j]+i+1;\n            if(x<=dp[i][j]) G[i][j]=k,dp[i][j]=x;\n            else break;\n        }\n    }\n    while(~scanf(\"%d%d\",&n,&m)) printf(\"%.6Lf\\n\",(ldb)dp[n][m]/(n+1));\n}\n \n \n```\n\n\n\n### 优化3:第二维大小的优化\n\n我们知道，存在一种决策方法即每次二分上界，可以取到一个较优值\n\n满足这个决策只需要$W\\ge \\log_2 k$，大致可以认为$W\\ge 10$\n\n在最优决策的情况下，一定可以在$10$次错误的范围内查出结果，即$W\\ge 10$之后$W$的值已经不会影响答案了\n\n所以直接上优化，转移复杂度就是$O(n^2\\log n)$\n\n加上决策单调性的优化，就是$O(n\\log n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define reg register\n#define rep(i,a,b) for(reg int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(reg int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,const T &b){ ((a>b)&&(a=b)); }\n\nconst int N=2e3+10;\n\nint n,m;\nint dp[N][11],G[N][11];\n\nint main(){\n    rep(i,1,10) dp[1][i]=2;\n    rep(i,1,N-1) dp[i][1]=i*(i+1)/2+i;\n    rep(i,2,N-1) rep(j,2,10) {\n        dp[i][j]=1e9;\n        rep(k,max(G[i-1][j],1),i) {\n            int x=dp[k-1][j-1]+dp[i-k][j]+i+1;\n            if(x<=dp[i][j]) G[i][j]=k,dp[i][j]=x;\n            else break;\n        }\n    }\n    while(~scanf(\"%d%d\",&n,&m)) printf(\"%.6lf\\n\",1.0*dp[n][min(m,10)]/(n+1));\n}\n\n```\n\n~~以下是来自地狱的魔改代码~~\n```cpp\n#include<cstdio>\n#define rep(i,a,b) for(i=a;i<=b;++i)\nenum{N=2000};\nint n,m,dp[11][N|1],i,j,k,x;\nmain(){\n\trep(i,1,N) dp[1][i]=i*(i+1)/2+i;\n\trep(j,2,10) rep(i,dp[j][k=1]=2,N) {\n\t\tdp[j][i]=1e9;\n\t\tfor(;k<=i && (x=dp[j-1][k-1]+dp[j][i-k]+i+1)<=dp[j][i];++k) dp[j][i]=x;\n\t\t--k;\n\t}\n\twhile(~scanf(\"%d%d\",&n,&m))printf(\"%.6lf\\n\",1.0*dp[m>10?10:m][n]/(n+1));\n}\n\n```\n\n\n\n","tags":["Atcoder"],"categories":["题解"]},{"title":"线性递推的求解","url":"/articles/2020/08/30/92716457.html","content":"# 线性递推的求解\n\n参考文献：2019集训队论文，钟子谦《两类递推数列的性质和应用》\n\n这篇文章介绍如何求解，线性递推的应用更多在[这里]()\n\n数列$\\{a_0,a_1,\\cdots \\}$\n\n向量序列$\\{v_0,v_1,\\cdots\\}$\n\n矩阵序列$\\{M_0,M_1,\\cdots\\}$\n\n的线性递推\n\n序列$a_0,a_1,\\cdots,a_n$的线性递推的定义应当是\n\n对于一个常数列$r_0,r_1,\\cdots,r_m(r_0=1)$ \n\n为了便于表示，令\n\n$\\lambda(i,r)=\\sum_{j=1}^{m}a_{i-j}r_j$\n\n$\\Delta(i,r)=\\sum_{j=0}^m a_{i-j}$\n\n满足$\\forall i\\ge m,\\Delta(i,r)=0$\n\n这似乎与与平常的认知有一些冲突\n\n\n\n$$ \\ $$\n\n## 求解序列的最短线性递推: Berlekamp-Massey 算法\n\n对于一个$n$个元素的数列$a_{1,\\cdots, n}$，求出它的**最短线性递推式**\n\n为了便于理解约定下文求出的是最小的$m$和对应的$r_1,\\cdots r_m$使得$\\forall i\\in [m+1,n],a_i=\\sum_{j=1}^{m}a_{i-j}r_j$\n\n很显然使用**高斯消元**可以在$O(n^3)$的时间内求解\n\n而$\\text{Berlekamp-Massey(BM)}$算法是通过依次对于前$i$项构造，\n\n添加每一项时在$O(n)$的时间内找到一个可行的构造方法，将复杂度降低到了$O(n^2)$\n\n$$ \\ $$\n\n$$ \\ $$\n\n### 算法过程\n\n为了更好描述，设$r$的阶为$d(r)$\n\n考虑依次加入每个数$a_i$，设当前$d(r)=m$，上一次的递推是$p$,$p$出现不匹配的位置是$f$\n\n特别的，初始状态的递推是$r=\\{ \\},f=0$\n\n$1.\\Delta(i,r)=0$，那么不需要扩展\n\n2.$\\Delta(i,r)\\ne 0$\n\n$\\text{i}.m=0$，此时只有一种情况即插入了第一个$a_i\\ne 0$，唯一的递推序列就是$d(r')=i,r_j=0(j>0)$，此时显然成立\n\n$\\text{ii}.m\\ne 0$\n\n构造思路是找到一个$r'$使得$\\forall j\\in[d(r'),i-1],\\lambda(j,r')=0\\and \\lambda (n,r')=\\Delta(i-1,r)$\n\n那么当前合法的转移就是$r+r'$\n\n设$t=\\frac{\\Delta(n,r)} {\\Delta(f,p)}$\n\n构造$r'=t \\cdot x^{i-f-1}(1-p)$\n\n写出来就是\n\n$r'=\\{\\underbrace{0,\\cdots,0},t\\cdot (1-p)\\}$\n\n$ \\ \\ \\ \\ \\ \\ \\ \\ i-f-1$个$0$\n\n$r'=\\{\\underbrace{0,\\cdots,0},t,-t\\cdot p_{1},-t\\cdot p_{2}\\cdots,-t\\cdot p_{d(p)} \\}$\n\n$ \\ \\ \\ \\ \\ \\ \\ \\ i-f-1$个$0$\n\n此时，$d(r')=i-f+d(p)$\n\n当$j\\in [d(r')+1,i-1]$时，$\\lambda(j,r')=\\sum_{k=i-f}^{d(r')}a_{j-k}r'_k$\n\n$=t\\cdot( a_{j-(i-f)}-\\lambda(j-(i-f),p))$\n\n由于$p$对于$j\\in[d(r')+1-(i-f),i-1-(i-f)]=[d(p)+1,f-1]$，$p$这个递推式成立\n\n即$\\lambda(j,r')=0$\n\n当$j=i$时，\n\n$\\lambda(i,r')=t\\cdot (a_{i-(i-f)}+\\lambda(i-(i-f),p))=t\\cdot \\Delta(f,p)$\n\n即$\\lambda (i,r')=\\Delta(n,r)$\n\n完成了我们想要的构造，所以每次记录上一次的失配位置，即可找到最小递推式\n\n关于为什么求得的就是最小递推，可以看论文里的证明\n\n\n\n## 求解向量序列的线性递推\n\n对于长度为$n$的向量序列$\\{v_0,v_1,\\cdots\\}$\n\n在模$P$意义下，随机一个向量$u$，构造标量序列$\\{v_0u,v_1u,\\cdots\\}$\n\n构造和求解这个标量序列的线性递推，复杂度均为$O(n^2)$\n\n求得的线性递推也为向量序列的线性递推的概率为$1-\\frac{n} {P}$，通常认为不会错\n\n~~(可以认为复杂度与读入同阶?)~~\n\n$$ \\ $$\n\n## 求解矩阵序列的线性递推\n\n对于长度为$n$的矩阵序列$\\{M_0,M_1,\\cdots\\}$\n\n同样在模$P$意义下，随机两个向量$u,v$，构造标量序列$\\{uM_0v,uM_1v,\\cdots\\}$\n\n求解线性递推的复杂度为$O(n^2)$\n\n但是构造标量序列需要计算$n$次向量与矩阵的乘法，复杂度为$O(n^3)$\n\n~~(可以认为复杂度与读入同阶?)~~\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"COCI2011/2012 Contest 1 F  状压加速Dp","url":"/articles/2020/08/27/2e683e2a.html","content":"# COCI2011/2012 Contest#1 F  状压加速dp\n\n首先是一个非常Naive的dp，令$dp[i][x][y]$表示$i$时刻$x,y$是否能被跳到\n\n枚举，然后转移，如果滚动数组，就可以做到$O(n^2)$空间，$O(Tn^2)$时间复杂度\n\n这显然是TLE的。。。\n\n$$ \\ $$\n\n注意到题目的$n\\leq 30$，可以直接用一个int存在某一行/列的答案\n\n设时刻$i$第$j$列的答案为$dp[i][j]$\n\n假设不考虑答案的限制，两之间转移可以做到$O(1)$，即\n\n1.$dp[i][j\\pm 1]$左/右移两位\n\n2.$dp[i][j\\pm 2]$左/右移一位\n\n两者转移即可，但是涉及到倍数的限制，设$can[i][j]$为$i$时刻$j$列的可行跳跃位置\n\n则只需要最后的时候让$dp[i][j]$与$can[i][j]$取交集即可\n\n如果直接枚举倍数，复杂度上限是$O(n^2 T)$\n\n考虑分块决策，设将$[1,D]$的因数挑出来额外记录一个数组$can2[x][j]$表示值为$x$的第$j$列有那些\n\n不直接枚举他们，而是在每次访问时考虑他们对于$can[i][j]$的贡献\n\n在优秀实现下，复杂度上限为$O(n^2\\frac{T} {D+1}+T (D+\\sum_{t=1}^{D} \\frac{1} {t} n))=O(n^2\\frac{T} {D+1}+T (n\\ln D+D))$\n\n这个实现上来说，就是枚举时间$i$后，判断是否满足$t|i $，然后再将$can2[t][j]$贡献到$can[i][j]$\n\n显然，$t|i$成立的次数就是$T\\sum_{t=1}^{D} \\frac{1} {t} $，也就是要循环这么多次取贡献$j$这一维\n\n调整一下$D$的参数\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#pragma GCC optimize(2)\n#define reg register\n#define rep(i,a,b) for(reg int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(reg int i=a,i##end=b;i>=i##end;--i)\nconst int N=30,D=7;\n\nint n,m,a[N][N],dp[2][N];\nint can[1000010][N],t[D+1][N];\n\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tint sx,sy; scanf(\"%d%d\",&sx,&sy),sx--,sy--;\n\trep(i,0,n-1) rep(j,0,n-1) {\n\t\tscanf(\"%d\",&a[i][j]);\n\t\tif(a[i][j]<=D) t[a[i][j]][i]|=1<<j;\n\t\telse for(reg int T=a[i][j];T<=m;T+=a[i][j]) can[T][i]|=1<<j;\n\t}\n\tint cur=0; dp[cur][sx]=1<<sy;\n\trep(i,1,m) {\n\t\trep(j,1,D) if(i%j==0) rep(k,0,n-1) can[i][k]|=t[j][k];\n\t\trep(j,0,n-1) {\n\t\t\tdp[!cur][j]=0;\n\t\t\tif(j) {\n\t\t\t\tdp[!cur][j]|=dp[cur][j-1]<<2;\n\t\t\t\tdp[!cur][j]|=dp[cur][j-1]>>2;\n\t\t\t}\n\t\t\tif(j<n-1) {\n\t\t\t\tdp[!cur][j]|=dp[cur][j+1]<<2;\n\t\t\t\tdp[!cur][j]|=dp[cur][j+1]>>2;\n\t\t\t}\n\t\t\tif(j>1) {\n\t\t\t\tdp[!cur][j]|=dp[cur][j-2]<<1;\n\t\t\t\tdp[!cur][j]|=dp[cur][j-2]>>1;\n\t\t\t}\n\t\t\tif(j<n-2) {\n\t\t\t\tdp[!cur][j]|=dp[cur][j+2]<<1;\n\t\t\t\tdp[!cur][j]|=dp[cur][j+2]>>1;\n\t\t\t}\n\t\t\tdp[!cur][j]&=can[i][j];\n\t\t}\n\t\tcur^=1;\n\t}\n\tint ans=0;\n\trep(i,0,n-1) rep(j,0,n-1) if(dp[cur][i]&(1<<j)) ans++;\n\tprintf(\"%d\\n\",ans);\n\trep(i,0,n-1) rep(j,0,n-1) if(dp[cur][i]&(1<<j)) printf(\"%d %d\\n\",i+1,j+1);\n}\n\n\n\n\n\n\n```\n\n","tags":["COCI"],"categories":["题解"]},{"title":"[COCI2010-2011 7] UPIT","url":"/articles/2020/08/26/415f869c.html","content":"# [COCI2010-2011#7] UPIT\n\n约定:视$n,q$同阶\n\n看一下题目的操作\n\n1.区间赋值\n\n2.区间差分加\n\n3.插入元素\n\n4.区间查询\n\n我们知道1,2操作都是可以用懒标记维护的，具体过程可能有一点细节\n\n1.记录区间差分加的过程，要记录等差数列首项和公差，两个等差数列相加直接首项和公差都相加即可\n\n2.区间赋值的优先级要高于加法，即打上赋值标记就要清空加法标记，标记下传时注意先下传赋值标记\n\n然后具体问题落到如何实现插入元素这个操作上\n\n### 块状链表\n\n对于静态的数组，可以直接静态分块来做\n\n而要动态插入时，找到对应块，插入即可，但是涉及到编号问题\n\n所以需要每个块维护一个$Size$，块内每个元素维护一个标号$id_i$\n\n同时需要对于块的$Size$累前缀和$SumSize$，则块$i$内编号为$j$的元素在数组中的实际编号为$SumSize_{i-1}+j$\n\n插入时把整个块内的元素取出重新标号即可\n\n但是这样插入后，一个块的$Size$会变大，再实现分块的操作时复杂度没有保证\n\n因此需要加入一个操作:当$Size_i>2\\sqrt n$时,$O(n)$重构整个序列，这样每$\\sqrt n$次插入操作会导致一次重构，复杂度为均摊的$O(n\\sqrt n)$\n\n然后可以用类似分块的方法来直接维护\n\n$$ \\ $$\n\n### 线段树\n\n静态的操作线段树可以直接维护\n\n在线段树上额外维护一个01，表示这个元素是否出现\n\n将插入操作转化为在让对应位置的0变为1，但是由于不知道插入后的位置，所以不能直接操作\n\n于是有两种解决办法\n\n#### 暴力值域\n\n静态情况下我们对于$[1,n]$建树，但是动态可以对于$[1,n\\cdot q]$建函数式线段树\n\n### 离线\n\n离线维护，预处理出插入的位置\n\n$$ \\ $$\n\n### 平衡树\n\n~~下面是安利时间~~\n\n来学Treap吧\n\n它可以 \n\n1.查询k大\n\n2.插入元素\n\n3.区间修改\n\n4.区间翻转\n\n5.可持久化!!\n\n~~6.吊打Splay~~\n\nTreap 即树堆，意思是在满足二叉查找树的性质同时满足二叉堆的性质\n\n给定每个节点一个额外的随机权值，让二叉查找树对于这个权值满足堆的性质即可\n\n这样构造的二叉查找树，树高是$O(\\log n)$的\n\n#### 带旋Treap\n\n像普通二叉查找树一样每次插入节点到叶子位置后，可能不满足二叉堆的性质，因此需要不断向上zig/zag来调整满足\n\n区间操作可以尝试像写线段树一样写\n\n但是它不可持久化\n\n#### 非旋Treap\n\n维护两个基础操作\n\n1.平衡树合并，操作需要满足两棵树的大小顺序确定，返回新的根\n\n2.平衡树分裂为$[1,d],[d+1,n]$的两部分，返回两棵树的根\n\n1.合并操作$x,y$\n\n按照节点的权值比较谁是平衡树的根，然后将根的左/右子树与另一棵树合并作为新的子树，递归实现\n\n2.分裂$x,d$\n\n维护$Size$判断是要分裂左子树还是右子树，将子树分裂得到的部分作为$x$新的子树，递归实现即可\n\n```cpp\ntypedef pair <int,int> Pii;\n#define mp make_pair\nint Union(int x,int y) {\n\tif(!x || !y) return x|y;\n\tDown(x),Down(y);\n\tif(key[x]<key[y]) return rs[x]=Union(rs[x],y),Up(x),x;\n\treturn ls[y]=Union(x,ls[y]),Up(y),y;\n}\n\nPii Split(int x,int d){\n\tif(!x) return mp(x,x);\n\tif(sz[x]<=d) return mp(x,0);\n\tif(d==0) return mp(0,x);\n\tDown(x);\n\tif(sz[ls[x]]+1<=d) {\n\t\tPii y=Split(rs[x],d-sz[ls[x]]-1);\n\t\treturn rs[x]=y.first,Up(x),mp(x,y.second);\n\t} else {\n\t\tPii y=Split(ls[x],d);\n\t\treturn ls[x]=y.second,Up(x),mp(y.first,x);\n\t}\n}\n```\n\n插入操作可以分裂前$k$个，将新节点和得到的两棵树按次合并\n\n区间更新可以分裂两次，将对应区间的子树操作即可\n\n\n\n## Code\n\n块状链表\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#pragma GCC optimize(2)\ntypedef double db;\ntypedef long double ldb;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair <int,int> Pii;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n \n \nchar IO;\ntemplate <class T=int> T rd(){\n    T s=0; int f=0;\n    while(!isdigit(IO=getchar())) if(IO=='-') f=1;\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return f?-s:s;\n}\n \nconst int N=2e5+10;\n \nint n,m,cnt;\nint head[N],nxt[N],sz[N];\nstruct Node{ int rk,id; } E[N];\nll s[N],st[N],t[N],d[N],a[N]; \nint ssz[N];\n \nll Get(ll l,ll r){ return (r-l+1)*(l+r)/2; }\nvoid Down(int p) {\n    s[p]=0;\n    for(int i=head[p];i;i=nxt[i]) {\n        if(~st[p]) a[E[i].id]=st[p];\n        a[E[i].id]+=1ll*(E[i].rk-1)*d[p]+t[p];\n        s[p]+=a[E[i].id];\n    }\n    st[p]=-1,t[p]=d[p]=0;\n}\nvoid Up(int p) {\n    s[p]=0;\n    for(int i=head[p];i;i=nxt[i]) s[p]+=a[E[i].id];\n}\n \nvoid Build() {\n    sort(E+1,E+n+1,[&](Node x,Node y){ return x.rk<y.rk; });\n    rep(i,0,cnt) sz[i]=head[i]=0,st[i]=-1;\n    rep(i,1,n) {\n        int p=i/cnt+1;\n        nxt[i]=head[p],E[i].rk=++sz[p];\n        head[p]=i;\n    }\n    rep(i,1,cnt) ssz[i]=ssz[i-1]+sz[i],Up(i);\n}\n \nvoid Break(){\n    rep(i,1,cnt) {\n        sz[i]+=sz[i-1],Down(i);\n        for(int j=head[i];j;j=nxt[j]) E[j].rk+=sz[i-1];\n    }\n    Build();\n}\n \nint Get(int x){\n    x--;\n    int l=1;\n    while(sz[l]<=x) x-=sz[l++];\n    return l;\n}\n \nvoid Insert(int p,int x){\n    int l=p<=n?Get(p):cnt;\n    Down(l),p-=ssz[l-1];\n    for(int i=head[l];i;i=nxt[i]) if(E[i].rk>=p) E[i].rk++;\n    a[++n]=x,E[n]=(Node){p,n},nxt[n]=head[l],head[l]=n;\n    sz[l]++,s[l]+=x;\n    if(sz[l]>cnt*2.4) Break();\n    rep(i,1,cnt) ssz[i]=ssz[i-1]+sz[i];\n}\n \nvoid Set(int l,int r,int x) {\n    int p1=Get(l),p2=Get(r);\n    if(p1==p2) {\n        Down(p1);\n        for(int i=head[p1];i;i=nxt[i]) if(ssz[p1-1]+E[i].rk>=l && ssz[p1-1]+E[i].rk<=r) a[E[i].id]=x;\n        Up(p1);\n        return;\n    }\n    Down(p1),Down(p2);\n    s[p1]=s[p2]=0;\n    for(int i=head[p1];i;i=nxt[i]) {\n        if(ssz[p1-1]+E[i].rk>=l) a[E[i].id]=x;\n        s[p1]+=a[E[i].id];\n    }\n    for(int i=head[p2];i;i=nxt[i]) {\n        if(ssz[p2-1]+E[i].rk<=r) a[E[i].id]=x;\n        s[p2]+=a[E[i].id];\n    }\n    rep(i,p1+1,p2-1) st[i]=x,d[i]=t[i]=0,s[i]=1ll*x*sz[i];\n}\n \nvoid Add(int l,int r,int x) {\n    int p1=Get(l),p2=Get(r);\n    if(p1==p2) {\n        Down(p1);\n        for(int i=head[p1];i;i=nxt[i]) if(ssz[p1-1]+E[i].rk>=l && ssz[p1-1]+E[i].rk<=r) a[E[i].id]+=1ll*(ssz[p1-1]+E[i].rk-l+1)*x;\n        Up(p1);\n        return;\n    }\n    Down(p1),Down(p2);\n    s[p1]=s[p2]=0;\n    for(int i=head[p1];i;i=nxt[i]) {\n        if(ssz[p1-1]+E[i].rk>=l) a[E[i].id]+=1ll*(ssz[p1-1]+E[i].rk-l+1)*x;\n        s[p1]+=a[E[i].id];\n    }\n    for(int i=head[p2];i;i=nxt[i]) {\n        if(ssz[p2-1]+E[i].rk<=r) a[E[i].id]+=1ll*(ssz[p2-1]+E[i].rk-l+1)*x;\n        s[p2]+=a[E[i].id];\n    }\n    rep(i,p1+1,p2-1) {\n        t[i]+=1ll*(ssz[i-1]-l+2)*x,d[i]+=x;\n        s[i]+=Get(ssz[i-1]-l+2,ssz[i]-l+1)*x;\n    }\n}\n \nll Que(int l,int r) {\n    int p1=Get(l),p2=Get(r);\n    ll ans=0;\n    Down(p1),Down(p2);\n    if(p1==p2) {\n        Down(p1);\n        for(int i=head[p1];i;i=nxt[i]) if(ssz[p1-1]+E[i].rk>=l && ssz[p1-1]+E[i].rk<=r) ans+=a[E[i].id];\n        return ans;\n    }\n    Down(p1),Down(p2);\n    for(int i=head[p1];i;i=nxt[i]) if(ssz[p1-1]+E[i].rk>=l) ans+=a[E[i].id];\n    for(int i=head[p2];i;i=nxt[i]) if(ssz[p2-1]+E[i].rk<=r) ans+=a[E[i].id];\n    rep(i,p1+1,p2-1) ans+=s[i];\n    return ans;\n}\n \nint main(){\n    n=rd(),m=rd();\n    cnt=ceil(sqrt(n+m));\n    rep(i,1,n) a[i]=rd(),E[i]=(Node){i,i};\n    Build();\n    rep(i,1,m) {\n        int opt=rd();\n        if(opt==1) {\n            int l=rd(),r=rd(),x=rd();\n            Set(l,r,x);\n        } else if(opt==2) {\n            int l=rd(),r=rd(),x=rd();\n            Add(l,r,x);\n        } else if(opt==3) {\n            int p=rd(),x=rd();\n            Insert(p,x);\n        } else if(opt==4) {\n            int l=rd(),r=rd();\n            printf(\"%lld\\n\",Que(l,r));\n        }\n    }\n}\n \n \n \n \n \n```\n\n旋Treap:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n//#pragma GCC optimize(2)\ntypedef double db;\ntypedef long double ldb;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair <int,int> Pii;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=2e5+10;\n\nint n;\nint rt,son[N][2],fa[N];\nll s[N],t[N],d[N],st[N],val[N];\nll sz[N],key[N];\n\nvoid Up(int p) {\n\ts[p]=s[son[p][0]]+s[son[p][1]]+val[p];\n\tsz[p]=sz[son[p][0]]+sz[son[p][1]]+1;\n}\nvoid Set(int p,ll x){\n\tt[p]=d[p]=0,st[p]=val[p]=x,s[p]=sz[p]*x;\n}\nvoid Add(int p,ll x,ll d) {\n\tval[p]+=x+d*sz[son[p][0]];\n\ts[p]+=sz[p]*(sz[p]-1)/2*d+x*sz[p];\n\tt[p]+=x,::d[p]+=d;\n}\nvoid Down(int p) {\n\tif(~st[p]) Set(son[p][0],st[p]),Set(son[p][1],st[p]),st[p]=-1;\n\tif(t[p] || d[p]) Add(son[p][0],t[p],d[p]),Add(son[p][1],t[p]+(sz[son[p][0]]+1)*d[p],d[p]),t[p]=d[p]=0;\n}\n\nvoid rotate(int u) {\n\tint f=fa[u],ff=fa[f],d=son[f][1]==u;\n\tfa[u]=ff; if(ff) son[ff][son[ff][1]==f]=u;\n\tson[f][d]=son[u][!d]; if(son[u][!d]) fa[son[u][!d]]=f;\n\tson[u][!d]=f,fa[f]=u;\n\tUp(f),Up(u);\n}\n\nvoid Insert(int p,int x){\n\tint v=++n;\n\tval[v]=s[v]=x,sz[v]=1,st[v]=-1,key[v]=rand();\n\tif(!rt){ rt=v; return; }\n\tint u=rt;\n\twhile(u) {\n\t\tDown(u);\n\t\tif(sz[son[u][0]]>=p) {\n\t\t\tif(!son[u][0]) { son[fa[v]=u][0]=v; break; }\n\t\t\tu=son[u][0]; \n\t\t} else {\n\t\t\tp-=sz[son[u][0]]+1;\n\t\t\tif(!son[u][1]) { son[fa[v]=u][1]=v; break; }\n\t\t\tu=son[u][1];\n\t\t}\n\t}\n\twhile(fa[v] && key[v]<key[fa[v]]) rotate(v);\n\tif(!fa[v]) rt=v;\n\twhile(fa[v]) Up(v=fa[v]);\n}\n\nvoid Set(int p,int l,int r,int x) {\n\tif(!p || r<=0 || l>sz[p]) return;\n\tif(l<=1 && r>=sz[p]) return Set(p,x);\n\tint t=sz[son[p][0]]+1;\n\tDown(p),Set(son[p][0],l,r,x),Set(son[p][1],l-t,r-t,x);\n\tif(t>=l && t<=r) val[p]=x;\n\tUp(p);\n}\n\nvoid Add(int p,int l,int r,ll x,ll d) {\n\tif(!p || r<=0 || l>sz[p]) return;\n\tif(l<=1 && r>=sz[p]) return Add(p,x,d);\n\tint t=sz[son[p][0]]+1;\n\tDown(p),Add(son[p][0],l,r,x,d),Add(son[p][1],l-t,r-t,x+d*t,d);\n\tif(t>=l && t<=r) val[p]+=(t-1)*d+x;\n\tUp(p);\n}\n\nll Que(int p,int l,int r) {\n\tif(!p || r<=0 || l>sz[p]) return 0;\n\tif(l<=1 && r>=sz[p]) return s[p];\n\tll t=sz[son[p][0]]+1,res=0;\n\tDown(p),res+=Que(son[p][0],l,r),res+=Que(son[p][1],l-t,r-t);\n\tif(t>=l && t<=r) res+=val[p];\n\treturn res;\n}\n\nint main(){\n\tint n=rd(),m=rd();\n\trep(i,0,n-1) Insert(i,rd());\n\twhile(m--) {\n\t\tint opt=rd();\n\t\tif(opt==1) {\n\t\t\tint l=rd(),r=rd();\n\t\t\tSet(rt,l,r,rd());\n\t\t} else if(opt==2) {\n\t\t\tint l=rd(),r=rd(),x=rd();\n\t\t\tAdd(rt,l,r,x-1ll*(l-1)*x,x);\n\t\t} else if(opt==3) {\n\t\t\tint x=rd(),y=rd();\n\t\t\tInsert(x-1,y);\n\t\t} else {\n\t\t\tint l=rd(),r=rd();\n\t\t\tprintf(\"%lld\\n\",Que(rt,l,r));\n\t\t}\n\t}\n}\n\n\n\n```\n\n非旋Treap:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef pair <int,int> Pii;\n#define mp make_pair\nint rd(){\n    char c;int s=0;\n    while((c=getchar())<48);\n    do s=s*10+c-48;\n    while((c=getchar())>47);\n    return s;\n}\nenum{N=200010};\nint n,m,rt,ls[N],rs[N],key[N];\nll s[N],t[N],d[N],st[N],val[N],sz[N];\n \ninline void Up(int p) {\n    s[p]=s[ls[p]]+s[rs[p]]+val[p];\n    sz[p]=sz[ls[p]]+sz[rs[p]]+1;\n}\ninline void Set(int p,ll x){ t[p]=d[p]=0,st[p]=val[p]=x,s[p]=sz[p]*x; }\ninline void Add(int p,ll x,ll d) {\n    val[p]+=x+d*sz[ls[p]];\n    s[p]+=sz[p]*(sz[p]-1)/2*d+x*sz[p];\n    t[p]+=x,::d[p]+=d;\n}\ninline void Down(int p) {\n    ~st[p] && (Set(ls[p],st[p]),Set(rs[p],st[p]),st[p]=-1);\n    (t[p] || d[p]) && (Add(ls[p],t[p],d[p]),Add(rs[p],t[p]+(sz[ls[p]]+1)*d[p],d[p]),t[p]=d[p]=0);\n}\nint Union(int x,int y) {\n    if(!x || !y) return x|y;\n    return key[x]<key[y]?(Down(x),rs[x]=Union(rs[x],y),Up(x),x):(Down(y),ls[y]=Union(x,ls[y]),Up(y),y);\n}\nPii Split(int x,int d){\n    if(sz[x]<=d) return mp(x,0);\n    if(d==0) return mp(0,x);\n    Down(x);\n    if(sz[ls[x]]+1<=d) {\n        Pii y=Split(rs[x],d-sz[ls[x]]-1);\n        return rs[x]=y.first,Up(x),mp(x,y.second);\n    } else {\n        Pii y=Split(ls[x],d);\n        return ls[x]=y.second,Up(x),mp(y.first,x);\n    }\n}\n \nint main(){\n    n=rd(),m=rd();\n    for(int i=1;i<=n+m;++i) key[i]=rand(),st[i]=-1,sz[i]=1;\n    for(int i=1;i<=n;++i) val[i]=s[i]=rd(),rt=Union(rt,i);\n    while(m--){\n        int opt=rd();\n        if(opt==3) {\n            Pii t=Split(rt,rd()-1); ++n,val[n]=s[n]=rd();\n            rt=Union(Union(t.first,n),t.second);\n        } else {\n            int l=rd(),r=rd();\n            Pii a=Split(rt,l-1),b=Split(a.second,r-l+1);\n            if(opt==1) Set(b.first,rd());\n            else if(opt==2) {int x=rd(); Add(b.first,x,x); }\n            else if(opt==4) printf(\"%lld\\n\",s[b.first]);\n            rt=Union(Union(a.first,b.first),b.second);\n        }\n    }\n}\n \n```\n\n","tags":["COCI"],"categories":["题解"]},{"title":"最大流/最小割树/等价流树 学习笔记","url":"/articles/2020/08/24/cf0087fb.html","content":"# 最大流/最小割树/等价流树 学习笔记\n\n最小割树 $\\text{Gomory-Hu Tree}$\n\n#### 前置\n\n约定无向图点数为$n$，边数为$m$\n\n割:断开一些边，使得$s,t$两点不连通\n\n设$\\lambda(u,v)$为$u,v$的最小割权值\n\n在非负边权的无向图上使用网络流即可求得两点间的最小割，但是如果涉及查询所有点对的最小割，就需要进行$n^2$次网络流，复杂度很高\n\n$$ \\ $$\n\n## 简介\n\n对于非负边权的无向图，适用于求出多点对之间的最小割/最大流的结构\n\n### 1.$\\text{Gomory-Hu Tree}$的核心性质\n\n构造树，使得树边$(u,v)$满足割掉这条边后，$u,v$的最小割对应将图分为树在两边的这两个集合\n\n而边$(u,v)$的权值$w(u,v)=\\lambda(u,v)$\n\n### 2.求解最小割的方法\n\n#### 引理: \n\n$\\lambda(a,b)\\ge \\min\\{\\lambda(a,c),\\lambda(c,b)\\}$\n\n假设$\\lambda(a,b) < \\min\\{\\lambda(a,c),\\lambda(c,b)\\}$\n\n设$a,b$最小割的两个集合后两点所属的联通块集合为$A,B$\n\n1.若$c\\in A$，则$a,b$最小割也是$b,c$的割\n\n2.若$c\\in B$，则$a,b$最小割也是$a,c$的割\n\n以上两种情况均与$\\lambda(a,b) < \\min\\{\\lambda(a,c),\\lambda(c,b)\\}$矛盾\n\n$$ \\ $$\n\n假设要求$u,v$两点间的最短路，则答案就是$u,v$在树上路径的最小边权值，设其为边$(s,t)$\n\n由上面的引理，显然有$\\lambda(u,v)\\ge\\lambda(s,t)$\n\n而我们由$\\text{Gomory-Hu Tree}$的性质知道，$s,t$的割也是$u,v$的一个割，即$\\lambda(u,v)\\le \\lambda(s,t)$\n\n所以答案就是$\\lambda(s,t)$\n\n\n\n## 构建方法\n\n构建$\\text{Gomory-Hu Tree}$最重要的一条引理，可以认为是最小割的\"不交叉\"性质\n\n对于$s,t$最小割的一侧，设其点集为$W$，则对于任意的$u,v\\in W$，存在一个$s,t$最小割$X$，满足$X\\sube W$\n\n具体的证明比较复杂，~~咕~~，但是这个性质确实非常巧妙\n\n利用这个性质，可以得到$\\text{Gomory-Hu Tree}$的**不严谨的递归构造方法**\n\n1.对于当前点集$S$，若$|S|=1$，则结束递归\n\n2.从$S$中选择两个点$x,y$求出最小割，设在割中$x,y$所属点集分别为$X,Y$\n\n3.在$\\text{Gomory-Hu Tree}$上加入边$(x,y,\\lambda(x,y))$，递归解决子问题$X\\cap S,Y\\cap S$\n\n$$ \\ $$\n\n实际在递归求解$S$的问题时，应该将图中其他的点缩点(这是论文里说的，实际没有人这么写)\n\n~~是不是不缩点跑出来的树形是错的?~~\n\n递归求解的次数为$O(n)$，只需要求$O(n)$次网络流即可\n\n放一下丑陋的板子\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef pair <int,int> Pii;\n#define pb push_back\n#define mp make_pair\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=510,M=6200,INF=1e9+10;\n\nint n,m;\nint U[M],V[M],W[M];\n\nstruct Edge{\n\tint to,nxt,w;\n} e[M];\nint head[N],ecnt;\nvoid AddEdge(int u,int v,int w) {\n\te[++ecnt]=(Edge){v,head[u],w};\n\thead[u]=ecnt;\n}\nvoid Link(int u,int v,int w){ AddEdge(u,v,w),AddEdge(v,u,w); }\n#define erep(u,i) for(int i=head[u];i;i=e[i].nxt)\nint dis[N],vc,S,T;\nvoid clear(){ rep(i,1,vc) head[i]=0; ecnt=1,vc=0; }\nint Bfs() {\n\trep(i,1,vc) dis[i]=INF;\n\tstatic queue <int> que;\n\tdis[S]=0,que.push(S);\n\twhile(!que.empty()) {\n\t\tint u=que.front(); que.pop();\n\t\terep(u,i) {\n\t\t\tint v=e[i].to,w=e[i].w;\n\t\t\tif(!w || dis[v]<=dis[u]+1) continue;\n\t\t\tdis[v]=dis[u]+1,que.push(v);\n\t\t}\n\t}\n\treturn dis[T]<INF;\n}\nint Dfs(int u,int in) {\n\tif(u==T) return in;\n\tint out=0;\n\terep(u,i) {\n\t\tint v=e[i].to,w=e[i].w;\n\t\tif(!w || dis[v]!=dis[u]+1) continue;\n\t\tint t=Dfs(v,min(in-out,w));\n\t\te[i].w-=t,e[i^1].w+=t,out+=t;\n\t\tif(in==out) break;\n\t}\n\tif(!out) dis[u]=0;\n\treturn out;\n}\nint Dinic(){\n\tint ans=0;\n\twhile(Bfs()) ans+=Dfs(S,INF);\n\treturn ans;\n}\n\nint Mincut(int u,int v){\n\tclear(),vc=n,S=u,T=v;\n\trep(i,1,m) Link(U[i],V[i],W[i]);\n\treturn Dinic();\n}\n\nvector <Pii> G[N];\nint P[N],R[N];\nvoid Build(int l,int r) {\n\tif(l==r) return;\n\tint x=P[l],y=P[l+1];\n\tint w=Mincut(x,y);\n\tint p1=l-1,p2=r+1;\n\trep(i,l,r) if(dis[P[i]]<INF) R[++p1]=P[i];\n\telse R[--p2]=P[i]; \n\trep(i,l,r) P[i]=R[i];\n\tG[x].pb(mp(y,w)),G[y].pb(mp(x,w));\n\tBuild(l,p1),Build(p2,r);\n}\n\nint fa[N][10],s[N][10],dep[N];\n\nvoid dfs(int u,int f) {\n\tfor(int i=1;(1<<i)<=dep[u];++i) fa[u][i]=fa[fa[u][i-1]][i-1],s[u][i]=min(s[u][i-1],s[fa[u][i-1]][i-1]);\n\tfor(Pii t:G[u]) if(t.first!=f) {\n\t\tint v=t.first,w=t.second;\n\t\tfa[v][0]=u,s[v][0]=w,dep[v]=dep[u]+1;\n\t\tdfs(v,u);\n\t}\n}\n\nint LCA(int x,int y){\n\tif(dep[x]<dep[y]) swap(x,y);\n\tint mi=1e9;\n\tfor(int i=0,del=dep[x]-dep[y];(1<<i)<=del;++i) if(del&(1<<i)) cmin(mi,s[x][i]),x=fa[x][i];\n\tif(x==y) return mi;\n\tdrep(i,9,0) if(fa[x][i]!=fa[y][i]) cmin(mi,s[x][i]),cmin(mi,s[y][i]),x=fa[x][i],y=fa[y][i];\n\tcmin(mi,s[x][0]),cmin(mi,s[y][0]);\n\treturn mi;\n}\n\nint main() {\n\tn=rd()+1,m=rd();\n\trep(i,1,m) U[i]=rd()+1,V[i]=rd()+1,W[i]=rd();\n\trep(i,1,n) P[i]=i; Build(1,n);\n\tdfs(1,0);\n\trep(kase,1,rd()) printf(\"%d\\n\",LCA(rd()+1,rd()+1));//printf(\"%d\\n\",MinCut(rd()+1,rd()+1));\n}\n\n\n\n\n```\n\n\n\n## 等价流树\n\n等价流树的树形不需要满足$\\text{Gomory-Hu Tree}$的性质，只需要能够查询两点间的答案即可\n\n在论文中看到的等价流树的非递归构建方法(伪代码)\n\n\n\n$w_{1,..,n}=0,fa_{1}=1,fa_{2,..,n}=1$\n\n$\\text{for u = 2 to n do}$\n    $v = fa_u$\n\n   求解$u,v$最小割\n\n​    $w_u=\\lambda(u,v)$\n\n​    $\\text{for x=u+1 to n do}$\n\n​        $\\text{if} fa_x=v \\text{ and x在u这一侧 then }fa_x=u$\n\n​    $\\text{end for}$\n\n$\\text{end for}$\n\n但是这个东西实际也不会跑得比$\\text{Gomory-Hu Tree}$快，了解一下即可\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef double db;\ntypedef unsigned long long ull;\ntypedef pair <int,int> Pii;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=860,M=170010,INF=1e9+10;\n\nint n,m;\nint U[M],V[M],W[M];\n\nstruct Edge{\n\tint to,nxt,w;\n} e[M];\nint head[N],ecnt;\nvoid AddEdge(int u,int v,int w) {\n\te[++ecnt]=(Edge){v,head[u],w};\n\thead[u]=ecnt;\n}\nvoid Link(int u,int v,int w){ AddEdge(u,v,w),AddEdge(v,u,w); }\n#define erep(u,i) for(int i=head[u];i;i=e[i].nxt)\nint dis[N],vc,S,T;\nvoid clear(){ rep(i,1,vc) head[i]=0; ecnt=1,vc=0; }\nint Bfs() {\n\trep(i,1,vc) dis[i]=INF;\n\tstatic queue <int> que;\n\tdis[S]=0,que.push(S);\n\twhile(!que.empty()) {\n\t\tint u=que.front(); que.pop();\n\t\terep(u,i) {\n\t\t\tint v=e[i].to,w=e[i].w;\n\t\t\tif(!w || dis[v]<=dis[u]+1) continue;\n\t\t\tdis[v]=dis[u]+1,que.push(v);\n\t\t}\n\t}\n\treturn dis[T]<INF;\n}\nint Dfs(int u,int in) {\n\tif(u==T) return in;\n\tint out=0;\n\terep(u,i) {\n\t\tint v=e[i].to,w=e[i].w;\n\t\tif(!w || dis[v]!=dis[u]+1) continue;\n\t\tint t=Dfs(v,min(in-out,w));\n\t\te[i].w-=t,e[i^1].w+=t,out+=t;\n\t\tif(in==out) break;\n\t}\n\tif(!out) dis[u]=0;\n\treturn out;\n}\nint Dinic(){\n\tint ans=0;\n\twhile(Bfs()) ans+=Dfs(S,INF);\n\treturn ans;\n}\n\nint Mincut(int u,int v){\n\tclear(),vc=n,S=u,T=v;\n\trep(i,1,m) Link(U[i],V[i],W[i]);\n\treturn Dinic();\n}\n\nint fa[N],w[N];\n\nint main() {\n\tn=rd(),m=rd();\n\trep(i,1,m) U[i]=rd(),V[i]=rd(),W[i]=rd();\n\trep(i,2,n) fa[i]=1;\n\trep(u,2,n) {\n\t\tint v=fa[u]; w[u]=Mincut(v,u);\n\t\trep(x,u+1,n) if(fa[x]==v && dis[x]==INF) fa[x]=u;\n\t}\n}\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["学习笔记"]},{"title":"[COCI2010-2011 2] CRNI(单调栈)","url":"/articles/2020/08/23/cd2cee96.html","content":"#  [COCI2010-2011#2] CRNI(单调栈)\n\n## 问题分析\n\n首先考虑两个不相交的矩形可能存在的位置关系，我将其分成\n\n1.左右\n\n2.上下\n\n3.左上右下\n\n4.左下右上\n\n发现1,2,3,4之间有相交,考虑四种情况的答案应该是1+2-3-4\n\n## 统计方法\n\n核心: 统计以一个点作为顶点的矩形数量\n\n以统计$i,j$为右下角的矩形为例，先不考虑矩形大小>1的限制\n\n显然可以在线性时间内处理得到每个$i,j$向上连续延伸的连续1长度，设其为$U_{i,j}$\n\n假设枚举了$i$，从左到右依次扫描$j$，则得到$i,j$位置的答案应该是\n\n{%raw%}$$\\begin{aligned} \\sum_{k=1}^{j} \\min_{d=k}^j\\lbrace U_{i,d}\\rbrace\\end{aligned} $${%endraw%}\n\n这条式子中，相当于枚举了$i,(k,j)$为底，统计向上延伸的最长长度\n\n这个式子可以用**单调栈**在线性时间内求解，其过程可以描述为\n\n1.每次插入元素$U_{i,j}$，得到它的影响区间$k\\in [L,j]$\n\n2.将原先单调栈内$k\\in [L,j]$这段区间的答案减掉，改为$U_{i,j}\\cdot (j-L+1)$\n\n类似的，可以通过改变循环顺序和额外记录向下延伸的长度$D_{i,j}$来统计四种顶点的答案(详细见代码)\n\n然后可以用前缀和帮助统计以上4种答案，枚举一个端点，另一个查询前缀和即可\n\ntips: 注意累和顺序，~~前缀和要开long long~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=1e3+10;\n\nint n;\nchar a[N][N];\nint D[N][N],U[N][N]; //i,j向下/上延伸的最长长度\nint stk[N],c[N],top;\nint CRR[N][N]; // 以i,j为右下角的矩形个数\nint CLL[N][N]; // 以i,j为左上角的矩形个数\nint CLR[N][N]; // 以i,j为右上角的矩形个数\nint CRL[N][N]; // 以i,j为左下角的矩形个数\nll SLL[N][N],SRL[N][N]; // 前缀和\n\nint main(){\n\tn=rd();\n\trep(i,1,n) scanf(\"%s\",a[i]+1);\n\trep(i,1,n) rep(j,1,n) if(a[i][j]=='C') U[i][j]=U[i-1][j]+1;\n\tdrep(i,n,1) rep(j,1,n) if(a[i][j]=='C') D[i][j]=D[i+1][j]+1;\n\trep(i,1,n) {\n\t\t// 统计四种端点的情况\n\t\ttop=0;\n\t\tint now=0;\n\t\trep(j,1,n) {\n\t\t\tint x=U[i][j],cnt=1;\n\t\t\twhile(top && stk[top]>=x) cnt+=c[top],now-=c[top]*stk[top],top--;\n\t\t\tstk[++top]=x,c[top]=cnt; now+=x*cnt;\n\t\t\tCRR[i][j]=max(now-1,0);\n\t\t}\n\n\t\tnow=top=0;\n\t\trep(j,1,n) {\n\t\t\tint x=D[i][j],cnt=1;\n\t\t\twhile(top && stk[top]>=x) cnt+=c[top],now-=c[top]*stk[top],top--;\n\t\t\tstk[++top]=x,c[top]=cnt; now+=x*cnt;\n\t\t\tCLR[i][j]=max(now-1,0);\n\t\t}\n\n\t\tnow=top=0;\n\t\tdrep(j,n,1) {\n\t\t\tint x=U[i][j],cnt=1;\n\t\t\twhile(top && stk[top]>=x) cnt+=c[top],now-=c[top]*stk[top],top--;\n\t\t\tstk[++top]=x,c[top]=cnt; now+=x*cnt;\n\t\t\tCRL[i][j]=max(now-1,0);\n\t\t}\n\n\t\tnow=top=0;\n\t\tdrep(j,n,1) {\n\t\t\tint x=D[i][j],cnt=1;\n\t\t\twhile(top && stk[top]>=x) cnt+=c[top],now-=c[top]*stk[top],top--;\n\t\t\tstk[++top]=x,c[top]=cnt; now+=x*cnt;\n\t\t\tCLL[i][j]=max(now-1,0);\n\t\t}\n\t}\n\n\tdrep(i,n,1) drep(j,n,1) SLL[i][j]=SLL[i+1][j]+SLL[i][j+1]-SLL[i+1][j+1]+CLL[i][j];\n\trep(i,1,n) drep(j,n,1) SRL[i][j]=SRL[i-1][j]+SRL[i][j+1]-SRL[i-1][j+1]+CRL[i][j];\n\t// 前缀和\n\n\tll ans=0;\n\trep(i,1,n) rep(j,1,n) if(CRR[i][j]) ans+=CRR[i][j]*(SLL[i+1][1]+SLL[1][j+1]-SLL[i+1][j+1]);\n\trep(i,1,n) rep(j,1,n) ans-=CLR[i][j]*SRL[i-1][j+1];\n\t// 统计4种情况\n\tprintf(\"%lld\\n\",ans%10007);\n}\n\n\n\n```","tags":["COCI"],"categories":["题解"]},{"title":"[WC2020] 选课 (枚举+Dp)","url":"/articles/2020/08/21/f186931.html","content":"# [WC2020] 选课 (枚举+dp)\n\n题面数据范围锅了导致枚举炸裂，写了正解却只有50分。。。。。。。\n\n[正确题面可以查看LOJ](https://loj.ac/problem/3331)\n\n记限制涉及到的不同的点个数为$P$\n\n首先是不同的会被限制的个数$\\leq 12$，所以应该直接枚举这些点的状态，枚举部分的复杂度是$O(2^P)$\n\n~~(然后我枚举了$p$，实际$p\\leq 66$啊啊啊啊啊啊)~~\n\n对于没有被限制的点，可以优先预处理出每个类型的答案，注意到$L=T-\\sum s_i\\leq 40$，则可以每次只取出长度为$O(L)$ 的这一部分，类型之间合并为$O(ML^2)$的复杂度\n\n或许比较难的点是在于每种类型内的合并，注意到$w\\in\\{1,2,3\\}$\n\n把每种$w$排序后，令$dp_i$为总权值为$i$的最小花费，同时记录最小花费时选取的三种$w$的个数，最优决策肯定是取最小的几个\n\n每次转移，可以直接枚举选取的$w$，在排序好的数组上找到下一个最小花费\n\nps:事实证明，这个做法显然是假的，但是为什么就是没卡掉呢？正确的做法是先dp，w=1或2，再和3的暴力合并求出最大的$L$个值，这样的复杂度为$O(NL)$\n\nps2:后来测试，这个错误做法在值域只有200的情况下，随机情况下，整个值域中的错误率只有1/100~1/1000左右，而答案需要用到的部分又奇少，只有L个，于是乎，~~嘿嘿嘿嘿~~\n\n如果用这种邪教写法，预处理的转移复杂度就是$O(N)$的\n\n每次枚举之后，把被改变的几个类型答案重新计算，重新合并，这一部分复杂度就是$O(PL^2)$的\n\n算上$2^P$次枚举，得到总复杂度是$O(N+2^PPL^2)$\n\n[Code](https://loj.ac/submission/897600)","tags":["WC"],"categories":["题解"]},{"title":"HDU-6886 Tic-Tac-Toe-Nim(2020HDU多校第十场T10)","url":"/articles/2020/08/20/d0817435.html","content":"# HDU-6886 Tic-Tac-Toe-Nim(2020HDU多校第十场T10)\n\n正如题目名字，这是一个nim游戏\n\n观察题目条件，前两次操作一定会清空两个位置，那么考虑后面得到的状态是否先手必胜即可\n\n对于这两个位置，发现只有两种情况\n\n### 两个位置共线\n\n此时先手者直接选择同线的另一个即可，必胜\n\n### 两个位置不共线\n\n此时还剩下一个位置与这两个空位均不共线，其他6个位置均共线\n\n考虑可能存在的结束情况:\n\n1.6个位置中有一个被清空，则下一个人直接清空共线的另一个位置必胜\n\n2.不共线的位置被清空，不影响结局\n\n考虑把这个问题转化为普通的Nim游戏\n\n可以认为如果那6个位置均为1时游戏必败，而不共线的一个位置随意\n\n则转化为 **六个共线位置的值-1** 与 **不共线位置的值** 形成的普通Nim游戏，根据常识，直接异或判断即可\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\nint rd(){\n    int IO,s=0;\n    while(!isdigit(IO=getchar()));\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return s;\n}\n\nint a[4][4];\nint Check(){ // 判断是否必胜\n    rep(i,1,3) rep(j,1,3) if(a[i][j]) {\n        int fl=1;\n        rep(k,1,3) if(j!=k && !a[i][k]) fl=0;\n        rep(k,1,3) if(k!=i && !a[k][j]) fl=0;\n        if(!fl) continue;\n        int x=a[i][j],ans=0;\n        a[i][j]=0;\n        rep(i,1,3) rep(j,1,3) if(a[i][j]) ans^=a[i][j]-1; // 共线位置\n        ans^=x,a[i][j]=x; // 不共线位置\n        return ans;\n    }\n    return '?';\n}\n\nint main(){\n    rep(kase,1,rd()) {\n        rep(i,1,3) rep(j,1,3) a[i][j]=rd();\n        int ans=0;\n        rep(i,1,3) rep(j,1,3) {\n            int t=a[i][j];\n            a[i][j]=0;\n            int fl=0;\n            rep(x,1,3) rep(y,1,3) { // 枚举两次初始操作，注意两次操作不共线!\n                if(x==i || y==j) continue;\n                int t=a[x][y];\n                a[x][y]=0;\n                if(!Check()) fl=1;\n                a[x][y]=t;\n            }\n            if(!fl) ans++;\n            a[i][j]=t;\n        }\n        printf(\"%d\\n\",ans);\n    }\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["各大OJ"],"categories":["题解"]},{"title":"[HDU-6883] Coin Game(2020HDU多校第十场T7)","url":"/articles/2020/08/20/18615522.html","content":"# [HDU-6883] Coin Game(2020HDU多校第十场T7)\n\n题目给出的模型看起来比较奇怪，但是简单推理后，发现可以转化为一个简单的01背包问题\n\n对于题目给定的权值$a_i,b_i$，分为$a_i,a_i+b_i$两个物品，发现可以得到这个机器的所有合法贡献情况\n\n也就是说，有两种大小分别为$1,2$的物品，要做01背包\n\n这个刚刚在[WC2020](https://www.cnblogs.com/chasedeath/p/13460468.html)考过。。。\n\n设两类转化后的权值分别为$a_i,b_i$，则转移过程可以简单描述为\n\n1.将两类权值分别从大到小排序\n\n2.将dp值转化为在两个序列中分别选取一段前缀和\n\n3.转移时枚举下一次决策的选取是那种物品，选取最优一个，记录指针转移即可\n\n主要复杂度可能还在于排序，Trick:有一点卡内存\n\n但是实测桶排和直接sort好像差距不大。。。\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n\nconst int N=5e6+10,INF=1e9;\n\nint n,m;\nint a[N],b[N];\null k1,k2;\nint Shift(){\n    ull k3=k1,k4=k2;\n    k1=k4;\n    k3^=k3<<23;\n    k2=k3^k4^(k3>>17)^(k4>>26);\n    return (k2+k4)%10000000+1;\n}\nint A[N*3],B[N*3]; // 记录在两个序列中的指针\nll dp[3]; // dp数组滚动了一下\n\nint main(){\n    while(~scanf(\"%d%d%llu%llu\",&n,&m,&k1,&k2)) {\n        rep(i,1,n) a[i]=Shift(),b[i]=Shift()+a[i];\n        sort(a+1,a+n+1,greater<int>()),sort(b+1,b+n+1,greater<int>());\n\n        A[0]=B[0]=1;\n        rep(i,0,2) dp[i]=0;\n        ll ans=0;\n        int cur=0;\n        rep(i,0,m) {\n            if(i+1<=m && A[i]<=n) {\n                int nxt=(cur+1)%3;\n                if(dp[cur]+a[A[i]]>dp[nxt]) dp[nxt]=dp[cur]+a[A[i]],A[i+1]=A[i]+1,B[i+1]=B[i];\n            }\n            if(i+2<=m && B[i]<=n) {\n                int nxt=(cur+2)%3;\n                if(dp[cur]+b[B[i]]>dp[nxt]) dp[nxt]=dp[cur]+b[B[i]],A[i+2]=A[i],B[i+2]=B[i]+1;\n            }\n            ans^=dp[cur];\n            cur=(cur+1)%3;\n        }\n        printf(\"%lld\\n\",ans);\n    }\n}\n\n\n```\n\n\n\n\n\n\n\n","tags":["各大OJ"],"categories":["题解"]},{"title":"Default Title","url":"/articles/2020/08/16/4adbf780.html","tags":["default tag"],"categories":["default category"]},{"title":"[[HDU-6791] 2020HDU多校第三场T1](回文自动机)","url":"/articles/2020/08/16/60cd65b0.html","content":"#[[HDU-6791] 2020HDU多校第三场T1](http://acm.hdu.edu.cn/showproblem.php?pid=6791)(回文自动机)\n\n### 前置知识：\n\n1.[字符串的$\\text{Border}$](https://www.cnblogs.com/chasedeath/p/13396877.html)\n\n2.[回文自动机](https://www.cnblogs.com/chasedeath/p/13396957.html)\n\n3.回文串与$\\text{Border}$\n\n3.1:回文串的$\\text{Border}$也是回文串\n\n若有回文串$S$的一个$\\text{Border} :T$，则$S_{1,|T|}=S_{|S|-|T|+1,|S|}=reverse(S_{1,|T|})$\n\n故$T$也是一个回文串\n\n3.2:遍历回文自动机的$fail$链，能得到当前串的所有$\\text{Border}$(基于3.1得到)\n\n\n\n约定:串$S$的$\\text{Border}$集合为$B(S)$，字符集为$\\Sigma$\n\n### 题意:\n\n设随机空串末尾添加$\\Sigma$中的字符，第一次出现子串$S$的期望长度为$E(S)$\n\n给定一个串，每次查询它的两个回文子串$A,B$，比较$E(A),E(B)$\n\n### 起源？\n\n一切的起源都是\" 国家集训队论文2018 :1-浅谈生成函数在掷骰子问题上的应用 \"的一个结论。。。\n\n还有为什么会是回文子串呢？因为只有回文自动机能访问子串的所有$\\text{Border}$。。。\n\n### 结论 以及 口胡证明?\n\n{%raw%}$\\begin{aligned}E(S)=\\sum_{T\\in B(S)}|\\Sigma|^{|T|}\\end{aligned}${%endraw%}~~(???)~~\n\n在原论文给出了生成函数性的证明，实际可以直接口胡(好吧也差不多)，大致分成两个步骤\n\n1.$E(S)=\\sum_{i=0}^{\\infty}$长度为$i$依然不包含$S$的概率(即把长度为$i$时恰好合法转化为了$0..i-1$时不合法)\n\n2.设所有长度下不合法的串集合为$G$(每个不合法串有概率$G(T)$)，合法的串集合为$F$(每个合法串也有概率$F(T)$)\n\n由第一步$E(S)=\\sum G(T)$，合法串的概率不会重复，所以$\\sum F(T)=1$\n\n考虑$G$中所有的串，如果在后面接上$S$必然合法，但是可能在更早的时候就结束了，这是必然满足接上的前缀是$\\text{Border}$\n\n也就是说，在$G$集合后面接上$S$后，不仅会得到$F$集合，还会得到$F$集合后面额外接上$|S|-|R|,(R\\in B(S))$长度字符的状态\n\n所以有$\\sum G(T)\\cdot (\\frac{1} {|\\Sigma|})^{|S|}=\\sum_{R\\in B(S)}\\sum F(T)\\cdot (\\frac{1} {|\\Sigma|})^{|S|-|R|}$\n\n化简且带入$\\sum F(T)=1$，得到{%raw%}$E(S)=\\sum G(T)=\\begin{aligned}\\sum_{R\\in B(S)}|\\Sigma|^{|R|}\\end{aligned}${%endraw%}\n\n那么比较问题就落到了比较$\\text{Border}$上面\n\n视答案为为一个$26$进制数从高位到低位比较，转化为直接从大到小比较$\\text{Border}$序列的字典序即可\n\n建出回文自动机后，倍增找到当前查询串对应的状态，所有的$\\text{Border}$就是$fail$链上所有非空状态长度\n\n比较字典序可以\n\n1.倍增+hash\n\n2.可以根据$\\text{Border}$的性质分解为等差数列后暴力比较\n\n3.像后缀数组一样，倍增地去为所有节点的字典序排序，这样查询是$O(1)$的\n\nhash应该细节比较少，但是常数大\n\n以下是hash版本\n\n````cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0;int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=1e5+10;\nconst ll P1=1e9+13,P2=19260817;\nconst ll K1=123213,K2=342525;\n\nint n;\nchar s[N];\nint now,len[N],fail[N],nxt[N][26],pos[N],cnt;\nint Pow1[N],Pow2[N];\nint fa[N][18],h1[N][18],h2[N][18];\n\nvoid Init(){\n\trep(i,0,cnt) memset(nxt[i],fail[i]=0,104);\n\tlen[1]=-1;\n\tfail[now=0]=fail[1]=cnt=1;\n}\nint Find(int x,int y){\n\twhile(s[y]!=s[y-len[x]-1]) x=fail[x];\n\treturn x;\n}\nvoid Extend(int i,int c){\n\tnow=Find(now,i);\n\tif(!nxt[now][c]){\n\t\tfail[++cnt]=nxt[Find(fail[now],i)][c];\n\t\tlen[nxt[now][c]=cnt]=len[now]+2;\n\t}\n\tpos[i]=now=nxt[now][c];\n}\nint Que(int l,int p){\n\tl=p-l+1,p=pos[p];\n\tdrep(i,17,0) if(len[fa[p][i]]>=l) p=fa[p][i];\n\treturn p;\n}\n\nint main(){\n\trep(i,Pow1[0]=Pow2[0]=1,N-1) Pow1[i]=1ll*Pow1[i-1]*K1%P1,Pow2[i]=Pow2[i-1]*K2%P2;\n\trep(kase,1,rd()){\n\t\tInit(),n=rd(),scanf(\"%s\",s+1);\n\t\trep(i,1,n) Extend(i,s[i]-'a');\n\t\trep(i,2,cnt) {\n\t\t\tfa[i][0]=fail[i],h1[i][0]=h2[i][0]=len[i];\n\t\t\trep(j,1,17){\n\t\t\t\tfa[i][j]=fa[fa[i][j-1]][j-1];\n\t\t\t\tif(fa[i][j]>1){\n\t\t\t\t\th1[i][j]=(1ll*h1[i][j-1]*Pow1[1<<(j-1)]+h1[fa[i][j-1]][j-1])%P1;\n\t\t\t\t\th2[i][j]=(1ll*h2[i][j-1]*Pow2[1<<(j-1)]+h2[fa[i][j-1]][j-1])%P2;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\trep(q,1,rd()) {\n\t\t\tint A=rd(),B=rd(),C=rd(),D=rd();\n\t\t\tA=Que(A,B),C=Que(C,D);\n\t\t\tdrep(i,17,0) if(fa[A][i]>1 && fa[C][i]>1 && h1[A][i]==h1[C][i] && h2[A][i]==h2[C][i]) A=fa[A][i],C=fa[C][i];\n\t\t\tA=max(len[A],0),C=max(len[C],0);\n\t\t\tif(A==C) puts(\"draw\");\n\t\t\telse if(A<C) puts(\"sjfnb\");\n\t\t\telse puts(\"cslnb\");\n\t\t}\n\t}\n}\n\n\n````\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["各大OJ"],"categories":["题解"]},{"title":"关于生成函数","url":"/articles/2020/08/15/a5a38979.html","content":"# 关于生成函数\n\n## 基础\n\n### 普通生成函数\n\n对于数列$a_i$，它的普通生成函数($\\text{OGF}$)为$A(x)=\\sum a_ix^i$\n\n这个$x^i$刚开始并没有实际意义，即为形式幂级数，实际这个$i$甚至可以不是一个整数，如$\\text{FWT}$中的指数为集合幂指数\n\n普通生成函数常用于解决无序的组合计数问题，如背包问题\n\n#### 常见背包的生成函数\n\n我们让$x^i$项表示选择了$i$个物品，则可以构造生成函数\n\n一个01背包，每一个物品的生成函数为$A(x)=x+1$，其中$x$项表示多选了一个，1项表示空着不选\n\n同理，对于一个有限背包，每个物品上限$m_i$，则$A_i(x)=\\sum_{j=0}^{m_i} x^j$\n\n一个完全背包的生成函数为{%raw%}$\\begin{aligned} A(x)=\\sum_{i=0}^{\\infty} x^i=\\frac{1-x^{\\infty} } {1-x}=\\frac{1} {1-x}\\end{aligned} ${%endraw%}(因为我们所求的答案是前若干项，无穷项没有意义)\n\n那么多个物品的组合就可以通过这些生成函数相乘来轻松表示，因此也容易被多项式的快速运算优化\n\n### 用生成函数描述递推关系\n\n一个最简单的例子，设斐波那契数列的普通生成函数为$F(x)$\n\n我们知道$F_i=F_{i-1}+F_{i-2},F_0=0,F_1=1$\n\n则可以用生成函数表示斐波那契数列的递推关系$F(x)=x F(x)+x^2 F(x)+x$\n\n其中$xF(x)$对应递推式的$F_{i-1}$，$x^2F(x)$对应递推式的$F_{i-2}$，$x$对应$F_1$的值\n\n类似的问题还包括数列的线性递推，即$a_i=\\sum b_ja_{i-j}$，但是这个求解比较复杂。。。\n\n\n\n$$  \\ $$\n\n#### 基于概率期望的生成函数\n\n取自 集训队论文 2018 - 1 浅谈生成函数在掷骰子问题上的应用长沙市长郡中学杨懋龙\n\n对于随机非负离散变量$x$，令它的概率生成函数是{%raw%}$F(z)=\\begin{aligned}\\sum_{i=0}^{\\infty}P(x=i)z^i\\end{aligned}${%endraw%}，则可以看到这里的指数代表$x$的值\n\n$x$的值不一定能够相加，但是利用这个生成函数，可以快速表达期望，方差等，具体见下式\n\n1.{%raw%}$F(1)=\\begin{aligned}\\sum_{i=0}^{\\infty}P(x=i)=1\\end{aligned}${%endraw%}\n\n2.{%raw%}$F'(1)=\\begin{aligned}\\sum_{i=0}^{\\infty}P(x=i)\\cdot i=E(x)\\end{aligned}${%endraw%}\n\n3.$E(x^{\\underline{k} })=F^{(k)}(1)$ ($x$的$k$阶下降幂，($k$)表示$k$阶导数)\n\n4.$x$的方差{%raw%}$=\\begin{aligned}\\sum_{i=0}^{\\infty}P(x=i)\\cdot (i-E(x))^2\\end{aligned}=\\begin{aligned}\\sum_{i=0}^{\\infty}P(x=i)\\cdot i^2-2P(x=i)\\cdot i\\cdot E(x)+P(x=i)\\cdot E^2(x)\\end{aligned}${%endraw%}\n\n$=E(x^2)-2E^2(x)+E^2(x)=E(x^2)-E^2(x)=E(x^{\\underline{2} })+E(x)-E^2(x)=F''(1)+F'(1)-(F'(1))^2$\n\n可以作为导数在生成函数推导中应用的一个例子\n\n$$  \\ $$\n\n### 指数生成函数\n\n对于数列$a_i$，它的指数生成函数($\\text{EGF}$)为{%raw%}$\\begin{aligned} A(x)=\\sum \\frac{a_ix^i} {i!}\\end{aligned} ${%endraw%}\n\n指数型生成函数是处理有序排列问题的一大利器，因此，指数上的$i$通常表示个数\n\n为什么$\\frac{1} {i!}$可以简化排列问题，可以参见这样的一个例子\n\n用若干类物品排成一个排列，每一类有$m_i$个，则不同的排列个数为 {%raw%}$\\begin{aligned} \\frac{(\\sum m_i)!} {\\prod m_i!}\\end{aligned} ${%endraw%}\n\n这个式子的意义就是: 假设先随便排列，由于每一类相同，因此类之内的排列都要除掉\n\n可以看到，$\\frac{1} {i!}$描述的就是类内的排列，因此最后求得答案项还要乘上$n!$\n\n如果一类物品任意个数加入排列，则其指数生成函数为{%raw%}$\\begin{aligned} A(x)=\\sum_{i=0}^{\\infty}\\frac{x^i} {i!}=e^x\\end{aligned} ${%endraw%}\n\n根据$e^{-x}=\\sum_i \\frac{(-x)^i} {i!}$,还能得到:\n\n限制为偶数个的指数生成函数{%raw%}$\\begin{aligned} A(x)=\\sum_{2|i}^{\\infty}\\frac{x^i} {i!}=\\frac{e^x+e^{-x} } {2}\\end{aligned} ${%endraw%}\n\n限制为奇数个的指数生成函数{%raw%}$\\begin{aligned} A(x)=\\sum_{2|i}^{\\infty}\\frac{x^i} {i!}=\\frac{e^x-e^{-x} } {2}\\end{aligned} ${%endraw%}\n\n限制为$n$的倍数个，较为复杂，需要用到[单位根反演](https://www.cnblogs.com/chasedeath/p/13499214.html)\n\n#### $e^{x}$在排列问题叠加上的应用\n\n若有一类等价排列子问题，其指数型生成函数为$F(x)$，则任意叠加其得到的排列问题指数型生成函数为\n\n{%raw%}$\\begin{aligned} \\sum_{i=0}^{\\infty} \\frac{F^i(x)} {i!}=e^{F(x)}\\end{aligned} ${%endraw%}，其中$\\frac{1} {i!}$表示除去子问题之间等价\n\n$$\\ $$\n\n##  更多常用技巧\n\n1.分治NTT解决多个多项式卷积问题\n\n2.CDQ分治NTT解决有序递推问题\n\n$$ \\ $$\n\n3.推导生成函数的关系\n\n3-1.树的递归关系\n\n问题: 计算合法树的数量，如树上染色问题等\n\n这一类问题可以表示为 一种递归关系，即 枚举根的状态 加上根的儿子对应的生成函数\n\n例子 [Codeforces Round #250]小朋友和二叉树 \n\n设一个点的生成函数为$G$，整棵数的生成函数为$F$，其中幂指数代表权值和，则$G$是我们已知的，且有关系\n\n$F=G\\cdot F^2+1$，其中$F^2$表示枚举两个子树的状态，$G$表示枚举根的状态，$+1$表示空树\n\n类似这样的问题还有 [烷基计数加强版加强版](https://loj.ac/problem/6538) 这个方程要用到牛顿迭代求解\n\n3-2.\n\n$$ \\ $$\n\n4.集合幂指数在处理01状态上的应用\n\n如果用整数指数形式表示的生成函数解决01状态上的or,and,xor操作\n\n我们通常需要把这个过程转化为对$0,1$个数来做\n\n但是这一类的问题，通常可以用**集合幂指数**轻松表示，前提是你了解$\\text{FWT}$卷积三种类型的本质过程\n\n[例题 ZJOI 2019开关](https://www.cnblogs.com/chasedeath/p/12969126.html)\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"二次剩余(懒人模板总结)","url":"/articles/2020/08/15/2244ecc3.html","content":"\n\n# 二次剩余(懒人模板总结)\n\n只考虑奇质数的情况\n\n设求$\\sqrt a \\pmod P$\n\n## Part1 判断\n\n存在二次剩余即$a^{\\frac{(P-1)} {2} }=1 \\pmod P$\n\n-------\n\n(对于所有$a=0,1$的情况需要特判)\n\n## Part2 原根法求二次剩余\n\n先求出$P$的一个原根$g$\n\n那么可以用$g^k$表示出$[1,P-1]$的所有数\n\n用$BSGS$可以在$O(\\sqrt n\\log n)$的时间内求出$a=g^k$\n\n如果存在原根，那么$k\\mod 2=0$\n\n答案就是$g^{\\frac{k} {2} }\\mod P$\n\n```cpp\nint Quad(int a,int k=0) {\n\tif(a<=1) return a;    \n    int g=Getg(P);\n\tstatic map <int,int> M;\n\tint S=sqrt(P-1);\n\tfor(int i=0,t=1;i<S;++i,t=1ll*t*g%P) M[t]=i;\n\tint res=0;\n\tint w=qpow(g,S);\n\tfor(int i=0,t=1;i<P-1;i+=S,t=1ll*t*w%P) {\n\t\tll x=1ll*a*qpow(t,P-2)%P;\n\t\tif(M.count(x)) {\n\t\t\tres=M[x]+i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tres=qpow(g,res/2);\n\tif(k) res=min(res,(P-res)%P);\n\treturn res;\n}\n```\n\n\n\n------\n\n## Part3 更快的方法\n\n要先找到一个数$x$，满足不存在$\\sqrt{x^2-a}\\pmod P$\n\n可以随机$x$，期望可以在$O(1)$时间内找到这样的$x$\n\n然后构造复数$(\\alpha,\\beta)=\\alpha+\\sqrt{x^2-a}\\beta$\n\n求出$(x,1)^{\\frac{(P+1)} {2} }$，模拟复数乘法即可\n\n可以证明结果没有虚部，就是答案\n\n\n\n```cpp\nint Quad(int a,int k=0) {\n\tif(a<=1) return a;\n\tll x;\n\twhile(1) {\n\t\tx=1ll*rand()*rand()%P;\n\t\tif(qpow((x*x-a+P)%P,(P-1)/2)!=1) break;\n\t}\n\tll w=(x*x-a+P)%P;\n\tPii res=mp(1,0),t=mp(x,1);\n\tauto Mul=[&](Pii a,Pii b){ // 复数乘法\n\t\tint x=(1ll*a.first*b.first+1ll*a.second*b.second%P*w)%P;\n\t\tint y=(1ll*a.first*b.second+1ll*a.second*b.first)%P;\n\t\treturn mp(x,y);\n\t};\n\tint d=(P+1)/2;\n\twhile(d) {\n\t\tif(d&1) res=Mul(res,t);\n\t\tt=Mul(t,t);\n\t\td>>=1;\n\t}\n\tll r=(res.first%P+P)%P;\n\tif(k) r=min(r,(P-r)%P);\n\treturn r;\n}\n```","tags":["default tag"],"categories":["学习笔记"]},{"title":"FWT (快速沃尔什变换)详解","url":"/articles/2020/08/15/a72b1573.html","content":"# FWT (快速沃尔什变换)详解\n\n约定：$F'=FWT(F)$\n\n卷积的问题，事实上就是要构造$F'G'=(FG)'$\n\n$\\text{FWT}$涉及的问题，我们看到是二进制位上的or ,and ,xor \n\n但正式来说，是**集合幂指数** 上的 **并 ， 交 ， 对称差**\n\n为了说人话，这里就不带入集合幂指数的概念了\n\n> 一个常识：$\\sum_{T\\sube S}(-1)^{|T|}=[S=\\empty]$\n\n\n-------\n\n## or 和 and 卷积\n\n这两种卷积的本质是相同的，所以只解释$or$卷积\n\n**or卷积的本质就是高位前缀和**\n\n即:$F'_S=\\sum _{T\\sube S}F_T$\n\n#### 正确性：\n\n即$\\forall S,F'_S \\cdot G'_S=(F\\cup G)'_S$\n\n左边=\n\n$F'_S \\cdot G'_S=\\sum _{T\\sube S}\\sum _{R\\sube S}F_T\\cdot G_R$\n\n右边=\n\n$(F\\cup G)'_S=\\sum_{T\\sube S}(F \\cup G)_S$\n\n$=\\sum_{T\\sube S}\\sum_{A,B,A\\cup B=S}F_A\\cdot G_B$\n\n$=\\sum_{T \\sube S}\\sum_{R \\sube S}F_T \\cdot G_R$\n\n\n\n$$ \\ $$\n\n### 卷积实现\n\n其实第一次层循环的意思是**枚举子集中和自己不同的位最高是**$i$\n\n让$0$向$1$转移即可\n\n```cpp\nvoid FWT(int n,ll *a){\n    for(int i=1;i<n;i<<=1) \n        rep(j,i,n-1) if(j&i) s[j]+=s[j^i];\n}\nvoid FWT(int n,ll *a){\n    for(int i=1;i<n;i<<1)\n        for(int l=0;l<n;l+=i*2)\n            for(int j=0;j<l+i;++j) \n                s[j+i]+=s[j];\n}\n```\n\nTips:如果要卡常，可以写成类似$\\text{FFT}$的形式，因为优化了访问顺序会快一些\n\n$$\\ $$\n\n### 实现逆卷积\n\n把上面的加换成减，这是一个类似容斥的东西\n\n但是因为是反解，所以这个过程我么通常称为**子集反演**\n\n那么每次$0$向$1$的转移意味着多了一个不同的位置\n\n设$F'_S=\\sum_{T\\sube S}F_T$\n\n实际逆卷积就是$F_S=\\sum_{T\\sube S}(-1)^{|T\\oplus S|} F'_S$\n\n证明如下：\n\n$\\Leftrightarrow F_S=\\sum_{T\\sube S}(-1)^{|T\\oplus S|} \\sum _{R\\in T}F_R$\n\n$\\Leftrightarrow F_S=\\sum_{T\\sube S}F_R\\sum _{T\\sube R,R\\sube S}(-1)^{|S\\oplus R|}$\n\n$\\Leftrightarrow F_S=\\sum_{T\\sube S}F_R\\sum _{R\\sube (S\\oplus T)}(-1)^{|R|}$\n\n带入上面所提到的$\\sum_{T\\sube S}(-1)^{|T|}=[S=\\empty]$，成立\n\n```cpp\nvoid FWT(int n,ll *a,int f){\n    for(int i=1;i<n;i<<=1) \n        rep(j,i,n-1) if(j&i) s[j]+=f*s[j^i];\n}\nvoid FWT(int n,ll *a,int f){\n    for(int i=1;i<n;i<<1)\n        for(int l=0;l<n;l+=i*2)\n            for(int j=0;j<l+i;++j) \n                s[j+i]+=f*s[j];\n}\n```\n\n\n$$ \\ $$\n\n$$ \\ $$\n\n-------\n\n## Xor 卷积\n\n\n这里要用到一个小性质\n\n$|A\\cap B|+|A\\cap C|\\equiv |A\\cap (B\\bigoplus C)| \\pmod 2$\n\n构造$F'_S=\\sum_{T}(-1)^{|S\\cap T|}F_T$\n\n#### 正确性\n\n即$\\forall S,F'_S \\cdot G'_S=(F\\bigoplus G)'_S$\n\n$F'_S\\cdot G'_S=\\sum_{T} \\sum_{R}(-1)^{|S\\cap T|+|S\\cap R|}F_T\\cdot G_R$\n\n$=\\sum _T\\sum _R(-1)^{|(T\\bigoplus R)\\cap S|}F_T\\cdot G_R$\n\n显然这个式子与右边相同\n\n$$ \\  $$\n\n### 卷积实现\n\n考虑和前面相同的方法，枚举二进制位上最高的$1$\n\n之前由于转移是单向的，所以只需要一次加法，这里由于有了系数同时还是双向的转移，所以要格外注意\n\n转移系数也是比较明显的\n\n$0\\rightarrow 0 = 1$\n\n$0\\rightarrow 1 = 1$\n\n$1\\rightarrow 0 = 1$\n\n$1\\rightarrow 1 = -1$\n\n```cpp\nvoid FWT(int n,ll *a){\n    for(int i=1;i<n;i<<=1) {\n        rep(j,0,n-1) if(i&j) {\n            ll t=a[j+i];\n            a[j+i]=a[j]-t;\n            a[j]=a[j]+t;\n        }\n    }   \n}\nvoid FWT(int n,ll *a){\n    for(int i=1;i<n;i<<=1){\n        for(int l=0;l<n;l+=i*2) {\n            for(int j=l;j<l+i;++j){\n                ll t=a[j+i];\n                a[j+i]=a[j]-t;\n                a[j]+=t;\n            }\n        }\n    }\n}\n```\n\n\n\n### 实现逆卷积\n\n考虑再卷一次\n\n$F''_S=\\sum_T\\sum_R(-1)^{|S\\cap R|+|T\\cap R|}F_T$\n\n$=\\sum_T \\sum_R (-1)^{|(S\\bigoplus T)\\cap R|}F_T$\n\n$\\because \\sum_T (-1)^{|S\\cap T|}=\\sum_{T\\sube S}(-1)^{|T|}2^{|U|-|S|}=[S=\\empty]2^{|U|-|S|}$(其中$U$是全集)\n\n$\\therefore F''_S=\\sum_S2^{|U|}F_S$\n\n\n所以逆卷积就是再卷一遍，最后除去$n$即可\n\n```cpp\nvoid FWT(int n,ll *a,int f){\n    for(int i=1;i<n;i<<=1) {\n        rep(j,0,n-1) if(i&j) {\n            ll t=a[j+i];\n            a[j+i]=a[j]-t;\n            a[j]=a[j]+t;\n        }\n    }   \n    if(f==-1) rep(i,0,n-1) a[i]/=n;\n}\nvoid FWT(int n,ll *a,int f){\n    for(int i=1;i<n;i<<=1){\n        for(int l=0;l<n;l+=i*2) {\n            for(int j=l;j<l+i;++j){\n                ll t=a[j+i];\n                a[j+i]=a[j]-t;\n                a[j]+=t;\n            }\n        }\n    }\n    if(f==-1) for(int i=0;i<n;++i) a[i]/=n;\n}\n```\n\n和上面一样的，可以写成类似$\\text{FFT}$的形式卡常","tags":["default tag"],"categories":["default category"]},{"title":"集训队论文 2018 - 1 浅谈生成函数在掷骰子问题上的应用长沙市长郡中学杨懋龙 阅读笔记","url":"/articles/2020/08/14/6ef8a13e.html","content":"#集训队论文 2018 - 1 浅谈生成函数在掷骰子问题上的应用长沙市长郡中学杨懋龙 阅读笔记\n\n\n\n\n\n## 概率生成函数\n\n对于随机非负离散变量$x$，它的概率生成函数是{%raw%}$F(z)=\\begin{aligned}\\sum_{i=0}^{\\infty}P(x=i)z^i\\end{aligned}${%endraw%}\n\n有性质\n\n1.{%raw%}$F(1)=\\begin{aligned}\\sum_{i=0}^{\\infty}P(x=i)=1\\end{aligned}${%endraw%}\n\n2.{%raw%}$F'(1)=\\begin{aligned}\\sum_{i=0}^{\\infty}P(x=i)\\cdot i=E(x)\\end{aligned}${%endraw%}\n\n3.$E(x^{\\underline{k} })=F^{(k)}(1)$($x$的$k$阶下降幂)\n\n4.$x$的方差{%raw%}$=\\begin{aligned}\\sum_{i=0}^{\\infty}P(x=i)\\cdot (i-E(x))^2\\end{aligned}=\\begin{aligned}\\sum_{i=0}^{\\infty}P(x=i)\\cdot i^2-2P(x=i)\\cdot i\\cdot E(x)+P(x=i)\\cdot E^2(x)\\end{aligned}${%endraw%}\n\n$=E(x^2)-2E^2(x)+E^2(x)=E(x^2)-E^2(x)=E(x^{\\underline{2} })+E(x)-E^2(x)=F''(1)+F'(1)-(F'(1))^2$\n\n\n\nCTSC2006 歌唱王国\n\n给定序列$A_{1.. n}$\n\n求从一个空序列每次放$[1,m]$随机，第一次出现$A$的期望长度\n\n设当前对应$\\text{kmp}$位置为$i$，每次都可以转移一下\n\n$F(n)=0$\n\n$F(i)=\\frac{\\sum_{j=1}^m F(nxt_{i,j})} {m}+1$\n\n$nxt$非拓扑关系，且无法枚举$1..m$\n\n考虑每次$\\text{kmp}$合法匹配指针最多位移一位，令$G(i)$为匹配变为$i+1$的期望次数\n\n$G(i)=\\sum_{j=1}^{m}\\sum_{k=nxt_{i,j} }^{i} G(k)$\n\n设$sum_i=\\sum_1^{i}G(i)$，依次求出$[1,n-1]$所有的$G(i)$\n\n并不需要知道真的$nxt$数组，只需要知道$-sum_{nxt_{i,j}-1}$，每次从$fail_i$转移过来，改变一个位置的值，可以$O(1)$完成计算\n\n即可做到$O(n)$\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["学习笔记"]},{"title":"伯努利数求解","url":"/articles/2020/08/14/548e8bfb.html","content":"# 伯努利数求解\n\n设伯努利数$B_i$对应的指数型生成函数$B(x)=\\sum \\frac{B_ix^i} {i!}$\n\n$B(x)=\\frac{x} {e^x-1}$ 这个式子直接求是没有逆的。。。\n\n换一下{%raw%}$\\begin{aligned} B(x)=\\frac{x} {\\begin{aligned}\\sum_{i=1}^{\\infty}\\frac{x^i} {i!}\\end{aligned} }=\\frac{1} {\\begin{aligned}\\sum_{i=1}^{\\infty}\\frac{x^{i-1} } {i!}\\end{aligned} }\\end{aligned} ${%endraw%}\n\n带入前$n$项求逆即可\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"单位根反演","url":"/articles/2020/08/13/37ace200.html","content":"# 单位根反演\n\n最基础的用途是用于FFT中点值式转多项式\n\n即对于$G(i)=F(\\omega_n^i)$，由$G(i)$反演得到$[x^i]F(i)$的过程，称之为单位根反演\n\n式子非常简单\n\n{%raw%}$\\sum_{j=0}^{n-1}\\omega_n^{ij}= \\left\\{\\begin{aligned} \\frac{\\omega_n^{in}-1} {\\omega_n^i-1}=0  && i\\ne 0\\\\ n  && i=0\\end{aligned} \\right.${%endraw%}\n\n更简洁的式子为{%raw%}$\\begin{aligned}\\frac{\\sum_{j=0}^{n-1}\\omega_n^{ij} } {n}=[n|i]\\end{aligned}${%endraw%}\n\n在生成函数的化简与构造中，常用于解决$\\mod n=0$的限制\n\n如$\\sum_{n|i}\\frac{x^i} {i!}$\n\n通过单位根反演转化为 \n\n{%raw%}$ \\begin{aligned}\\sum_{n|i}\\frac{x^i} {i!}=\\sum_{i=0}^{\\infty}\\frac{\\sum_{j=0}^{n-1}\\omega_n^{ij} } {n} \\cdot \\frac{x^i} {i!}=\\sum_{i=0}^{\\infty}\\sum_{j=0}^{n-1} \\frac{(x\\omega_n^j)^i} {i!}=\\sum_{j=0}^{n-1}e^{x\\omega_n^j}\\end{aligned}${%endraw%}\n\n作为无穷级数压缩的一种方法\n\n但是单位根反演转化有一个非常明显的局限，就是在模意义下，$n$阶单位根很可能无法求解\n\n现在笔者还不会求模意义下特定的$n$阶单位根。。。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"任意模数NTT(MTT)","url":"/articles/2020/08/13/32e9b745.html","content":"# 任意模数NTT(MTT)\n\n[模板题传送门](https://www.luogu.com.cn/problem/P4245)\n\n问题的简单描述为，求解两个值域为$\\leq 10^9$的多项式卷积对于$P\\leq 10^9$取模的结果\n\n$$  \\ $$\n\n问题不能直接用NTT/FFT求解，因为均超过了值域范围(double值域承受不了)\n\n$$ \\ $$\n\n### Solution1: 3模数NTT\n\n取几个互质的模数分别做一次，然后用中国剩余定理合并\n\n由于值域大，通常需要多次NTT，且中国剩余定理合并常数也不小\n\n实际代码实现也复杂，因此笔者认为不可取\n\n$$\\ $$\n\n### Solution2: 拆系数FFT\n\n设$f(x)=\\sum a_ix^i$\n\n核心：将系数$a_i$分解成$a_i=A_i\\cdot S+C_i,b_i=B_i\\cdot S+D_i$ \n\n(其中$S\\ge \\sqrt{P}$是一个常数，$0 \\leq A_i,B_i,C_i,D_i<S$)\n\n目的是转化后使系数值域变小，double精度可以承受\n\n则最后的答案转化为求解$A_iB_jS^2+(C_iB_j+A_iD_j)S+C_iD_j$\n\n即求解$A_iB_j,C_iB_j,A_iD_j,C_iD_j$，此时值域已经大大缩小\n\n如果直接求解，可以看出要求解4次卷积，需要进行$12$次**FFT**，不可接受\n\n利用复数的一些性质，有些东西我们可以一起算\n\n构造\n\n$f(x)=\\sum (A_i,C_i)x^i$\n\n$g(x)=\\sum(B_i,D_i)x^i$\n\n$f(x)g(x)=\\sum \\sum (A_iB_j-C_iD_j, A_iD_j+C_iB_j)x^{i+j}$\n\n此时已经得到大部分值了，再构造\n\n$h(x)=\\sum B_ix^i$\n\n$f(x)h(x)=\\sum \\sum (A_iB_j,C_iB_j)x^{i+j}$\n\n取一部分即可\n\n最终一共有5次FFT\n\nTips:\n\n1.这里的负数取整一定要注意，因为C++默认是向0取整，而不是向下取整\n\n2.实际运行表明，这样写用double 很难保证精度，应该要用long double\n\n\n\n附:\n\n4次FFT做MTT，但是具体证明比较反人类，而代码非常好看且好写，所以建议直接背板子\n\nTips: 只要使用了上面提到的最适合FFT的板子，就可以用double，甚至可以开O2\n\n```cpp\nnamespace MTT{\n\tconst double PI=acos((double)-1);\n\tint rev[N];\n\tstruct Cp{\n\t\tdouble x,y;\n\t\tCp(){ ; }\n\t\tCp(double _x,double _y): x(_x),y(_y){ } \n\t\tinline Cp operator + (const Cp &t) const { return (Cp){x+t.x,y+t.y}; }\n\t\tinline Cp operator - (const Cp &t) const { return (Cp){x-t.x,y-t.y}; }\n\t\tinline Cp operator * (const Cp &t) const { return (Cp){x*t.x-y*t.y,x*t.y+y*t.x}; }\n\t}A[N],B[N],C[N],w[N/2];\n\n\t#define E(x) ll(x+0.5)%P\n\n\tvoid FFT(int n,Cp *a,int f){\n\t\trep(i,0,n-1) if(rev[i]<i) swap(a[i],a[rev[i]]);\n\t\tw[0]=Cp(1,0);\n\t\tfor(reg int i=1;i<n;i<<=1) {\n\t\t\tCp t=Cp(cos(PI/i),f*sin(PI/i));\n\t\t\tfor(reg int j=i-2;j>=0;j-=2) w[j+1]=t*(w[j]=w[j>>1]);\n            // 上面提到的最优板子\n\t\t\tfor(reg int l=0;l<n;l+=2*i) {\n\t\t\t\tfor(reg int j=l;j<l+i;j++) {\n\t\t\t\t\tCp t=a[j+i]*w[j-l];\n\t\t\t\t\ta[j+i]=a[j]-t;\n\t\t\t\t\ta[j]=a[j]+t;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(f==-1) rep(i,0,n-1) a[i].x/=n,a[i].y/=n;\n\t}\n\n\tvoid Multiply(int n,int m,int *a,int *b,int *res,int P){\n\t\t// [0,n-1]*[0,m-1]->[0,n+m-2]\n\t\tint S=(1<<15)-1;\n\n\t\tint R=1,cc=-1;\n\t\twhile(R<=n+m-1) R<<=1,cc++;\n\t\trep(i,1,R) rev[i]=(rev[i>>1]>>1)|((i&1)<<cc);\n\t\trep(i,0,n-1) A[i]=Cp((a[i]&S),(a[i]>>15));\n\t\trep(i,0,m-1) B[i]=Cp((b[i]&S),(b[i]>>15));\n\t\trep(i,n,R-1) A[i]=Cp(0,0);\n\t\trep(i,m,R-1) B[i]=Cp(0,0);\n\n\t\tFFT(R,A,1),FFT(R,B,1);\n\t\trep(i,0,R-1) {\n\t\t\tint j=(R-i)%R;\n\t\t\tC[i]=Cp((A[i].x+A[j].x)/2,(A[i].y-A[j].y)/2)*B[i];\n\t\t\tB[i]=Cp((A[i].y+A[j].y)/2,(A[j].x-A[i].x)/2)*B[i];\n\t\t}\n\t\tFFT(R,C,-1),FFT(R,B,-1);\n\n\t\trep(i,0,n+m-2) {\n\t\t\tll a=E(C[i].x),b=E(C[i].y),c=E(B[i].x),d=E(B[i].y);\n\t\t\tres[i]=(a+((b+c)<<15)+(d<<30))%P;\n\t\t}\n\t}\n\n\t#undef E\n}\n\n```\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"多项式指定大小的单位根点值式求解(含Bluestein’s Algorithm)","url":"/articles/2020/08/13/b5d9e614.html","content":"# 多项式指定大小的单位根点值式求解(含Bluestein’s Algorithm)\n\n下面的阐述建立于存在$n$阶单位根的前提下\n\n(如果是NTT，必须满足$n|(P-1)$ ，否则单位根可能会变成一个复杂的**多维向量**)\n\n$$ \\ $$\n\n## 用卷积解决多项式与点值式的转化:Bluestein’s Algorithm\n\n设最终求得的点值式为$f(x^k)=\\sum a_i\\cdot \\omega_n^{i k}$\n\n其中指数为$ik$，有一种简单的转化$i\\cdot k=\\cfrac{i^2+k^2-(i-k)^2} {2}$\n\n由于在模意义下，$x^{\\frac{i} {2} }$次(二次剩余)是一个非常麻烦的东西，所以考虑一个更优的转化\n\n$i\\cdot k=C(i+k,2)-C(i,2)-C(k,2)$\n\n这条式子的组合意义是：从集合$i,k$分别选一个，等价于从$i+k$选两个减去在$i,k$内部选两个\n\n通过这样的转化，我们可以对于每一个$a_i$计算其对于每个$f(x^k)$的贡献\n\n具体过程是简单的构造卷积，这里省略\n\n$$ \\ $$\n\n##适用于特殊情况的转化方法\n\n需要了解的是，多项式卷积的FFT/NTT不止适用与于二元分治\n\n对于多项式$F(x)$的$d$元分治，设分治子问题的答案为$G_j(x'_i),j\\in[0,d-1]$，可以得到合并式子\n\n{%raw%}$\\begin{aligned} F(x_i)=\\sum_{j=0}^{d-1}x_i^jG_j(x_i^d)=\\sum_{i=0}^{d-1}x_i^jG_j(x'_{i\\mod \\frac{n} {d} })\\end{aligned}${%endraw%}\n\n对于$n$进行质因数分解，得到$n=\\prod p_i$，带入上面的式子，带入$p_i$元分治强行求解，可以认为最终复杂度为\n\n$O(n\\sum p_i)=O(n\\cdot \\max\\{p_i\\} \\log n)$\n\n因此，这种方法使用于$p_i$较小的情况\n\n$$ \\ $$\n\n\n\n## n元点值式的用途\n\nDFT的卷积是溢出的，$x^i$会溢出到$x^{i\\mod n}$，系数之间存在着循环关系\n\n我们可以利用$n$元卷积做到指定大小的循环卷积，可以处理一些特定问题\n\n[例题:  [CTSC2010]性能优化](https://www.luogu.com.cn/problem/P4191)(使用$O(n\\log n\\log C)$的快速幂无法通过，尚未尝试Bluestein’s Algorithm)\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"伪WC2020游记","url":"/articles/2020/08/12/34803047.html","content":"# 伪WC2020游记\n\n补\n\n是的，这是一场在8月举行的盛大的冬令营！\n\n而且变成了自由报名！\n\n~奇妙的网课体验祭~\n\n#### Day1:\n\n哇路由器，哇bitmap\n\n哇Minhash，哇随机投影，哇并行计算\n\n工程学习祭。。。。\n\n晚上:？？？果然是集训队选手讲题？？？\n\n#### Day2\n\n嗯，是神仙讲题!\n\n嗯，还是神仙讲题!诶怎么锅了，诶怎么又锅了?诶怎么拖了15分钟还没讲完?\n\n晚上:？？？果然又是集训队选手讲题？？？\n\n#### \n\n#### Day3\n\n哇怎么都变成讲神仙题目了?\n\n#### Day4\n\n台风困在寝室祭。。。\n\n在寝室度过了完美的补觉日，直接错过所有讲课。。。\n\n#### Day5\n\n赶回家考试祭。。。\n\nT1\n\n 看起来十分可写，于是乎又搞了一年没搞出来\n\n是不是大家都A了，我是不是又完蛋了，只写了暴力\n\nT2\n\n~~推出了阶的表示性质，然后误以为要$dp$，直接跳过现场~~\n\nT3\n\n看起来十分可写，令人想到某道皮配题\n\nshi一般的代码写了一年，终于在最后一分钟交上去了哈哈哈哈\n\n果然十分可写，爆搜+dp感觉要自己要升天\n\n出来\n\n哇果然升天了!!题目锅了哈哈哈哈哈哈!!只有50哈哈哈哈哈哈!!~~(WCWCWC)~~\n\nT1果然大家都没A哈哈哈哈~~(读入错了挂掉10分祭)~~\n\nT2果然大家都A了哈哈哈哈\n\nT3这个非集选手平均分哈哈哈哈\n\n完事儿只有100分，划水本质又暴露了。。。\n\n#### Day6\n\n没错闭幕式在hdu多校期间，于是乎.~.~.~.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["游记"]},{"title":"[HDU-6848] Expectation (2020多校7T5) (Dp)","url":"/articles/2020/08/11/9a2d4f71.html","content":"# [HDU-6848] Expectation (2020多校7T5) (dp)\n\n~~比赛时疯狂脑抽写了3个小时祭~~\n\n考虑计算每条$x_i\\rightarrow x_{i+1}$的边被在所有情况下被经过的次数总和\n\n令$dp[i][j]$为有$i$个球时，$x_j\\rightarrow x_{j+1}$这段被经过的次数总和($j\\leq 2i$)\n\n考虑转移，对于$dp[i]$，枚举每个球向左或者右走，发现把两边的部分拉拢过来后，合并形成一条包含了原先$3$条边的新边，变成了$i-1$阶的子问题\n\n画图理解，发现$j$这条边，在$i-1$阶的子问题上对应的编号只可能是$j,j-1,j-2$\n\n视选择了$j$这条边为将边一端的球滚进另一端的洞里\n\n那么对于任意一条编号为$j$的边\n\n$j$变为编号为$j-2$的情况为选择了编号$[1,j-1]$范围内的边\n\n$j$变为编号为$j-1$的情况为选择了编号为$j$的边\n\n$j$变为编号为$j$的情况为选择了编号为$[j+1,2i]$的边\n\n对于$j$在子问题中被访问的次数可以直接$O(1)$继承过来\n\n同时，考虑当第一次就选了$j$时，后面的操作随意，即加上$(i-1)!\\cdot 2^{i-1}$\n\n于是得到一个$O(n^2)$的$dp$预处理\n\n而对于每个询问，求解$n$阶的答案复杂度为$O(n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n    T s=0; int f=0;\n    while(!isdigit(IO=getchar())) if(IO=='-') f=1;\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return f?-s:s;\n}\n\nconst int N=3010,P=998244353;\n\nint n;\nint dp[N][N*2],Fac[N];\nll qpow(ll x,ll k=P-2) {\n    ll res=1;\n    for(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n    return res;\n}\n\nint main(){\n    rep(i,Fac[0]=1,N-1) Fac[i]=1ll*i*Fac[i-1]%P;\n    dp[1][1]=dp[1][2]=1;\n    int t=1;\n    rep(i,2,N-1) {\n        t=1ll*t*(i-1)*2%P;\n        rep(j,1,i*2) {\n            dp[i][j]=(1ll*(i*2-j)*dp[i-1][j]+1ll*dp[i-1][j-1]+1ll*(j-1)*(j>=2?dp[i-1][j-2]:0)+t)%P;\n        }\n    }\n\n    rep(kase,1,rd()) {\n        n=rd();\n        int ans=0,x=rd();\n        rep(i,1,n*2) {\n            int y=rd();\n            ans=(ans+1ll*(y-x)*dp[n][i])%P;\n            x=y;\n        }\n        ans=ans*qpow((P+1)/2,n)%P*qpow(Fac[n])%P;\n        printf(\"%d\\n\",ans);\n    }\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","各大OJ"],"categories":["题解"]},{"title":"[HDU-6847] Decision (2020多校7T4) (类欧几里得问题)","url":"/articles/2020/08/11/2e8a8d93.html","content":"# [HDU-6847] Decision (2020多校7T4) (类欧几里得问题)\n\n枚举$|v_1-v_2|$后，可以递推，用含首项($v_1+v_2$)的一次函数表示函数值为$a(v_1+v_2)+b$，则问题等价于求\n\n{%raw%}$\\begin{aligned} \\sum_{i=0}^n [2|(ai+b)\\mod m] \\end{aligned}${%endraw%} ，其中 $n$ 对于每个 $v_1-v_2$ 是不同的\n\n这个问题，可以转化为一个简单的类欧几里得问题\n\n$(ai+b)\\mod m \\mod 2= ((ai+b)-(m\\mod 2)\\cdot \\lfloor \\frac{ai+b} {m}\\rfloor )\\mod 2$\n\n这个式子即把每次被$m$取模减少的$m$算进贡献\n\n可以看到操作非常简单，可以直接套上万能欧几里得的板子\n\n当然，也可以对于$m$的各种情况讨论，转化为求$\\lfloor \\frac{ai+b} {m}\\rfloor$，其主要思想还有应用 $x\\mod 2=x-2\\cdot \\lfloor \\frac{x} {2}\\rfloor$ 的转化\n\n我比赛时去抄了自己的类欧几里得模板\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n    T s=0; int f=0;\n    while(!isdigit(IO=getchar())) if(IO=='-') f=1;\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return f?-s:s;\n}\n\nconst int N=1e6+10;\n\nint t,a,c,m;\nint fx[N],fy[N];\n\nll gcd(ll a,ll b){ return b==0?a:gcd(b,a%b); }\n\nll D2(ll n){\n    return n*(n+1)/2;\n}\nll F(ll a,ll b,ll c,ll n){\n    if(n<0) return 0;\n    if(a==0) return (b/c)*(n+1);\n    if(a>=c || b>=c) {\n        ll ans=F(a%c,b%c,c,n)+D2(n)*(a/c)+(n+1)*(b/c);\n        return ans;\n    }\n    ll t=(a*n+b)/c;\n    ll ans=t*n-F(c,-b+c-1,a,t-1);\n    return ans;\n}\n\nll CalcMod(int a,int b,int m,int n){\n    return F(a,b,m,n)-F(a,b,m*2,n)*2;\n}\n\nll Calc(int a,int b,int n){\n    // for i= [l,r] (ax+b) %m %2\n    if(~m&1){\n        // (ax+b)%2;\n        a%=2,b%=2;\n        if(a==0) return b*(n+1);\n        return (n+1+b)/2;\n    } else {\n        // (ax+b) %m %2 = ((ax+b)/m + ax+b)%2\n        int c=a%2,d=b%2;\n        if(c==0) {\n            // =((ax+b)/m+b)%2;\n            if(d==0) return CalcMod(a,b,m,n);\n            else return (n+1)-CalcMod(a,b,m,n);\n        } else {\n            // (ax+b) %m %2 = ((ax+b)/m + (x&1)+d)%2\n            ll ans=0;\n\n            // i%2 == 0\n            ll t=CalcMod(a*2,b,m,n/2);\n            if(d) t=n/2+1-t;\n            ans+=t;\n\n            b+=a;\n            // i%2 == 1\n            n--;\n            if(n<0) return ans;\n            t=CalcMod(a*2,b,m,n/2);\n            if(!d) t=n/2+1-t;\n            ans+=t;\n            return ans;\n        }\n    }\n}\n\nint main(){\n    rep(kase,1,rd()) {\n        t=rd(),a=rd(),c=rd(),m=rd();\n        fx[0]=1,fy[0]=0;\n        rep(i,1,t) fx[i]=1ll*fx[i-1]*a%m,fy[i]=(1ll*fy[i-1]*a+c)%m;\n        ll ans=0;\n        rep(i,0,t) {\n            if(i==0) {\n                ans+=Calc(fx[i]*2%m,fy[i],t);\n            } else {\n                // a<b, b - a = i\n                // a=[0,m-i]\n                // b=[i,m]\n                ll tmp=(1ll*i*fx[i]+fy[i])%m;\n                ans+=Calc(fx[i]*2%m,tmp,t-i)*2;\n            }\n        }\n        ll tmp=1ll*(t+1)*(t+1);\n        ans=tmp-ans;\n        ll g=gcd(tmp,ans);\n        printf(\"%lld/%lld\\n\",ans/g,tmp/g);\n    }\n}\n```","tags":["各大OJ"],"categories":["题解"]},{"title":"[HDU-6854] Kcats (2020多校7 T11) (笛卡尔树+区间Dp)","url":"/articles/2020/08/11/91bb54d9.html","content":"# [HDU-6854] Kcats (2020多校7 T11) (笛卡尔树+区间dp)\n\n前缀$p_1,p_2,\\cdots,p_i$的单调栈大小，即$i$号节点在全局的笛卡尔树上对应的位置的所有在左边的祖先个数\n\n因此，区间$dp$笛卡尔树的树形，合并时，为了满足题目的限制，只需要记录左边的祖先个数$d$\n\n即定义$dp[l][r][d]$为区间$l,r$对应笛卡尔树子树，且根节点左祖先个数为$d$的方案数\n\n合并两个子树时注意补上组合数，且自己这个点对于左儿子深度没有贡献\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n    T s=0; int f=0;\n    while(!isdigit(IO=getchar())) if(IO=='-') f=1;\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return f?-s:s;\n}\n\nconst int N=1e2+10,P=1e9+7;\n\nint n,a[N],C[N][N],dp[N][N][N];\n\nint main(){\n    rep(i,0,N-1) rep(j,C[i][0]=1,i) C[i][j]=(C[i-1][j-1]+C[i-1][j])%P;\n    rep(kase,1,rd()) {\n        rep(i,1,n=rd()) a[i]=rd();\n        memset(dp,0,sizeof dp);\n        drep(i,n,1) rep(j,i,n) rep(k,i,j) \n            rep(d,~a[k]?a[k]:1,~a[k]?a[k]:n) \n                dp[i][j][d]=(dp[i][j][d]+1ll*(i<k?dp[i][k-1][d]:1)*(k<j?dp[k+1][j][d+1]:1)%P*C[j-i][k-i])%P;\n        printf(\"%d\\n\",dp[1][n][1]);\n    }\n}\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder","各大OJ"],"categories":["题解"]},{"title":"「联合省选 2020 A」组合数问题","url":"/articles/2020/08/09/c163cc6e.html","content":"#「联合省选 2020 A」组合数问题\n\n题意：\n\n求{%raw%}$\\begin{aligned}\\sum _{k=0}^nf(k)\\cdot x^k\\cdot C(n,k)\\end{aligned}${%endraw%}\n\n显然要对于$f(k)$的每一项考虑，第$i$项的贡献\n\n{%raw%}$a_i\\begin{aligned}\\sum _{k=0}^nk^i\\cdot x^k\\cdot C(n,k)\\end{aligned}${%endraw%}\n\n## 通用的$O(m^2)$\n\n后面的这个式子，考虑它的组合意义，假设当前有$n$个格子，每个格子被染了$[0,x]$的颜色\n\n$x^k\\cdot C(n,k)$即枚举有$k$个格子涂了$[1,x]$的颜色，剩下涂了$0$的颜色\n\n$k^i$的组合意义即可重复地选了$i$次，每次选出的都是在$[1,x]$颜色的格子的方案数\n\n那么问题可以转化为强制每一次被访问的格子都是$[1,x]$，其他的格子随便涂$[0,x]$\n\n问题在于每次被访问的格子会重复，于是可以想到一个简单的转化，求出$i$次访问了$j$不同位置的方案数\n\n即斯特林数$S(i,j)$，可以得到的是\n\n{%raw%}$\\begin{aligned}\\sum _{k=0}^nk^i\\cdot x^k\\cdot C(n,k)=\\sum_{j=0}^iS(i,j)\\cdot \\frac{n!} {(n-j)!}\\cdot x^j(x+1)^{n-j}\\end{aligned}${%endraw%}\n\n实际上可以在$O(m^2)$递推斯特林数时就把$\\frac{n!} {(n-j)!}$加入权值，$x^j(x+1)^{n-j}$可以预处理出来\n\n因此总复杂度就是$O(m^2)$\n\n```cpp\n#include<cstdio>\nlong long i,j,n,m,P,x,y,F[1010],Pow[1010],r,ans;\nint qpow(int x,int k) { \n\tfor(r=1;k;k>>=1,x=1ll*x*x%P) if(k&1) r=r*x%P; \n\treturn r; \n}\nint main(){\n\tfreopen(\"problem.in\",\"r\",stdin),freopen(\"problem.out\",\"w\",stdout);\n\tscanf(\"%lld%lld%lld%lld%lld\",&n,&x,&P,&m,&y),F[0]=1,ans=qpow(x+1,n)*y%P;\n\tfor(int i=0;i<=m;++i) Pow[i]=1ll*qpow(x,i)*qpow(x+1,n-i)%P;\n\tfor(i=1;i<=m;++i) {\n\t\tlong long res=0;\n\t\tfor(j=i,scanf(\"%lld\",&y);~j;--j) {\n\t\t\tF[j]=(F[j]*j+(j?F[j-1]*(n-j+1):0))%P; // 类似斯特林数的递推\n\t\t\tres=(res+F[j]*Pow[j])%P;\n\t\t}\n\t\tans=(ans+res*y)%P;\n\t}\n\tprintf(\"%lld\",ans);\n}\n```\n\n\n\n## 特殊的$O(m\\log^2 m)$\n\n~~(注意以下仅限于口胡!)~~\n\n假设可以把$f(k)$转化为下降幂多项式，依然枚举每一项考虑，那么每次要求的就是\n\n{%raw%}$\\begin{aligned}\\sum _{k=0}^nk^{\\underline i}\\cdot x^k\\cdot C(n,k)=i!\\sum _{k=0}^nC(k,i)\\cdot x^k\\cdot C(n,k)\\end{aligned}${%endraw%}\n\n依然考虑组合意义\n\n$x^k\\cdot C(n,k)$即枚举有$k$个格子涂了$[1,x]$的颜色，剩下涂了$0$的颜色\n\n$C(k,i)$的组合意义不可重复地选了$i$次，每次选出的都是在$[1,x]$颜色的格子的方案数\n\n那么问题可以转化为强制每一次被访问的格子都是$[1,x]$，其他的格子随便涂$[0,x]$\n\n{%raw%}$\\begin{aligned}\\sum _{k=0}^nk^{\\underline i}\\cdot x^k\\cdot C(n,k)=i!\\cdot C(n,i)\\cdot x^i\\cdot (x+1)^{n-i}\\end{aligned}${%endraw%}\n\n  ~~(式子应该没有问题，但是下面都是口胡)~~\n\n求解下降幂多项式需要多点求值，还要求很多逆元\n\n然而对于非质数的$P$，我们求不出$i!$的逆元\n\n(比较智障的搞法就是每次乘法都存下$P$的每个质因数个数，这样，做乘法的复杂度是$\\log P$，但是不知道最后做出的答案是不是能保证因数个数$\\ge 0$)\n\n对于$P$为质数的情况，用$\\text{MTT}$做多项式转下降幂多项式的复杂度是$O(m\\log^2 m)$\n\n~~(听说用转置原理优化的多点求值已经可以跑$10^6$啦?)~~\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"[HDU-6834] Yukikaze and Smooth Numbers","url":"/articles/2020/08/08/1928e765.html","content":"# [HDU-6834] Yukikaze and Smooth numbers\n\n题意：计算$[1,n]$中只包含$[1,k]$的质因数的数个数\n\n让人联想到Min25筛的$dp$模型\n\n设$m=\\sqrt n$，可以对于$k > m$和$k\\leq m$讨论\n\n## Case1:$k\\leq m$\n\n此时可以直接套用类似Min25筛的$dp$模型求解\n\n令$dp_{i,j}$为$[1,j]$只包含$[1,i]$的质因数的数个数\n\n则$dp_{i,j}=\\sum_k dp_{i-1,\\lfloor \\frac{j} {prime_i^k}\\rfloor }$\n\n要求的是$dp_{k,n}$，第二维状态是$O(m)$级别的\n\n直接写当然是近似于$O(m\\cdot \\pi(n))=O(\\frac{n} {\\log n})$级别的\n\n加上Min25筛的优化，令$dp_i,j$不包含单质数和1的情况，以减少转移情况\n\n如果从大到小考虑每个质数，那么只需要考虑$j\\ge prime_i^2$的第二维状态，以减少很多的$dp$时间\n\n沿用Min25筛复杂度证明，是$O(\\frac{n^{\\frac{3} {4} }} {\\log n})$的\n\n```cpp\n#define id(x) (x<=m?x:cnt-n/x+1)\n\nint dp[N],g[N],st[N],cnt;\n\nif(k==1){ puts(\"1\"); continue; }\nm=sqrt(n),cnt=0;\nrep(i,1,n) st[++cnt]=i=n/(n/i),dp[cnt]=0; // 不包括质数本身和1\nint sz=1;\nwhile(pri[sz+1]<=k) sz++;\nint p=0;\nrep(i,1,cnt){\n    while(p<sz && pri[p+1]<=st[i]) p++;\n    g[i]=p;\n}    \nrep(i,1,cnt) for(ll x=pri[sz]*pri[sz];x<=st[i];x*=pri[sz]) dp[i]++;\nfor(reg int i=sz-1;i;--i) {\n    for(reg int j=cnt,tmp=pri[i]*pri[i];st[j]>=tmp;--j) {\n        reg int x=st[j];\n        while(x>=tmp) {\n            x/=pri[i];\n            dp[j]+=dp[id(x)]+g[id(x)]-i+1;\n        }\n    }\n}\nprintf(\"%d\\n\",dp[cnt]+sz+1);\n```\n\n$$\\ $$\n\n## Case2 : $k> m$\n\n可以把问题转化为求不合法部分，即$\\sum_{prime_i>k}\\lfloor \\frac{n} {prime_i}\\rfloor $\n\n采用数论分段计算$\\lfloor \\frac{n} {i}\\rfloor $，那么剩下的问题就是要求一段区间内的质数个数\n\n同样采用类似上面的模型，\n\n令$dp_{i,j}$为$[1,j]$内与前$[1,i]$内质数互质的个数以及这些质数本身，不包括1 \n\n```cpp\nint n,m;\nint dp[N],g[N],st[N],cnt;\n#define id(x) (x<=m?x:cnt-n/x+1)\n\nint Count(int n) {\n    if(n<N) return pcount[n];\n    ::n=n,m=sqrt(n),cnt=0;\n    rep(i,1,n) st[++cnt]=i=n/(n/i),dp[cnt]=i-1;\n    for(reg int i=1;pri[i]<=m;++i) {\n        for(reg int j=cnt,tmp=pri[i]*pri[i];st[j]>=tmp;--j) {\n            reg int k=st[j]/pri[i];\n            dp[j]-=dp[id(k)]-(i-1);\n        }\n    }\n    return dp[cnt];\n}\n```\n\n具体复杂度没有算过，应该不会太高\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["各大OJ"],"categories":["题解"]},{"title":"[HDU - 6833] a Very Easy Math Problem (莫比乌斯反演)","url":"/articles/2020/08/08/30fb7c1c.html","content":"# [HDU - 6833] A Very Easy Math Problem (莫比乌斯反演)\n\n与$\\gcd$有关的问题，很容易想到莫比乌斯反演\n\n设$G(a,n)=(\\sum_{i=1}^{\\lfloor \\frac{n} {a} \\rfloor } (ai)^k)^x$\n\n$Ans=\\sum_{g=1}^{n} g\\cdot f(g)\\cdot \\sum _{d=1}^{\\lfloor\\frac{n} {g}\\rfloor} \\mu(d) G(gd,n)$\n\n对于单组询问，显然可以$O(n\\ln n)$求解\n\n考虑优化\n\n可以在$O(n\\ln n)$的时间内，对于每个$i$，求出$F(i)=\\sum_{d|i}\\mu(d)\\cdot \\frac{i} {d} f(\\frac{i} {d})$\n\n对于$G(a,n)$的求解，参数分离后发现 $G(a,n)=a^{kx}(\\sum_{i=1}^{\\lfloor \\frac{n} {a} \\rfloor } i^k)^x$\n\n可以预处理出$S(n)=\\sum_{i=1}^n i^{kx}\\cdot F(i)$前缀和以及$A(n)=(\\sum_{i=1}^{n}i^k)^x$，对于每个$\\lfloor \\frac{n} {a}\\rfloor $考虑即可\n\n数论分段的复杂度为单组查询$O(\\sqrt n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n    T s=0; int f=0;\n    while(!isdigit(IO=getchar())) if(IO=='-') f=1;\n    do s=(s<<1)+(s<<3)+(IO^'0');\n    while(isdigit(IO=getchar()));\n    return f?-s:s;\n}\n\nconst int N=2e5+10,P=1e9+7;\n\nint T,n,k,x;\nint mk[N],notpri[N],pri[N],pc,w[N];\nll qpow(ll x,ll k=P-2) {\n    ll res=1;\n    for(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n    return res;\n}\nint s[N],F[N],S[N],A[N];\n\n\nint main(){\n    w[1]=1;\n    rep(i,2,N-1) {\n        if(!notpri[i]) pri[++pc]=i,w[i]=-1;\n        for(int j=1;j<=pc && 1ll*i*pri[j]<N;++j) {\n            notpri[i*pri[j]]=1;\n            if(i%pri[j]==0) {\n                w[i*pri[j]]=0;\n                break;\n            }\n            w[i*pri[j]]=-w[i];\n        }\n    }\n    for(int i=2;i*i<N;++i) for(int j=i*i;j<N;j+=i*i) mk[j]=1;\n    rep(i,1,N-1) if(!mk[i]) rep(j,1,(N-1)/i) F[i*j]=(F[i*j]+i*w[j]+P)%P;\n    T=rd(),k=rd(),x=rd();\n    rep(i,1,N-1) S[i]=(S[i-1]+F[i]*qpow(i,1ll*k*x))%P;\n    rep(i,1,N-1) A[i]=(A[i-1]+qpow(i,k))%P;\n    rep(i,1,N-1) A[i]=qpow(A[i],x);\n    rep(kase,1,T) {\n        n=rd();\n        ll ans=0;\n        for(int i=1,j;i<=n;i=j+1) {\n            j=n/(n/i);\n            ans=(ans+1ll*(S[j]-S[i-1])*A[n/i])%P;\n        }\n        ans=(ans%P+P)%P;\n        printf(\"%lld\\n\",ans);\n    }\n}\n\n```\n\n\n\n\n\n","tags":["Atcoder","各大OJ"],"categories":["题解"]},{"title":"「十二省联考 2019」骗分过样例 ","url":"/articles/2020/07/31/4a8da56e.html","content":"# 「十二省联考 2019」骗分过样例 \n\n很显然，这是一道有时限的提答题!!!!\n\n但是知识点很丰富，值得一写\n\n### Case 1-3: 1_998244353\n\n直接快速幂$19^x$，如果读入太大，指数可以$\\mod \\varphi(998244353)$ ,不谈...\n\n### Case 4: 1?\n\n不知道模数，但是可以看出模数很小，随便选一个答案试出模数即可(145141?)\n\n### Case5: 1?+\n\n值域非常大，就算是快速幂也显然要通过快速乘来实现，设模数为$P$\n\n把所有读入的数拿出来看，发现最相近的两个相差只有$2$\n\n意味着我们知道\n\n$19^x \\equiv a\\pmod P,19^{x+2} \\equiv b \\pmod P$\n\n很显然$a\\cdot 19^2 \\mod P=b$，求出$a\\cdot 19^2-b$，分解质因数即可\n\n实际实现可以用手写高精/Python\n\n### Case6: 1_wa998244353\n\n答案的生成是，求幂次的时候乘法不开long long ，即\n\n```cpp\nint n,s=1; scanf(\"%d\",&n);\nfor(int i=1;i<=n;++i) s=s*19%998244353;\n```\n\n出题人的tips给了，自然溢出是非定义行为，甚至有可能导致RE\n\n所以模拟的话，实际应该这样写\n\n```cpp\ns=int(((unsigned)s*19))%P;\n```\n\n可以发现，这个答案的序列近似于一个伪随机数列，学过$\\text{Pollard's Rho}$算法就知道，\n\n根据生日问题/生日悖论，伪随机数列期望在$O(\\sqrt n)$的时间内产生一个伪循环，因此可以快速求解\n\n```cpp\nint s[300000];\nint T=-1,fir=-1;\nmap <int,int> M;\ns[0]=1,M[1]=0;\nrep(i,1,300000){\n    s[i]=int(((unsigned)s[i-1]*19))%P;\n\tif(M.count(s[i])) {\n\t\tT=i-M[s[i]],fir=M[s[i]];\n\t\tbreak;\n\t}\t\t\n    M[s[i]]=i;\n}\nrep(kase,1,rd()){\n\tll x=rd<ll>();\n\tprintf(\"%d\\n\",s[x<=fir?x:(x-fir)%T+fir]);\n}\n```\n\n### Case8-10: 2p\n\n判断$[l,r]$内的数是否是质数，[$\\text{Miller_Rabin}$模板](https://loj.ac/problem/143)\n\n### Case9-10: 2u\n\n求$[L,R]$内的莫比乌斯系数$w(n)$，设$n=\\prod_1^m p_i^{c_i},c_i>0$\n\n{%raw%}$w(n)=\\left\\{\\begin{aligned} (-1)^m  &&\\nexists c_i>1,\\\\ 0 && \\exists c_i>1\\end{aligned}\\right.${%endraw%}\n\n对于$L,R$达到$10^{18}$次时，考虑先用$[1,R^{\\frac{1} {3} }]$内的质数筛掉，那么剩下的数最多包含两个$(R^{\\frac{1} {3} },R]$内的质因数\n\n可以开根号判断是否是平方数，用$\\text{Miller_Rabin}$判断是否是质数\n\n由于$R-L$与$R^{\\frac{1} {3} }$同阶复杂度为$O(R^{\\frac{1} {3} }\\log R^{\\frac{1} {3} })$，常数较大\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair <int,int> Pii;\n#define pb push_back\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0;int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=1e6+10,P=998244353;\n\nll qmul(ll x,ll y,ll P){\n\tll z=(long double)x/P*y;\n\tll t=(ull)x*y-(ull)z*P;\n\tt=t%P; Mod2(t);\n\treturn t;\n}\nll qpow2(ll x,ll k,ll P) {\n\tll res=1;\n\tfor(;k;k>>=1,x=qmul(x,x,P)) if(k&1) res=qmul(res,x,P);\n\treturn res;\n}\nll qpow(ll x,ll k,ll P) {\n\tif(P>2e9) return qpow2(x,k,P);\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nchar s[20000];\nvoid Solve19(ll P){\n\tscanf(\"%s\",s+1);\n\tll k=0;\n\tfor(int i=1;s[i];++i) k=(qmul(k,10,P-1)+s[i]-'0')%(P-1);\n\tprintf(\"%lld\\n\",qpow(19,k,P));\n}\nint notpri[N],pri[N],pc,w[N];\nvoid Init(){\n\tnotpri[1]=w[1]=1;\n\trep(i,2,N-1) {\n\t\tif(!notpri[i]) pri[++pc]=i,w[i]=-1;\n\t\tfor(int j=1;j<=pc && 1ll*i*pri[j]<N;++j){\n\t\t\tnotpri[i*pri[j]]=1;\n\t\t\tif(i%pri[j]==0) {\n\t\t\t\tw[i*pri[j]]=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tw[i*pri[j]]=-w[i];\n\t\t}\n\t}\n}\nint MR(ll x){\n\tif(x==2) return 1;\n\tif(x<=1 || ~x&1) return 0;\n\tif(x<N) return !notpri[x];\n\tll s=0,t=x-1;\n\twhile(~t&1) s++,t>>=1;\n\trep(i,1,3) {\n\t\tll b=pri[rand()%pc+1],k;\n\t\tb=qpow(b,t,x);\n\t\trep(j,1,s) {\n\t\t\tk=qmul(b,b,x);\n\t\t\tif(k==1 && b!=1 && b!=x-1) return 0;\n\t\t\tb=k;\n\t\t}\n\t\tif(b!=1) return 0;\n\t}\n\treturn 1;\n}\nint chk(ll x){ return x<N?!notpri[x]:MR(x); }\nchar Mo(int x){ return \"-0+\"[x+1]; }\nint ans[N]; ll a[N];\nvoid QueMobius(ll l,ll r){\n\twhile(l<N && l<=r) putchar(Mo(w[l++]));\n\tif(l>r) return (void)puts(\"\");\n\trep(i,0,r-l) ans[i]=1,a[i]=i+l;\n\trep(i,2,N-1) if(!notpri[i]) {\n\t\tfor(ll j=(l+i-1)/i*i;j<=r;j+=i) {\n\t\t\tll id=j-l;\n\t\t\tif(!ans[id]) continue;\n\t\t\tll c=0;\n\t\t\twhile(a[id]%i==0) a[id]/=i,c++;\n\t\t\tif(c>1) ans[id]=0;\n\t\t\telse ans[id]*=-1;\n\t\t}\n\t}\n\trep(i,0,r-l) if(ans[i] && a[i]>1) {\n\t\tll t=round(sqrt(a[i]));\n\t\tif(t*t==a[i]) ans[i]=0;\n\t\telse if(chk(a[i])) ans[i]=-ans[i];\n\t}\n\trep(i,0,r-l) putchar(Mo(ans[i]));\n\tputs(\"\");\n}\nvoid Queg(int l,int r,int P){\n\tint t=P-1;\n\tvector <int> Fac;\n\tfor(int i=2;i*i<=t;++i) if(t%i==0){\n\t\twhile(t%i==0) t/=i;\n\t\tFac.pb(i);\n\t}\n\tif(t>1) Fac.pb(t); \n\t\n\tif(r!=13123110) {\n\t\trep(i,l,r){\n\t\t\tint f=1;\n\t\t\tfor(int j:Fac) if(qpow(i,(P-1)/j,P)==1) { f=0; break; }\n\t\t\tputchar(\".g\"[f]);\n\t\t}\n\t} else {\n\t\tstatic int mk[13123120];\n\t\tstatic bool copri[13123120];\n\t\tint g=1;\n\t\trep(i,l,r){\n\t\t\tint f=1;\n\t\t\tfor(int j:Fac) if(qpow(i,(P-1)/j,P)==1) { f=0; break; }\n\t\t\tif(f) { g=i; break; }\n\t\t}\n\t\tint s=1; mk[1]=0;\n\t\trep(i,1,P-2) s=s*g%P,mk[s]=i;\n\t\tcopri[0]=1;\n\t\tfor(int i:Fac) for(int j=i;j<P;j+=i) copri[j]=1;\n\t\trep(i,1,P-1) putchar(\"g.\"[copri[mk[i]]]);\n\t}\n\tputs(\"\");\n}\n\nint main(){\n\tInit();\n\tfreopen(\"software.in\",\"r\",stdin); freopen(\"software.out\",\"w\",stdout);\n\tstring typ; cin>>typ;\n\tif(typ==\"1_998244353\") rep(kase,1,rd()) Solve19(998244353);\n\telse if(typ==\"1?\") rep(kase,1,rd()) Solve19(1145141);\n\telse if(typ==\"1?+\") rep(kase,1,rd()) Solve19(5211600617818708273);\n\telse if(typ==\"1wa_998244353\") {\n\t\tstatic int s[300000];\n\t\tint T=-1,fir=-1;\n\t\tmap <int,int> M;\n\t\ts[0]=1,M[1]=0;\n\t\trep(i,1,300000){\n\t\t\ts[i]=int(((unsigned)s[i-1]*19))%P;\n\t\t\tif(M.count(s[i])) {\n\t\t\t\tT=i-M[s[i]],fir=M[s[i]];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tM[s[i]]=i;\n\t\t}\n\t\trep(kase,1,rd()){\n\t\t\tll x=rd<ll>();\n\t\t\tprintf(\"%d\\n\",s[x<=fir?x:(x-fir)%T+fir]);\n\t\t}\n\t} else if(typ==\"2p\") {\n\t\trep(kase,1,rd()) {\n\t\t\tll l=rd<ll>(),r=rd<ll>();\n\t\t\tfor(ll i=l;i<=r;++i) putchar(chk(i)?'p':'.');\n\t\t\tputs(\"\");\n\t\t}\n\t} else if(typ==\"2u\") {\n\t\trep(kase,1,rd()) {\n\t\t\tll l=rd<ll>(),r=rd<ll>();\n\t\t\tQueMobius(l,r);\n\t\t}\n\t} else if(typ==\"2g\" || typ==\"2g?\") {\n\t\trep(kase,1,rd()){\n\t\t\tint l=rd(),r=rd();\n\t\t\tint p=1515343657;\n\t\t\tif(l!=233333333) p=rd();\n\t\t\tQueg(l,r,p);\n\t\t}\n\t}\n}\n\n```\n\n","tags":["default tag"],"categories":["default category"]},{"title":"HDU-6801 2020HDU多校第三场T11 (生成函数)","url":"/articles/2020/07/31/8a230e4c.html","content":"# HDU-6801 2020HDU多校第三场T11 (生成函数)\n\n题解又给式子不解释了。。\n\n设未被选中的概率$q=1-p$\n\n设$a_i$为$c$号点被选中前有$i$个点被选中的概率，它的普通生成函数为$A(x)$\n\n考虑枚举$c$在第$i$次被访问到时被选中\n\n则$c$前面的$c-1$个点在转的过程中被访问了$i$次，后面的$n-c$个点被访问了$i-1$次(可能在没有经过这么多次时就已经被删掉了，但是不影响概率的计算)，因此可以简单考虑这两种点在$c$之前被选中的概率\n\n得到一个$A(x)$的表示\n\n{%raw%}$\\begin{aligned} A(x)=\\sum_{i=1}^{\\infty}p\\cdot q^{i-1}\\cdot (q^i+(1-q^i)x)^{c-1}\\cdot (q^{i-1}+(1-q^{i-1}x))^{n-c}\\end{aligned}${%endraw%}\n\n也即题解中的式子\n\n{%raw%}$\\begin{aligned} A(x)=\\sum_{i=0}^{\\infty}p\\cdot q^i\\cdot (q^{i+1}+(1-q^{i+1})x)^{c-1}\\cdot (q^i+(1-q^ix))^{n-c}\\end{aligned}${%endraw%}\n\n然后是暴力展开\n\n{%raw%}$\\begin{aligned} A(x)=\\sum_{i=0}^{\\infty}p\\cdot q^i\\cdot (q^{i+1}(1-x)+x)^{c-1}\\cdot (q^i(1-x)+x)^{n-c}\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned} A(x)=\\sum_{i=0}^{\\infty}p\\cdot q^i\\cdot (\\sum_{j=0}^{c-1}C(c-1,j)\\cdot  q^{(i+1)j}(1-x)^jx^{c-1-j})\\cdot (\\sum_{k=0}^{n-c}C(n-c,k)\\cdot q^{ik}(1-x)^kx^{n-c-k})\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned} A(x)=\\sum_{i=0}^{\\infty}p\\cdot q^i\\cdot \\sum_{j=0}^{c-1}\\sum_{k=0}^{n-c} C(c-1,j)\\cdot C(n-c,k)\\cdot q^{(i+1)j+ik}(1-x)^{j+k}x^{n-j-k-1}\\end{aligned}${%endraw%}\n\n这个式子极其反人类，把$i$换到右边化掉\n\n{%raw%}$\\begin{aligned} A(x)=\\sum_{j=0}^{c-1}\\sum_{k=0}^{n-c} C(c-1,j)\\cdot C(n-c,k)\\cdot (1-x)^{j+k}x^{n-j-k-1}\\cdot \\sum_{i=0}^{\\infty}p\\cdot q^i q^{(i+1)j+ik}\\end{aligned}${%endraw%}\n\n右边是一个收敛的无穷等比数列\n\n{%raw%}$\\begin{aligned} A(x)=\\sum_{j=0}^{c-1}\\sum_{k=0}^{n-c} C(c-1,j)\\cdot C(n-c,k)\\cdot (1-x)^{j+k}x^{n-j-k-1}\\cdot \\frac{pq^j} {1-q^{j+k+1} }\\end{aligned}${%endraw%}\n\n{%raw%}$\\begin{aligned} A(x)=\\sum_{j=0}^{c-1}\\sum_{k=0}^{n-c} C(c-1,j)\\cdot C(n-c,k)\\cdot x^{n-j-k-1}\\frac{pq^j} {1-q^{j+k+1} }\\cdot (\\sum_{i=0}^{j+k} C(j+k,i) \\cdot (-x)^i)\\end{aligned}${%endraw%}\n\n虽然有三个循环，但是很显然可以先对于$j,k$进行一次卷积，然后再对于$j+k,-i$进行一次卷积得到\n\n\n\nCode:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef double db;\ntypedef unsigned long long ull;\ntypedef pair <int,int> Pii;\n#define mp make_pair\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=1<<21,P=998244353;\n\n\nint n,c,p,q;\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nint w[N],Fac[N+1],Inv[N+1],FInv[N+1],rev[N];\nvoid Init(){\n\tFac[0]=Fac[1]=Inv[0]=Inv[1]=FInv[0]=FInv[1]=1;\n\trep(i,2,N) {\n\t\tFac[i]=1ll*Fac[i-1]*i%P;\n\t\tInv[i]=1ll*(P-P/i)*Inv[P%i]%P;\n\t\tFInv[i]=1ll*FInv[i-1]*Inv[i]%P;\n\t}\n\tw[N>>1]=1; ll t=qpow(3,(P-1)/N);\n\trep(i,(N>>1)+1,N-1) w[i]=w[i-1]*t%P;\n\tdrep(i,(N>>1)-1,1) w[i]=w[i<<1];\n}\nint Init(int n){\n\tint R=1,c=-1;\n\twhile(R<n) R<<=1,c++;\n\trep(i,1,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<c);\n\treturn R;\n}\n\nvoid NTT(int n,int *a,int f) {\n\trep(i,1,n-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n\tfor(int i=1;i<n;i<<=1) {\n\t\tint *e=w+i;\n\t\tfor(int l=0;l<n;l+=i*2) {\n\t\t\tfor(int j=l;j<l+i;++j) {\n\t\t\t\tint t=1ll*a[j+i]*e[j-l]%P;\n\t\t\t\ta[j+i]=a[j]-t; Mod2(a[j+i]);\n\t\t\t\ta[j]+=t; Mod1(a[j]);\n\t\t\t}\n\t\t}\n\t}\n\tif(f==-1) {\n\t\treverse(a+1,a+n);\n\t\trep(i,0,n-1) a[i]=1ll*a[i]*Inv[n]%P;\n\t}\n}\n\nint A[N],B[N],C[N];\n\nint main(){\n\tInit();\n\trep(kase,1,rd()) {\n\t\tn=rd(),p=rd(),q=rd(),p=p*qpow(q)%P,q=P+1-p,c=rd();\n\t\tint R=Init(n),t=1;\n\t\trep(i,0,R-1) A[i]=B[i]=C[i]=0;\n\t\trep(i,0,c-1) {\n\t\t\tA[i]=1ll*Fac[c-1]*FInv[i]%P*FInv[c-1-i]%P*t%P;\n\t\t\tt=1ll*t*q%P; // t= q^i\n\t\t}\n\t\trep(i,0,n-c) B[i]=1ll*Fac[n-c]*FInv[i]%P*FInv[n-c-i]%P;\n\t\tNTT(R,A,1),NTT(R,B,1);\n\t\trep(i,0,R-1) A[i]=1ll*A[i]*B[i]%P;\n\t\tNTT(R,A,-1);\n\n\t\tR=Init(n*2);\n\t\trep(i,n,R-1) A[i]=0;\n\t\trep(i,0,R-1) B[i]=0;\n\t\tt=1;\n\t\trep(i,0,n-1) {\n\t\t\tt=1ll*t*q%P; // t=q^{i+1}\n\t\t\tA[i]=1ll*A[i]*Fac[i]%P*qpow(P+1-t)%P;\n\t\t}\n\t\trep(i,0,n) B[n-i]=(i&1)?P-FInv[i]:FInv[i];\n\t\tNTT(R,A,1),NTT(R,B,1);\n\t\trep(i,0,R-1) A[i]=1ll*A[i]*B[i]%P;\n\t\tNTT(R,A,-1);\n\t\trep(i,1,n) printf(\"%d\\n\",int(1ll*FInv[n-i]*A[2*n-i]%P*p%P));\n\t}\n}\n\n\n```\n\n实际跑两次卷积，写得丑几乎就是顶着时限过去的。。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["各大OJ"],"categories":["题解"]},{"title":"回文自动机 (PAM,Palindrome Automaton)","url":"/articles/2020/07/29/698ac8bb.html","content":"# 回文自动机 (PAM,Palindrome Automaton)\n\n如果学习了$\\text{AC}$自动机和后缀自动机($\\text{SAM}$)，那么这个冷门算法其实非常简单\n\n约定：原字符串为$S$，长度为$|S|$\n\n### 结构介绍\n\n自动机节点意义： $\\text{PAM}$没有复杂的结构，每个节点对应了一种回文子串，节点个数$\\leq |S|+2$\n\n自动机的转移：$\\text{PAM}$和$\\text{AC}$自动机一样，有失配指针$fail$和匹配数组$nxt$\n\n$fail_i$即是$i$的后缀的最长状态，$i$和$fail_i$的边构成了一棵树，但是这棵树有着两个根节点(?)，分别对应着长度为奇数/偶数的回文子串\n\n每个转移$nxt_{i,j}$意味着在当前状态$i$的串两边增加字符$j$\n\n但是由于$\\text{PAM}$的构造是一个在线算法，所以如果想要像$\\text{AC}$自动机一样每次转移直接访问$nxt$，需要结束后遍历结构\n\n### 构造\n\n为了便于访问，设偶数/奇数根分别为$0,1$，每个节点存储一个当前状态的长度$len$\n\n特别的，$len_0=0,len_1=-1$(便于让所有的串都满足$len_{nxt_{i,j} }=len_i+2$)\n\n同时让空串对应奇数根节点，把偶数根连向奇数，即$fail_0=1$，这样就只有一个根节点了\n\n为了在线构造方便，$\\text{PAM}$需要实现一个匹配函数$\\text{Find}(x,y)$，即在当前$x$状态找到下一个位置$S_y$的匹配状态，如果失配则返回奇数根$1$\n\n```cpp\nint Find(int x,int y){\n    while(s[y]!=s[y-len[x]-1]) x=fail[x]; // 如果失配到了x=1,那么必然有s[y]=s[y]\n    return x;\n}\n```\n\n增加一个节点$S_i=c$\n\n首先找到一个最长的匹配，设当前前缀最长的回文后缀对应的状态为$now$，则直接为$now$匹配$S_i$即可\n\n然后是新建状态(如果当前的回文子串还未出现过)\n\n和$\\text{AC}$自动机类似，访问$fail$树上最近的匹配即可得到这个点的$fail$\n\n**需要注意的点是，因为当前节点可以是根节点，寻找$fail$必须在新建转移$nxt_{now,c}$之前进行，否则可能找到的$fail$是自己**\n\n```cpp\nvoid Extend(int i,int c){\n    now=Find(now,i);\n    if(!nxt[now][c]) {\n        fail[++cnt]=nxt[Find(fail[now],i)][c];\n\t\tlen[nxt[now][c]=cnt]=len[now]+2;\n    }\n    now=nxt[now][c];\n}\n```\n\n模板代码如下：\n\n```cpp\nchar s[N];\nstruct Palindrome_Automaton{\n\tint len[N],fail[N],nxt[N][26],now,cnt;\n\tvoid Init(){ \n        rep(i,0,cnt) memset(nxt,fail[i]=0,104);\n\t\ts[now=0]=len[1]=-1;\n\t\tfail[0]=fail[1]=cnt=1;\n\t}\n\tint Find(int x,int y){ \n\t\twhile(s[y-len[x]-1]!=s[y]) x=fail[x];\n\t\treturn x;\n\t}\n\tvoid Extend(int i,int c){\n\t\tnow=Find(now,i);\n   \t\tif(!nxt[now][c]) {\n\t\t\tfail[++cnt]=nxt[Find(fail[now],i)][c];\n\t\t\tlen[nxt[now][c]=cnt]=len[now]+2;\n    \t}\n    \tnow=nxt[now][c];\n\t}\n};\n\n\n```\n\n\n\n### 拓展：回文串与$\\text{Border}$\n\n[关于$\\text{Border}$](https://www.cnblogs.com/chasedeath/p/13396877.html)\n\n推论1:回文串的$\\text{Border}$也是回文串\n\n若有回文串$S$的一个$\\text{Border} :T$，则$S_{1,|T|}=S_{|S|-|T|+1,|S|}=reverse(S_{1,|T|})$\n\n故$T$也是一个回文串\n\n推论2:遍历回文自动机的$fail$链，能得到当前串的所有$\\text{Border}$(基于推论1得到)\n\n结合$\\text{kmp,AC}$与$\\text{Border}$的关系能够有更好的理解\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder"],"categories":["题解"]},{"title":"二次剩余","url":"/articles/2020/07/26/98066e3c.html","content":"# 二次剩余\n\n只考虑奇质数$P$的情况\n\n设求$x^2\\equiv a\\pmod P$的一个$x$\n\n## 判断\n\n由费马小定理$x^{P-1}\\equiv 1 \\pmod P$，即$a^\\frac{P-1} {2}\\equiv 1 \\pmod P$\n\n(实际并没有证明充分性。。)\n\n不存在二次剩余即$a^\\frac{P-1} {2}\\equiv -1\\pmod P$\n\n-------\n\n(对于所有$a=0,1$的情况需要特判)\n\n## 原根法求二次剩余\n\n先求出$P$的一个原根$g$\n\n那么可以用$g^k$表示出$[1,P-1]$的所有数\n\n用$BSGS$可以在$O(\\sqrt n\\log n)$的时间内求出$a=g^k$\n\n如果存在原根，那么$k\\mod 2=0$\n\n答案就是$g^{\\frac{k} {2} }\\mod P$\n\n```cpp\nint Quad(int a,int k=0) {\n\tif(a<=1) return a;    \n    int g=Getg(P);\n\tstatic map <int,int> M;\n\tint S=sqrt(P-1);\n\tfor(int i=0,t=1;i<S;++i,t=1ll*t*g%P) M[t]=i;\n\tint res=0;\n\tint w=qpow(g,S);\n\tfor(int i=0,t=1;i<P-1;i+=S,t=1ll*t*w%P) {\n\t\tll x=1ll*a*qpow(t,P-2)%P;\n\t\tif(M.count(x)) {\n\t\t\tres=M[x]+i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tres=qpow(g,res/2);\n\tif(k) res=min(res,(P-res)%P);\n\treturn res;\n}\n```\n\n\n\n------\n\n## 更快的方法:Cipolla算法\n\n要先找到一个数$y$，满足不存在$\\sqrt{y^2-a}\\pmod P$\n\n可以随机$y$，期望可以两次找到这样的$y$\n\n构造虚数$\\omega = \\sqrt{y^2-a}$，那么答案就是$x=\\sqrt{y^2-\\omega^2}=\\sqrt{(y+\\omega)(y-\\omega)}$\n\n然后构造复数$(\\alpha,\\beta)=\\alpha+\\beta\\omega$\n\n求出$x=(y,1)^{\\frac{(P+1)} {2} }$，模拟复数乘法即可\n\n可以证明结果没有虚部，就是答案\n\n\n\n```cpp\nint Quad(int a,int k=0) {\n\tif(a<=1) return a;\n\tint x;\n\twhile(1) {\n\t\tx=1ll*rand()*rand()%P;\n\t\tll res=qpow((1ll*x*x-a+P)%P,(P-1)/2);\n\t\tif(res!=1) break;\n\t}\n\tll w=(1ll*x*x-a+P)%P;\n\tint d=(P+1)/2;\n\tll resx=1,resy=0;\n\tll xx=x,yy=1;\n\twhile(d) {\n\t\tif(d&1) {\n\t\t\tll tx=(resx*xx+resy*yy%P*w)%P,ty=(resx*yy+resy*xx)%P;\n\t\t\tresx=tx,resy=ty;\n            // 模拟复数乘法\n\t\t}\n\t\tll tx=(xx*xx+yy*yy%P*w)%P,ty=2*xx*yy%P;\n\t\txx=tx,yy=ty;\n        // 模拟复数乘法\n\t\td>>=1;\n\t}\n\tx=resx; // 答案就是实部\n\tif(k) x=min(x,(P-x)%P);\n\treturn x;\n}\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「APIO2019」路灯 (K-D Tree / 树套树 / CDQ + 树状数组)","url":"/articles/2020/07/26/f28e907d.html","content":"#「APIO2019」路灯 (K-D Tree / 树套树 / CDQ + 树状数组)\n\n首先想到一个简单的问题转化\n\n对于一个询问，联通的时间是若干连续的区间$[L_i,R_i]$\n\n所有的$L_i,R_i+1$都是**关键点**，即由不连通变为联通的时间 和 由联通变为不连通的时间\n\n把答案转化为$\\sum R_i+1-L_i$即可\n\n问题转化为对于当前的操作，找到它是那些询问的关键点\n\n如果是合并操作，被合并的两个区间之间变得联通\n\n如果是分裂操作，裂开的两个区间之间不再联通\n\n可以用set维护上述区间，发现每次被更新的值都是一个二维区间\n\n算上时间这一维，问题转化为一个类 **三维偏序问题**，但是题限制了内存\n\n## Part1 K-D Tree\n\n限制了内存，很容易想到直接K-D Tree，实际运行也比较优秀\n\n注意可以把要询问的点拿出来建出K-D Tree，每次区间修改即可\n\n时间复杂度$O(n\\sqrt n)$，空间复杂度$O(n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define pb push_back\ntypedef pair <int,int> Pii;\n#define mp make_pair\nvoid cmin(int &a,int b){ ((a>b)&&(a=b)); }\nvoid cmax(int &a,int b){ ((a<b)&&(a=b)); }\n\nchar IO;\nint rd(){\n\tint s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\nconst int N=3e5+10,INF=1e9;\n\nint n,m,rt,col[N],opt[N],a[N],b[N];\nchar str[N];\nset <pair <int,int> > st,tmp;\nstruct Node{ int x,y; } A[N];\nint cmp1(Node a,Node b){ return mp(a.x,a.y)<mp(b.x,b.y); }\nint cmp2(Node a,Node b){ return mp(a.y,a.x)<mp(b.y,b.x); }\nint ch[N][2],lx[N],rx[N],ly[N],ry[N],s[N],t[N];\nint Build(int l,int r,int d=0) { \n\tif(l>r) return 0;\n\tint u=(l+r)>>1;\n    nth_element(A+l,A+u,A+r+1,d?cmp2:cmp1);\n\tch[u][0]=Build(l,u-1,d^1),ch[u][1]=Build(u+1,r,d^1);\n\tlx[u]=rx[u]=A[u].x,ly[u]=ry[u]=A[u].y;\n\tfor(int i:ch[u]) if(i) cmin(lx[u],lx[i]),cmin(ly[u],ly[i]),cmax(rx[u],rx[i]),cmax(ry[u],ry[i]);\n\treturn u;\n}\n\nvoid Upd(int x1,int x2,int y1,int y2,int u,int x) {\n\tif(!u || x1>rx[u] || x2<lx[u] || y1>ry[u] || y2<ly[u]) return;\n\tif(x1<=lx[u] && rx[u]<=x2 && y1<=ly[u] && ry[u]<=y2) return void(s[u]+=x);\n\tif(x1<=A[u].x && A[u].x<=x2 && y1<=A[u].y && A[u].y<=y2) t[u]+=x;\n\tfor(int i:ch[u]) Upd(x1,x2,y1,y2,i,x);\n}\nint Que(Node x,int u,int d=0) {\n\tif(A[u].x==x.x && A[u].y==x.y) return s[u]+t[u];\n\tint y=ch[u][!(d?cmp2(x,A[u]):cmp1(x,A[u]))];\n\treturn Que(x,y,d^1)+s[u];\n}\n\nint main(){\n\tn=rd(),m=rd();\n\tscanf(\"%s\",str+1);\n\trep(i,1,n) col[i]=str[i]-'0';\n\trep(i,1,n+1) {\n\t\tint r=i;\n\t\twhile(col[r]) r++;\n\t\tst.insert(mp(i,r));\n\t\ti=r;\n\t}\n\trep(i,1,m) {\n\t\tscanf(\"%s\",str+1);\n\t\tif(str[1]=='t') opt[i]=1,a[i]=rd();\n\t\telse opt[i]=2,a[i]=rd(),b[i]=rd(),tmp.insert(mp(a[i],b[i]));\n\t}\n\tn=0;\n\tfor(auto it:tmp) A[++n]=(Node){it.first,it.second};\n\trt=Build(1,n);\n\trep(i,1,m) {\n\t\tif(opt[i]==1) {\n\t\t\tint x=a[i];\n\t\t\tif(col[x]) {\n\t\t\t\tauto it=st.upper_bound(mp(x,INF)); it--;\n\t\t\t\tint l=it->first,r=it->second;\n\t\t\t\tst.erase(it);\n\t\t\t\tst.insert(mp(l,x)),st.insert(mp(x+1,r));\n\t\t\t\tUpd(l,x,x+1,r,rt,i);\n\t\t\t} else {\n\t\t\t\tauto it=st.upper_bound(mp(x,INF)),tmp=it; it--;\n\t\t\t\tint l=it->first,r=tmp->second; \n\t\t\t\tst.erase(it),st.erase(tmp);\n\t\t\t\tst.insert(mp(l,r)),Upd(l,x,x+1,r,rt,-i);\n\t\t\t}\n\t\t\tcol[x]^=1;\n\t\t} else {\n\t\t\tint ans=Que((Node){a[i],b[i]},rt);\n\t\t\tauto it=st.upper_bound(mp(a[i],INF)); it--;\n\t\t\tif(it->second>=b[i]) ans+=i;\n\t\t\tprintf(\"%d\\n\",ans);\n\t\t}\n\t}\n}\n```\n\n\n\n## Part2 树套树(没有代码)\n\n由于已知查询的节点，树套树的内存可以优化到$O(n\\log n)$\n\n把要询问的点拉出来，每次询问在第二维中有$\\log n$次单点查询，所以需要被查询的位置一共只有$n\\log n$个\n\n把这些会被查询的位置拿出来建成$n$棵静态的线段树，更新就直接在这些静态的线段树上区间更新即可\n\n时间复杂度$O(n\\log ^2 n)$，空间复杂度$O(n\\log n)$\n\n\n\n## Part3 CDQ+树状数组\n\n是常规写法，不会被限制内存\n\nCDQ一维，排序一维，树状数组一维，参见[三维偏序](https://www.luogu.com.cn/problem/P3810)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["APIO"],"categories":["题解"]},{"title":"「APIO2019」桥梁(询问分块+并查集)","url":"/articles/2020/07/26/38d18df.html","content":"# 「APIO2019」桥梁(询问分块+并查集)\n\n询问每$S$个分块后，每次对于所有块内未被更改的边 及 所有询问 排序，然后依次加入并查集，这一部分复杂度为$O(m \\frac{q} {S}(\\log m+\\alpha(n)))$\n\n对于$S$条被改变的边，对于每个询问分别考虑这些边的贡献，复杂度为$O(qS)$，由于涉及到并查集回撤的问题，可以使用按秩合并，复杂度为$O(qS\\log S)$\n\n按照上面两步暴力实现，复杂度大概可以做到$O((m+q)\\sqrt{q}\\log n)$\n\n实际可行的优化有：\n\n用平衡树实现排序，每次暴力遍历，第一部分复杂度降为$O(q\\log m+m\\frac{q} {S} \\alpha(n))$\n\n由于最多访问到$O(S)$个联通块，第二部分用$dfs$遍历来实现，复杂度降为$O(q S \\alpha(n))$(遍历过程中要访问联通块编号)\n\n复杂度可以降到约$O((m+q)\\sqrt {q} \\cdot \\alpha(n))$\n\n以下是暴力实现的代码\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n#define pb push_back\nchar IO;\nint rd(){\n\tint s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\n\nconst int N=1e5+10;\nint n,m,S,q,qc;\nstruct Edge{\n\tint u,v,w;\n\tbool operator < (Edge __) const { return w<__.w; }\n} A[N],B[N],Q[N];\nstruct Node{ int t,w; };\nvector <Node> G[N];\nint uid[N],uc,fa[N],sz[N],ux[N],uy[N],rc,ans[N];\nint Find(int x){ while(fa[x]!=x) x=fa[fa[x]]; return x; }\nvoid Union(int x,int y){\n\tx=Find(x),y=Find(y);\n\tif(x==y) return;\n\tif(sz[x]>sz[y]) swap(x,y);\n\tux[++rc]=x,uy[rc]=y;\n\tfa[x]=y,sz[y]+=sz[x]; // 按秩合并用于回撤\n}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,1,m) A[i].u=rd(),A[i].v=rd(),A[i].w=rd();\n\tS=sqrt(3*(n+m));\n\trep(i,1,q=rd()) {\n\t\tans[i]=-1;\n\t\tint opt=rd(),x=rd(),y=rd();\n\t\tif(opt==1) G[x].pb((Node){i,y});\n\t\telse Q[++qc]=(Edge){i,x,y};\n\t\tif(qc%S==0 || i==q) {\n\t\t\tif(!qc) continue;\n\t\t\tint c=0;\n\t\t\trep(i,1,m) if(!G[i].size()) B[++c]=A[i];\n\t\t\telse uid[++uc]=i;\n\t\t\tsort(B+1,B+c+1),sort(Q+1,Q+qc+1);\n\t\t\trep(i,1,n) fa[i]=i,sz[i]=1;\n\t\t\tint p=c;\n\t\t\tdrep(i,qc,1) {\n\t\t\t\twhile(p && B[p].w>=Q[i].w) Union(B[p].u,B[p].v),p--;\n\t\t\t\trc=0;\n\t\t\t\trep(j,1,uc) {\n\t\t\t\t\tint x=uid[j],w=A[x].w;\n\t\t\t\t\tfor(auto k:G[x]) if(k.t<=Q[i].u) w=k.w;\n\t\t\t\t\telse break; // 找到询问时这条边的权值\n\t\t\t\t\tif(w>=Q[i].w) Union(A[x].u,A[x].v);\n\t\t\t\t}\n\t\t\t\tans[Q[i].u]=sz[Find(Q[i].v)];\n\t\t\t\tdrep(j,rc,1) fa[ux[j]]=ux[j],fa[uy[j]]=uy[j],sz[uy[j]]-=sz[ux[j]];// 回撤\n\t\t\t\trc=0;\n\t\t\t}\n\t\t\trep(i,1,uc) A[uid[i]].w=G[uid[i]].rbegin()->w,G[uid[i]].clear();\n\t\t\tuc=qc=0;\n\t\t}\n\t}\n\trep(i,1,q) if(~ans[i]) printf(\"%d\\n\",ans[i]);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["APIO"],"categories":["题解"]},{"title":"「APIO2019」奇怪装置 ","url":"/articles/2020/07/26/b8f86f0a.html","content":"# 「APIO2019」奇怪装置 \n\n找到循环就很简单了\n\n很显然$y$是每$B$次一循环的，对于每个相邻的$y$循环$x$的值均相差$B+1 \\pmod A$\n\n因此总的循环就是$B+1$对于$A$的循环乘上$B$\n\n即$\\frac{A} {gcd(A,B+1)}\\cdot B$\n\n知道循环节之后，把查询分成$O(n)$个区间，排序之后直接解决即可\n\n如果使用基数排序即可做到$O(n)$\n\n以下是快排版本\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll=long long;\n#define mp make_pair\nchar IO;\nll rd(){\n\tll s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\nint n,c,i;\nll A,B,ans,r=-1,L,R;\npair <ll,ll> S[2000010];\nint main(){\n\tfor(n=rd(),A=rd(),B=rd(),A=min(1.0*B*(A/__gcd(A,B+1)),1e18),i=1;i<=n;++i) {\n\t\tL=rd(),R=rd();\n\t\tif(R-L+1>=A) return printf(\"%lld\\n\",A),0;\n\t\tL%=A,R%=A;\n\t\tL<=R?S[++c]=mp(L,R):(S[++c]=mp(L,A-1),S[++c]=mp(0,R));\n\t}\n\tfor(sort(S+1,S+c+1),i=1;i<=c;++i) if(r<=S[i].second) ans+=S[i].second-max(r,S[i].first-1),r=S[i].second;\n\tprintf(\"%lld\\n\",ans);\n}\n\n```\n\n\n\n\n\n\n\n","tags":["APIO"],"categories":["题解"]},{"title":"「APIO2018」选圆圈(K-D Tree/CDQ+Set)","url":"/articles/2020/07/26/51d45953.html","content":"# 「APIO2018」选圆圈(K-D Tree/CDQ+Set)\n\n## Part1 K-D Tree做法\n\nK-D Tree经常用来优化大暴力。。\n\n把圆$(x,y,r)$视为矩形$(x-r,y-r,x+r,y+r)$，依据$(x,y)$构建K-D Tree\n\n维护K-D Tree每个节点所有矩形最小和最大的$x,y$，通过判断当前圆与其是否有交来剪枝\n\n删去的节点$x,y$不算进矩形范围即可\n\n很显然这是一个最坏$O(n^2)$的算法，直接$x,y$轮换建树这样写APIO的数据已经卡过了。。\n\n比较好的办法是按照$x,y$的方差大的一维建树，当然旋转角度也是可以的\n\n实际运行速度堪比$O(n\\log n)$\n\nCode1:旋转+$x,y$轮换建树\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef long double db;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); } \ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\nchar IO;\nint rd(){\n\tint s=0,f=0;\n\twhile(!isdigit(IO=getchar())) f=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=3e5+10,INF=1e9+10;\nconst db eps=1e-7;\nconst db co=cos(1123),si=sin(1123);\n\nint n,typ;\nstruct Node{\n\tdb x,y; int r,id;\n}A[N],B[N];\ndb Dis(db x,db y,Node z){ return (x-z.x)*(x-z.x)+(y-z.y)*(y-z.y); }\ndb Dis(Node x,Node y){ return Dis(x.x,x.y,y); }\ndb In(db x,db y,Node z){ return Dis(x,y,z)-eps<=(db)z.r*z.r; }\nint cmp(Node x,Node y){ return typ?x.x<y.x:x.y<y.y; }\nint c[N],ch[N][2],rt;\ndb lx[N],rx[N],ly[N],ry[N];\nvoid Up(int u) {\n\tif(c[B[u].id]) lx[u]=ly[u]=1e18,rx[u]=ry[u]=-1e18;\n\telse lx[u]=B[u].x-B[u].r,rx[u]=B[u].x+B[u].r,ly[u]=B[u].y-B[u].r,ry[u]=B[u].y+B[u].r;\n\tfor(int v:ch[u]) if(v) cmin(lx[u],lx[v]),cmax(rx[u],rx[v]),cmin(ly[u],ly[v]),cmax(ry[u],ry[v]);\n}\nint Build(int l,int r) {\n\tif(l>r) return 0;\n\tint u=(l+r)>>1;\n\tnth_element(B+l,B+u,B+r+1,cmp);\n\ttyp^=1; ch[u][0]=Build(l,u-1),ch[u][1]=Build(u+1,r); typ^=1;\n\treturn Up(u),u;\n}\nint Cross(int x,Node y){\n\tif(lx[x]>rx[x]) return 0;\n\tif(In(lx[x],ly[x],y) || In(lx[x],ry[x],y) || In(rx[x],ly[x],y) || In(rx[x],ry[x],y)) return 1;\n\tif(lx[x]-eps<=y.x && y.x<=rx[x]+eps && ly[x]-eps<=y.y && y.y<=ry[x]+eps) return 1;\n\tif(lx[x]-eps<=y.x && y.x<=rx[x]+eps) if(In(y.x,ly[x],y) || In(y.x,ry[x],y)) return 1;\n\tif(ly[x]-eps<=y.y && y.y<=ry[x]+eps) if(In(lx[x],y.y,y) || In(rx[x],y.y,y)) return 1;\n\treturn 0;\n}\nvoid Del(int u,Node x){\n\tif(!u || !Cross(u,x)) return;\n\tif(!c[B[u].id] && Dis(x,B[u])-eps<=(db)(x.r+B[u].r)*(x.r+B[u].r)) c[B[u].id]=x.id;\n\tDel(ch[u][0],x),Del(ch[u][1],x);\n\tUp(u);\n}\n\nint main(){\n\tn=rd();\n\trep(i,1,n) {\n\t\tdb x=rd(),y=rd();\n\t\tA[i]=B[i]=(Node){x*co-y*si,x*si+y*co,rd(),i};\n\t}\n\tsort(A+1,A+n+1,[&](Node x,Node y){ return x.r!=y.r?x.r>y.r:x.id<y.id;}),rt=Build(1,n);\n\trep(i,1,n) if(!c[A[i].id]) Del(rt,A[i]);\n\trep(i,1,n) printf(\"%d \",c[i]);\n}\n```\n\n$$ \\ $$\n\nCode2:方差建树\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nusing ll=long long;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); } \ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\nchar buf[200000],*p1,*p2;\n#define getchar() (((p1==p2)&&(p2=(p1=buf)+fread(buf,1,200000,stdin))),*p1++)\nchar IO;\nint rd(){\n\tint s=0,f=0;\n\twhile(!isdigit(IO=getchar())) f=IO=='-';\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\nvoid wt(int x){\n\tstatic int buf[10],l=0;\n\twhile(x) buf[++l]=x%10+'0',x/=10;\n\tdrep(i,l,1) putchar(buf[i]);\n\tl=0;\n}\n\nconst int N=3e5+10,INF=1e9+10;\n\nint n,typ;\nstruct Node{\n\tll x,y,r;\n\tint id;\n}A[N],B[N];\nll Dis(ll x,ll y,Node z){ return (x-z.x)*(x-z.x)+(y-z.y)*(y-z.y); }\nll Dis(Node x,Node y){ return Dis(x.x,x.y,y); }\nint In(ll x,ll y,Node z){ return Dis(x,y,z)<=z.r*z.r; }\nint cmp(Node x,Node y){ return typ?x.x<y.x:x.y<y.y; }\nint c[N],ch[N][2],rt;\nint lx[N],rx[N],ly[N],ry[N];\nvoid Up(int u) {\n\tif(c[B[u].id]) lx[u]=ly[u]=INF,rx[u]=ry[u]=-INF;\n\telse lx[u]=B[u].x-B[u].r,rx[u]=B[u].x+B[u].r,ly[u]=B[u].y-B[u].r,ry[u]=B[u].y+B[u].r;\n\tfor(int v:ch[u]) if(v) cmin(lx[u],lx[v]),cmax(rx[u],rx[v]),cmin(ly[u],ly[v]),cmax(ry[u],ry[v]);\n}\n\nint Get(int l,int r){\n\tlong double _x=0,_y=0,x=0,y=0;\n\trep(i,l,r) _x+=B[i].x,_y+=B[i].y;\n\t_x/=r-l+1,_y/=r-l+1;\n\trep(i,l,r) x+=(B[i].x-_x)*(B[i].x-_x),y+=(B[i].y-_y)*(B[i].y-_y);\n\treturn x>y;\n}\n\nint Build(int l,int r) {\n\tif(l>r) return 0;\n\tint u=(l+r)>>1;\n\ttyp=Get(l,r),nth_element(B+l,B+u,B+r+1,cmp);\n\tch[u][0]=Build(l,u-1),ch[u][1]=Build(u+1,r);\n\treturn Up(u),u;\n}\nint Cross(int x,Node y){\n\tif(lx[x]>rx[x]) return 0;\n\tif(In(lx[x],ly[x],y) || In(lx[x],ry[x],y) || In(rx[x],ly[x],y) || In(rx[x],ry[x],y)) return 1;\n\tif(lx[x]<=y.x && y.x<=rx[x] && ly[x]<=y.y && y.y<=ry[x]) return 1;\n\tif(lx[x]<=y.x && y.x<=rx[x]) if(In(y.x,ly[x],y) || In(y.x,ry[x],y)) return 1;\n\tif(ly[x]<=y.y && y.y<=ry[x]) if(In(lx[x],y.y,y) || In(rx[x],y.y,y)) return 1;\n\treturn 0;\n}\nvoid Del(int u,Node x){\n\tif(!u || !Cross(u,x)) return;\n\tif(!c[B[u].id] && Dis(x,B[u])<=(x.r+B[u].r)*(x.r+B[u].r)) c[B[u].id]=x.id;\n\tDel(ch[u][0],x),Del(ch[u][1],x);\n\tUp(u);\n}\n\nint main(){\n\tn=rd();\n\trep(i,1,n) {\n\t\tint x=rd(),y=rd();\n\t\tA[i]=B[i]=(Node){x,y,rd(),i};\n\t}\n\tsort(A+1,A+n+1,[&](Node x,Node y){ return x.r!=y.r?x.r>y.r:x.id<y.id;}),rt=Build(1,n);\n\trep(i,1,n) if(!c[A[i].id]) Del(rt,A[i]);\n\trep(i,1,n) printf(\"%d \",c[i]);\n}\n```\n\n\n\n$$ \\ $$\n\n## Part2 CDQ+Set\n\n这是一个稳定$O(n\\log ^2n)$的算法\n\n按照$r$递减，$id$递增的顺序对于圆排序后，$CDQ$考虑$[l,mid]$对$[mid+1,r]$的贡献\n\n先处理$[l,mid]$的部分，就能知道哪些圆可以对$[mid+1,r]$产生贡献\n\n处理贡献时，依然把圆视为矩形，按照$x$插入、删除和查询矩形的左右边界$(x-r,y),(x+r,y)$\n\n插入、删除和查询均是在$set$中维护$y$的前驱后继\n\n同时还需要交换$x,y$重新进行一遍\n\n正确性：\n\n与每个圆交的圆一定在$x$或$y$上与它相邻\n\n如果这个圆在x,y上都不与它相邻还与它相交，则必然会跨过一个相邻的圆，这个圆不会被加入set\n\n故不存在这种情况\n\n\n\n实际运行常数很大，被K-D Tree吊起来打\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,b) for(i=a;i<=b;++i)\nusing P=pair<int,int>;\n#define M make_pair\n#define X first\n#define Y second\n#define S(x) 1ll*(x)*(x)\nconst int N=1e6+10;\nint n,c[N],i,j,D[N];\nstruct C{ int x,y,r,i; } A[N]; \nvoid Upd(int i,int j) { if(S(A[i].x-A[j].x)+S(A[i].y-A[j].y)<=S(A[i].r+A[j].r)&&D[c[A[j].i]]>i) c[A[j].i]=A[i].i; }\nset<P>st;\nP I[N],E[N],Q[N];\nvoid Work(int l,int r){\n\tint mid=(l+r)>>1,n=0,m=0,x=0,y=0,t;\n\trep(i,l,mid) if(c[A[i].i]==A[i].i) I[m]=M(A[i].x-A[i].r,i),E[m++]=M(A[i].x+A[i].r+1,i);\n\trep(i,mid+1,r) Q[n++]=M(A[i].x-A[i].r,i),Q[n++]=M(A[i].x+A[i].r,i);\n\tsort(I,I+m),sort(E,E+m),sort(Q,Q+n),st.clear();\n\trep(i,0,n-1) {\n\t\twhile(x<m&&I[x].X<=Q[i].X) st.insert(M(A[t=I[x++].Y].y,t));\n\t\twhile(y<m&&E[y].X<=Q[i].X) st.erase(M(A[t=E[y++].Y].y,t));\n\t\tauto j=st.lower_bound(M(A[t=Q[i].Y].y,t));\n\t\tif(j!=st.end()) Upd(j->Y,t);\n\t\tif(j!=st.begin()) Upd((--j)->Y,t);\n\t}\n}\nvoid Solve(int l,int r) {\n\tif(r-l+1<=80) {\n\t\trep(i,l,r)if(c[A[i].i]==A[i].i)rep(j,i+1,r) Upd(i,j);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tSolve(l,mid);\n\tWork(l,r);rep(i,l,r) swap(A[i].x,A[i].y);\n\tWork(l,r);rep(i,l,r) swap(A[i].x,A[i].y);\n\tSolve(mid+1,r);\n}\nint main(){\n\tscanf(\"%d\",&n);\n\trep(i,1,n) scanf(\"%d%d%d\",&A[i].x,&A[i].y,&A[i].r),A[i].i=i;\n\tsort(A+1,A+n+1,[&](C x,C y){return M(-x.r,x.i)<M(-y.r,y.i);});\n\trep(i,1,n) D[A[i].i]=c[i]=i;\n\tSolve(1,n);\n\trep(i,1,n) printf(\"%d \",c[i]);\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["APIO"],"categories":["题解"]},{"title":"堆","url":"/articles/2020/07/26/fab451a5.html","content":"# 堆\n\n每个节点权值大于(小根堆)父亲的树形数据结构\n\n以下均讨论小根堆的问题\n\n## 普通二叉堆\n\n用数组$a[1:n]$构成一棵二叉树来维护堆操作，可以做到\n\n1.插入元素\n\n2.查询堆顶\n\n3.删除堆顶或者删除特定元素(需要记录权值位置)\n\n1.插入元素\n\n先放到$a[n+1]$的位置，然后每次与父亲比较是否交换\n\n```cpp\nvoid push(int x){\n    a[++n]=x;\n    for(int p=n;p>1 && a[p]<a[p>>1];) swap(a[p],a[p>>1]),p>>=1;\n}\n```\n\n\n\n2.删除特定元素\n\n删除后，把$a[n]$元素放到空的位置，然后向下走，注意每次一定是把左右儿子中比较小的换上来\n\n```cpp\nvoid Delete(int x){\n    swap(a[x],a[n--]);\n    for(int p=x;(p<<1)<=n;){\n\t\tint nxt=p<<1;\n        if((p<<1|1)<=n && a[p<<1|1]<a[p<<1]) nxt=p<<1|1;\n        if(a[nxt]<a[p]) swap(a[p],a[nxt]);\n        else break;\n    }\n}\n```\n\n\n\n$$  \\ $$\n\n## 配对堆\n\n配对堆不是一个二叉树结构，所以在存储上，使用左儿子右兄弟来存储树形结构\n\n可以实现的操作有\n\n1.插入/删除元素，查询堆顶\n\n2.查询堆顶\n\n3.**合并两个堆**\n\n\n\n首先要维护最基本的两个操作\n\n1.合并两个堆\n\n直接按照堆顶权值大小合并，接上去即可\n\n```cpp\nint a[N],ch[N],br[N]; //权值，儿子，兄弟\nint Union(int x,int y){\n    if(!x||!y) return x|y;\n    if(a[x]>a[y]) swap(x,y);\n    br[y]=ch[x],ch[x]=y;\n    return x;\n}\n```\n\n2.配对操作\n\n把一个点的所有儿子两两合并之后再依次合并到一起\n\n配对堆的所有操作都基于合并和配对实现\n\n合并操作是$O(1)$的\n\n配对操作单次最坏是$O(n)$，但是和$Splay$类似的，配对可以让儿子中兄弟最多的个数减半，是一个均摊$O(\\log n)$的操作，因此不可持久化，但是实际运行常数比较小\n\n\n\n操作实现：用一个函数给$x$和$x$的右边的所有兄弟配对，递归实现\n\n每次让$x$和右边第一个兄弟配对(即先合并)，再和右边剩下的节点合并\n\n```cpp\nint Pair(int x){\n    if(!x || !br[x]) return x;\n    int y=br[x],z=br[y];\n    return Union(Union(x,y),Pair(z));\n}\n```\n\n3.删除元素\n\n如果删除的不是堆顶元素，还需要额外存储每个点的父亲\n\n把被删除元素的儿子合并之后接到父亲上面\n\n4.查询堆顶\n\n如果是查询某个特定元素所在堆的堆顶，需要用并查集来维护\n\n\n\n$$ \\ $$\n\n\n\n## 左偏树\n\n左偏树是一个二叉堆结构，顾名思义，向左边偏的树\n\n左偏树判断左偏的方法是定义了一个$dis$数组，满足$\\forall dis_{lson}\\ge dis_{rson},dis_x=dis_{rson}+1$\n\n因此一直走右儿子的链长度就是$O(\\log n)$的\n\n利用这个性质完成操作，每次合并之后检查$dis_{lson},dis_{rson}$是否满足条件\n\n可以完成的操作有\n\n1.插入节点/合并堆\n\n2.删除节点\n\n3.访问堆顶\n\n4.**可持久化**\n\n1.检查操作\n\n```cpp\nvoid Check(int x){\n    if(dis[ls[x]]<dis[rs[x]]) swap(ls[x],rs[x]);\n    dis[x]=dis[rs[x]]+1;\n}\n```\n\n\n\n左偏树的合并操作就是\n\n让较大的堆顶 和 小的堆顶的右儿子合并成为 新的右儿子\n\n很显然合并次数$\\leq $两个堆的右儿子长度之和，这个操作是单次$O(\\log n)$\n\n```cpp\nint Union(int x,int y){\n\tif(!x||!y) return x|y;\n    if(a[x]>a[y]) swap(x,y);\n    return rs[x]=Union(rs[x],y),;\n}\n```\n\n2.删除节点\n\n合并左右儿子后接到父亲上\n\n3.访问堆顶\n\n左偏树的深度没有保证，访问特定节点所在堆的堆顶需要用并查集维护\n\n4.可持久化\n\n由于单次访问复杂度保证了是$O(\\log n)$，因此可以对于每次合并得到的开一个新的节点存下来\n\n即完成了可持久化操作\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「雅礼集训 2018 Day4」Magic(分治NTT)","url":"/articles/2020/06/18/d04c1a49.html","content":"# 「雅礼集训 2018 Day4」Magic(分治NTT)\n\n题目的条件简直无法计算恰好为$k$的方案数，所以考虑计算$\\ge k$的方案数\n\n所以可以强制有$k$个相邻位置相同，但是不确定相同的是那些颜色\n\n对每个颜色$a_i$考虑，设把$a_i$这个颜色分成了$b_i$个联通块(即强制了$a_i-b_i$个相邻位置相同)\n\n那方案数就是$C(a_i-1,b_i-1)$(是一个简单的插板问题)\n\n得到每种颜色的联通块个数$b_i$，那么这些联通块之间排列的方案数就是$\\frac{(\\sum b_i)!} {b_i!}$\n\n容易得到$a_i\\rightarrow b_i$的方案数，直接合并$b_i$的方案数，是一个背包问题，所以考虑用分治$NTT$快速合并\n\n那么得到了$\\sum b_i=n-k$的所有方案，复杂度$O(n\\log n\\log m)$\n\n最后的容斥比较明显的是一个二项式反演的形式，可以$O(n)$计算\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n\nchar IO;\nint rd(){\n\tint s=0;\n\twhile(!isdigit(IO=getchar()));\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn s;\n}\n\nconst int N=1<<17,P=998244353;\n\nint n,m,k;\nint Inv[N+1],Fac[N+1],FInv[N+1];\nll C(int n,int m){ return n<0||m<0||n<m? 0 : 1ll*Fac[n]*FInv[m]%P*FInv[n-m]%P; }\nll qpow(ll x,ll k=P-2){\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\ntypedef vector <int> Poly;\nint w[N|10],rev[N];\nvoid Init(){\n\tInv[0]=Inv[1]=Fac[0]=Fac[1]=FInv[0]=FInv[1]=1;\n\trep(i,2,N){\n\t\tFac[i]=1ll*Fac[i-1]*i%P;\n\t\tInv[i]=1ll*(P-P/i)*Inv[P%i]%P;\n\t\tFInv[i]=1ll*FInv[i-1]*Inv[i]%P;\n\t}\n\tw[N>>1]=1;\n\tll t=qpow(3,(P-1)/N);\n\trep(i,(N>>1)+1,N-1) w[i]=w[i-1]*t%P;\n\tdrep(i,(N>>1)-1,1) w[i]=w[i<<1];\n}\n\nint Init(int n){\n\tint R=1,cc=-1;\n\twhile(R<n) R<<=1,cc++;\n\trep(i,1,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<cc);\n\treturn R;\n}\nvoid NTT(int n,Poly &a,int f){\n\tif((int)a.size()<n) a.resize(n);\n\trep(i,1,n-1) if(i<rev[i]) swap(a[i],a[rev[i]]);\n\tfor(int i=1;i<n;i<<=1){\n\t\tint *e=w+i;\n\t\tfor(int l=0;l<n;l+=i*2){\n\t\t\tfor(int j=l;j<l+i;++j) {\n\t\t\t\tint t=1ll*a[j+i]*e[j-l]%P;\n\t\t\t\ta[j+i]=a[j]-t; Mod2(a[j+i]);\n\t\t\t\ta[j]+=t; Mod1(a[j]);\n\t\t\t}\n\t\t}\n\t}\n\tif(f==-1){\n\t\treverse(a.begin()+1,a.end());\n\t\trep(i,0,n-1) a[i]=1ll*a[i]*Inv[n]%P;\n\t}\n}\n\nPoly operator * (Poly a,Poly b){\n\tint n=a.size()+b.size()-1,R=Init(n);\n\tNTT(R,a,1),NTT(R,b,1);\n\trep(i,0,R-1) a[i]=1ll*a[i]*b[i]%P;\n\tNTT(R,a,-1),a.resize(n);\n\treturn a;\n}\n\nPoly Solve(int l,int r){\n\tif(l==r){\n\t\tint x=rd();\n\t\tPoly F(x+1);\n\t\trep(y,1,x) F[y]=C(x-1,y-1)*FInv[y]%P;\n\t\treturn F;\n\t}\n\tint mid=(l+r)>>1;\n\treturn Solve(l,mid)*Solve(mid+1,r);\n}\n\nint main(){\n\tfreopen(\"magic.in\",\"r\",stdin),freopen(\"magic.out\",\"w\",stdout);\n\tInit(),n=rd(),m=rd(),k=rd();\n\tPoly dp=Solve(1,n);\n\trep(i,n,m) dp[i]=1ll*dp[i]*Fac[i]%P;\n\tint i=m-k;\n\trep(j,n,i-1) dp[i]=(dp[i]+(((i-j)&1)?-1:1)*dp[j]*C(m-j,m-i)%P+P)%P;\n\tll ans=(dp[i]%P+P)%P;\n\tprintf(\"%lld\\n\",ans);\n}\n```\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「清华集训 2017」小 Y 和恐怖的奴隶主","url":"/articles/2020/06/18/c11193ee.html","content":"# 「清华集训 2017」小 Y 和恐怖的奴隶主\n\n~~是不是这题太水了都没人写啊~~\n\n**本题官方题解提供的做法实际上复杂度非常高**\n\n## Part1\n\n很显然本题的$\\text{dp}$是存储每种血量的随从数量\n\n设状态数量的上限是$S$\n\n当$m=3,k=8$时，这样的状态一共有$S=165+1$种\n\n如果直接$dp$，每次转移是$O(1)$的，可以做到$O(n\\cdot S)$，显然无法处理$n$较大的情况\n\n用矩阵优化$\\text{dp}$转移，朴素的实现可以做到$O(T\\cdot \\log n\\cdot S^3)$\n\n如果预处理出转移矩阵的幂次，每次查询时只有列向量与方阵的乘法，所以复杂度是$O(\\log n\\cdot S^3+T\\log n\\cdot S^2)$\n\n实际极限的复杂度预估在$60\\cdot 166^3+500\\cdot 60\\cdot 166^2\\approx 11\\cdot 10^8$\n\n官方题解提供的做法就是在在这个算法上进行常数优化，这~~wtm~~\n\n$$ \\ $$\n\n## Part2\n\n对于已知$m,k$来说，设每个$n$构成的答案数列为$a_n$\n\n预先处理一部分的答案$a_1\\cdots a_n$，使用$\\text{Berlekamp-Massey }$算法求出序列的最短线性递推\n\n发现总是在$O(S)$的长度以后，递推序列不再改变，即总能得到一个长度为$O(S)$的全局线性递推\n\n即总可以在$O(S^2)$的时间内求出答案序列$a_n$的**线性递推式**\n\n那么对于求得的线性递推式，问题转化为对于每个查询的$n$，求常系数线性递推数列的第$n$项答案\n\n用**特征多项式**的做法，可以做到单组查询$O(S\\log n\\log S)$的之间求出\n\n那么总复杂度就是$O(S^2+T\\cdot S \\log S\\log n)$\n\n理论上来说，复杂度上限应该只有$166^2+500\\cdot 166\\cdot 10\\cdot 60\\approx 0.5\\cdot 10^8$\n\n理论上来说，这个复杂度无论是不是渐进意义下都比矩阵快\n\n但是实际实践中，由于多项式运算的大常数，不优秀的实现下甚至可能超时\n\n考虑到本题多查询的性质，我改变了倍增的基数$D$，并且预处理出倍增用到的$x^i\\mod \\lambda$\n\n预处理部分的复杂度是$O(\\log_D^n \\cdot (D-1)\\cdot S\\log S)$\n\n查询部分的复杂度是$O(\\log _D^n S\\log S)$\n\n~~由于我的多项式模板不够成熟~~\n\n在LOJ上，经过这样的魔改，已经能跑得比矩阵块\n\n但是在UOJ上，我同样的代码竟然慢了四倍，而[这份代码](https://loj.ac/submission/108525)在UOJ上的运行时间还略有提高\n\n表示很是绝望。。\n\n事实上，这种做法在$m,k$较大时同样可行，在$S$较大，$T$较小的情况下，实际运行总能有更好的表现\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"[WC2019]数树(树形dp+多项式exp)","url":"/articles/2020/06/16/194ebdeb.html","content":"# [WC2019]数树(树形dp+多项式exp)\n\n## Part1\n\n相同边连接的点同一颜色，直接模拟即可\n\n```cpp\nnamespace pt1{\n\tint fa[N],sz[N];\n\tmap <int,int> M[N];\n\tint Find(int x){ return fa[x]==x?x:fa[x]=Find(fa[x]); }\n\tvoid Solve(){\n\t\trep(i,1,n) fa[i]=i;\n\t\trep(i,2,n){\n\t\t\tint x=rd(),y=rd();\n\t\t\tif(x>y) swap(x,y);\n\t\t\tM[x][y]=1;\n\t\t}\n\t\trep(i,2,n) {\n\t\t\tint x=rd(),y=rd();\n\t\t\tif(x>y) swap(x,y);\n\t\t\tif(M[x][y]) fa[Find(x)]=Find(y);\n\t\t}\n\t\tint ans=1;\n\t\trep(i,1,n) if(Find(i)==i) ans=1ll*ans*y%P;\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n\n```\n\n\n\n## Part2\n\n相同边连接的点同一颜色，即在相同边构成的树上形成了若干联通块\n\n很容易想到可以强制一些边保留，设保留$i$条边的方案数是$F_i$,则答案就是$\\sum_i F_i\\cdot y^{n-i}$\n\n考虑$dp$那些边相同，但是不好直接计算剩下边不同的方案，所以考虑计算最多有$i$条边相同的方案数，即\n\n$$G_i=\\sum_{j=i}C(j,i)F_j$$\n\n二项式反演得到$F_i=\\sum_{j=i}(-1)^{j-i}C(j,i)G_j$\n\n> 设分成了$m$个联通块，大小分别为$size_i$，则这些联通块随意构成树的方案数就是$n^{m-2}\\cdot\\prod size_i$\n\n根据上述性质可以写出一个简单的$O(n^4)$树形dp求得$G_i$，即$dp[i][j][k]$表示在$i$的子树里，有$j$条边相同，当前还剩下一个大小为$k$的联通块,每多转移一条相同边，系数是$\\frac{1} {ny}$\n\n考虑优化$dp$\n\n1.\n\n联通块大小的问题，可以转化为每次在联通块里选择一个关键点的方案数，$dp$第三维$0/1$表示当前联通块里是否已经选出了关键点\n\n每次断开一个联通块时必须已经存在关键点\n\n2.\n\n答案是\n\n$\\sum_i F_i\\cdot y^{n-i}$\n\n$=\\sum_i y^{n-i} \\sum_{j=i}(-1)^{j-i}C(j,i)G_j$\n\n$=y^n G_j\\sum_{i=0}^j(-1)^{j-i}C(j,i)y^{-i}$\n\n发现右边的式子$\\sum_0^j(-1)^{j-i}C(j,i)y^{-i}=(\\frac{1} {y}-1)^j$\n\n那么直接把$\\frac{1} {y}-1$带入作为保留一条边的转移系数，消去了第二维\n\n那么这个$\\text{dp}$可以被优化到$O(n)$\n\n$$ \\ $$\n\n```cpp\nnamespace pt2{\n\tvector <int> G[N];\n\tint dp[N][2],g[2],Inv;\n\tvoid dfs(int u,int f){\n\t\tdp[u][0]=dp[u][1]=1;\n\t\tfor(int v:G[u]) if(v!=f) {\n\t\t\tdfs(v,u);\n\t\t\tg[0]=g[1]=0;\n\t\t\trep(i,0,1) rep(j,0,1) {\n\t\t\t\tif(!i||!j) g[i|j]=(g[i|j]+1ll*dp[u][i]*dp[v][j]%P*Inv)%P;\n\t\t\t\tif(j) g[i]=(g[i]+1ll*dp[u][i]*dp[v][j])%P;\n\t\t\t}\n\t\t\tdp[u][0]=g[0],dp[u][1]=g[1];\n\t\t}\n\t}\n\tvoid Solve() {\n\t\trep(i,2,n) {\n\t\t\tint u=rd(),v=rd();\n\t\t\tG[u].pb(v),G[v].pb(u);\n\t\t}\n\t\tInv=(qpow(y)-1)*qpow(n)%P;\n\t\tdfs(1,0);\n\t\tll res=dp[1][1]*qpow(y,n)%P*qpow(n,P+n-3)%P;\n\t\tprintf(\"%lld\\n\",res);\n\t}\n}\n```\n\n\n\n\n\n## Part3\n\n有了上面的$dp$，这一部分就简单多了，设分成了$m$个联通块，每个大小为$a_i$，则贡献为\n\n{%raw%}$$\\begin{aligned}\\frac{n!\\cdot a_i^{a_i-2}\\cdot (n^{m-2})^2(\\frac{1} {y}-1)^{n-m}(\\frac{1} {n}^{n-m})^2\\cdot a_i^2} {\\prod a_i! m !}\\end{aligned}$${%endraw%}\n\n即枚举每个联通块生成树的数量，且需要考虑两棵树分别的**联通块之间的连边数量**，这一部分需要**平方**\n\n很显然，可以直接对于$[x^i]F(x)=\\frac{1} {i!}\\cdot (\\frac{1} {n^2}\\cdot (\\frac{1} {y}-1))^{i-1} i^2i^{i-2}$这个多项式求exp得到\n\n\n\n```cpp\nconst int M=1<<18|10,K=17;\n\ttypedef vector <int> Poly;\n\n\tint w[M],rev[M],Inv[M];\n\tvoid Init(){\n\t\tll t=qpow(3,(P-1)>>K>>1);\n\t\tw[1<<K]=1;\n\t\trep(i,(1<<K)+1,(1<<(K+1))-1) w[i]=w[i-1]*t%P;\n\t\tdrep(i,(1<<K)-1,1) w[i]=w[i<<1];\n\t\tInv[0]=Inv[1]=1;\n\t\trep(i,2,M-1) Inv[i]=1ll*(P-P/i)*Inv[P%i]%P;\n\t}\n\tint Init(int n){\n\t\tint R=1,cc=-1;\n\t\twhile(R<n) R<<=1,cc++;\n\t\trep(i,1,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<cc);\n\t\treturn R;\n\t}\n\t\n\tvoid NTT(int n,Poly &a,int f){\n\t\tif((int)a.size()<n) a.resize(n);\n\t\trep(i,1,n-1) if(rev[i]<i) swap(a[i],a[rev[i]]);\n\t\tfor(int i=1;i<n;i<<=1) {\n\t\t\tint *e=w+i;\n\t\t\tfor(int l=0;l<n;l+=i*2){\n\t\t\t\tfor(int j=l;j<l+i;++j){\n\t\t\t\t\tint t=1ll*a[j+i]*e[j-l]%P;\n\t\t\t\t\ta[j+i]=a[j]-t,Mod2(a[j+i]);\n\t\t\t\t\ta[j]+=t,Mod1(a[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(f==-1) {\n\t\t\treverse(a.begin()+1,a.end());\n\t\t\trep(i,0,n-1) a[i]=1ll*a[i]*Inv[n]%P;\n\t\t}\n\t}\n\n\tPoly operator * (Poly a,Poly b){\n\t\tint n=a.size(),m=b.size();\n\t\tint R=Init(n+m-1);\n\t\tNTT(R,a,1),NTT(R,b,1);\n\t\trep(i,0,R-1) a[i]=1ll*a[i]*b[i]%P;\n\t\tNTT(R,a,-1),a.resize(n+m-1);\n\t\treturn a;\n\t}\n\n\tPoly Poly_Inv(Poly a){\n\t\tint n=a.size();\n\t\tif(n==1) return {(int)qpow(a[0])};\n\t\tPoly b=a; b.resize((n+1)/2),b=Poly_Inv(b);\n\t\tint R=Init(n*2);\n\t\tNTT(R,a,1),NTT(R,b,1);\n\t\trep(i,0,R-1) a[i]=1ll*b[i]*(2-1ll*a[i]*b[i]%P+P)%P;\n\t\tNTT(R,a,-1); a.resize(n);\n\t\treturn a;\n\t}\n\n\tPoly Deri(Poly a){\n\t\trep(i,1,a.size()-1) a[i-1]=1ll*i*a[i]%P;\n\t\ta.pop_back();\n\t\treturn a;\n\t}\n\tPoly IDeri(Poly a){\n\t\ta.pb(0);\n\t\tdrep(i,a.size()-2,0) a[i+1]=1ll*a[i]*Inv[i+1]%P;\n\t\ta[0]=0;\n\t\treturn a;\n\t}\n\n\tPoly Ln(Poly a){\n\t\tint n=a.size();\n\t\ta=Deri(a)*Poly_Inv(a),a.resize(n+1);\n\t\treturn IDeri(a);\n\t}\n\n\tPoly Exp(Poly a){\n\t\tint n=a.size();\n\t\tif(n==1) return Poly{1};\n\t\tPoly b=a; b.resize((n+1)/2),b=Exp(b);\n\t\tb.resize(n); Poly c=Ln(b);\n\t\trep(i,0,n-1) c[i]=a[i]-c[i],Mod2(c[i]);\n\t\tc[0]++,c=c*b;\n\t\tc.resize(n);\n\t\treturn c;\n\t}\n\t\n\tvoid Solve() {\n\t\tint I=(qpow(y)-1)*qpow(1ll*n*n%P)%P;\n\t\tInit();\n\t\tPoly F(n+1);\n\t\tfor(int i=1,FInv=1;i<=n;FInv=1ll*FInv*Inv[++i]%P){\n\t\t\tF[i]=qpow(I,(i-1)) * // 保留i-1条边\n\t\t\t(i==1?1:qpow(i,i-2))%P   // i个点生成树\n\t\t\t*  i%P * i%P // \n\t\t\t* FInv%P; // 阶乘常数\n\t\t}\n\t\tF=Exp(F);\n\t\trep(i,1,n) F[n]=1ll*F[n]*i%P;\n\t\tll res=F[n]*qpow(y,n)%P*qpow(n,2*(P+n-3))%P;\n\t\tprintf(\"%lld\\n\",res);\n\t}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["WC"],"categories":["题解"]},{"title":"「FJWC2020Day5-Zzq」lg","url":"/articles/2020/06/16/b38eb13d.html","content":"# 「FJWC2020Day5-zzq」lg\n\n设模数为$P$\n\n考虑对于每一个$\\gcd$计算$\\text{lcm}$之积$F(m)$\n\n那么可以想到强制每个数都是$\\gcd$的倍数，问题转化为求$\\lfloor \\frac{m} {gcd}\\rfloor $以内所有$\\text{lcm}$的积$G(m)$\n\n那么对于每个质因数依次考虑,则得到一个简单的式子\n\n{%raw%}$$G(m)=\\begin{aligned}\\prod p_i^{\\sum_{j=1}m^n-(m-\\lfloor \\frac{m} {p_i^j}\\rfloor )^n} \\end{aligned}$${%endraw%}\n\n其中枚举的$j$是$p_i$至少出现$j$次的方案数，枚举的$j$是$\\log m$ 级别的\n\n肯定是先求出指数$\\mod \\varphi(P)$，可以线性预处理出所有的$i^n \\mod \\varphi(P)$\n\n对于每个$p_i$求出指数后还要快速幂，复杂度就是$O(|p_i|\\log P)=O(m)$，实际带有一些常数\n\n那么求$G(m)$的复杂度上界是$O(m\\log m)$，实际上$\\lfloor \\frac{m} {i}\\rfloor $有很多重复，复杂度要低很多\n\n得到的每个$\\gcd$的答案还要把强制取出的$\\gcd$补上，是$\\gcd^{ {\\lfloor \\frac{m} {gcd}\\rfloor }^n}$\n\n那么对于$G(m)$枚举倍数进行容斥的到$F(m)$即可，需要求每个$F(m)$的逆元，复杂度是$O(m(\\log P+\\log m))$\n\n总复杂度的上界就是$O(m\\log P)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a;i<=b;++i)\nenum{N=200010,P=998244353,Phi=P-1};\nint n,m,p[N],mk[N],g[N],ig[N],h[N];\nll qpow(ll x,ll k,ll P) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint G(int m) {\n\tif(h[m]) return h[m];\n\tll ans=1;\n\trep(i,2,m) if(!mk[i]) {\n\t\tll d=1,s=0;\n\t\tfor(;(d*=i)<=m;) s+=p[m]-p[m-m/d]; // 带入上式求出答案\n\t\tans=ans*qpow(i,(s%Phi+Phi)%Phi,P)%P;\n\t}\n\treturn h[m]=ans;\n}\nint main(){\n\tfreopen(\"lg.in\",\"r\",stdin),freopen(\"lg.out\",\"w\",stdout);\n\tscanf(\"%d%d\",&n,&m);\n\trep(i,2,N-1) if(!mk[i]) for(int j=i+i;j<N;j+=i) mk[j]=1;\n\trep(i,0,m) p[i]=qpow(i,n,Phi); // 预处理出i^n mod Phi\n\trep(i,1,m) g[i]=G(m/i)*qpow(i,p[m/i],P)%P; // 注意要补上\n\tll ans=1;\n\tfor(int i=m;i;i--){\n\t\tfor(int j=i+i;j<=m;j+=i) g[i]=1ll*g[i]*ig[j]%P; // 容斥得到f\n\t\tig[i]=qpow(g[i],P-2,P),ans=ans*qpow(g[i],i,P)%P;\n\t}\n\tprintf(\"%lld\\n\",ans);\n}\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["WC"],"categories":["题解"]},{"title":"[BoundedOptimization TopCoder - 12294]","url":"/articles/2020/06/14/ce6d4565.html","content":"# [BoundedOptimization TopCoder - 12294](https://vjudge.net/problem/TopCoder-12294)\n\n考虑在最优情况下，某一些数在$\\text{lowerbound}$,某一些在$\\text{upperbound}$\n\n确定了这些数之后，对于那些处于$(\\text{lowerbound,upperbound})$之间的数，它们的值其实是在**忽略了上下界的情况下能取到的最优情况**\n\n否则只要上下移动一点就可能达到一个更优的情况\n\n那么考虑枚举每个数的状态在$\\text{lowerbound,upperbound,(lowerbound,uppperbound)}$\n\n推论：在中间的数之间必然存在互相关系\n\n假设存在两个数$x_i,x_j$之间没有互相关系，令其他数不变，\n\n则答案式子可以表示为$ax_i+bx_j+c$的形式，改变两个数的值总能得到更优的情况\n\n$$ \\ $$\n\n设处在中间位置的数为$x_1,\\cdots,x_m$，其他数为$y_1,\\cdots ,y_k$，每个数连到外面的权值总和为$s_i$\n\n发现在最优情况下，$\\sum x_i+\\sum y_i =MaxSum$，那么就确定了$\\sum x_i$的值，设为$Sum$\n\n那么答案就可以表示为{%raw%}$\\begin{aligned}\\frac{\\sum_ix_i\\cdot(Sum-x_i+2\\cdot s_i)} {2}\\end{aligned}+c${%endraw%}\n\n其中常数$c$是外面的数之间的总和\n\n不考虑限制的情况下，最优情况是$x_i=\\frac{Sum+s_i} {2}$\n\n此时，若$\\sum x_i\\ne Sum$，是不合法的，需要调整\n\n而让每个数改变$d$，减少的答案都是$d^2$(因为原来是在二次函数的最高点)\n\n所以每个数都改变{%raw%}$\\begin{aligned}\\frac{\\sum \\frac{Sum+x_i} {2}-Sum} {m}\\end{aligned}${%endraw%}是最优的\n\n注意这里计算时都是**忽略了**$x_1,\\cdots,x_m$的$\\text{lowerbound,upperbound}$，求出的值不一定合法\n\n如果不合法说明至少有某个值该到上下界之后答案会更优，所以这次的答案不用考虑\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef double db;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\n#define pb push_back\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nconst int N=30;\nconst db eps=1e-7;\n\nint G[N][N];\nint A[N],w[N];\ndb val[N];\n\nclass BoundedOptimization {\npublic:\n\tdouble maxValue(vector <string> Expr, vector <int> L, vector <int> R, int Max) {\n\t\tstring E=\"\";\n\t\tfor(string t:Expr) E+=t;\n\t\tmemset(G,0,sizeof G);\n\t\trep(i,0,E.size()-1) if(isalpha(E[i])) {\n\t\t\tG[E[i]-'a'][E[i+1]-'a']=G[E[i+1]-'a'][E[i]-'a']=1;\n\t\t\ti++;\n\t\t}\n\t\tint n=L.size();\n\t\tdb ans=0;\n\t\trep(S,0,pow(3,n)-1) {\n\t\t\tint T=S,m=0;\n\t\t\tdb res=0,sum=0;\n\t\t\trep(i,0,n-1) {\n\t\t\t\tw[i]=T%3;\n\t\t\t\tif(!w[i]) A[++m]=i;\n\t\t\t\telse val[i]=(w[i]==1?L[i]:R[i]),sum+=val[i];\n\t\t\t\tT/=3;\n\t\t\t}\n\t\t\tint fl=sum<=Max;\n\t\t\trep(i,1,m) rep(j,i+1,m) if(!G[A[i]][A[j]]) fl=0;\n\t\t\tif(!fl) continue;\n\t\t\tdb left=Max-sum; \n\t\t\trep(i,1,m) {\n\t\t\t\tdb c=left;\n\t\t\t\trep(j,0,n-1) if(w[j] && G[A[i]][j]) c+=val[j]*2;\n\t\t\t\tval[A[i]]=c/2;\n\t\t\t\tsum+=val[A[i]];\n\t\t\t}\n\t\t\tif(m){\n\t\t\t\tdb t=(sum-Max)/m;\n\t\t\t\trep(i,1,m) val[A[i]]-=t;\n\t\t\t}\n\t\t\trep(i,0,n-1) if(val[i]<L[i]-eps || val[i]>R[i]+eps) fl=0;\n\t\t\tif(!fl) continue;\n\t\t\trep(i,0,n-1) rep(j,i+1,n-1) if(G[i][j]) res+=val[i]*val[j];\n\t\t\tcmax(ans,res);\n\t\t}\n\t\treturn ans;\t\n\t}\n};\n\n```\n\n\n\n\n\n\n\n","tags":["Atcoder"],"categories":["题解"]},{"title":"[MapGuessing TopCoder - 12152]","url":"/articles/2020/06/13/3ff13b33.html","content":"## [MapGuessing TopCoder - 12152](https://vjudge.net/problem/TopCoder-12152)\n\n做得我很迷\n\n首先是可以把问题转化为，每次操作之后会让原序列的限制条件变为：不考虑某一些位置时合法\n\n枚举每个开始位置，依次考虑每一个操作，如果有一个位置被改为不同，就是不合法的\n\n对于每一个开始位置，能得到的的**最优限制条件**都是唯一的，因为只要是合法的，一定取最后一个合法的位置，才能尽可能多地覆盖一些位置\n\n那么我们得到了$|goal|$个这样的限制条件$S_i$，设$n=|goal|$\n\n直接计算肯定会算重，考虑一个简单的容斥\n\n{%raw%}$\\begin{aligned}Answer=\\sum_{T\\ne \\empty}(-1)^{|T|+1}2^{|S_{T_1}\\cap \\cdots \\cap S_{T_{|T|} }|}\\end{aligned}${%endraw%}\n\n就是枚举选择一个限制的集合，求出他们的并集\n\n直接枚举复杂度当然是$O(2^{|n|})$，如果$\\text{dfs}$枚举，当前状态为$0$时，可以直接返回答案\n\n估计一下这个$\\text{dfs}$的复杂度\n\n设操作过程中指针左右移动的距离是$L$，那么最多存在$n-L$个合法的开始位置，每个状态最多包含$L$个$1$\n\n很显然枚举的上限是$\\min\\{2^{n-L},2^{L} \\}$，即受到**开始位置的个数**和**可能出现的1个数**的限制\n\n当$n-L=L$时，复杂度达到上限是$O(2^{\\frac{n} {2} })$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\nset <ll> st;\nll S[40];\nint now[40],cnt;\nll dfs(int p,ll State){\n\tif(p==cnt+1) return (1ll<<__builtin_popcountll(State)); // 枚举完毕\n\tif(State==0) return 0; // 剪枝，注意因为是后面的所有1,-1相加，所以是return 0而不是1\n\treturn dfs(p+1,State)-dfs(p+1,State&S[p]);  // 直接处理容斥系数\n}\n\nclass MapGuessing {\npublic:\n\tlong long countPatterns(string S, vector <string> code) {\n\t\tstring C=\"\";\n\t\tfor(string t:code) C+=t;\n\t\tint n=S.size();\n\t\tst.clear();\n\t\trep(i,0,n-1) {\n\t\t\tint p=i,f=1;\n\t\t\tll lst=0; // 记录最后一个合法的即可\n\t\t\trep(i,0,n-1) now[i]=0;\n\t\t\tfor(char c:C) {\n\t\t\t\tif(c=='<') p--;\n\t\t\t\tif(c=='>') p++;\n\t\t\t\tif(c=='0') now[p]=1;\n\t\t\t\tif(c=='1') now[p]=2;\n\t\t\t\tif(p<0 || p>=n){ f=0; break; }\n\t\t\t\tint fl=1;\n\t\t\t\tll T=0;\n\t\t\t\trep(i,0,n-1) {\n\t\t\t\t\tif(!now[i]) continue;\n\t\t\t\t\tif(now[i]-1!=S[i]-'0'){ fl=0; break; }\n\t\t\t\t\telse T|=1ll<<i;\n\t\t\t\t}\n\t\t\t\tif(!fl) continue;\n\t\t\t\tlst=T;\n\t\t\t}\n\t\t\tif(!f) continue;\n\t\t\tst.insert(-lst);\n\t\t}\n\t\tcnt=0;\n\t\tfor(ll x:st) {\n\t\t\tll y=-x;\n\t\t\tint f=1;\n\t\t\trep(i,1,cnt) if((::S[i]&y)==y){ f=0; break; }\n\t\t\tif(f) ::S[++cnt]=y;\n\t\t}\n        //初始系数是-1\n\t\tll ans=(1ll<<n)-dfs(1,(1ll<<n)-1); // 注意枚举出来会把T=emptyset的情况算进去，要去掉\n\t\treturn ans;\n\t}\n};\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"Berlekamp-Massey 算法(最短线性递推)","url":"/articles/2020/06/12/e19b6223.html","content":"# Berlekamp-Massey 算法(最短线性递推)\n\n参考文献：2019集训队论文，钟子谦《两类递推数列的性质和应用》给出了详细阐述\n\n## 算法简介\n\n对于一个$n$个元素的数列$a_{1,\\cdots, n}$，求出它的**最短线性递推式**\n\n即求最小的$m$和对应的$r_1,\\cdots r_m$使得$\\forall i\\in [m+1,n],a_i=\\sum_{j=1}^{m}a_{i-j}r_j$\n\n很显然使用**高斯消元**算法可以在$O(n^3)$的时间内求解\n\n而$\\text{Berlekamp-Massey(BM)}$算法是通过依次对于前$i$项构造，\n\n添加每一项时在$O(n)$的时间内找到一个可行的构造方法，将复杂度降低到了$O(n^2)$\n\n$$ \\ $$\n\n$$ \\ $$\n\n## 算法过程\n\n为了更好描述，设\n\n$r$的阶为$d(r)$\n\n$\\lambda(n,r)=\\sum_{i=1}^{d(r)}a_{n-i}r_i$\n\n$\\Delta(n,r)=a_n-\\lambda (n,r)$\n\n考虑依次加入每个数$a_i$，设当前$d(r)=m$，上一次的递推是$p$,$p$出现不匹配的位置是$f$\n\n特别的，初始状态的递推是$r=\\{ \\},f=0$\n\n$1.\\Delta(i,r)=0$，那么不需要扩展\n\n2.$\\Delta(i,r)\\ne 0$\n\n$\\text{i}.m=0$，即插入了第一个$a_i\\ne 0$，初始化$d(r')=i,r_j=0$，此时显然成立\n\n$\\text{ii}.m\\ne 0$\n\n我们的构造思路是找到一个$r'$使得$\\forall j\\in[d(r'),i-1],\\lambda(j,r')=0\\and \\lambda (n,r')=\\Delta(i-1,r)$\n\n那么当前合法的转移就是$r+r'$\n\n设$t=\\frac{\\Delta(n,r)} {\\Delta(f,p)}$\n\n构造$r'=t \\cdot x^{i-f-1}(1-p)$\n\n写出来就是\n\n$r'=\\{\\underbrace{0,\\cdots,0},t\\cdot (1-p)\\}$\n\n$ \\ \\ \\ \\ \\ \\ \\ \\ i-f-1$个$0$\n\n$r'=\\{\\underbrace{0,\\cdots,0},t,-t\\cdot p_{1},-t\\cdot p_{2}\\cdots,-t\\cdot p_{d(p)} \\}$\n\n$ \\ \\ \\ \\ \\ \\ \\ \\ i-f-1$个$0$\n\n此时，$d(r')=i-f+d(p)$\n\n当$j\\in [d(r')+1,i-1]$时，$\\lambda(j,r')=\\sum_{k=i-f}^{d(r')}a_{j-k}r'_k$\n\n$=t\\cdot( a_{j-(i-f)}-\\lambda(j-(i-f),p))$\n\n由于$p$对于$j\\in[d(r')+1-(i-f),i-1-(i-f)]=[d(p)+1,f-1]$，$p$这个递推式成立\n\n即$\\lambda(j,r')=0$\n\n当$j=i$时，\n\n$\\lambda(i,r')=t\\cdot (a_{i-(i-f)}-\\lambda(i-(i-f),p))=t\\cdot \\Delta(f,p)$\n\n即$\\lambda (i,r')=\\Delta(n,r)$\n\n完成了我们想要的构造，所以每次记录上一次的失配位置，即可找到最小递推式\n\n然后，上面的构造方法只满足构造出一个合法的线性递推式，并没有证明是$m$是最小的\n\n但是在OI竞赛中，通常我们只是需要快速求出递推式，并不要求最短线性递推\n\n如果想要看到严谨的证明还请移步2019集训队论文\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「余姚中学 2019 联测 Day 6」解码","url":"/articles/2020/06/11/c545b4f2.html","content":"# 「余姚中学 2019 联测 Day 6」解码\n\n先不考虑求$p,q$\n\n根据人人都知道的欧拉定理$x^c\\equiv x^{c\\mod \\varphi(n)} (\\mod n)$\n\n那么$\\varphi(n)=(p-1)(q-1)$，而$(c,\\varphi(n))=1$\n\n所以求出$\\frac{1} {c} \\pmod {\\varphi(n)}$\n\n带入原来的式子$(x^c)^{\\frac{1} {c}\\pmod {\\varphi(n)} }\\equiv x^1\\pmod n$\n\n即$x=m^{\\frac{1} {c}\\pmod {\\varphi(n)} }\\pmod n$\n\n求逆最好用扩展欧几里得算法，复杂度为$O(\\log n)$\n\n那么直接快速幂即可，但是如果快速幂套快速乘复杂度为$O(\\log ^2)$，实际常数极大，很有可能超时(如果用long double O(1)快速乘另谈。。。)\n\n由于知道$p,q$可以分别求出$m^{\\frac{1} {c}\\pmod {\\varphi(n)} }\\pmod p$，$m^{\\frac{1} {c}\\pmod {\\varphi(n)} }\\pmod q$\n\n然后中国剩余定理合并，即$O(\\log n)$\n\n----------\n\n\n现在问题是求$p,q$\n\n对于前3档分，由于素数密度是$O(\\log n)$的，所以$\\sqrt n -p$期望只有$\\log n$\n\n而对于最后一档分，考虑更好表示，枚举$p+q$解出答案，发现\n\n$4n\\leq (p+q)^2= (q-p)^2+4pq\\leq \\lambda^2+4n$\n\n即$2\\sqrt{n}\\leq (p+q)\\le \\sqrt{\\lambda^2+4n}$\n\n由于$n\\ge p^2\\ge 10^{18},\\lambda \\leq 3\\cdot 10^5$，这个范围实际非常非常非常非常小，大概只有$22$\n\ntips:实际上$4n$可能爆long long \n\n枚举$p+q$之后，$O(1)$解出$p,q$即可\n\n竟然有人问怎么解$p,q$，我震惊了\n\n$q-p=\\sqrt{(p+q)^2-4n}$，然后判一下是不是整数就好了\n\n写的时候害怕sqrt炸精度，很多奇怪的语句请忽略\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define reg register\ntypedef long long ll;\ntypedef unsigned long long ull;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\n#define pb push_back\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n\ntemplate <class T> inline void cmin(T &a,T b){ if(a>b) a=b; }\ntemplate <class T> inline void cmax(T &a,T b){ if(a<b) a=b; }\n\nchar IO;\ntemplate<class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=3e5+10;\n\nll n,m,c;\n\nll qmul(ll x,ll k,ll P){\n\tk=(k%P+P)%P;\n\tll res=0;\n\tfor(;k;k>>=1,x=(x+x)%P) if(k&1) res=(res+x)%P;\n\treturn res;\n}\n\nll qpow(ll x,ll k,ll P) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nvoid Exgcd(ll a,ll b,ll &x,ll &y){\n\tif(b==0) x=1,y=0;\n\telse Exgcd(b,a%b,y,x),y-=a/b*x;\n}\n\nll Inv(ll a,ll P){\n\tll x,y;\n\tExgcd(a,P,x,y);\n\treturn (x%P+P)%P;\n}\n\nint main(){\n\tfreopen(\"rsa.in\",\"r\",stdin),freopen(\"rsa.out\",\"w\",stdout);\n\trep(kase,1,rd()) {\n\t\tn=rd<ll>(),m=rd<ll>(),c=rd<ll>();\n\t\tll T=sqrt(n),p=-1,q;\n\t\tfor(ll i=T;i>=T-100;--i) if(n%i==0) {\n\t\t\tp=i,q=n/i;\n\t\t\tbreak;\n\t\t}\n\t\tif(p==-1) {\n\t\t\t// 2*sqrt(n) <= p+q <= sqrt(4*n+lambda * lambda)\n\t\t\t//ll R=ceil(sqrt((long double)4*n+9e10)+1);\n\t\t\tll L=ceil(sqrt(n+0.5));\n\t\t\tif((L-1)*(L-1)>=n) L--;\n\n\t\t\tfor(ll x=2*L;;++x) {\n\t\t\t\tull y=x*x-4*(ull)n; \n\t\t\t\t// x=p+q\n\t\t\t\t// t=q-p\n\t\t\t\tull t=sqrt(y);\n\t\t\t\tif((t+1)*(t+1)==y) t++;\n\t\t\t\tif((t-1)*(t-1)==y) t--;\n\t\t\t\tif(t*t==y) {\n\t\t\t\t\tp=(x-t)/2;\n\t\t\t\t\tq=(x+t)/2;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tll t=Inv(c,(p-1)*(q-1));\n\t\t// t= 1/c (mod phi(n))\n\t\t \n\t\tll k1=p,b1=qpow(m%p,t,p);\n\t\tll k2=q,b2=qpow(m%q,t,q);\n\t\t// k1 x + b1 = k2 y + b2\n\t\t// k1 x = b2-b1 (mod k2)\n\t\t// x= (b2-b1)/k1;\n\t\t// x' = (b2-b1)/k1 (mod k2) * k1 + b1\n\t\tll inv=qpow(k1,k2-2,k2);\n\t\tb1=(b2-b1)%k2*inv%k2  * k1+b1;\n\t\tk1*=k2;\n\t\tb1=(b1%k1+k1)%k1;\n\t\tprintf(\"%lld\\n\",b1);\n\t}\n}\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"第二类斯特林数","url":"/articles/2020/06/10/6040b743.html","content":"\n\n\n\n## 第二类斯特林数\n\n$S(n,m): n$个点分成$m$个相同集合\n\n带入定义，递推式为$S(n,m)=S(n-1,m-1)+m\\cdot S(n-1,m)$\n\n转化$x^n$\n\n$x^n$的组合意义是把$n$个点随意放到$x$个不同位置里，枚举那些位置放了点，则\n\n$$x^n=\\sum_0^x C(x,i)i!S(n,i)$$\n\n有一些涉及到$x^n\\rightarrow (x+1)^n$可以展开之后带入递推式快速转移\n\n容斥/二项式反演得到\n\n$$S(n,m)=\\frac{\\sum_{i=0}^m (-1)^{m-i}C(m,i) i^n} {m!}$$\n\n即$S(n,m)$的通项公式\n\n\n\n## 下降幂多项式卷积\n\n$x^{\\underline n}=\\frac{x!} {(x-n)!}$\n\n下降幂多项式$F(x)$的$EGF$是\n\n$EGF(F(x))=\\sum_{i=0}^{\\infty}\\frac{x^i} {i!}\\sum_{j=0}^{n} \\frac{i!} {(i-j)!}\\cdot F_j$\n\n$EGF(F(x))=\\sum_{i=0}^{\\infty}x^i \\sum_{j=0}^{n} \\frac{1} {(i-j)!}\\cdot F_j$\n\n换一下顺序\n\n$EGF(F(x))=\\sum_{i=0}^{n} F_i \\sum_{j=i}^{\\infty}\\frac{1} {(j-i)!} x^j$\n\n$EGF(F(x))=\\sum_{i=0}^{n} F_i \\cdot x^i \\sum_{j=0}^{\\infty}\\frac{1} {j!} x^j$\n\n$EGF(F(x))=\\sum_{i=0}^{n} F_i \\cdot x^i e^x$\n\n那么直接卷积就可以得到$F(x)$的$EGF$，然后点值对应相乘\n\n卷回来的时候\n\n$EGF(F(x))=\\sum_{i=0}^{n} F_i \\cdot x^ie^x$\n\n$F_i=\\frac{EGF(F(x))} {x^ie^x}$\n\n那么就直接卷上$e^{-x}$就可以了\n\n\n\n\n\n## 普通多项式转下降幂多项式\n\n带入$x^n$的第二类斯特林数展开式，$x^n=\\sum C(x,i)i!S(n,i)=\\sum x^{\\underline i}S(n,i)$\n\n$G(x)=\\sum [x^i]F(x)\\sum x^{\\underline j}S(i,j)$\n\n$G(x)=\\sum [x^i]F(x)\\sum x^{\\underline j}\\sum \\frac{(-1)^{j-k} C(j,k) k^i} {j!}$\n\n$G(x)=\\sum [x^i]F(x)\\sum x^{\\underline j}\\sum \\frac{(-1)^{j-k} k^i} {k!(j-k)!}$\n\n是一个三元的卷积优化，比较复杂\n\n$i\\rightarrow j,[x^{\\underline j}]G(x)=\\frac{(-1)^{j-k}[x^i]F(x) k^i} {(j-k)!k!}$\n\n考虑分步优化\n\n#### Part1 $i\\rightarrow k$\n\n先计算出$H(k)=\\sum [x^i]F(x) k^i$\n\n发现$[x^i]H(x)=F(i)$，多项式多点求值得到\n\n#### Part2 $k\\rightarrow j$\n\n对于已经得到的$H(x)$\n\n$[x^{\\underline j}]G(x)=\\sum \\frac{(-1)^{j-k}[x^k]H(x)} {k!(j-k)!}$\n\n可以直接卷积得到\n\n\n\n## 下降幂多项式转普通多项式\n\n求出$F(x)$的$EGF$，然后带入前$n$项的值，快速插值回来即可\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"多项式Polynomial","url":"/articles/2020/06/10/4ee37ab1.html","content":"# 多项式Polynomial\n\n前置知识$\\text{NTT}$\n\n所有操作均在对$P=\\text{998244353}$取模下进行\n\n代码在最下面\n\n下文中$\\pmod {x^n}$表示求出了多项式的前$n$项\n\n$[x^i]F(x)$表示$F(x)$第$i$项的系数\n\n每个小问题的模板题都可以在洛谷上找到\n\n--------------\n\n## 1.多项式求乘法逆\n\n~~(为什么叫做乘法逆?因为还有求$G(x)=\\frac{1} {F(x)}\\pmod {M(x)}的$)~~\n\n求 $G(x)\\equiv \\frac{1} {F(x)} \\pmod {x^n}$\n\n形象化的理解就是$F(x)\\cdot G(x) \\pmod {x^n}$只有第一项是$1$，其他项都是$0$\n\n这个由于是第一个操作，很多人还并不是很能理解多项式操作到底是什么东西，所以讲多一点\n\n### Part1 O($n^2$)\n\n为了便于理解这个问题，先考虑一个最简单的模拟\n\n$[x^i]F\\cdot G(x)=\\sum [x^j]F(x)[x^{i-j}]G(x)$\n\n第一项$[x^0]G(x)=\\frac{1} {[x^0]F(0)} \\pmod P$，因此求逆的前提条件是$[x^0]F(x)\\ne 0$\n\n考虑从$1$到$n-1$依次求出每一项，先从前面的项中得到所有$j>0$的和$Sum$，然后带入$j=0$时知道\n\n$$[x^i]G(x)=-\\frac{Sum=\\sum_{j=1}^{j\\leq i}[x^j]F(x)[x^{i-j}]G(x)} {[x^0]F(0)}$$\n\n$$ \\ $$\n\n------------\n\n### Part2 O($n\\log^2n$)\n\n上面这个式子是一个类似$dp$转移的东西，可以直接分治NTT优化掉\n\n$$ \\ $$\n\n------------\n\n### Part3 $O(n\\log n)$\n\n考虑递归求解，设已经求出了\n\n$$H(x)\\equiv \\frac{1} {F(x)},\\pmod {x^{\\frac{n} {2} }}$$\n\n其中递归边界是$n=1$时,$[x^0]G(x)=\\frac{1} {[x^0]F(0)} \\pmod P$，因此求逆的前提条件是$[x^0]F(x)\\ne 0$\n\n则\n\n$$H(x)\\equiv G(x)\\pmod {x^{\\frac{n} {2} }}$$\n\n$$H(x)-G(x)\\equiv 0\\pmod {x^{\\frac{n} {2} }}$$\n\n我们对于$H(x)-G(x)$平方，结果的前$n$项不可能由两个$\\ge \\frac{n} {2}$的项相乘得到，而前$\\frac{n} {2}$项都是$0$，所以\n\n$$(H(x)-G(x))^2\\equiv 0\\pmod {x^n}$$ \n\n所以通过平方可以扩大模数，这很常用\n\n展开平方的式子\n\n$$H(x)^2-2G(x)H(x)+G(x)^2\\equiv 0\\pmod {x^n}$$ \n\n两边乘上$F(x)$\n\n$$H(x)^2F(x)-2H(x)+G(x)\\equiv 0\\pmod {x^n}$$ \n\n$$G(x)\\equiv 2H(x)-H(x)^2F(x)\\pmod {x^n}$$\n\n带入这个式子倍增求解即可\n\n分析复杂度，每次有一个$H(x)^2F(x)$，可以通过$NTT$求出，倍增过程中访问的长度是$O(n+\\frac{n} {2}+\\frac{n} {4}...)=O(n)$\n\n所以总复杂度就是$O(n\\log n)$\n\n\n\n$$ \\ $$\n\n---------\n\n## 2.多项式开根号\n\n求$G(x)^2\\equiv F(x) \\pmod {x^n}$\n\n同样的，递归求解，设已经求出了，递归边界是$n=1$时,$[x^0]G(x)=\\sqrt{[x^0]F(x)}\\pmod P$\n\n可以发现我们需要求[二次剩余](https://www.cnblogs.com/chasedeath/p/13043597.html)。。。但是一般题目保证了$[x^0]F(x)\\in\\{0,1\\}$\n\n设已经求出$H(x)^2\\equiv F(x) \\pmod{ x^{\\lceil \\frac{n} {2} \\rceil} }$\n\n$$H(x)\\equiv G(x) \\pmod {x^{\\lceil \\frac{n} {2}\\rceil} }$$\n\n$$H(x)^2-2G(x)H(x)+G(x)^2\\equiv 0\\pmod {x^n}$$\n\n$$H(x)^2-2G(x)H(x)+F(x)\\equiv 0 \\pmod {x^n}$$\n\n$$G(x)\\equiv \\frac{H(x)^2+F(x)} {2H(x)} \\pmod {x^n}$$\n\n带入这个式子倍增求解即可\n\n复杂度为$O(n\\log n)$\n\n$$ \\ $$\n\n---------------------\n\n## 3.多项式求$\\ln$\n\n$$G(x)\\equiv \\ln F(x) \\pmod {x^n}$$\n\n$$G'(x)\\equiv F'(x)\\frac{1} {F(x)} \\pmod {x^n}$$\n\n求出$G'(x)$，然后求原函数即可\n\n复杂度为$O(n\\log n)$\n\n$$ \\ $$\n\n-----------\n\n## 4.多项式求exp([牛顿迭代](https://www.cnblogs.com/chasedeath/p/12859142.html))\n\n把题目转化为，对于函数$f(G)=\\ln G-F$\n\n求出在$\\mod x^n$意义下的零点\n\n其中$f(x)=\\ln x-c$\n\n考虑迭代求解，设已经求出$H(x)=e^{F(x)}\\pmod {x^{\\frac{n} {2} }}$\n\n边界条件是$[x^0]H(x)=e^{[x^0]F(x)}$(由于没有办法求$e^x$在模意义下的值，所以通常必须要满足$[x^0]F(x)=0$)\n\n带入牛顿迭代的结果\n\n$$G=H-\\frac{f(H)} {f'(H)}=H(F-\\ln H+1)$$\n\n每次求$ln $复杂度和$NTT$相同，所以总复杂度为$O(n\\log n)$\n\n事实上这个还有优化的余地，就是在求$ln$的时候，多项式逆的部分可以同步倍增求出，不需要每次都倍增一下~~(但是好像效果并不是特别明显)~~\n\n$$\\  $$\n\n$$ \\ $$\n\n----------------\n\n## 5.多项式$k$次幂\n\n$G(x)\\equiv F(x)^k\\pmod {x^n}$\n\n$\\ln G(x)=k \\ln F(x) \\pmod {x^n}$\n\n求出$\\ln G(x)$之后，$exp$回来即可\n\n由于要求$ln$，所以这样求的条件是$[x^0]F(x)=1$\n\n~~很显然这个方法对于开根号也是适用的~~\n\n复杂度$O(n\\log n)$\n\n$$ \\ $$\n\n$$ \\ $$\n\n\n\n\n$$ \\ $$\n\n------------------\n\n## 6.多项式带余除法\n\n可以参考[神仙miskcoo的博客](http://blog.miskcoo.com/2015/05/polynomial-division)\n\n应用：[多项式多点求值](https://www.cnblogs.com/chasedeath/p/13073178.html)，[常系数线性齐次递推](https://www.cnblogs.com/chasedeath/p/12949896.html)\n\n\n$$ \\ $$\n\n\n**以上是基本运算，如果不想继续~~吸多项式~~请直接跳到最下面的代码**\n\n[多项式与点值式](https://www.cnblogs.com/chasedeath/p/13073178.html)\n\n[下降幂多项式初步](https://www.cnblogs.com/chasedeath/p/13073206.html)\n\n\n$$ \\ $$\n\n$$ \\ $$\n\n\n\n---------------------------------\n\n\n\n\n\n\n\n$$ \\ $$\n\n$$\\  $$\n\n$$ \\ $$\n\n---------\n\n所有的操作均用$\\text{vector} $来实现，主要是为了理清思路，并且清零问题上会比较容易解决，同时对于每次计算完多项式的长度的要求会显得更加严格\n\n\n\n---------------\n\n稍微整理了一下，没怎么卡过常，所以应该还是比较可读的\n\n代码总览(请使用C++11,O2编译运行)\n\n[基本运算的总模板题Loj - 150](https://loj.ac/problem/150)\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n\n#define reg register\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\n#define pb push_back\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\nint rd(){\n\tint s=0;\n\tint f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int MaxK=19;\nconst int N=(1<<MaxK)+10,P=998244353;\n\nint n,k;\n\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nnamespace Polynomial{\n\ttypedef vector <int> Poly;\n\tvoid Show(Poly a,int k=0){ \n\t\tif(!k){ for(int i:a) printf(\"%d \",i); puts(\"\"); }\n\t\telse for(int i:a) printf(\"%d\\n\",i);\n\t}\n\tint K;\n\tint rev[N];\n\tint Mod_Inv[N],Fac[N],FInv[N];\n\tint w[1<<MaxK|10];\n\n\tvoid Init_w() { // NTT的系数预处理\n\t\tK=MaxK;\n\t\t//while((1<<K)<=n+1) K++;\n\t\tint t=qpow(3,(P-1)>>K);\n\t\tK--;\n\t\tw[1<<K]=1;\n\t\trep(i,(1<<K)+1,(1<<(K+1))-1) w[i]=1ll*w[i-1]*t%P;\n\t\tdrep(i,(1<<K)-1,1) w[i]=w[i<<1];\n\n\t\tMod_Inv[0]=Mod_Inv[1]=Fac[0]=Fac[1]=FInv[0]=FInv[1]=1;\n\t\trep(i,2,(1<<K)) {\n\t\t\tMod_Inv[i]=1ll*(P-P/i)*Mod_Inv[P%i]%P; \n\t\t\tFInv[i]=1ll*FInv[i-1]*Mod_Inv[i]%P;\n\t\t\tFac[i]=1ll*Fac[i-1]*i%P;\n\t\t}\n\t}\n\tint Init(int n){ // 翻转数组预处理\n\t\tint R=1,cc=-1;\n\t\twhile(R<n) R<<=1,cc++;\n\t\trep(i,1,R-1) rev[i]=(rev[i>>1]>>1)|((i&1)<<cc);\n\t\treturn R;\n\t}\n\tvoid NTT(int n,Poly &a,int f){ // NTT板子\n\t\trep(i,0,n-1) if(rev[i]<i) swap(a[i],a[rev[i]]);\n\t\tfor(int i=1;i<n;i<<=1) {\n\t\t\tint *e=w+i;\n\t\t\tfor(int l=0;l<n;l+=i*2) {\n\t\t\t\tfor(int j=l;j<l+i;++j) {\n\t\t\t\t\tint t=1ll*a[j+i]*e[j-l]%P;\n\t\t\t\t\ta[j+i]=a[j]-t,Mod2(a[j+i]);\n\t\t\t\t\ta[j]+=t,Mod1(a[j]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(f==-1) {\n\t\t\treverse(a.begin()+1,a.begin()+n);\n\t\t\tll base=Mod_Inv[n];\n\t\t\trep(i,0,n-1) a[i]=a[i]*base%P;\n\t\t}\n\t}\n\t\n\tPoly operator * (Poly a,Poly b){\n\t\tint n=a.size()+b.size()-1;\n\t\tint R=Init(n);\n\t\ta.resize(R),b.resize(R);\n\t\tNTT(R,a,1),NTT(R,b,1);\n\t\trep(i,0,R-1) a[i]=1ll*a[i]*b[i]%P;\n\t\tNTT(R,a,-1);\n\t\ta.resize(n);\n\t\treturn a;\n\t}\n\n\tPoly operator + (Poly a,Poly b) { \n\t\tint n=max(a.size(),b.size());\n\t\ta.resize(n),b.resize(n);\n\t\trep(i,0,n-1) a[i]+=b[i],Mod1(a[i]);\n\t\treturn a; \n\t}\n\tPoly operator - (Poly a,Poly b) { \n\t\tint n=max(a.size(),b.size());\n\t\ta.resize(n),b.resize(n);\n\t\trep(i,0,n-1) a[i]-=b[i],Mod2(a[i]);\n\t\treturn a; \n\t}\n\n\tPoly Inv(Poly a) { // 多项式乘法逆，注意这里求出的是前a.size()项\n\t\tint n=a.size();\n\t\tif(n==1) return Poly{(int)qpow(a[0],P-2)};\n\t\tPoly b=a; b.resize((n+1)/2); b=Inv(b);\n\t\tint R=Init(n<<1);\n\t\ta.resize(R),b.resize(R);\n\t\tNTT(R,a,1),NTT(R,b,1);\n\t\trep(i,0,R-1) a[i]=(2-1ll*a[i]*b[i]%P+P)*b[i]%P;\n\t\tNTT(R,a,-1);\n\t\ta.resize(n);\n\t\treturn a;\n\t}\n    \n\tPoly operator / (Poly a,Poly b){ // 多项式带余除法\n\t\treverse(a.begin(),a.end()),reverse(b.begin(),b.end());\n\t\tint n=a.size(),m=b.size();\n\t\ta.resize(n-m+1),b.resize(n-m+1),b=Inv(b);\n\t\ta=a*b,a.resize(n-m+1);\n\t\treverse(a.begin(),a.end());\n\t\treturn a;\n\t}\n\tPoly operator % (Poly a,Poly b) { // 多项式取模\n\t\tint n=b.size()-1;\n\t\tif((int)a.size()<=n) return a;\n\t\tPoly t=a/b;\n\t\tif((int)t.size()>n) t.resize(n);\n\t\tt=t*b; t.resize(n); a.resize(n);\n\t\treturn a-t;\n\t}\n\n\tint Quad(int a,int k=0) { // 二次剩余(不是原根法),用于求Sqrt\n\t\tif(a<=1) return a;\n\t\tll x;\n\t\twhile(1) {\n\t\t\tx=1ll*rand()*rand()%P;\n\t\t\tif(qpow((x*x-a+P)%P,(P-1)/2)!=1) break;\n\t\t}\n\t\tll w=(x*x-a+P)%P;\n\t\tll rx=1,ry=0,xx=x,xy=1,tx,ty;\n\t\tint d=(P+1)/2;\n\t\twhile(d) {\n\t\t\tif(d&1) {\n\t\t\t\ttx=(rx*xx+ry*xy%P*w)%P,ty=(rx*xy+ry*xx)%P;\n\t\t\t\trx=tx,ry=ty;\n\t\t\t}\n\t\t\ttx=(xx*xx+xy*xy%P*w)%P,ty=2*xx*xy%P;\n\t\t\txx=tx,xy=ty;\n\t\t\td>>=1;\n\t\t}\n\t\tll res=(rx%P+P)%P;\n\t\tif(k) res=min(res,(P-res)%P);\n\t\treturn res;\n\t}\n\tPoly Sqrt(Poly a){ // 多项式开根号\n\t\tint n=a.size();\n\t\tif(n==1) return Poly{Quad(a[0],1)};\n\t\tPoly b=a; b.resize((n+1)/2),b=Sqrt(b),b.resize(n);\n\t\tPoly c=Inv(b);\n\t\tint R=Init(n*2);\n\t\ta.resize(R),c.resize(R);\n\t\tNTT(R,a,1),NTT(R,c,1);\n\t\trep(i,0,R-1) a[i]=1ll*a[i]*c[i]%P;\n\t\tNTT(R,a,-1);\n\t\ta.resize(n);\n\t\trep(i,0,n-1) a[i]=1ll*(P+1)/2*(a[i]+b[i])%P;\n\t\treturn a;\n\t}\n\n\tPoly Deri(Poly a){ //求导\n\t\trep(i,1,a.size()-1) a[i-1]=1ll*i*a[i]%P;\n\t\ta.pop_back();\n\t\treturn a;\n\t}\n\tPoly IDeri(Poly a) { //原函数\n\t\ta.pb(0);\n\t\tdrep(i,a.size()-1,1) a[i]=1ll*a[i-1]*Mod_Inv[i]%P;\n\t\ta[0]=0;\n\t\treturn a;\n\t}\n    \n\tPoly Ln(Poly a){ // 多项式求Ln\n\t\tint n=a.size();\n\t\ta=Inv(a)*Deri(a),a.resize(n-1);\n\t\treturn IDeri(a);\n\t}\n\tPoly Exp(Poly a){ // 多项式Exp\n\t\tint n=a.size();\n\t\tif(n==1) return Poly{1};\n\t\tPoly b=a; b.resize((n+1)/2),b=Exp(b); b.resize(n);\n\t\tPoly c=Ln(b);\n\t\trep(i,0,n-1) c[i]=a[i]-c[i],Mod2(c[i]);\n\t\tc[0]++,b=b*c;\n\t\tb.resize(n);\n\t\treturn b;\n\t}\n\tPoly Pow(Poly x,int k) { // 多项式k次幂\n\t\tx=Ln(x);\n\t\trep(i,0,x.size()-1) x[i]=1ll*x[i]*k%P;\n\t\treturn Exp(x);\n\t}\n\n\tPoly EvaluateTemp[N<<1];\n\tvoid EvaluateSolve1(Poly &a,int l,int r,int p=1){\n\t\tif(l==r) { EvaluateTemp[p]=Poly{P-a[l],1}; return; } \n\t\tint mid=(l+r)>>1;\n\t\tEvaluateSolve1(a,l,mid,p<<1),EvaluateSolve1(a,mid+1,r,p<<1|1);\n\t\tEvaluateTemp[p]=EvaluateTemp[p<<1]*EvaluateTemp[p<<1|1];\n\t}\n\tvoid EvaluateSolve2(Poly &res,Poly F,int l,int r,int p=1){\n\t\tif(l==r){ res[l]=F[0]; return; }\n\t\tint mid=(l+r)>>1;\n\t\tEvaluateSolve2(res,F%EvaluateTemp[p<<1],l,mid,p<<1);\n\t\tEvaluateSolve2(res,F%EvaluateTemp[p<<1|1],mid+1,r,p<<1|1);\n\t}\n\tPoly Evaluate(Poly a,Poly b,int flag=1){ // 多项式多点求值\n\t\tPoly res(b.size());\n\t\tif(flag) EvaluateSolve1(b,0,b.size()-1);\n\t\tEvaluateSolve2(res,a,0,b.size()-1);\n\t\treturn res;\n\t}\n\tPoly InterpolationSolve(Poly &T,int l,int r,int p=1){ \n\t\tif(l==r) return Poly{T[l]};\n\t\tint mid=(l+r)>>1;\n\t\treturn InterpolationSolve(T,l,mid,p<<1)*EvaluateTemp[p<<1|1]+InterpolationSolve(T,mid+1,r,p<<1|1)*EvaluateTemp[p<<1];\n\t}\n\tPoly Interpolation(Poly X,Poly Y){ // 多项式快速插值\n\t\tint n=X.size();\n\t\tEvaluateSolve1(X,0,n-1);\n\t\tPoly T=Evaluate(Deri(EvaluateTemp[1]),X,0);\n\t\trep(i,0,n-1) T[i]=Y[i]*qpow(T[i])%P;\n\t\treturn InterpolationSolve(T,0,n-1);\n\t}\n\n\tvoid FFPTrans(Poly &a,int f){ // FFP<->EGF\n\t\tint n=a.size();\n\t\tPoly b(n);\n\t\tif(f==1) rep(i,0,n-1) b[i]=FInv[i];\n\t\telse rep(i,0,n-1) b[i]=(i&1)?P-FInv[i]:FInv[i];\n\t\ta=a*b; a.resize(n);\n\t}\n\tPoly FFPMul(Poly a,Poly b){ // FFP卷积\n\t\tint n=a.size()+b.size()-1;\n\t\ta.resize(n),b.resize(n);\n\t\tFFPTrans(a,1),FFPTrans(b,1);\n\t\trep(i,0,n-1) a[i]=1ll*a[i]*b[i]%P*Fac[i]%P;\n\t\tFFPTrans(a,-1);\n\t\treturn a;\n\t}\n\tPoly PolyToFFP(Poly F){ // 多项式转FFP\n\t\tint n=F.size();\n\t\tPoly G(n);\n\t\trep(i,0,n-1) G[i]=i;\n\t\tG=Evaluate(F,G);\n\t\trep(i,0,n-1) F[i]=1ll*G[i]*FInv[i]%P;\n\t\tFFPTrans(F,-1);\n\t\treturn F;\n\t}\n\tPoly FFPToPoly(Poly F){ // FFP转多项式\n\t\tFFPTrans(F,1);\n\t\tint n=F.size(); Poly X(n);\n\t\trep(i,0,n-1) X[i]=i,F[i]=1ll*F[i]*Fac[i]%P;\n\t\tEvaluateSolve1(X,0,n-1);\n\t\trep(i,0,n-1) {\n\t\t\tF[i]=1ll*F[i]*FInv[i]%P*FInv[n-i-1]%P;\n\t\t\tif((n-i-1)&1) F[i]=(P-F[i])%P;\n\t\t}\n\t\treturn InterpolationSolve(F,0,n-1);\n\t}\n}\nusing namespace Polynomial;\n\n\nint main(){\n\tint n=rd();\n\tInit_w();\n\tPoly F(n);\n\trep(i,0,n-1) F[i]=rd();\n\tShow(PolyToFFP(F));\n}\n\n\n```\n\n$$ \\ $$\n\n$$  \\ $$\n\n$$ \\ $$\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「余姚中学 2019 联测 Day 4」随机除法","url":"/articles/2020/06/08/3f20d38a.html","content":"# 「余姚中学 2019 联测 Day 4」随机除法\n\n好题，难就难在转移的高位前缀和\n\n首先是一个浅显的$\\text{dp}$状态，令$n=\\Pi prime_i^{c_i}$\n\n则状态只跟$\\{c_i\\}$有关，这是一个可重集合，强制定义$c_i\\ge c_{i-1}$最小表示出所有不同状态\n\n搜索一下$\\text{dp}$状态，发现只有$170000$左右的状态数\n\n直接枚举因数转移复杂度显然是升天的，直接枚举子集状态转移复杂度也很高，并且不好确定系数\n\n所以用一个高位前缀和处理优化**枚举因数的转移**\n\n再说一遍，是高位前缀和**枚举因数的转移**，不同的因数可能对应同一个状态\n\n常见的高位前缀和是$dp_{i,S}=dp_{i-1,S}+dp_{i,S-\\{S_i\\} }$\n\n转移具有单调性，对于状态排序之后，定义辅助数组$dp_{i,j}$表示对于$i$这个状态\n\n它的子集(注意这个子集是未排序的)中和它不同的最低位置$\\ge j$的总和\n\n计算高位前缀和时，每次转移只会对于一个位置改变\n\n枚举状态时，取得位置是$j$，调用时需要排序\n\n而排完序之后$j$可能会后移，所以需要定义成$\\ge j$的，否则会算多\n\n比如转移$(1,1,1)\\leftarrow (0,1,1),(1,0,1),(1,1,0)$\n\n如果定义成$\\le j$的状态，三种状态转移之后都变成$(1,1,0)$\n\n原先在这个状态里的三个位置编号是$(0,1,2)$\n\n如果都去$(1,1,0)$这个状态里转移过来，原先$(0,1,2)$对应的下标位置改变，变成\n\n$(1,2,0)$\n\n$(0,2,1)$\n\n$(0,1,2)$\n\n我们访问的时候访问的应该是子状态中不同位置$\\le j$的总和\n\n而从这个下标改变的状态里转移过来时，原先$>j$的下标被移移动进$\\le j$的范围\n\n再转移就错了\n\n所以正确定义状态之后就可以高位前缀和了\n\n存储和访问状态可以用$\\text{Hash,Trie,int128}$三种方法存储，$\\text{int128}$真香啊\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef __int128 Node;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n#define Mod1(x) ((x>=P)&&(x-=P))\n\nconst int N=180000,P=1e9+7;\n\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res; \n}\nNode Max,st[N];\nint m,a[100],cnt,dp[N][20],F[N],pri[]={0,2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79};\nchar str[30];\n\nint Find(Node s){ return lower_bound(st+1,st+cnt+1,s)-st; }\nvoid Load(Node s){\n\trep(i,1,20) a[i]=0;\n\tfor(int i=1;i<=20 && s>1; ++i) while(s%pri[i]==0) s=s/pri[i],a[i]++;\n}\nvoid dfs(int p,int lst,Node s) { \n\tst[++cnt]=s;\n\trep(i,1,lst) {\n\t\tif((s*=pri[p])>Max) return;\n\t\tdfs(p+1,i,s);\n\t}\n}\n\n\nint main(){\n\tfreopen(\"div.in\",\"r\",stdin),freopen(\"div.out\",\"w\",stdout);\n\tMax=1e12,Max=Max*Max;\n\tdfs(1,100,1);\n\tfprintf(stderr,\"States Number = %d\\n\",cnt);\n\tsort(st+1,st+cnt+1);\n\trep(i,2,cnt) {\n\t\tNode now; Load(now=st[i]);\n\t\tint c=1;\n\t\trep(i,1,18) c=1ll*c*(a[i]+1)%P;\n\t\tdrep(j,18,0) {\n\t\t\tif(!a[j]) dp[i][j]=dp[i][j+1];\n\t\t\telse {\n\t\t\t\tint k=j;\n\t\t\t\twhile(k>1 && a[k-1]==a[k]) --k;\n\t\t\t\tint p=Find(now/pri[j]);\n\t\t\t\tdrep(d,j,k) {\n\t\t\t\t\tdp[i][d]=dp[i][d+1]+dp[p][d];\n\t\t\t\t\tMod1(dp[i][d]);\n\t\t\t\t}\n\t\t\t\tj=k;\n\t\t\t}\n\t\t}\n\t\tF[i]=(dp[i][1]+c)*qpow(c-1)%P;\n\t\trep(j,1,18) dp[i][j]+=F[i],Mod1(dp[i][j]);\n\t}\n\twhile(~scanf(\"%s%d\",str,&m)) {\n\t\tNode n=0;\n\t\tfor(int i=0;str[i];++i) n=n*10+(str[i]-'0');\n\t\trep(i,1,m) {\n\t\t\tint x;scanf(\"%d\",&x); a[i]=0;\n\t\t\twhile(n%x==0) n=n/x,a[i]++;\n\t\t}\n\t\tsort(a+1,a+m+1,greater <int> ());\n\t\tn=1;\n\t\trep(i,1,m) rep(j,1,a[i]) n=n*pri[i];\n\t\tprintf(\"%d\\n\",F[Find(n)]);\n\t}\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"类欧几里得","url":"/articles/2020/06/05/e2a238e9.html","content":"# 类欧几里得\n\n对于给定的元$a,b,c,n$\n\n设$f(i)=\\lfloor\\frac{ai+b} {c}\\rfloor$\n\n求\n\n$$F(a,b,c,n)=\\sum_0^nf(i)$$\n\n$$G(a,b,c,n)=\\sum_0^nf(i)^2$$\n\n$$H(a,b,c,n)=\\sum_0^ni\\cdot f(i)$$\n\n# Part1\n\n\n### $a\\ge c$ 或 $b\\ge c$\n\n$$\\lfloor\\frac{ai+b} {c}\\rfloor=\\lfloor\\frac{(a \\mod c)i+(b \\mod c)} {c}\\rfloor+i\\lfloor \\frac{a} {c}\\rfloor +\\lfloor \\frac{b} {c}\\rfloor $$\n\n$$F(a,b,c,n)=F(a\\mod c,b\\mod c,c,n)+\\frac{n(n+1)\\lfloor\\frac{a} {c}\\rfloor} {2}+(n+1)\\lfloor\\frac{b} {c}\\rfloor$$\n\n### $a<c$ 且 $b<c$\n\n$$F(a,b,c,n) =\\sum_0^n f(i)$$ \n\n$$= \\sum_{i=0}^n\\sum_{j=0}^{f(i)-1} 1  $$\n\n$$= \\sum_{i=0}^n\\sum_{j=0}^{\\infty}[j<f(i)] $$\n\n$$= \\sum_{j=0}^{f(n) -1}\\sum_{i=0}^{n}[j<f(i)] $$\n\n其中\n\n$$[j<\\lfloor\\frac{ai+b} {c}\\rfloor] =[j<\\lceil\\frac{ai+b-c+1} {c}\\rceil]$$\n\n$$=[cj<ai+b-c+1]$$\n\n$$=[ai>cj-b+c-1]$$\n\n$$=[i>\\lfloor\\frac{cj-b+c-1} {a}\\rfloor]$$\n\n$$F(a,b,c,n)= \\sum_{j=0}^{f(n)-1 }\\sum_{i=0}^{n}[i>\\lfloor\\frac{cj-b+c-1} {a}\\rfloor] $$\n\n$$=\\sum_{j=0}^{f(n)-1} n-\\lfloor\\frac{cj-b+c-1} {a}\\rfloor$$\n\n$$F(a,b,c,n)=n\\cdot f(n)-F(c,-b+c-1,a,f(n)-1)$$\n\n每次操作交换了$a,c$然后再次取模，复杂度是$O(\\log n)$\n\n递归边界是$a=0$\n\n-----\n\n## Part2\n\n$G(a,b,c,n)=\\sum_0^nf(i)^2$\n\n### $a\\ge c$ 或 $b\\ge c$\n\n设$\\lfloor \\frac{a} {c}\\rfloor=x,\\lfloor \\frac{b} {c}\\rfloor=y$\n\n$$\\lfloor\\frac{ai+b} {c}\\rfloor^2=(\\lfloor\\frac{(a \\mod c)i+(b \\mod c)} {c}\\rfloor+ix+y)^2$$\n\n$$=\\lfloor\\frac{(a \\mod c)i+(b \\mod c)} {c}\\rfloor^2+2\\lfloor\\frac{(a \\mod c)i+(b \\mod c)} {c}\\rfloor\\cdot (ix+y)+(ix+y)^2 $$\n\n$$G(a,b,c,n)=$$\n\n$$G(a\\mod c,b\\mod c,c,n)+2x H(a\\mod c,b\\mod c,n)+2y F(a\\mod c,b\\mod c,c,n)$$\n\n$$+\\frac{n(n+1)(2n+1)x^2} {6}+(n+1)y^2+n(n+1)xy$$\n\n\n\n\n\n### $a<c$ 且 $b<c$\n\n\n$$G(a,b,c,n) =\\sum_0^nf(i)^2$$ \n\n$$= 2 \\sum_{i=0}^n\\frac{f(i)(f(i)-1)} {2}+\\frac{f(i)} {2} $$\n\n$$=2 \\sum_{i=0}^n\\sum_{j=0}^{f(i)-1}j+\\frac{1} {2}$$\n\n$$= 2\\sum_{i=0}^n\\sum_{j=0}^{\\infty}(j+\\frac{1} {2})[j<f(i)] $$\n\n$$= 2\\sum_{j=0}^{f(n)-1}\\sum_{i=0}^{n}(j+\\frac{1} {2})[j<f(i)] $$\n\n$$=2 \\sum_{j=0}^{f(n)-1}\\sum_{i=0}^{n}(j+\\frac{1} {2})[i>\\lfloor\\frac{cj-b+c-1} {a}\\rfloor] $$\n\n$$=2\\sum_{j=0}^{f(n)-1} (j+\\frac{1} {2})(n-\\lfloor\\frac{cj-b+c-1} {a}\\rfloor)$$\n\n$$G(a,b,c,n)=nf(n)^2-2H(c,-b+c-1,a,f(n)-1)-F(c,-b+c-1,a,f(n)-1)$$\n\n\n\n\n\n## Part3\n\n$H(a,b,c,n)=\\sum_0^ni\\cdot f(i)$\n\n\n\n### $a\\ge c$ 或 $b\\ge c$\n\n$$i\\cdot \\lfloor\\frac{ai+b} {c}\\rfloor=i\\cdot (\\lfloor\\frac{(a \\mod c)i+(b \\mod c)} {c}\\rfloor+i\\lfloor \\frac{a} {c}\\rfloor +\\lfloor \\frac{b} {c}\\rfloor) $$\n\n$$i\\cdot \\lfloor\\frac{ai+b} {c}\\rfloor=i\\cdot \\lfloor\\frac{(a \\mod c)i+(b \\mod c)} {c}\\rfloor+i^2\\lfloor \\frac{a} {c}\\rfloor +i\\lfloor \\frac{b} {c}\\rfloor$$\n\n$$H(a,b,c,n)=H(a\\mod c,b\\mod c,c,n)+\\frac{n(n+1)(2n+1)\\lfloor\\frac{a} {c}\\rfloor} {6}+\\frac{n(n+1)\\lfloor\\frac{b} {c}\\rfloor} {2}$$\n\n### $a<c$ 且 $b<c$\n\n$$H(a,b,c,n)=\\sum_i^n i\\cdot f(i)$$\n\n\n$$= \\sum_{i=0}^n\\sum_{j=0}^{f(i)-1} i  $$\n\n\n$$= \\sum_{j=0}^{f(n) -1}\\sum_{i=0}^{n}i\\cdot [j<\\lfloor\\frac{ai+b} {c}\\rfloor] $$\n\n$$=\\sum_0^{f(n)-1}\\sum_{i=0}^n i\\cdot [i>\\lfloor\\frac{cj-b+c-1} {a}\\rfloor]$$\n\n设$f'(i)=\\lfloor\\frac{ci-b+c-1} {a}\\rfloor$\n\n$$H(a,b,c,n)= \\sum_{j=0}^{f(n)-1 }\\sum_{i=f'(j)+1}^{n}i $$\n\n$$= \\sum_{j=0}^{f(n)-1 }\\frac{(f'(j)+1+n)(n-f'(j))} {2} $$\n\n$$= \\sum_{j=0}^{f(n)-1 } \\frac{-f'(j)^2-f'(j)+n(n+1)} {2} $$\n\n$H(a,b,c,n)=\\frac{f(n)n(n+1)-G(c,-b+c-1,a,f(n)-1)-F(c,-b+c-1,a,f(n)-1)} {2}$\n\n\n\n\n\n\n\n### Tip:\n\n这个多个函数的情况，如果直接递归写复杂度极高\n\n所以需要把访问到的所有状态存下来递推，就能保证复杂度$O(\\log n)$\n\n[模板题传送门](https://www.luogu.com.cn/record/34149443)\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n\n#define reg register\ntypedef long long ll;\n#define rep(i,a,b) for(reg int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(reg int i=a,i##end=b;i>=i##end;--i)\n\n#define pb push_back\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\nint rd(){\n\tint s=0;\n\tint f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=1010,P=998244353;\n\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nconst ll Inv2=(P+1)/2,Inv6=qpow(6);\n\n//ll F(ll a,ll b,ll c,ll n);\n//ll G(ll a,ll b,ll c,ll n);\n//ll H(ll a,ll b,ll c,ll n);\n\nll D2(ll n){\n\tn%=P;\n\treturn n*(n+1)/2%P;\n}\nll D3(ll n){\n\tn%=P;\n\treturn n*(n+1)%P*(2*n+1)%P*Inv6%P;\n}\n\nll sa[N],sb[N],sc[N],sn[N];\nll F[N],G[N],H[N];\nint cnt;\n\nvoid PreCalc(ll a,ll b,ll c,ll n){\n\tsa[++cnt]=a; sb[cnt]=b; \n\tsc[cnt]=c; sn[cnt]=n;\n\tif(a==0) return;\n\tif(a>=c || b>=c) PreCalc(a%c,b%c,c,n);\n\telse {\n\t\tll t=(a*n+b)/c;\n\t\tPreCalc(c,-b+c-1,a,t-1);\n\t}\n}\n\n\n/*ll F(ll a,ll b,ll c,ll n){\n\tif(a==0) return (b/c)%P*((n+1)%P)%P;\n\tif(a>=c || b>=c) {\n\t\tll ans=(F(a%c,b%c,c,n)+D2(n)*(a/c)%P+(n+1)%P*(b/c))%P;\n\t\tans=(ans%P+P)%P;\n\t\treturn ans;\n\t}\n\tll t=(a*n+b)/c;\n\tll ans=t%P*n%P-F(c,-b+c-1,a,t-1);\n\tans=(ans%P+P)%P;\n\treturn ans;\n}\n\nll G(ll a,ll b,ll c,ll n){\n\tif(a==0) return (b/c)*(b/c)%P*(n+1)%P;\n\tif(a>=c || b>=c) {\n\t\tll x=a/c%P,y=b/c%P;\n\t\tll ans=(G(a%c,b%c,c,n)+2*x*H(a%c,b%c,c,n)+2*y*F(a%c,b%c,c,n))%P;\n\t\tans=(ans+D3(n)*x%P*x%P+(n+1)%P*y%P*y%P+2*D2(n)*x%P*y%P)%P;\n\t\tans=(ans%P+P)%P;\n\t\treturn ans;\n\t}\n\tll t=(a*n+b)/c;\n\tll ans=(t%P)*(t%P)%P*(n%P)%P-2*H(c,-b+c-1,a,t-1)-F(c,-b+c-1,a,t-1)%P;\n\tans=(ans%P+P)%P;\n\treturn ans;\n}\n\nll H(ll a,ll b,ll c,ll n){\n\tif(a==0) return D2(n)%P*(b/c)%P;\n\tif(a>=c || b>=c) {\n\t\tll ans=(H(a%c,b%c,c,n)+(a/c)*D3(n)+D2(n)*(b/c))%P;\n\t\tans=(ans%P+P)%P;\n\t\treturn ans;\n\t}\n\tll t=(a*n+b)/c;\n\tll ans=(t%P*D2(n)%P*2%P-G(c,-b+c-1,a,t-1)-F(c,-b+c-1,a,t-1))%P;\n\tans=(ans*Inv2%P+P)%P;\n\treturn ans;\n}*/\n\nint main(){\n\trep(kase,1,rd()) {\n\t\tint n=rd(),a=rd(),b=rd(),c=rd();\n\t\t\n\t\tcnt=0;\n\t\tPreCalc(a,b,c,n);\n\t\tF[cnt+1]=G[cnt+1]=H[cnt+1]=0;\n\n\t\tdrep(i,cnt,1) {\n\t\t\tll a=sa[i],b=sb[i],c=sc[i],n=sn[i];\n\t\t\tif(a==0) F[i]=(b/c)%P*((n+1)%P)%P;\n\t\t\telse if(a>=c || b>=c) {\n\t\t\t\tll ans=(F[i+1]+D2(n)*(a/c)%P+(n+1)%P*(b/c))%P;\n\t\t\t\tans=(ans%P+P)%P;\n\t\t\t\tF[i]=ans;\n\t\t\t} else {\n\t\t\t\tll t=(a*n+b)/c;\n\t\t\t\tll ans=t%P*n%P-F[i+1];\n\t\t\t\tans=(ans%P+P)%P;\n\t\t\t\tF[i]=ans;\n\t\t\t}\n\n\t\t\tif(a==0) G[i]=(b/c)*(b/c)%P*(n+1)%P;\n\t\t\telse if(a>=c || b>=c) {\n\t\t\t\tll x=a/c%P,y=b/c%P;\n\t\t\t\tll ans=(G[i+1]+2*x*H[i+1]+2*y*F[i+1])%P;\n\t\t\t\tans=(ans+D3(n)*x%P*x%P+(n+1)%P*y%P*y%P+2*D2(n)*x%P*y%P)%P;\n\t\t\t\tans=(ans%P+P)%P;\n\t\t\t\tG[i]=ans;\n\t\t\t} else {\n\t\t\t\tll t=(a*n+b)/c;\n\t\t\t\tll ans=(t%P)*(t%P)%P*(n%P)%P-2*H[i+1]-F[i+1];\n\t\t\t\tans=(ans%P+P)%P;\n\t\t\t\tG[i]=ans;\n\t\t\t}\n\n\t\t\tif(a==0) H[i]=D2(n)%P*(b/c)%P;\n\t\t\tif(a>=c || b>=c) {\n\t\t\t\tll ans=(H[i+1]+(a/c)*D3(n)+D2(n)*(b/c))%P;\n\t\t\t\tans=(ans%P+P)%P;\n\t\t\t\tH[i]=ans;\n\t\t\t} else {\n\t\t\t\tll t=(a*n+b)/c;\n\t\t\t\tll ans=(t%P*D2(n)%P*2%P-G[i+1]-F[i+1])%P;\n\t\t\t\tans=(ans*Inv2%P+P)%P;\n\t\t\t\tH[i]=ans;\n\t\t\t}\n\t\t}\n\t\tprintf(\"%lld %lld %lld\\n\",F[1],G[1],H[1]);\n\t}\n}\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"[SweetFruits TopCoder - 12141](Matrix-Tree)","url":"/articles/2020/06/04/58ead950.html","content":"# [SweetFruits TopCoder - 12141](https://vjudge.net/problem/TopCoder-12141)(Matrix-Tree)\n\n问题看起来很复杂，不可写，所以先考虑分解一下\n\n假设最后生效的点集为$V$，那么答案只和$\\sum sweetness[V_i]$和$|V|$有关\n\n所以可以考虑对于每一种$|V|$，先预处理出方案数\n\n得知每一种$|V|$的方案数之后，可以用$\\text{meet in the middle}$法枚举得到$\\sum sweetness[V_i]\\leq maxsweetness$的方案数\n\n方案数是有限制的生成树个数，所以考虑用$\\text{Matrix-Tree}$求\n\n限定有$a$个点生效，$b$个点不生效，$c$个点是$-1$\n\n那么可能出现的边是$a-a,a-c,b-c$三种\n\n但是我们无法保证$a$中的点一定生效，所以可以用容斥/二项式反演得到\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n\n#define reg register\ntypedef long long ll;\n#define rep(i,a,b) for(reg int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(reg int i=a,i##end=b;i>=i##end;--i)\n\n#define pb push_back\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\nint rd(){\n\tint s=0;\n\tint f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=50,P=1e9+7;\n\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nint n,m;\n\nstruct Mat{\n\tint a[N][N];\n\tMat(){ memset(a,0,sizeof a); }\n\tint Det(int n){  // 用于Matrix-Tree的\n\t\tstatic int G[N][N];\n\t\trep(i,1,n) rep(j,1,n) G[i][j]=a[i][j];\n\t\tint res=1;\n\t\trep(i,1,n) {\n\t\t\tif(!G[i][i]) rep(j,i+1,n) if(G[j][i]){ res=P-res; swap(G[i],G[j]); break; }\n\t\t\tif(!G[i][i]) continue;\n\t\t\tll Inv=qpow(a[i][i]);\n\t\t\trep(j,i+1,n) {\n\t\t\t\tll t=a[j][i]*Inv%P;\n\t\t\t\trep(k,i,n) a[j][k]=(a[j][k]-1ll*a[i][k]*t%P+P)%P;\n\t\t\t}\n\t\t}\n\t\trep(i,1,n) res=1ll*res*a[i][i]%P;\n\t\treturn res;\n\t}\n};\n\nint w[N],G[N][N],C[N][N];\nvoid Init(){\n\trep(i,0,N-1) rep(j,C[i][0]=1,i) C[i][j]=(C[i-1][j-1]+C[i-1][j])%P;\n\trep(i,0,n) {\n\t\tMat T;\n\t\trep(j,1,m) { // -1\n\t\t\trep(k,1,n+m) T.a[j][k]=-1;\n\t\t\tT.a[j][j]=n+m-1;\n\t\t}\n\t\trep(j,m+1,m+i) { // 生效\n\t\t\trep(k,1,m+i) if(j!=k) T.a[j][k]=-1;\n\t\t\tT.a[j][j]=m+i-1;\n\t\t}\n\t\trep(j,m+i+1,m+n) { // 不生效\n\t\t\trep(k,1,m) T.a[j][k]=-1;\n\t\t\tT.a[j][j]=m;\n\t\t}\n\t\tw[i]=T.Det(n+m-1);\n\t}\n\trep(i,0,n) rep(j,0,i-1) w[i]=(w[i]-1ll*C[i][j]*w[j]%P+P)%P; // 容斥/二项式反演\n}\n\nint val[N];\nvector <int> st[N/2];\n\n\nint Meet_In_The_Middle(int Max){\n\tint ans=0,mid=n/2;\n\trep(i,0,mid) st[i].clear();\n\trep(S,0,(1<<mid)-1) {\n\t\tint c=0,s=0;\n\t\trep(i,0,mid-1) if(S&(1<<i)) s+=val[i],c++;\n\t\tif(s<=Max) st[c].pb(s);\n\t}\n\trep(i,0,mid) sort(st[i].begin(),st[i].end());\n\trep(S,0,(1<<(n-mid))-1) {\n\t\tint c=0,s=0;\n\t\trep(i,0,n-mid-1) if(S&(1<<i)) s+=val[i+mid],c++;\n\t\tif(s>Max) continue;\n\t\trep(j,0,mid) {\n\t\t\tint x=upper_bound(st[j].begin(),st[j].end(),Max-s)-st[j].begin();\n\t\t\tif(x) ans=(ans+1ll*x*w[c+j])%P;\n\t\t}\n\t}\n\treturn ans;\n}\n\nclass SweetFruits {\npublic:\n\tint countTrees(vector <int> Val, int Max) {\n\t\tsort(Val.begin(),Val.end(),greater <int> ());\n\t\tm=0; while(Val.size() && *Val.rbegin()==-1) m++,Val.pop_back();\n\t\tn=Val.size();\n\t\trep(i,0,n-1) val[i]=Val[i];\n\t\tInit();\n\t\treturn Meet_In_The_Middle(Max);\n\t}\n};\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n","tags":["Atcoder"],"categories":["题解"]},{"title":"[CosmicBlocks - TopCoder- 12034] (网络流)","url":"/articles/2020/06/04/79697e32.html","content":"# [CosmicBlocks - TopCoder- 12034](https://vjudge.net/problem/TopCoder-12034) (网络流)\n\n注意题目定义的同构是存在不同的颜色覆盖关系，而不是存在不同的排列顺序\n\n所以先枚举每一层放了那些颜色，再枚举那些颜色之间有覆盖\n\n每一层的颜色划分数很少，最多可能同时存在的覆盖关系是$9$种，枚举复杂度最多是$2^9$，然后可以$2^n\\cdot n\\ \\text{dp}$出拓扑序列的个数\n\n问题在于如何快速又方便地判断对于**当前情况是否存在方案**\n\n一种方法是**上下界网络流**\n\n按照层之间的关系，覆盖关系就连$[1,+\\infty)$的边，同时源点向$1$层的点连$[0,+\\infty)$的边，每个点都向汇点连$[0,\\infty)$的边\n\n注意由于要限制流过每个点的流量，每个点要拆成两个点中间连$[num_i,num_i]$的边\n\n最后判断一下**有源汇可行流**即可\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define reg register\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\n#define pb push_back\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\nint rd(){\n\tint s=0;\n\tint f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\n\n\nstatic const int N=20,INF=1e8+10;\nint n,m,ans,L,R;\nint cnt[N],id[N];\nvector <int> G[N];\nint GS[N];\nvector <int> Layer[N];\n\nint Calc_DAG() { // 计算拓扑序列的个数\n\tstatic int dp[1<<6];\n\tint A=(1<<n)-1;\n\trep(i,0,A) dp[i]=0;\n\tdp[0]=1;\n\trep(S,0,A-1) rep(i,0,n-1) if((~S&(1<<i)) && (S&GS[i+1])==GS[i+1]) dp[S|(1<<i)]+=dp[S];\n\treturn dp[A];\n}\n\nint ind[N];\nstruct Limited_Flow{ // 有源汇可行流\n\tstatic const int M=300;\n\tint S,T;\n\tstruct Edge{\n\t\tint to,nxt,w;\n\t} e[M];\n\tint head[N],ecnt;\n\tvoid clear(){\n\t\trep(i,1,n*2+4) head[i]=0;\n\t\tecnt=0;\n\t}\n\t#define erep(u,i) for(int i=head[u];i;i=e[i].nxt)\n\tvoid AddEdge(int u,int v,int w) { e[ecnt]=(Edge){v,head[u],w},head[u]=ecnt++; } \n\tvoid Link(int u,int v,int w){ AddEdge(u,v,w),AddEdge(v,u,0); }\n\tint dis[N];\n\n\tint Bfs(){\n\t\tstatic queue <int> que;\n\t\trep(i,1,T) dis[i]=INF; dis[S]=0,que.push(S);\n\t\twhile(!que.empty()) {\n\t\t\tint u=que.front(); que.pop();\n\t\t\terep(u,i) {\n\t\t\t\tint v=e[i].to,w=e[i].w;\n\t\t\t\tif(!w || dis[v]<=dis[u]+1) continue;\n\t\t\t\tdis[v]=dis[u]+1,que.push(v);\n\t\t\t}\n\t\t}\n\t\treturn dis[T]<INF;\n\t}\n\tint Dfs(int u,int flowin){\n\t\tif(u==T) return flowin;\n\t\tint flowout=0;\n\t\terep(u,i) {\n\t\t\tint v=e[i].to,w=e[i].w;\n\t\t\tif(!w || dis[v]!=dis[u]+1) continue;\n\t\t\tint t=Dfs(v,min(flowin-flowout,w));\n\t\t\te[i].w-=t,e[i^1].w+=t,flowout+=t;\n\t\t\tif(flowin==flowout) break;\n\t\t}\n\t\tif(!flowout) dis[u]=0;\n\t\treturn flowout;\n\t}\n\tint Dinic(){\n\t\tint ans=0;\n\t\twhile(Bfs()) ans+=Dfs(S,INF);\n\t\treturn ans;\n\t}\n\tint Check(){\n\t\terep(S,i) if(e[i].w) return 0;\n\t\terep(T,i) if(e[i^1].w) return 0;\n\t\treturn 1;\n\t}\n} Flow;\n\nvoid Extend_Edge(int u,int v,int L,int R){\n\tind[u]-=L,ind[v]+=L;\n\tFlow.Link(u,v,R-L);\n}\n\nint Check(){\n\trep(i,1,n*2+4) ind[i]=0;\n\tFlow.clear();\n\trep(i,1,n) Extend_Edge(i*2-1,i*2,cnt[i],cnt[i]);\n\trep(i,1,n) if(id[i]==1) Extend_Edge(n*2+1,i*2-1,cnt[i],cnt[i]);\n\trep(u,1,n) for(int v:G[u]) Extend_Edge(u*2,v*2-1,1,INF);\n\trep(i,1,n) Extend_Edge(i*2,n*2+2,0,INF);\n\tExtend_Edge(n*2+2,n*2+1,0,INF);\n\n\trep(i,1,n*2+2) {\n\t\tif(ind[i]>0) Flow.Link(n*2+3,i,ind[i]);\n\t\tif(ind[i]<0) Flow.Link(i,n*2+4,-ind[i]);\n\t}\n\tFlow.S=n*2+3,Flow.T=n*2+4;\n\n\tFlow.Dinic();\n\treturn Flow.Check();\n}\n\nvoid Dfs_GetDAG(int p) { // dfs枚举覆盖关系\n\tif(p==n+1) {\n\t\tint Ways=Calc_DAG();\n\t\tif(Ways<L || Ways>R) return;\n\t\tans+=Check();\n\t\treturn;\n\t}\n\tif(id[p]==m) return Dfs_GetDAG(p+1);\n\tint n=Layer[id[p]+1].size();\n\trep(S,0,(1<<n)-1) {\n\t\trep(i,0,n-1) if(S&(1<<i)) G[p].pb(Layer[id[p]+1][i]),GS[p]|=1<<(Layer[id[p]+1][i]-1);\n\t\tDfs_GetDAG(p+1);\n\t\tG[p].clear(),GS[p]=0;\n\t}\n}\n\nvoid Dfs_Getlayer(int num,int fir,int chosennumber){ // dfs枚举层的情况\n\tif(chosennumber==n) {\n\t\tm=num;\n\t\trep(i,1,m) Layer[i].clear();\n\t\trep(i,1,n) Layer[id[i]].pb(i);\n\t\tDfs_GetDAG(1);\n\t\treturn;\n\t}\n\trep(i,fir,n) if(!id[i]) {\n\t\tid[i]=num;\n\t\tDfs_Getlayer(num,i+1,chosennumber+1);\n\t\tid[i]=0;\n\t}\n\tif(fir!=1) Dfs_Getlayer(num+1,1,chosennumber);\n}\n\nclass CosmicBlocks {\npublic:\n\tint getNumOrders(vector <int> a, int Min, int Max) {\n\t\tL=Min,R=Max;\n\t\tn=a.size(),ans=0; rep(i,0,n-1) cnt[i+1]=a[i];\n\t\tDfs_Getlayer(1,1,0);\n\t\treturn ans;\n\t}\n};\n\n//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!\n\n```\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"[BZOJ1852] [MexicoOI06]最长不下降序列(贪心)","url":"/articles/2020/06/02/f85684e1.html","content":"# [BZOJ1852] [MexicoOI06]最长不下降序列(贪心)\n\n考虑如下贪心\n\n（我将问题反过来考虑，也就是要满足$A_i > \\max_{j=1}^{j < i} {B_j}$）\n\n首先对于读入的$(A,B)$，按照$B$的值递增排序\n\n**(选出的答案序列不一定是其中一个有序的子序列)**\n\n答案序列存在若干个$B$递增的位置，设它们是$\\{a_i\\},a_{i-1}<a_i$\n\n合法的递增序列需要满足的限制是$A_{a_i}>B_{a_{i-1} }$\n\n考虑剩下的部分即$j\\in[a_{i-1}+1,a_i-1]$，那么这些点放在$a_i$后面一定是最优的(因为此时不会改变最大的$B$)，此时限制它们的$B$就是$B_{a_i}$\n\n即这一部分中满足$A_j>B_{a_i}$的$j$均可以选出来\n\n为了便于表示，设$C(l,r)=|\\{i|i\\in[l,r],A_i>B_{r+1} \\}|$，可以通过一个主席树维护\n\n-------------------------------\n\n定义$dp_i$表示当前以$i$为最大的$B$的答案，特别的，$dp_0$表示序列为空$A_0=B_0=-\\infty$\n\n枚举每个$i$进行转移\n\n朴素的转移就是可以枚举上一个位置$j$，$O(n^2)$转移\n\n需要找到前面第一个能把$i$接上去的$j$即可，即第一个$B_r<A_i(j\\ge 0)$的位置，那么合法的决策位置就是$[0,r]$\n\n则$dp_i=\\max_0^r\\{dp_j+1+C(j+1,i-1)\\}$\n\n设最优决策点为$k\\in[0,r]$，影响最优决策点位置的有两个方面\n\n从$[j+1,i-1]$这一段点考虑，$j$越小时，就会有越多的点对被$B_i$限制，也就是说$j$越大，对于中间这一段来说越优\n\n但是从$dp_j$的角度考虑，并不是$j$越大越好，因为可能存在一个$A_j$特别小限制了前面递增点列的选择\n\n>  推论：如果前面存在一个$A_j>B_i$，那么$k\\ge j$\n\n事实上应该说成$dp_j+C(j+1,i-1)\\ge\\forall d\\in[0,j-1],dp_d+C(d+1,i-1)$\n\n综合上面两条来看，如果$A_j>B_i$意味着把它放进递增序列里绝对是优的，因为不会对前面的点产生不良限制\n\n消除了不良限制之后，就满足最优性了\n\n所以发现最优决策点的范围缩小到了$[l=max\\{k|A_k>B_i\\},r]$\n\n发现决策范围内的$C(l+1,i-1)=C(l+2,i-1)=\\cdots=C(r+1,i-1)$\n\n所以$dp_i=\\max_l^r\\{dp_j\\}+C(r+1,i-1)=max_0^r\\{dp_j\\}+C(r+1,i-1)$\n\n所以可以直接维护一个前缀最大值，每次二分找到那个$r$，求出$C(r+1,i-1)$即可\n\n```cpp\nconst int N=2e5+10,K=15;\n \nint n;\n \nstruct Node{\n    int a,b;\n    bool operator < (const Node __) const {\n        return b<__.b;\n    }\n}A[N];\nint h[N],hc;\nint dp[N];\n \nint rt[N*K],s[N*K],ls[N*K],rs[N*K],cnt;\nvoid Add(int p,int pre,int l,int r,int x) {\n    s[p]=s[pre]+1;\n    if(l==r) return;\n    int mid=(l+r)>>1;\n    ls[p]=ls[pre],rs[p]=rs[pre];\n    x<=mid?Add(ls[p]=++cnt,ls[pre],l,mid,x):Add(rs[p]=++cnt,rs[pre],mid+1,r,x);\n}\n \nint Que(int pl,int pr,int l,int r,int ql,int qr) {\n    if(ql>qr) return 0;\n    if(ql==l&&qr==r) return s[pr]-s[pl];\n    int mid=(l+r)>>1;\n    if(qr<=mid) return Que(ls[pl],ls[pr],l,mid,ql,qr);\n    else if(ql>mid) return Que(rs[pl],rs[pr],mid+1,r,ql,qr);\n    else return Que(ls[pl],ls[pr],l,mid,ql,mid)+Que(rs[pl],rs[pr],mid+1,r,mid+1,qr);\n}\n \nint main(){\n    rep(i,1,n=rd()) {\n        A[i].a=rd(),A[i].b=rd();\n        h[++hc]=A[i].a,h[++hc]=A[i].b;\n    }\n    sort(h+1,h+hc+1),hc=unique(h+1,h+hc+1)-h-1;\n    sort(A+1,A+n+1);\n    rep(i,1,n) {\n        A[i].a=lower_bound(h+1,h+hc+1,A[i].a)-h;\n        A[i].b=lower_bound(h+1,h+hc+1,A[i].b)-h;\n        Add(rt[i]=++cnt,rt[i-1],1,hc,A[i].a);\n    }\n    rep(i,1,n) {\n        int l=1,r=i-1,res=0;\n        while(l<=r) {\n            int mid=(l+r)>>1;\n            if(A[mid].b<A[i].a) l=mid+1,res=mid;\n            else r=mid-1;\n        }\n        dp[i]=max(dp[i-1],dp[res]+1+Que(rt[res],rt[i-1],1,hc,A[i].b+1,hc));\n    }\n    int ans=dp[n];\n    printf(\"%d\\n\",ans);\n}\n \n \n \n \n```\n\n\n\n\n\n附：离线做法\n\n```cpp\n#include<cstdio>\n#include<cctype>\n#include<algorithm>\nusing namespace std;\n\n#define reg register\ntypedef long long ll;\n#define rep(i,a,b) for(reg int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(reg int i=a,i##end=b;i>=i##end;--i)\n\nchar IO;\nint rd(){\n\tint s=0,f=0;\n\twhile(!isdigit(IO=getchar())) f|=(IO=='-');\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=2e5+10,K=15;\n\nint n;\nstruct Node{\n\tint a,b;\n\tbool operator < (const Node __)const{ return b<__.b; }\n}A[N];\nstruct Query{\n\tint x,p,id,k;\n\tbool operator < (const Query __)const{ return p<__.p; }\n}Q[N<<1];\n\nint qc,h[N],hc,dp[N];\nint L[N],Ans[N];\n\nint s[N];\nvoid Add(int p,int x){ while(p) s[p]+=x,p-=p&-p; }\nint Que(int p){\n\tint res=0;\n\twhile(p<=hc) res+=s[p],p+=p&-p;\n\treturn res;\n}\n\nint main(){\n\trep(i,1,n=rd()) {\n\t\tA[i].a=rd(),A[i].b=rd();\n\t\th[++hc]=A[i].a,h[++hc]=A[i].b;\n\t}\n\tsort(h+1,h+hc+1),hc=unique(h+1,h+hc+1)-h-1;\n\tsort(A+1,A+n+1);\n\trep(i,1,n) {\n\t\tA[i].a=lower_bound(h+1,h+hc+1,A[i].a)-h;\n\t\tA[i].b=lower_bound(h+1,h+hc+1,A[i].b)-h;\n\t}\n\trep(i,1,n) {\n\t\tint l=1,r=i-1,res=0;\n\t\twhile(l<=r) {\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(A[mid].b<A[i].a) l=mid+1,res=mid;\n\t\t\telse r=mid-1;\n\t\t}\n\t\tL[i]=res;\n\t\tif(i-1>L[i]) Q[++qc]=(Query){A[i].b+1,i-1,i,1},Q[++qc]=(Query){A[i].b+1,L[i],i,-1};\n\t}\n\tsort(Q+1,Q+qc+1);\n\tint p=1;\n\trep(i,0,n) {\n\t\tif(i) Add(A[i].a,1);\n\t\twhile(p<=qc && Q[p].p<=i) Ans[Q[p].id]+=Q[p].k*Que(Q[p].x),p++;\n\t}\n\trep(i,1,n) dp[i]=max(dp[i-1],dp[L[i]]+1+Ans[i]);\n\tint ans=dp[n];\n\tprintf(\"%d\\n\",ans);\n}\n\n```","tags":["default tag"],"categories":["default category"]},{"title":"「SDOI2017」树点涂色(LCT+线段树)","url":"/articles/2020/06/02/1cf68a90.html","content":"# 「SDOI2017」树点涂色(LCT+线段树)\n\n可以发现更新操作就是$\\text{LCT}$的$\\text{Access}$操作，这个操作复杂度是$O(n\\log n)$的\n\n因此，考虑对于每次的$\\text{Access}$操作，维护每个点到根的路径上不同的权值个数\n\n每次$\\text{Access}$操作只设计到合并两个链/断开一条链两种操作，可以通过线段树维护子树修改\n\n那么修改的复杂度就是$O(n\\log^2 n)$\n\n对于二操作，自己模拟一下就知道，就是两个点的答案-2$\\cdot \\text{LCA}$答案+1\n\n实现上有一些细节，就是更新的子树根节点是需要查询得到的\n\n```cpp\nconst int N=1e5+10;\n\nint n,m;\nvector <int> G[N];\nint L[N],R[N],dfn;\nint son[N][2],fa[N],tfa[N][18],dep[N],id[N];\nint s[N<<2],t[N<<2],mi[N];\n\nvoid Upd(int p,int l,int r,int ql,int qr,int x) {\n\tif(ql<=l && r<=qr) {\n\t\tt[p]+=x;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(ql<=mid) Upd(p<<1,l,mid,ql,qr,x);\n\tif(qr>mid) Upd(p<<1|1,mid+1,r,ql,qr,x);\n\ts[p]=max(t[p<<1]+s[p<<1],t[p<<1|1]+s[p<<1|1]);\n}\nint Que(int p,int l,int r,int ql,int qr) {\n\tif(ql<=l && r<=qr) return s[p]+t[p];\n\tint mid=(l+r)>>1,res=-1e9;\n\tif(ql<=mid) cmax(res,Que(p<<1,l,mid,ql,qr));\n\tif(qr>mid) cmax(res,Que(p<<1|1,mid+1,r,ql,qr));\n\treturn res+t[p];\n}\nint Que(int p,int l,int r,int x) {\n\tint res=0;\n\twhile(1) {\n\t\tif(l==r) return res+s[p]+t[p];\n\t\tint mid=(l+r)>>1;\n\t\tres+=t[p];\n\t\tif(x<=mid) p<<=1,r=mid;\n\t\telse p=p<<1|1,l=mid+1;\n\t}\n}\nvoid Build(int p,int l,int r) {\n\tif(l==r) { s[p]=dep[id[l]]+1; return; }\n\tint mid=(l+r)>>1;\n\tBuild(p<<1,l,mid),Build(p<<1|1,mid+1,r);\n\ts[p]=max(s[p<<1],s[p<<1|1]);\n}\n\nint dir(int x){ return son[fa[x]][1]==x; }\nint isroot(int x){ return !fa[x] || (son[fa[x]][0]!=x && son[fa[x]][1]!=x); } \nvoid Up(int p) { mi[p]=son[p][0]?mi[son[p][0]]:p; }\nvoid rotate(int u) {\n\tint f=fa[u],ff=fa[f],d=dir(u);\n\tfa[u]=ff; if(!isroot(f)) son[ff][dir(f)]=u;\n\tson[f][d]=son[u][!d]; if(son[u][!d]) fa[son[u][!d]]=f;\n\tson[u][!d]=f,fa[f]=u; Up(f),Up(u);\n}\nvoid Splay(int x){ for(;!isroot(x);rotate(x)) if(!isroot(fa[x])) rotate((dir(x)^dir(fa[x]))?x:fa[x]); }\nvoid Access(int x) {\n\tfor(int t=0,y;x;t=x,x=fa[x]) {\n\t\tSplay(x),y=son[x][1];\n\t\tif(y) Upd(1,1,n,L[mi[y]],R[mi[y]],1);\n\t\tif(t) Upd(1,1,n,L[mi[t]],R[mi[t]],-1);\n\t\tson[x][1]=t,Up(x);\n\t}\n} // LCT模板\n\nvoid dfs(int u,int f) {\n\tmi[u]=u,fa[u]=tfa[u][0]=f,id[L[u]=++dfn]=u;\n\tfor(int i=1;(1<<i)<=dep[u];++i) tfa[u][i]=tfa[tfa[u][i-1]][i-1];\n\tfor(int v:G[u]) if(v!=f) dep[v]=dep[u]+1,dfs(v,u);\n\tR[u]=dfn;\n}\nint LCA(int x,int y) {\n\tif(dep[x]<dep[y]) swap(x,y);\n\tfor(int i=0,del=dep[x]-dep[y];(1<<i)<=del;++i) if(del&(1<<i)) x=tfa[x][i];\n\tif(x==y) return x;\n\tdrep(i,17,0) if(tfa[x][i]!=tfa[y][i]) x=tfa[x][i],y=tfa[y][i];\n\treturn tfa[x][0];\n}\n\nint main(){\n\tn=rd(),m=rd();\n\trep(i,2,n) {\n\t\tint u=rd(),v=rd();\n\t\tG[u].pb(v),G[v].pb(u);\n\t}\n\tdfs(1,0),Build(1,1,n);\n\trep(i,1,m) {\n\t\tint opt=rd();\n\t\tif(opt==1) Access(rd());\n\t\telse if(opt==2) {\n\t\t\tint x=rd(),y=rd(),z=LCA(x,y);\n\t\t\tprintf(\"%d\\n\",Que(1,1,n,L[x])+Que(1,1,n,L[y])-2*Que(1,1,n,L[z])+1);\n\t\t} else {\n\t\t\tint x=rd();\n\t\t\tprintf(\"%d\\n\",Que(1,1,n,L[x],R[x]));\n\t\t}\n\t}\n}\n\n\n\n```\n\n","tags":["default tag"],"categories":["default category"]},{"title":"HDU-5608","url":"/articles/2020/06/01/5a5b3a76.html","content":"# HDU-5608\n\n题意：$G(n)=n^2−3n+2=\\sum_{d|n}F(d)$，求$\\sum_1^nF(i)$\n\n反演得到：$F(n)=\\sum_{d|n}\\mu(d)G(\\frac{n} {d})$\n\n则$\\sum_1^nF(i)=\\sum_i\\sum_{d|i}\\mu(d)G(\\frac{i} {d})$\n\n$\\sum_1^nF(i)=\\sum_{i=1}^{n}G(i)\\sum_{j=1}^{\\lfloor \\frac{n} {i}\\rfloor }\\mu(j)$\n\n问题就是要快速求$G(i)$前缀和和$\\mu(i)$前缀和\n\n第一个是$O(1)$求，第二个是杜教筛\n\n```cpp\n\nconst int N=5e6+10,P=1e9+7;\n\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nconst int Inv6=qpow(6);\n\nint n;\nchar notpri[N],w[N];\nint pri[N/4],pc,Sw[N];\nmap <int,int> M;\n\nint SumG(int n){ // O(1)求出G函数的前缀和\n\tll ans=1ll*n*(n+1)%P*(2*n+1)%P*Inv6%P;\n\tans=(ans-3ll*n*(n+1)/2%P+2*n)%P;\n\tans=(ans%P+P)%P;\n\treturn ans;\n}\n\nint Sumw(int n){ // 杜教筛求mobius函数前缀和\n\tif(n<N) return Sw[n];\n\tif(M.count(n)) return M[n];\n\tint ans=1;\n\tfor(int i=2,j;i<=n;i=j+1) {\n\t\tj=n/(n/i);\n\t\tans-=(j-i+1)*Sumw(n/i);\n\t}\n\n\treturn M[n]=ans;\n}\n\nint SumF(int n){ // 答案\n\tint ans=0;\n\tfor(int i=1,j;i<=n;i=j+1) {\n\t\tj=n/(n/i);\n\t\tans=(ans+1ll*(SumG(j)-SumG(i-1))*Sumw(n/i))%P;\n\t}\n\tans=(ans%P+P)%P;\n\treturn ans;\n}\n\nint main(){\n\tw[1]=1;\n\trep(i,2,N-1) {\n\t\tif(!notpri[i]) pri[++pc]=i,w[i]=-1;\n\t\tfor(int j=1;j<=pc && 1ll*i*pri[j]<N;++j) {\n\t\t\tnotpri[i*pri[j]]=1;\n\t\t\tif(i%pri[j]==0) {\n\t\t\t\tw[i*pri[j]]=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tw[i*pri[j]]=-w[i];\n\t\t}\n\t}\n\trep(i,1,N-1) Sw[i]=Sw[i-1]+w[i];\n\trep(kase,1,rd()) printf(\"%d\\n\",SumF(rd()));\n}\n\n\n\n\n```\n\n","tags":["各大OJ"],"categories":["题解"]},{"title":"HDU-5869 Different GCD Subarray Query(树状数组)","url":"/articles/2020/05/29/2d8e51f2.html","content":"# HDU-5869 Different GCD Subarray Query(树状数组)\n\n先不考虑查询的区间$[L,R]$\n\n首先我们枚举一个$\\gcd$区间的$l$，考虑不同的$\\gcd(l..r)$实际上只有$\\log n$个，因为每次改变，$\\gcd$的值至少减少一倍\n\n维护一个倍增数组，可以$\\log n$二分出下一个$\\gcd$不同的$r$，统计出每一个的$r$，那么就能得到$n\\log n$个不同的区间\n\n问题就转化为求$[L,R]$包含的权值不同的$[l,r]$个数\n\n那么可以把同一种权值的区间拉出来，离线之后，按照$l$和$L$倒序，每次对于$[l,r]$更新的区间就是$r$到这个权值之前出现过的最小$r$\n\n一共有$n\\log n$个更新，用树状数组维护区间更新，复杂度$O(n\\log^2n)$\n\n```cpp\nconst int N=1e5+10,P=1e9+7;\n\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\nint gcd(int a,int b){ return b==0?a:gcd(b,a%b); }\n\nint n,m;\nint a[N];\n\nstruct BIT{\n\tint s[N];\n\tvoid clear(){ rep(i,1,n) s[i]=0; }\n\tvoid Add(int p,int x) { while(p<=n) s[p]+=x,p+=p&-p; }\n\tint Que(int p){ \n\t\tint res=0; \n\t\twhile(p) res+=s[p],p-=p&-p; \n\t\treturn res;\n\t}\n}Tree;\n\nstruct Query{ int p,id; };\nstruct Update{ int p,x; };\nvector <Query> Q[N];\nvector <Update> U[N];\nint A[N],ans[N],G[N][18];\n\n\nint apr[N],apc,mk[N*10];\nvoid AddUpdate(int l,int r,int x) {\n\tif(!mk[x]) apr[++apc]=x,mk[x]=n+1;\n\tif(r>=mk[x]) return;\n\tU[l].pb((Update){r,1}),U[l].pb((Update){mk[x],-1});\n\tmk[x]=r;\n}\n\nint main(){\n\twhile(~scanf(\"%d%d\",&n,&m)) {\n\t\trep(i,1,n) {\n\t\t\tA[i]=rd(),Q[i].clear(),U[i].clear();\n\t\t}\n\t\tdrep(i,n,1) {\n\t\t\tG[i][0]=A[i];\n\t\t\tfor(int j=1;i+(1<<j)<=n+1;++j) G[i][j]=gcd(G[i][j-1],G[i+(1<<(j-1))][j-1]);\n\t\t\tint x=A[i],r=i;\n\t\t\twhile(r<=n) {\n\t\t\t\tAddUpdate(i,r,x);\n\t\t\t\tdrep(j,17,0) if(r+(1<<j)<=n+1 && G[r][j]%x==0) r+=1<<j;\n\t\t\t\tx=gcd(x,A[r]);\n\t\t\t}\n\t\t}\n\t\trep(i,1,m) {\n\t\t\tint l=rd(),r=rd();\n\t\t\tQ[l].pb((Query){r,i});\n\t\t}\n\t\tTree.clear();\n\t\tdrep(i,n,1) {\n\t\t\tfor(auto j:U[i]) Tree.Add(j.p,j.x);\n\t\t\tfor(auto j:Q[i]) ans[j.id]=Tree.Que(j.p);\n\t\t}\n\t\trep(i,1,m) printf(\"%d\\n\",ans[i]);\n\t\trep(i,1,apc) mk[apr[i]]=0; apc=0;\n\t}\n}\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["各大OJ"],"categories":["题解"]},{"title":"Burnside & Polya","url":"/articles/2020/05/27/b57b24d8.html","content":"# Burnside & Polya\n\n## 前置知识\n\n首先，要引入一些群论的概念，但是也不需要太懂\n\n[如果你不想听我讲](https://www.zhihu.com/question/23091609/answer/127659716)\n\n一个集合$S$，我们定义两种相同，即**表观相同**和**本质相同**\n\n称对于集合的一种操作为置换\n\n每一个对于集合的置换都是一种广义的对称，关于操作$x$对称的两个集合**本质相同**\n\n即对于置换$S$得到$S'$，则$S$,$S'$关于这个置换对称，同时$S,S'$本质相同\n\n群就是一些集合和一些操作(称作置换)的组合\n\n对于一个$n$元序列$p_i$，我们认为它是我们的集合，我们定义序列的对称是可以通过首尾相接乘环之后相同\n\n如有$S=\\{2,1,1\\},S'=\\{1,2,1\\}$\n\n我们可以说$S,S'$**向右移动1个位置**这个置换对称\n\n我们暂且定义这个操作为$+1$，即定义置换的操作符号为$+$\n\n而要表示一个群，则所有置换必须满足的条件是\n\n封闭性：置换$x$可以通过**其他置换叠加得到**，同时**任何置换的叠加所产生的置换**也在原先的置换集合里\n\n结合律：即对于三个置换$a,b,c,(a+b)+c=a+(b+c)$\n\n单位元：存在一个置换$e$对于其他所有的置换满足$e+a=a+e=a$\n\n逆元：即对于每个置换$a$，存在置换$b$使得置换$a+b=e$\n\n对于上面提到的环序列问题\n\n置换集合是$\\{+0,+1,\\cdots,+n-1\\}$，两个置换叠加的结果是要对于$n$取模的，所以显然满足上面的性质\n\n-------\n\n## Burnside\n\n\n对于一个群$G$\n\n其中所有**本质不同**的集合个数可以表示为\n\n$$\\frac{\\sum_{置换x}所有集合中操作之后表观不变的个数} {置换个数}$$\n\n显然也等于\n\n$$\\frac{\\sum_{集合S}所有置换中操作之后表观不变的个数} {置换个数}$$\n\n如对于$\\{1,1,2\\}$，三种置换之后得到$\\{1,1,2\\},\\{1,2,1\\},\\{2,1,1\\}$\n\n感性证明如下：\n\n考虑每一种本质不同的集合$S$\n\n对于$S$执行每一种置换$x$，会产生若干个表观相同的置换集合\n\n这些集合的总大小就是总的置换个数\n\n对于每一个操作集合$Set$对应的表观元素$T$,$Set$本身是封闭的\n\n存在$|Set|$种置换可以从$S$得到$T$\n\n同时也存在$|Set|$种置换满足$T$置换之后表观不变\n\n因为可以先对$T$执行一个$Set$中置换的逆置换，然后再分别叠加以置换集合中所有的置换\n\n根据群的封闭性，叠加之后的置换集合等价于原先的置换集合，而原先的置换集合里有$|Set|$个会得到$T$\n\n所以一个本质不同的集合被分散到这些集合里，最后一共还是被算了置换个数次\n\n\n\n### Tips:\n\n这里一定要注意的是，即便没有元素对于置换$x$对称，也必须要算进总的置换个数里\n\n举个例子：\n\n如果有$2$个$0$和$2$个$1$组成的环序列，手玩一下知道方案数是$2$\n\n实际的置换是$+0,+1,+2,+3$\n\n对称的个数是$6,0,2,0$\n\n实际上把这个问题扩展到$n$个，就会发现奇数的置换都是不存在对称的\n\n(甚至只保留偶数的置换同样满足群的性质),但是也必须计算$2n$个置换,因为环序列的置换就是$2n$个，不会因为具体情况不存在而改变\n\n-----------\n\n### Polya 定理\n\n$\\text{Polya}$定理，事实上就是对于每个置换，归纳了一下**快速求出**表观不变的元素个数的方法\n\n也就是对于一个类似环序列的置换，置换之后表观不变，那么集合元素之间就存在一些**相等关系**，这些关系把集合元素之间的分成**若干个循环**，循环内的集合元素相同，通过求循环个数来快速求表观不变的元素个数\n\n如对于环序列的问题，集合$S$,置换$+x$的循环个数就是$\\gcd(i,|S|)$\n\n实际上，具体的问题直接在$\\text{Burnside}$引理的基础上自己归纳总结快速求的方法是最好的\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"「ZJOI2019」开关","url":"/articles/2020/05/27/6d7d5b1e.html","content":"# 「ZJOI2019」开关\n\n**神题**\n\n------------\n\n### 前言\n\n设$\\text{FWT}_{\\oplus}(F(x))=F'(x)$\n\n关于$\\text{FWT}_{\\oplus}$的展开式子，我发现大部分人都不晓得。。。。\n\n$[x^S]F'(x)=\\sum_T(-1)^{|S\\cap T|} [x^T]F(x)$\n\n$F(x)=\\frac{F''(x)} {2^n}$\n\n详细可以看[这个](https://www.cnblogs.com/chasedeath/p/12785842.html)\n\n定义$\\bigoplus$为两个多项式的异或卷积\n\n$\\times$为两个多项式对应项直接相乘\n\n$[x^S]F(x)$表示$F(x)$的第$S$项的系数\n\n-------------\n\n### 正文\n\n翻转过程是一个$\\oplus$的过程，所以考虑用**集合幂指数**配合$\\text{FWT}_\\oplus$构造和求解方程\n\n事实上问题等价于从初始状态$S$跑到$\\empty$的期望次数\n\n设从$S$到$\\empty$的期望次数生成函数为$F(x)$，其中$[x^{\\empty}]F(x)=0$\n\n设转移函数$G(x),[x^{ \\{i\\} }]G(x)=p_i$\n\n那么我们的方程就是$F(x)\\bigoplus G(x)+\\sum x^S+cx^{\\empty}=F(x)$\n\n其中$x^S$表示这次转移之后答案要加一\n\n由于直接这样转移得到的方程显然是无穷解的，因为无法保证$[x^{\\empty}]F(x)=0$\n\n所以我们用一个常数项$cx^{\\empty}$平衡这个问题，$c$现在是未知的\n\n$\\because F(x)\\bigoplus G(x)+\\sum x^S+cx^{\\empty}=F(x)$\n\n$\\therefore (F(x)\\bigoplus G(x)+\\sum x^S+cx^{\\empty})'=F'(x)$\n\n$\\therefore F'(x)\\times G'(x)+(\\sum x^S+cx^{\\empty})'=F'(x)$\n\n我们模拟一下$G'(x)$\n\n$[x^S]G'(x)=\\sum_i(-1)^{|S\\cap \\{i\\}|}[x^{ \\{i\\} }]G(x)=\\sum_{i\\notin S}p_i-\\sum_{i\\in S}p_i$\n\n再卷一下$(\\sum x^S+cx^{\\empty})'$\n\n$(\\sum x^S)'=\\sum_S\\sum_T(-1)^{|S\\cap T|}x^S$\n\n$\\because (-1)^{|S\\cap T|} =\\sum_{T\\subset S}(-1)^|T|\\cdot 2^{n-|S|}=[S=\\empty]2^{n-|S|}$\n\n$\\therefore (\\sum x^S)'=2^n x^{\\empty}$\n\n$(cx^{\\empty})'=\\sum c\\cdot x^S$\n\n然后我们带入反解$[x^S]F'(x)$\n\n------\n\n当$S=\\empty$时,\n\n则$[x^S]F'(x)\\cdot [x^S]G'(x)+2^n+c=[x^S]F'(x)$\n\n然后发现此时$[x^S]G'(x)=1$，那么就意味着$2^n+c=0$\n\n解出了$c=-2^n$，但是此时我们实际上并不知道$[x^{\\empty}]F'(x)$的值\n\n---------\n\n当$S\\ne \\empty$时\n\n$[x^S]F'(x)\\cdot [x^S]G'(x)+c=[x^S]F'(x）$\n\n$[x^S]F'(x)(1-[x^S]G'(x))=c$\n\n$$[x^S]F'(x)=-\\frac{2^n} {1-\\sum_{i\\notin S}p_i+\\sum_{i\\in S}p_i}=-\\frac{2^n} {2\\sum_{i\\in S}p_i}$$\n\n-------\n\n我们考虑要求出$[x^\\empty]F'(x)$的值\n\n由$[x^{\\empty}]F(x)=2^{-n}\\cdot \\sum [x^S] F'(x)=0$\n\n$$[x^\\empty]F'(x)-\\sum_{S\\ne \\empty}\\frac{2^n} {2\\sum_{i\\in S}p_i}=0$$\n\n那么我们由$F'(x)$回代得到$[x^S]F(x)(S \\ne \\empty)$\n\n------\n\n$$[x^S]F(x)=2^{-n}\\cdot \\sum_T(-1)^{|S\\cap T|}[x^T]F'(x)$$\n\n$$=2^{-n}([x^\\empty]F'(x)+\\sum_{T\\ne \\empty}(-1)^{|S\\cap T|}[x^T]F'(x))$$\n\n$$=\\sum_{T\\ne\\empty}\\frac{1} {2\\sum_{i\\in T}p_i}+2^{-n}\\sum_{T\\ne \\empty}(-1)^{|S\\cap T|}[x^T]F'(x)$$\n\n$$=\\sum_{T\\ne \\empty,|S\\cap T|\\mod 2=1} \\frac{1} {\\sum_{i\\in T} p_i}$$\n\n下面是一个背包，跑的同时统计一下就好了$|S\\cap T|$的奇偶性就好了\n\n然后会发现事实上并没有必要特判$S=\\empty$的情况\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n#include<iostream>\n#include<cctype>\n#include<vector>\nusing namespace std;\n\n#define reg register\ntypedef long long ll;\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\n#define pb push_back\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\nint rd(){\n\tint s=0;\n\tint f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=5e4,P=998244353;\n\n\nint n;\nint s[N],a[N],sum;\nint dp[110][N][2]; // 背包表示p之和为i，有j个不同的方案数\nll Inv[N]; \nll c;\n\nll qpow(ll x,ll k) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n} \n\n\n\nint main(){\n\tfreopen(\"switch.in\",\"r\",stdin),freopen(\"switch.out\",\"w\",stdout);\n\tn=rd();\n\trep(i,1,n) s[i]=rd();\n\tdp[0][0][0]=1;\n\trep(i,1,n) {\n\t\tint x=rd();\n\t\trep(j,0,sum) rep(k,0,1) rep(d,0,1) \n\t\t\tdp[i][j+d*x][k^(d&&s[i])]=(dp[i][j+d*x][k^(d && s[i])]+dp[i-1][j][k])%P;\n\t\tsum+=x;\n\t}\n\tInv[0]=Inv[1]=1;\n\trep(i,2,sum) Inv[i]=(P-P/i)*Inv[P%i]%P;\n\tll ans=0;\n\trep(i,1,sum) ans=(ans+Inv[i]*dp[n][i][1])%P; // 因为最后统计的时候没有空集，所以i从1开始\n\tprintf(\"%lld\\n\",ans*sum%P);\n}\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["JOI","各省OI"],"categories":["题解"]},{"title":"「CTS2019 | CTSC2019」重复(Kmp)","url":"/articles/2020/05/22/5e01d3e8.html","content":"# 「CTS2019 | CTSC2019」重复(Kmp)\n\n-------------\n\n\n## Part1\n\n首先我们考虑对于一个已经确定的$t$串，如何检查是否合法\n\n对于$s$串建立$\\text{kmp}$($\\text{kmp}$自动机当然可以)，\n\n如果当前$\\text{kmp}$指针$j$在$\\text{fail}$树上的祖先所对应的所有下一个位置$s[ancestor+1]$中，存在一个字符，$t$中当前位置的字符$t[i]<s[ancestor+1]$\n\n那么就是存在一个\"有意义的串\",并且这个串和s串第一个不同的位置就是$ancestor+1$\n\n所以可以预处理一个$fail$树上祖先最大的$s[ancestor+1],Max[state]$\n\n```cpp\nrep(i,1,n) Max[i-1]=s[i];\nMax[n]='a';//边界条件\ncmax(Max[1],Max[0]);\nrep(i,2,n) {\n\tint j=nxt[i-1];\n\twhile(j && s[i]!=s[j+1]) j=nxt[j];\n\tif(s[i]==s[j+1]) ++j;\n\tnxt[i]=j;\n\tcmax(Max[i],Max[j]);\n}\n//预处理Max\nrep(i,0,n) {\n\tif(i<n) Trans[i][s[i+1]-'a']=i+1;\n\trep(j,0,25) if(j!=s[i+1]-'a') Trans[i][j]=Trans[nxt[i]][j];\n}//kmp自动机，不要再暴力了\nrep(i,m+1,n+m) t[i]=t[i-m]; // 延长到n+m就够了\nint j=0,f=0;\nrep(i,1,n+m){\n\tif(t[i]<Max[j]) { // 存在一个位置满足即可\n\t\tf=1;\n\t\tbreak;\n\t}\n\tj=Trans[j][t[i]-'a'];\n}\n```\n\n\n\n配合dfs枚举，可以拿到pts10\n\n----------------\n\n## Part2\n\n设状态转移为$Trans[state][c]$\n\n把kmp状态压进dp状态里\n\n如果把问题直接放到无穷意义下来看\n\n那么跑够长度之后，后面的任意加入$m$次字符都会构成一个循环\n\n枚举循环开始状态为$st$，$\\text{dp}$走了$m$步回到$st$的方案数\n\n如果计算合法方案数，那么还要多一维，所以直接计算不合法方案，也就是\n\n$Trans[state][Max[state]..25]$这一段转移是不会出现合法情况的\n\n最后减一下\n\n复杂度$O(m\\cdot n^2)$\n\n```cpp\nnamespace pt2{\n\tint dp[2][N];\n\tvoid Solve(){\n\t\tint cur=0,ans=0;\n\t\trep(st,0,n) { // 枚举初始状态\n\t\t\trep(i,0,n) dp[cur][i]=dp[!cur][i]=0;\n\t\t\tdp[cur][st]=1;\n\t\t\trep(t,1,m) {\n\t\t\t\tcur^=1;\n\t\t\t\trep(i,0,n) if(dp[!cur][i]){\n\t\t\t\t\trep(c,Max[i]-'a',25) {//只转移不合法的\n\t\t\t\t\t\tdp[cur][Trans[i][c]]+=dp[!cur][i];\n\t\t\t\t\t\tMod1(dp[cur][Trans[i][c]]);\n\t\t\t\t\t}\n\t\t\t\t\tdp[!cur][i]=0;\n\t\t\t\t}\n\t\t\t}// 走m步回到st\n\t\t\tans+=dp[cur][st],Mod1(ans);\n\t\t}\n\t\tans=(qpow(26,m)-ans+P)%P;//减一下\n\t\tprintf(\"%d\\n\",ans);\n\t}\n}\n\n\n```\n\n\n---------------------\n\n## Part3\n\n观察上面一档情况，合法的转移$Trans[state][Max[state]..25]$\n\n如果枚举下一个字符$c>Max[state]$，那么在$s$串中就找不到任何匹配了，下一个状态就是$0$\n\n否则，下一个状态就是$Trans[state][c]$\n\n也就是说，每个点出发其实只有两种情况，一种是一定会经过$0$的\n\n所以对于这个环是否经过$0$进行讨论\n\n如果不经过$0$，那么考虑直接从$st$出发走$m$步非0转移即可\n\n经过$0$的，预处理一个从$0$出发，走了$i$步第一次回到$0$的方案数\n\n$[st\\rightarrow 0,0\\rightarrow 0,0\\rightarrow 0...,0\\rightarrow st]$\n\n长成这个样子的转移\n\n枚举第一个$st\\rightarrow 0$的时间，后面可以预处理出来\n\n复杂度$O(n\\cdot m)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define pb push_back\n#define reg register\ntypedef long long ll;\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\n\ntemplate <class T> void cmin(T &a, T b){ ((a>b)&&(a=b)); }\ntemplate <class T> void cmax(T &a, T b){ ((a<b)&&(a=b)); }\n\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\nconst int N=2010,P=998244353;\n\nint n,m;\nchar s[N];\nint Max[N],nxt[N],Trans[N][26];\nll qpow(ll x,ll k=P-2) {\n\tll res=1;\n\tfor(;k;k>>=1,x=x*x%P) if(k&1) res=res*x%P;\n\treturn res;\n}\n\nint st[N][N]; // 从i出发，走了j步第一次到0\nint dp[N][N]; // 从0出发，走了i步，到了j,如果到0就不进行转移 \n\nint main(){\n\tfreopen(\"repeat.in\",\"r\",stdin),freopen(\"repeat.out\",\"w\",stdout);\n\tm=rd();\n\tscanf(\"%s\",s+1),n=strlen(s+1);\n\trep(i,1,n) Max[i-1]=s[i];\n\tMax[n]='a';\n\tcmax(Max[1],Max[0]);\n\trep(i,2,n) {\n\t\tint j=nxt[i-1];\n\t\twhile(j && s[i]!=s[j+1]) j=nxt[j];\n\t\tif(s[i]==s[j+1]) ++j;\n\t\tnxt[i]=j;\n\t\tcmax(Max[i],Max[j]);\n\t}\n\trep(i,0,n) {\n\t\tif(i<n) Trans[i][s[i+1]-'a']=i+1;\n\t\trep(j,0,25) if(j!=s[i+1]-'a') Trans[i][j]=Trans[nxt[i]][j];\n\t}\n\n\tint ans=0;\t\n\tst[0][0]++;\n\trep(i,1,n) {\n\t\tint j=i,f=1;\n\t\trep(k,1,m) {\n\t\t\tst[i][k]+=25-(Max[j]-'a'),j=Trans[j][Max[j]-'a'];\n\t\t\tif(!j) {\n\t\t\t\tst[i][k]++,f=0;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif(j==i) ans+=f;\n\t}\n\n\tdp[0][0]=1;\n\trep(i,1,m) {\n\t\trep(j,0,n) if(dp[i-1][j]) {\n\t\t\tdp[i][Trans[j][Max[j]-'a']]+=dp[i-1][j],Mod1(dp[i][Trans[j][Max[j]-'a']]);\n\t\t\tdp[i][0]=(dp[i][0]+1ll*(25-(Max[j]-'a'))*dp[i-1][j])%P;\n\t\t}\n\t}\n\n\trep(i,0,n) { // 枚举初始状态\n\t\trep(j,0,m) if(st[i][j] && dp[m-j][i]) { // 枚举走了几步第一次到0\n\t\t\tans=(ans+1ll*st[i][j]*dp[m-j][i])%P;\n\t\t}\n\t}\n\tans=(qpow(26,m)-ans+P)%P;\n\tprintf(\"%d\\n\",ans);\n}\n\n\n\n\n\n\n\n\n\n\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["CTSC"],"categories":["题解"]},{"title":"反演","url":"/articles/2020/05/22/c9b378cc.html","content":"# 反演\n\n---------\n\n## 什么是反演\n\n对于已知$F_i=\\sum a_{i,j}\\cdot G_j$\n\n反演得到$G_i=\\sum b_{i,j} \\cdot F_j$\n\n$\\text{NTT,FFT,FWT}$的逆卷积都可以认为是一种反演\n\n-------------------------------------\n\n## 子集反演\n\n即反解高位前缀和\n\n常见我们写成代码是\n\n```cpp\nvoid FWT(int n,int *a,int f){\n    for(int i=1;i<n;i<<=1) \n        for(int j=1;j<n;++j) if(j&i) \n            a[j]+=a[j^i]*f;\n}\n```\n\n\n\n$F_S=\\sum_{T\\subset S}G_T$\n\n则$G_S=\\sum_{T\\subset S}(-1)^{|T\\oplus S|} F_S$\n\n证明\n\n$G_S=\\sum_{T\\subset S}(-1)^{|T\\oplus S|} F_S$\n\n$\\Leftrightarrow G_S=\\sum_{T\\subset S}(-1)^{|T\\oplus S|} \\sum _{R\\subset T}F_R$\n\n$\\Leftrightarrow G_S=\\sum_{T\\subset S}G_R\\sum _{T\\subset R,R\\subset S}(-1)^{|S\\oplus R|}$\n\n$\\Leftrightarrow G_S=\\sum_{T\\subset S}G_R\\sum _{R\\subset (S\\oplus T)}(-1)^{|R|}$\n\n$\\Leftrightarrow \\sum _{T\\subset S}G_T[S\\oplus T=\\empty]$\n\n成立\n\n-----------------------\n\n\n## 莫比乌斯反演\n\n设$n$的质因数分解为$n=\\Pi_1^m p_i^{c_i}$\n\n#### 前置知识：莫比乌斯系数\n\n----------\n\n{%raw%}$\\mu(n)=\\left\\{ \\begin{aligned} 1 && n=1 \\\\ (-1)^m && c_i=1 \\\\ 0 && \\exists c_i>1\\end{aligned} \\right.${%endraw%}\n\n性质：$\\sum_{i|n}\\mu(i)=[n=1]$\n\n证明：\n\n$\\because c_i>1\\Rightarrow \\mu(n)=0$\n\n$\\therefore c_i\\in \\{0,1\\}$\n\n$\\therefore \\sum _{i|n} \\mu(i)=\\sum_{S\\in\\{p_i\\} }(-1)^{|S|}=[m=0]$\n\n---------------------------------\n\n若$F_i=\\sum _{j|i}G_i$\n\n则$G_i=\\sum_{j|i}\\mu(\\frac{i} {j})F(j)$\n\n证明\n\n$G_i=\\sum_{j|i}\\mu(\\frac{i} {j})F(j)$\n\n$\\Leftrightarrow G_i=\\sum_{j|i}\\mu(\\frac{i} {j})\\sum _{k|j}G_k$\n\n$\\Leftrightarrow G_i=\\sum_{j|i}G_j\\sum _{k|\\frac{i} {j} }\\mu(k)$\n\n带入上面的$\\mu(n)$性质，这个式子成立\n\n-----------------\n\n$$ \\ $$\n\n## 二项式反演\n\n#### 前置知识 $\\sum_0^nC(n,i)=[n=0]$\n\n$G_i=\\sum _{0}^{i}C(i,j)\\cdot F_j$\n\n直接容斥这个式子，就能得到\n\n$F_i=G_i-\\sum_{j<i}C(i,j)\\cdot F_j$\n\n但是容斥过程是$n^2$的，如果$n$较大，用分治$\\text{NTT}$实现也是$n\\log ^2n$\n\n所以需要二项式反演\n\n\n\n反演:$G_i=\\sum _{0}^{i}C(i,j)\\cdot F_j\\Leftrightarrow F_i=\\sum_0^i (-1)^{i-j}\\cdot C(i,j)\\cdot G_j$\n\n有时候看到是$G_i=\\sum _{i}^{n}C(j,i)\\cdot F_j\\Leftrightarrow F_i=\\sum_i^n (-1)^{i-j}\\cdot C(j,i)\\cdot G_j$\n\n证明\n\n$F_i=\\sum_i^n (-1)^{i-j} \\cdot C(j,i)\\cdot G_j$\n\n$\\Leftrightarrow F_i=\\sum_i^n(-1)^{i-j}\\cdot C(i,j)\\sum_j^nC(j,k)\\cdot F_k$\n\n$\\Leftrightarrow F_i=\\sum_0^i F_j\\sum_j^iC(i,k)\\cdot C(k,j) \\cdot (-1)^{i-k}$\n\n$\\Leftrightarrow \\sum_j^iC(i,k)\\cdot C(k,j) \\cdot (-1)^{i-k}=[i=j]$\n\n$\\because C(i,k)\\cdot C(k,j)=\\frac{i!} {j!(i-k)!(k-j)!}$\n\n$=\\frac{i!} {j!(i-j)!}\\cdot \\frac{(i-j)!} {(i-k)!(k-j)!}=C(i,j)\\cdot C(i-j,i-k)$\n\n$\\sum_j^iC(i,k)\\cdot C(k,j) \\cdot (-1)^{i-k}=C(i,j)\\sum_0^{i-j}(-1)^kC(i-j,k)=[i=j]C(i,j)=[i=j]$\n\n\n\n-------------\n\n\n\n\n\n\n\n\n\n待补。。。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["default tag"],"categories":["default category"]},{"title":"LOJ3120「CTS2019 | CTSC2019」珍珠","url":"/articles/2020/05/21/c33588be.html","content":"# LOJ3120「CTS2019 | CTSC2019」珍珠\n\n只是想要祭奠做的时候死去的我\n\n约定下文中的$d$为题目中的$D$\n\n## Part1\n\n先从最最暴力的定义转移(可以跳过这个)\n\n$S$表示个数为奇数的颜色集合\n\n转移多项式(集合幂指数)$F(x)=\\sum_0^d x^{ \\{i\\} }$\n\n$\\text{FWT}$得到\n\n$F'(x)=\\sum (d-2|S|)x^S$\n\n$(F(x)^n)'=\\sum (d-2|S|)^nx^S$\n\n$\\text{IFWT}$得到\n\n$2^d F(x)^n=\\sum_S \\sum_T (-1)^{|S\\cap T|}(d-2|T|)^n x^{S} $\n\n答案就是 \n\n$2^d Ans=\\sum_S\\sum_T(-1)^{|S\\cap T|}(d-2|T|)^n[|S|\\leq Lim]$\n\n如果枚举$|S|,|T|,|S\\cap T|$进行统计，会出现3个元，无法直接优化到$O(n\\log n)$\n\n-----------------------\n\n\n\n## Part2\n\n\n设最后得到每一种颜色的个数为$c_i,\\sum c_i=n$\n\n方案数就是$\\frac{n!} {\\Pi c_i!}$，很符合指数型生成函数吧\n\n考虑最朴素的生成函数表示法，考虑每种颜色的选的个数\n\n\n\n个数无限制的生成函数$F_0(x)=\\sum \\frac{x^i} {i!}=e^x$\n\n个数为奇数的生成函数$F_1(x)=\\frac{x^{1} } {1!}+\\frac{x^{3} } {3!}+\\cdots=\\frac{e^x-e^{-x} } {2}$\n\n个数为偶数的生成函数$F_2(x)=\\frac{x^0} {0!}+\\frac{x^2} {2!}+\\cdots=\\sum \\frac{e^x+e^{-x} } {2}$\n\n$F_1^i=2^{-i}\\sum (-1)^jC(i,j)e^{(i-2j)x}$\n\n$F_2^i=2^{-i}\\sum C(i,j)e^{(i-2j)x}$\n\n设选中$i$个奇数的答案为$G_i$\n\n$G_i=n!C(n,i)[x^n]F_1^iF_2^{d-i}$\n\n$=n!C(n,i)[x^n]2^{-d}\\sum_j\\sum_k C(i,j)(-1)^je^{(i-2j)x} C(n-i,k)e^{(n-i-2k)x}$\n\n代$e^{ax}=\\sum \\frac{(ax)^i} {i!}$，约去$n!$\n\n$=C(n,i)[x^n]2^{-d}\\sum_j\\sum_k C(i,j)C(n-i,k)(-1)^j (n-2k-2j)^n$\n\n诶好像和Part1一样。。。\n\n\n\n暴毙结束。。。。\n\n-----------------------\n\n## Part3\n\n上面这两种方法都要枚举三个元，无法优化，所以考虑先重复计算，再容斥掉\n\n计算$\\ge i$个方案数，然后容斥回去\n\n设最终答案序列为$H$\n\n我们可以快速求出选中$i$个奇数且带重复的方案数$G_i$\n\n$G_i=\\sum C(j,i)H_j=[x^n]C(d,i)F_1(x)^iF_0(x)^{d-i}$(强制选$i$个剩下未知)\n\n$G_i=C(d,i) \\cdot n! \\cdot  [x^n]\\sum (-1)^je^{(d-2j)x}\\cdot C(i,j)\\cdot {2^{-i} }$\n\n代$e^{ax}=\\sum \\frac{(ax)^i} {i!}$，约去$n!$\n\n$G_i=C(d,i)  \\cdot  \\sum (-1)^j(d-2j)^n\\cdot C(i,j)\\cdot {2^{-i} }$\n\n卷积一次可以得到$G$\n\n最后的容斥就是二项式反演\n\n$H_i=\\sum_{j\\ge i}(-1)^{j-i}G_jC(j,i)$\n\n再卷积求出$H$\n\n\n\n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["各大OJ","CTSC"],"categories":["题解"]},{"title":"About","url":"/about/index.html","content":"\n# 个人简介&博客阅览帮助\n\n这是一个悲惨的蒟蒻ZJOIer的博客，目前正在打Cu的边缘努力挣扎\n\n不善口胡，~~擅长套简~~单的模板题~~\n\n写过一点点多项式板板题，然鹅并没有任何用处\n\n没看过concrete 数学\n\n没有语文功底\n\n很少打[CodeForces](https://codeforces.com/profile/chasedeath)，[CodeChef](https://www.codechef.com/users/chasedeath)，[Topcoder](https://www.topcoder.com/members/chasedeath)，[AtCoder](https://atcoder.jp/users/chasedeath)\n\n#### 代码环境：\n\nDev-Cpp ×     Emacs ×         VSCode ×\n\nvim √              gvim √\n\nWindows √    Linux √\n\n\n\n~~文章书写的时间跨度非常长，所以前面的可能不像是一个人写的~~\n\n如果有出现很sb的错误，请@评论区 or qq 2946316707 \n\n#### 板子问题:\n\nrep/drep是两端闭区间的循环,reg是register,erep是前向星遍历\n\nll:long long\n\null:unsigned long long\n\nu64:uint64_t=unsigned long long\n\nu32:uint32_t=unsigned\n\ni64:int64_t=long long\n\ni32:int32_t=int\n\nPii: pair <int,int>\n\nMod1,Mod2是加减法取模\n\ncmin,cmax=checkmin,checkmax\n\n由于本人变量名比较随意，经常出现::，这个是访问主函数外(也就是空命名空间)的变量\n\n代码中可能出现的$\\text{[..](..){}}$是C++11+的lambda语句\n\n代码中可能出现的模板在这里\n\nfor(.. : ..)是容器完全遍历，需要C++11\n\n模板用到了default template，以及可能出现别的问题，因此编译需要C++11\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef double db;\ntypedef unsigned long long ull;\ntypedef pair <int,int> Pii;\n#define reg register\n#define pb push_back\n#define mp make_pair\n#define Mod1(x) ((x>=P)&&(x-=P))\n#define Mod2(x) ((x<0)&&(x+=P))\n#define rep(i,a,b) for(int i=a,i##end=b;i<=i##end;++i)\n#define drep(i,a,b) for(int i=a,i##end=b;i>=i##end;--i)\ntemplate <class T> inline void cmin(T &a,T b){ ((a>b)&&(a=b)); }\ntemplate <class T> inline void cmax(T &a,T b){ ((a<b)&&(a=b)); }\n\nchar IO;\ntemplate <class T=int> T rd(){\n\tT s=0; int f=0;\n\twhile(!isdigit(IO=getchar())) if(IO=='-') f=1;\n\tdo s=(s<<1)+(s<<3)+(IO^'0');\n\twhile(isdigit(IO=getchar()));\n\treturn f?-s:s;\n}\n\n\n```\n\n\n\n# 阅读帮助\n\n常用的，阅读帮助\n\n$\\forall,\\exists$任意，存在\n\n$\\oplus$ oplus 异或\n\n$[\\text{Logical Expression}]$艾弗森括号，根据其中逻辑表达式的真伪，值为1/0\n\n$\\overline{x}\\underline{x}$上升幂下降幂\n\n$\\lfloor x\\rfloor$ 向下取整\n\n$\\lceil x\\rceil$ 向上取整\n\n$|S|$ 集合大小，或者是矩阵行列式\n\n$[x^i]f(x)$ 多项式$f(x)$的$x^i$一项的系数\n\n$f^{(i)}(x)$ 对$f(x)$求$i$阶导\n\n组合数的几种形式$\\begin{aligned}C(n,m),C_n^m,\\binom{n}{m}\\end{aligned}$\n\n第一类斯特林数{% raw %} $\\begin{bmatrix}n\\\\m\\end{bmatrix}${% endraw %}\n\n第二类斯特林数 {% raw %} $\\begin{Bmatrix}n\\\\m\\end{Bmatrix}${% endraw %}\n\n\n\n\n\n\n\n$$ \\ $$\n\n$$ \\  $$\n\n$$ \\ $$\n\n$$ \\ $$\n\n下面是给自己写Markdown/LaTex用的\n\n## 字符\n\n$\\alpha$ alpha \n\n$\\beta$ beta \n\n$\\theta$ theta\n\n$\\Theta$ Theta (这个才是时间复杂度的标准符号)\n\n$\\varphi$ varphi (常表示欧拉函数)\n\n$\\phi$ phi\n\n$\\Phi$ phi (磁通量?)\n\n$\\lambda$ lambda\n\n$\\mu$ mu\n\n$\\omega$ omega (常表示单位根)\n\n$\\Omega$ \n\n$\\zeta$ zeta (常表示黎曼函数)\n\n## 表达情形\n\n表示推导关系\n\n$\\leftarrow$ leftarrow \n\n$\\Leftarrow$ Leftarrow \n\n$\\longleftarrow$ longleftarrow \n\n$\\Longleftarrow$ Longleftarrow \n\n右箭头同理，双向改为leftright即可\n\n$\\Leftrightarrow$ Leftrightarrow 常表示等价\n\n$\\not\\ $ 非 not 这个符号是加在下一个字符上面的\n\n$\\forall$ forall 任意\n\n$\\exists\\nexists$  exists,nexists 存在\n\n\n\n## 逻辑运算\n\n{% raw %} $\\and$ {% endraw %}and 与\n\n$\\or$ or 或\n\n$\\oplus$ oplus 异或\n\n$\\overline x$ 非(较少见)\n\n$[x]$ 艾弗森括号，其中$x$为一个逻辑表达式，其值为true:1 , false:0\n\n$\\ne$ ne \n\n$\\le \\ge$ le,ge \n\n## 显示与简单运算\n\n> A 引用，在行首直接加'>'即可\n\n**加粗** ** ... **\n\n~~删除线~~ ~~ .. ~~ \n\n$\\sim \\tilde {AB} \\widetilde{AB}$ \\sim , \\tilde {AB} ,\\widetilde{AB} 波浪线\n\n$\\underline{AB}$ underline\n\n$\\overline{AB}$ overline\n\n$\\hat {AB}$ hat \n\n$\\widehat{AB}$ widehat \n\n$\\dot {A}$ dot\n\n$\\ddot A$ ddot\n\n$\\dddot A$ dddot\n\n$a^b$ a^{b} 上标\n\n$a_b$ a_{b} 下标\n\n$\\frac{a}{b}$  frac{}{}  分数 cfrac{}{}打开分数\n\n$\\sum_{i=a}^b$ sum_{}^{} 求和\n\n$\\prod_{i=a}^{b}$ prod_{}^{} 求积\n\n$\\int$ int 积分\n\n$\\iint$ iint\n\n这几个可以通过双美刀$$  $$ \n\n或者设置环境调节解析程度$\\text{\\begin{aligned}..\\end{aligned}}$ (这个是对齐环境)\n\n或者\\displaystyle 来完成打开的显示模式\n\n分段函数\n\n$f(x)=\\left\\lbrace\\begin{aligned} 1 && b\\\\ 123 && d\\end{aligned}\\right.$\n\n$\\text{f(x)\\left \\lbrace\\begin{aligned} 1 && b \\\\ 123 && d \\end{aligned}\\right.}$\n\n\n\n$\\cdot$ cdot 点乘\n\n$\\cdots$ cdots省略号\n\n$\\times$ times 乘\n\n\n\n$\\lfloor x\\rfloor$ lfloor ,rfloor 向下取整\n\n$\\lceil x\\rceil$ lceil,rceil 向上取整\n\n$x^{\\overline n}$ overline {n} 上升幂\n\n$x^{\\underline{n}}$ underline{n} 下降幂\n\n\n\n## 集合关系\n\n$\\in$ in 元素属于集合\n\n$\\notin$ notin 不属于\n\n$\\subset$ sub/subset 子集\n\n$\\sube$ sube 子集或相等\n\n$\\subseteqq$ subseteqq子集或相等\n\n$\\subsetneq$ subneq 真子集\n\n$\\subsetneqq$ subneqq 真子集\n\n$\\supset$ supset 父集\n\n{% raw %} $\\supe$ {% endraw %}supe父集或相等\n\n$\\supseteqq$ supseteqq 父集或相等\n\n$\\supsetneq$ supsetneq 真父集\n\n$\\supsetneqq$ supsetneqq 真父集\n\n## 集合运算\n\n{% raw %}$\\empty$ {% endraw %} empty 空集 \n\n$\\{\\}\\lbrace\\rbrace$ 反斜杠+{ }或\\lbrace\\rbrace 大括号\n\n$|S|$ 集合大小\n\n$\\cup$ cup 并\n\n$\\cap$ cap 交\n\n$\\bigcup$ bigcup\n\n$\\bigcap$ bigcap\n\n$A \\setminus B$ setminus A-B，集合减操作\n\n$\\mathbb{ABCDE}$ mathbb{ABCDE} \n\n$\\Delta \\bigoplus $ Delta bigoplus 对称差(?)，通常直接用异或代替\n\n## 函数/多项式\n\n$f'(x)$ 求导\n\n$f^{(i)}(x)$求i阶导\n\n$[x^i]f(x)$第$i$项\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"title":"友情链接","url":"/links/index.html","content":"\n\n\n----\n\n各大网站..\n\n[Luogu](https://www.luogu.com.cn/user/130740)\n\n[CodeForces](https://codeforces.com/profile/chasedeath)\n\n[CodeChef](https://www.codechef.com/users/chasedeath)\n\n[AtCoder](https://atcoder.jp/users/chasedeath)\n\n[Vijos](https://vijos.org/user/142757)\n\n[Loj](https://loj.ac/u/chasedeath)\n\n[Uoj]()\n\n[51Nod](http://www.51nod.com/User/Index.html#userId=180813)\n\n[神仙学长的博客](https://www.cnblogs.com/Paulliant)\n\n"},{"title":"标签云","url":"/tags/index.html","content":"\n\n\n\n\n"}]