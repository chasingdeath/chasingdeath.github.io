<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>orangejuice&#39;s Blog</title>
  
  <subtitle>平凡的博客</subtitle>
  <link href="http://chasingdeath.github.io/atom.xml" rel="self"/>
  
  <link href="http://chasingdeath.github.io/"/>
  <updated>2021-05-22T03:54:10.828Z</updated>
  <id>http://chasingdeath.github.io/</id>
  
  <author>
    <name>orangejuice</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CF1477E - Nezzar and Tournaments</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/21/fe60afd6.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/21/fe60afd6.html</id>
    <published>2021-05-21T05:38:22.000Z</published>
    <updated>2021-05-22T03:54:10.828Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CF1477E-Nezzar-and-Tournaments"><a href="#CF1477E-Nezzar-and-Tournaments" class="headerlink" title="CF1477E - Nezzar and Tournaments"></a>CF1477E - Nezzar and Tournaments</h1><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>有两队人$a_i,i\in[1,n],b_j,j\in[1,m]$，现在把他们放在一起排成一行$c_i$</p><p>顺次给每个人计分，初始$s_0=k$</p><p>$s_i=\max\{0,s_{i-1}+c_i-c_{\max\{i-1,1\} } \}$</p><p>现在要最大化每个$a_i$所在位置的$s_i$之和 与 $b_i$所在$s_i$之和 的差</p><p>支持修改和对于不同$k$查询</p><p><br></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>考虑$k=0$简单情况</p><p>1.若$s_i$不清零，则$s_i=c_i-lst$，其中$lst$表示上一个被清零位置的$c_j$</p><p>2.$s_i$清零，则$c_i&lt;lst$</p><p>容易发现，$\displaystyle s_i=c_i-\min_{j\leq i} \{ c_j\}$</p><p><br></p><p>那么对于含$k$的情况，类似可以得到</p><p>$\displaystyle s_i=k-c_1+c_i+\max\{0,c_1-k-\min_{j\leq i} \{c_j\} \}$</p><p>假设我们固定了一个$c_1$，现在考虑对于剩下的$a_i,b_j$排出一个最优的排列</p><p>容易发现，$k-c_1+c_i$的贡献时固定的，只有前缀最小值会影响答案</p><p>我们希望对于$b_i$，前缀最小值较大，$a_i$反之</p><p>那么容易发现可以先降序排列$b_j$，再正序排列$a_i$</p><p>此时$b_{\min}$可以贡献给$a_i$的前缀最小值，同时$b_j$的前缀最小值能够取到最大</p><p><br></p><p>此时，不妨设$c_1=t$，$\min\{a_i,b_i\}=Min$</p><p>在$\min\{c_j\}=c_1$时，$\max$里的东西没有贡献，故可以得到</p><p>1.对于每个$a_i$，若它没有被放在$c_1$，则贡献$k-t+a_i+\max\{0,t-k-Min\}$</p><p>2.对于每个$b_i$（不特殊考虑第一个），则贡献$-(k-t+b_i+\max\{0,t-k-b_i\})$（忽略最小值为$t$的情况）</p><p>则最终式子为</p><p>$\displaystyle f(t)=(n-[t\in a_i])\cdot  \max\{0,t-k-Min\}-\sum \max\{0,t-k-b_i\}+(m-n)t+C$</p><p>其中$C=(n-m)k+\sum a_i-\sum b_i$</p><p>容易发现$f(t)$是关于$t$的分段一次函数，根据斜率变化情况分析，极值位置仅$O(1)$个</p><p>那么对于$a_i$作为$t$和$b_j$作为$t$的情况，分别计算$f(t)$的极值位置</p><p>极值位置需要一个$k$大查询和$\text{lower_bound}$</p><p>计算$f(t)$需要一个前缀查询</p><p>我用$\text{BIT}$充当平衡树来维护，复杂度为$O((n+m+q)\log 10^6)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>,INF=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span>&#123;</span></span><br><span class="line">ll s[N];</span><br><span class="line"><span class="keyword">int</span> c[N],n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123; n=m; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">p++;</span><br><span class="line"><span class="keyword">while</span>(p&lt;N) s[p]+=x,c[p]+=y,p+=p&amp;-p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Que</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">p++;</span><br><span class="line"><span class="keyword">if</span>(p&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">ll sum=<span class="number">0</span>,cnt=<span class="number">0</span>,t=p<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(p) sum+=s[p],cnt+=c[p],p-=p&amp;-p;</span><br><span class="line"><span class="keyword">return</span> t*cnt-sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 一些奇怪的边界特判 ，防止查询越界</span></span><br><span class="line">p++,<span class="built_in">cmin</span>(p,N<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p) res+=c[p],p-=p&amp;-p;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kth</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123; <span class="comment">// 注意一定要避免找到并不存在的数值</span></span><br><span class="line"><span class="built_in">cmin</span>(k,n),<span class="built_in">cmax</span>(k,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">drep</span>(i,<span class="number">19</span>,<span class="number">0</span>) <span class="keyword">if</span>(p+(<span class="number">1</span>&lt;&lt;i)&lt;N &amp;&amp; c[p+(<span class="number">1</span>&lt;&lt;i)]&lt;k) k-=c[p+=<span class="number">1</span>&lt;&lt;i];</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Prev</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">Kth</span>(<span class="built_in">Rank</span>(x)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Next</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">Kth</span>(<span class="built_in">min</span>(n,<span class="built_in">Rank</span>(x)+<span class="number">1</span>)); &#125;</span><br><span class="line">&#125; A,B;</span><br><span class="line"></span><br><span class="line">ll delta;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">delta+=x*k;</span><br><span class="line">A.<span class="built_in">Add</span>(x,x*k,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddB</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">delta-=x*k;</span><br><span class="line">B.<span class="built_in">Add</span>(x,x*k,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">QueA</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line">ll Min=<span class="built_in">min</span>(A.<span class="built_in">Kth</span>(<span class="number">1</span>),B.<span class="built_in">Kth</span>(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">auto</span> F=[&amp;](ll t)&#123; <span class="built_in"><span class="keyword">return</span></span> (n<span class="number">-1</span>)*<span class="built_in">max</span>(<span class="number">0ll</span>,t-k-Min)-B.<span class="built_in">Que</span>(t-k)+(m-n)*t; &#125;;</span><br><span class="line">ll ans=<span class="built_in">max</span>(<span class="built_in">F</span>(A.<span class="built_in">Kth</span>(<span class="number">1</span>)),<span class="built_in">F</span>(A.<span class="built_in">Kth</span>(n)));</span><br><span class="line"><span class="keyword">int</span> p=B.<span class="built_in">Kth</span>(m<span class="number">-1</span>)+k;</span><br><span class="line"><span class="built_in">cmax</span>(ans,<span class="built_in">F</span>(A.<span class="built_in">Prev</span>(p))),<span class="built_in">cmax</span>(ans,<span class="built_in">F</span>(A.<span class="built_in">Next</span>(p)));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">QueB</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line">ll Min=<span class="built_in">min</span>(A.<span class="built_in">Kth</span>(<span class="number">1</span>),B.<span class="built_in">Kth</span>(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">auto</span> F=[&amp;](ll t)&#123; <span class="keyword">return</span> n*<span class="built_in">max</span>(<span class="number">0ll</span>,t-k-Min)-B.<span class="built_in">Que</span>(t-k)+(m-n)*t; &#125;;</span><br><span class="line">ll ans=<span class="built_in">max</span>(<span class="built_in">F</span>(B.<span class="built_in">Kth</span>(<span class="number">1</span>)),<span class="built_in">F</span>(B.<span class="built_in">Kth</span>(m)));</span><br><span class="line"><span class="keyword">int</span> p=B.<span class="built_in">Kth</span>(m)+k;</span><br><span class="line"><span class="built_in">cmax</span>(ans,<span class="built_in">F</span>(B.<span class="built_in">Prev</span>(p))),<span class="built_in">cmax</span>(ans,<span class="built_in">F</span>(B.<span class="built_in">Next</span>(p)));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Que</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">QueA</span>(k),<span class="built_in">QueB</span>(k))+delta+(n-m)*k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">rd</span>(),m=<span class="built_in">rd</span>(),q=<span class="built_in">rd</span>(),A.<span class="built_in">Init</span>(n),B.<span class="built_in">Init</span>(m);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">AddA</span>(a[i]=<span class="built_in">rd</span>(),<span class="number">1</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m) <span class="built_in">AddB</span>(b[i]=<span class="built_in">rd</span>(),<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(q--) &#123;</span><br><span class="line"><span class="keyword">int</span> opt=<span class="built_in">rd</span>();</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">rd</span>(),y=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">AddA</span>(a[x],<span class="number">-1</span>),<span class="built_in">AddA</span>(a[x]=y,<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">rd</span>(),y=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">AddB</span>(b[x],<span class="number">-1</span>),<span class="built_in">AddB</span>(b[x]=y,<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">Que</span>(<span class="built_in">rd</span>()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CF1477E-Nezzar-and-Tournaments&quot;&gt;&lt;a href=&quot;#CF1477E-Nezzar-and-Tournaments&quot; class=&quot;headerlink&quot; title=&quot;CF1477E - Nezzar and Tournaments</summary>
      
    
    
    
    <category term="题解" scheme="http://chasingdeath.github.io/categories/solutions/"/>
    
    
    <category term="Codeforces" scheme="http://chasingdeath.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>下降幂多项式</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/20/15776de2.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/20/15776de2.html</id>
    <published>2021-05-20T01:52:48.000Z</published>
    <updated>2021-05-22T03:54:11.316Z</updated>
    
    <content type="html"><![CDATA[<h1 id="下降幂多项式"><a href="#下降幂多项式" class="headerlink" title="下降幂多项式"></a>下降幂多项式</h1><hr><h2 id="下降幂的定义"><a href="#下降幂的定义" class="headerlink" title="下降幂的定义"></a>下降幂的定义</h2><p>下降幂$\text{Falling Factorial}$</p><p>下降幂多项式$\text{Falling Factorial Polynomial}$下面简称$\text{FFP}$</p><p>$x$的$n$阶下降幂$x^{\underline n}=\prod_0^{n-1}(x-i) = \frac{x!} {(x-n)!}$</p><p>一个下降幂多项式$F(x)=\sum a_ix^{\underline i}$</p><p><a href="https://www.cnblogs.com/chasedeath/p/14049870.html">学习了斯特林数或许对于下降幂的性质能够有所了解</a></p><p><br></p><p><br></p><hr><h3 id="快速求解-x-underline-n-的展开形式"><a href="#快速求解-x-underline-n-的展开形式" class="headerlink" title="快速求解$x^{\underline n}$的展开形式"></a>快速求解$x^{\underline n}$的展开形式</h3><p>$x^{\underline{n} }=x(x-1)\cdots (x-n+1)$</p><p>考虑倍增求解，假设已知$F(x)=x^{\underline{n} }$</p><p>要求$G(x)=x^{\underline{2n} }$</p><p>显然$G(x)=F(x)F(x-n)$</p><p>而$\begin{aligned} F(x-n)=\sum_{i=0}^{n} [x^i]F(x) \cdot (x-n)^i\end{aligned}$</p><p>用一次卷积处理这个二项展开即可</p><p>复杂度为$O(n\log n)$</p><p><br></p><hr><h2 id="FFP与其点值的-text-EGF"><a href="#FFP与其点值的-text-EGF" class="headerlink" title="FFP与其点值的$\text{EGF}$"></a>FFP与其点值的$\text{EGF}$</h2><p>点值的$\text{EGF}$为$\begin{aligned} EGF(F(x))=\sum_0^{\infty}\frac{F(i)x^i } {i!}\end{aligned}$</p>$\begin{aligned}EGF(F(x))=\sum_{i=0}^{\infty}\frac{x^i} {i!}\sum_{j=0}^{n} \frac{i!} {(i-j)!}\cdot F_j\end{aligned}$$\begin{aligned}EGF(F(x))=\sum_{i=0}^{\infty}x^i \sum_{j=0}^{n} \frac{1} {(i-j)!}\cdot F_j\end{aligned}$<p>换一下顺序</p>$\begin{aligned}EGF(F(x))=\sum_{i=0}^{n} F_i \sum_{j=i}^{\infty}\frac{1} {(j-i)!} x^j\end{aligned}$$\begin{aligned}EGF(F(x))=\sum_{i=0}^{n} F_i \cdot x^i \sum_{j=0}^{\infty}\frac{1} {j!} x^j\end{aligned}$$\begin{aligned}EGF(F(x))=\sum_{i=0}^{n} F_i \cdot x^i e^x\end{aligned}$<p>那么直接和$e^x$卷积就可以得到$F(x)$的$\text{EGF}$</p><p>Tips: $e^x$直接带入展开式$\begin{aligned} e^{ax}=\sum_0^{\infty}\frac{(ax)^i} {i!} \end {aligned}$</p><p>如果要从$\text{EGF}$得到$F(x)$</p>$\begin{aligned}EGF(F(x))=\sum_{i=0}^{n} F_i \cdot x^ie^x\end{aligned}$$\begin{aligned} F_i=\frac{EGF(F(x))} {x^ie^x} \end{aligned}$<p>那么就直接卷上$e^{-x}$就可以了</p><p>即可以通过简单卷积完成$\text{FFP} \Longleftrightarrow \text{EGF}$的转化</p><p><br></p><hr><h2 id="FFP卷积"><a href="#FFP卷积" class="headerlink" title="FFP卷积"></a>FFP卷积</h2><p>求出$\text{EGF}$，然后点值对应相乘(注意乘完之后要补上一个$i!$)，最后再反求$F(x)$</p><p><br></p><p><br></p><hr><p>Tips: 下面的知识恐怕需要先学<a href="https://www.cnblogs.com/chasedeath/p/13073178.html">多点求值/快速插值</a></p><h2 id="多项式转FFP"><a href="#多项式转FFP" class="headerlink" title="多项式转FFP"></a>多项式转FFP</h2><p>带入$0,\cdots n-1$，多点求值得到$\text{FFP}$点值的$EGF$，然后求得到$\text{FFP}$</p><p><br></p><p><br></p><hr><h2 id="FFP转多项式"><a href="#FFP转多项式" class="headerlink" title="FFP转多项式"></a>FFP转多项式</h2><p>求出$F(x)$的$EGF$，然后带入前$n$项的值，快速插值回来即可</p><p>由于$x_i$是连续的，所以不需要再多点求值求解$\prod\frac{1} {x_i-x_j}$，可以直接阶乘得到</p><p><br></p><p><br></p><h2 id="关于上升幂"><a href="#关于上升幂" class="headerlink" title="关于上升幂"></a>关于上升幂</h2><p>$x^{\overline n}=\frac{(x+n-1)!} {(x-1)!}=x(x+1)(x+2)\cdots(x+n-1)$</p><p>容易发现的是$x^{\overline n}=(-x)(-((-x)-1))(-((-x)-2))\cdots (-(-x-(n-1)))=(-1)^n (-x)^{\underline{n} }$</p><p>所以上升幂多项式与普通多项式的转化 可以认为是上面的点值变成了$0,-1,\cdots ,-(n-1)$，奇数项系数取反</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;下降幂多项式&quot;&gt;&lt;a href=&quot;#下降幂多项式&quot; class=&quot;headerlink&quot; title=&quot;下降幂多项式&quot;&gt;&lt;/a&gt;下降幂多项式&lt;/h1&gt;&lt;hr&gt;
&lt;h2 id=&quot;下降幂的定义&quot;&gt;&lt;a href=&quot;#下降幂的定义&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>CF1411F - the Thorny Path</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/20/8d2e7059.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/20/8d2e7059.html</id>
    <published>2021-05-20T00:55:46.000Z</published>
    <updated>2021-05-22T03:54:10.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CF1411F-The-Thorny-Path"><a href="#CF1411F-The-Thorny-Path" class="headerlink" title="CF1411F - The Thorny Path"></a>CF1411F - The Thorny Path</h1><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个置换$p_i$，求通过最少次交换$p_i,p_j$，使得最终的置换中所有置换环$size$乘积最大</p><p><br></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>一个常规结论：</p><p>对于$n(n\ge 3)$的拆分$n=\sum_{i=1}^m a_i$，最大化$\prod a_i$，最优情况下</p><p>1.$n\mod 3=0$，$a_i=3$</p><p>2.$n\mod 3=2$，$i&lt;m,a_i=3 ; a_m=2$</p><p>3.$n\mod 3=1$，$i&lt;m,a_i=3 ; a_m=4$或$i&lt;m-1,a_i=3 ;a_{m-1}=a_m=2$</p><p><a href="https://www.cnblogs.com/chasedeath/p/14788379.html">简要证明</a></p><p><br></p><p>容易发现对于任意$n$，最终$a_i$的方案是$O(1)$的，设当前置换环为$b_i$，我们需要操作$b_i$变成$a_i$</p><p>1.一次在同环交换可以分裂一个环</p><p>2.一次异环交换合并两个环</p><p>所以原问题实际上就是最少次数分裂合并$b_i$</p><p>对于$n\mod 3=0$或$n\mod 3=2$的情况，如果当前$b_i\ge 3$，可以一直不停分裂</p><p>最终剩下的就是$b’_i=1$或者$b’_i=2$</p><p>对于$n\mod 3=2$的情况，优先从中取出一个2&lt;或者由两个1合并得到一个2</p><p>剩下的优先合并1和2，然后剩下的自己合并</p><p>$n\mod 3=1$同理，但是$a_i=4$的情况也不能分裂，需要拿出来特殊处理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>,P=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> Pow[N];</span><br><span class="line"><span class="keyword">int</span> A[N],L[N],C,R[N],D;</span><br><span class="line"><span class="keyword">int</span> vis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> c1,<span class="keyword">int</span> c2)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t=<span class="built_in">min</span>(c1,c2),ans=t;</span><br><span class="line">c1-=t,c2-=t;</span><br><span class="line"><span class="keyword">if</span>(c1) ans+=c1/<span class="number">3</span>*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(c2) ans+=c2;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Calc</span><span class="params">(<span class="keyword">int</span> c1,<span class="keyword">int</span> c2,<span class="keyword">int</span> c4)</span></span>&#123; <span class="keyword">return</span> c4+<span class="built_in">Calc</span>(c1+c4,c2); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">rep</span>(i,*Pow=<span class="number">1</span>,N<span class="number">-1</span>) Pow[i]=<span class="number">1ll</span>*Pow[i<span class="number">-1</span>]*<span class="number">3</span>%P;</span><br><span class="line"><span class="built_in">rep</span>(_,<span class="number">1</span>,<span class="built_in">rd</span>()) &#123;</span><br><span class="line">n=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) A[i]=<span class="built_in">rd</span>(),vis[i]=<span class="number">0</span>;</span><br><span class="line">C=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line"><span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;!vis[j];j=A[j]) c++,vis[j]=<span class="number">1</span>;</span><br><span class="line">L[++C]=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Pow[n/<span class="number">3</span>]);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,C) &#123;</span><br><span class="line"><span class="keyword">while</span>(L[i]&gt;<span class="number">3</span>) L[i]-=<span class="number">3</span>,ans++;</span><br><span class="line"><span class="keyword">if</span>(L[i]==<span class="number">3</span>) L[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c1=<span class="number">0</span>,c2=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,C) <span class="keyword">if</span>(L[i]==<span class="number">1</span>) c1++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(L[i]==<span class="number">2</span>) c2++;</span><br><span class="line">ans+=<span class="built_in">Calc</span>(c1,c2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(n%<span class="number">3</span>==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,Pow[n/<span class="number">3</span>]*<span class="number">2</span>%P);</span><br><span class="line"><span class="keyword">int</span> cnt=n/<span class="number">3</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,C) &#123;</span><br><span class="line"><span class="keyword">while</span>(cnt &amp;&amp; L[i]&gt;<span class="number">3</span>) L[i]-=<span class="number">3</span>,cnt--,ans++;</span><br><span class="line"><span class="keyword">if</span>(L[i]==<span class="number">3</span> &amp;&amp; cnt) L[i]=<span class="number">0</span>,cnt--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c1=<span class="number">0</span>,c2=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,C) <span class="keyword">if</span>(L[i]==<span class="number">1</span>) c1++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(L[i]==<span class="number">2</span>) c2++;</span><br><span class="line"><span class="keyword">if</span>(c2) c2--;</span><br><span class="line"><span class="keyword">else</span> c1-=<span class="number">2</span>,ans++;</span><br><span class="line">ans+=<span class="built_in">Calc</span>(c1,c2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,Pow[(n<span class="number">-4</span>)/<span class="number">3</span>]*<span class="number">4ll</span>%P);</span><br><span class="line"><span class="keyword">int</span> cnt=(n<span class="number">-4</span>)/<span class="number">3</span>,c3=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,C) &#123;</span><br><span class="line"><span class="keyword">while</span>(cnt &amp;&amp; L[i]&gt;<span class="number">4</span>) L[i]-=<span class="number">3</span>,cnt--,ans++;</span><br><span class="line"><span class="keyword">if</span>(L[i]==<span class="number">3</span> &amp;&amp; cnt) L[i]=<span class="number">0</span>,cnt--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c1=<span class="number">0</span>,c2=<span class="number">0</span>,c4=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,C) <span class="keyword">if</span>(L[i]==<span class="number">1</span>) c1++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(L[i]==<span class="number">2</span>) c2++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(L[i]==<span class="number">3</span>) c3++;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(L[i]==<span class="number">4</span>) c4++;</span><br><span class="line"><span class="keyword">if</span>(c3) ans++;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> w=<span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">if</span>(c4) <span class="built_in">cmin</span>(w,<span class="built_in">Calc</span>(c1,c2,c4<span class="number">-1</span>));</span><br><span class="line"><span class="keyword">if</span>(c1&gt;=<span class="number">4</span>) <span class="built_in">cmin</span>(w,<span class="built_in">Calc</span>(c1<span class="number">-4</span>,c2,c4)+<span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span>(c2&gt;=<span class="number">2</span>) <span class="built_in">cmin</span>(w,<span class="built_in">Calc</span>(c1,c2<span class="number">-2</span>,c4));</span><br><span class="line"><span class="keyword">if</span>(c1&gt;=<span class="number">2</span> &amp;&amp; c2)  <span class="built_in">cmin</span>(w,<span class="built_in">Calc</span>(c1<span class="number">-2</span>,c2<span class="number">-1</span>,c4)+<span class="number">1</span>);</span><br><span class="line">ans+=w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CF1411F-The-Thorny-Path&quot;&gt;&lt;a href=&quot;#CF1411F-The-Thorny-Path&quot; class=&quot;headerlink&quot; title=&quot;CF1411F - The Thorny Path&quot;&gt;&lt;/a&gt;CF1411F - The T</summary>
      
    
    
    
    <category term="题解" scheme="http://chasingdeath.github.io/categories/solutions/"/>
    
    
    <category term="Atcoder" scheme="http://chasingdeath.github.io/tags/Atcoder/"/>
    
    <category term="Codeforces" scheme="http://chasingdeath.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>[水]整数拆分积</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/20/69b2f79f.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/20/69b2f79f.html</id>
    <published>2021-05-20T00:55:12.000Z</published>
    <updated>2021-05-22T03:54:11.104Z</updated>
    
    <content type="html"><![CDATA[<h1 id="水-整数拆分积"><a href="#水-整数拆分积" class="headerlink" title="[水]整数拆分积"></a>[水]整数拆分积</h1><p>这是一个常规<del>（小学奥数）</del>结论</p><p>问题：对于$n(n\ge 3)$，要求构造拆分$n=\sum_{i=1}^m a_i$，最大化$\prod a_i$</p><p>最优情况下，满足</p><p>1.$n\mod 3=0$，$a_i=3$</p><p>2.$n\mod 3=2$，$i&lt;m,a_i=3 ; a_m=2$</p><p>3.$n\mod 3=1$，$i&lt;m,a_i=3 ; a_m=4$或$i&lt;m-1,a_i=3 ;a_{m-1}=a_m=2$</p><p>容易发现$a_i=2,a_i=4$的都是边界情况，我们只需要分析为何$a_i=3$能够最大化答案</p><p>考虑由高维均值不等式  $\displaystyle \sqrt[m]{\prod a_i}\leq \frac{\sum a_i} {m}$</p><p>$\displaystyle \prod a_i\leq (\frac{\sum a_i} {m})^m$</p><p>故知在$a_i$尽量平均时取到最值</p><p>现在只需分析$a_i=x$在何时取到最值</p><p>不妨用一个函数$g(x)=x^{\frac{n} {x} }$来描述问题</p><p>由于上标中的$n$不影响单调性，不妨分析$\displaystyle f(x)=g^{\frac{1} {n} }(x)=x^{\frac{1} {x} }$</p><p>$f(x)=e^{\frac{\ln x} {x} }$</p><p>$f’(x)=e^{\frac{\ln x} {x} }\cdot \frac{1-\ln x} {x^2}$</p><p>容易发现$f(x)$在$x_0=e$处取极大值</p><p>由于$x’\in \Z$，带入$f(2)\approx 1.414,f(3)\approx 1.442$</p><p>故取$a_i=3$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;水-整数拆分积&quot;&gt;&lt;a href=&quot;#水-整数拆分积&quot; class=&quot;headerlink&quot; title=&quot;[水]整数拆分积&quot;&gt;&lt;/a&gt;[水]整数拆分积&lt;/h1&gt;&lt;p&gt;这是一个常规&lt;del&gt;（小学奥数）&lt;/del&gt;结论&lt;/p&gt;
&lt;p&gt;问题：对于$n(n\ge 3)</summary>
      
    
    
    
    <category term="学习笔记" scheme="http://chasingdeath.github.io/categories/notes/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>CF1456E - XOR-Ranges</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/19/301596e8.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/19/301596e8.html</id>
    <published>2021-05-19T04:05:11.000Z</published>
    <updated>2021-05-22T03:54:10.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CF1456E-XOR-ranges"><a href="#CF1456E-XOR-ranges" class="headerlink" title="CF1456E - XOR-ranges"></a>CF1456E - XOR-ranges</h1><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>有$n$个二进制数$a_i\in[L_i,R_i]$，给定每个二进制位的权值</p><p>序列$a_i$的权值就是$a_i\oplus a_{i+1}$二进制为权值之和</p><p>求所有满足$a_i\in[L_i,R_i]$的最小权值</p><p><br></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>显然需要我们考虑对于一个数进行 数位$dp$的过程</p><p>从高位到低位，一个数要么最终都一直被限制着，要么在两个不同的位置分别解除了$L_i,R_i$的限制</p><p>容易发现，$L_i,R_i$中某一个先被解除的限制一定是在第一个$\text{bit}(L_{i},p)\ne \text{bit}(R_i,p)$的位置 （实际上是小于号）</p><p>此后，选择的数一直跟着剩下的限制直到下一个位置解除</p><p>不妨考虑$L_i,R_i$中限制时间较长的一个限制，设在$p$这一位解除，那么</p><p>1.$\exists k&lt;p,\text{bit}(L_i,k)\ne \text{bit}(R_i,k)$ </p><p>2.如果是$R_i$，那么$\text{bit}(R_i,p)=1,\text{bit}(a_i,p)=0$</p><p>如果是$L_i$，那么$\text{bit}(R_i,p)=0,\text{bit}(a_i,p)=1$</p><p>如果最终每个数解除限制的位置如下</p><p><img src="https://i.loli.net/2021/05/19/CpxqPW7YDXjEmiz.png" alt="QQ截图20210519114449.png"></p><p>考虑他们如何对于答案贡献</p><p>对于每个二进制位，如果存在空白段，空白段的二进制可以跟随左边的段或者右边的段改变</p><p>当左边和右边最邻近的两个数这一位不同，则产生贡献</p><p>因此考虑依次扫描每一个二进制位，找到相邻可能产生贡献的$(a_l,a_r)$</p><p>从低位到高位，这就是一个不断将$(a_l,a_r)$分裂为$(a_l,a_k),(a_k,a_r)$的过程</p><p>也就是一个 <strong>笛卡尔树上的区间dp</strong></p><p>对于当前二进制位$p$和数对$a_l,a_r$，我们需要知道的是</p><p>$a_l$是受到$L_l$还是$R_l$的限制，且是否$p$这一位它解除了限制 （因为解除贡献的这一位与$L_l / R_l$相反）</p><p>$a_r$是同理</p><p>转移可以直接进入下一个二进制位，计算$a_l,a_r$的贡献</p><p>或者分裂区间枚举中点$k$，$a_k$恰好在这一位解除限制（或者$a_k$一直都没有解除限制，此时$p=0$）</p><p>此时$L_k,R_k$必然满足前面提到的限制，并且根据$\text{bit}(L_k,p)$和$\text{bit}(R_k,p)$枚举$k$受到$L_k$或者$R_k$的限制</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">55</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k;</span><br><span class="line">ll L[N][<span class="number">2</span>],C[N];</span><br><span class="line">ll dp[N][N][N][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bit</span><span class="params">(ll x,<span class="keyword">int</span> p)</span></span>&#123; <span class="keyword">return</span> (x&gt;&gt;p)&amp;<span class="number">1</span>; &#125;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> f,<span class="keyword">int</span> x,<span class="keyword">int</span> g,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==k) <span class="keyword">return</span> r-l==<span class="number">1</span>?<span class="number">0</span>:<span class="number">1e18</span>;</span><br><span class="line">ll &amp;res=dp[p][l][r][f][x][g][y];</span><br><span class="line"><span class="keyword">if</span>(~res) <span class="keyword">return</span> res;</span><br><span class="line">res=<span class="built_in">dfs</span>(p+<span class="number">1</span>,l,r,f,<span class="number">0</span>,g,<span class="number">0</span>)+(l &amp;&amp; r&lt;=n &amp;&amp; (x^y^<span class="built_in">bit</span>(L[l][f]^L[r][g],p)))*C[p];</span><br><span class="line"><span class="built_in">rep</span>(k,l+<span class="number">1</span>,r<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">// a[k] is limited all time</span></span><br><span class="line"><span class="keyword">if</span>(!p) <span class="built_in">rep</span>(j,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">cmin</span>(res,<span class="built_in">dfs</span>(p,l,k,f,x,j,<span class="number">0</span>)+<span class="built_in">dfs</span>(p,k,r,j,<span class="number">0</span>,g,y));</span><br><span class="line">        <span class="comment">// a[k] frees at p</span></span><br><span class="line"><span class="keyword">if</span>((L[k][<span class="number">0</span>]^L[k][<span class="number">1</span>])&gt;&gt;(p+<span class="number">1</span>)) &#123; <span class="comment">// L,R has some different bits before p</span></span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,<span class="number">1</span>) <span class="keyword">if</span>(<span class="built_in">bit</span>(L[k][j],p)==j) </span><br><span class="line"><span class="built_in">cmin</span>(res,<span class="built_in">dfs</span>(p,l,k,f,x,j,<span class="number">1</span>)+<span class="built_in">dfs</span>(p,k,r,j,<span class="number">1</span>,g,y));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;k);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">rep</span>(j,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,L[i]+j);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,k<span class="number">-1</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,C+i);</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">-1</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">dfs</span>(<span class="number">0</span>,<span class="number">0</span>,n+<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CF1456E-XOR-ranges&quot;&gt;&lt;a href=&quot;#CF1456E-XOR-ranges&quot; class=&quot;headerlink&quot; title=&quot;CF1456E - XOR-ranges&quot;&gt;&lt;/a&gt;CF1456E - XOR-ranges&lt;/h1&gt;&lt;h3 i</summary>
      
    
    
    
    <category term="题解" scheme="http://chasingdeath.github.io/categories/solutions/"/>
    
    
    <category term="Codeforces" scheme="http://chasingdeath.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>CF1452G - Game on Tree</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/18/54f0570a.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/18/54f0570a.html</id>
    <published>2021-05-18T13:53:18.000Z</published>
    <updated>2021-05-22T03:54:10.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CF1452G-Game-On-Tree"><a href="#CF1452G-Game-On-Tree" class="headerlink" title="CF1452G - Game On Tree"></a>CF1452G - Game On Tree</h1><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>A和B在树上Van游戏，每个人操作一些点</p><p>A操作一个点$i$，B操作一个点集$a_j$</p><p>每轮A,B分别进行操作，可以对于自己的<strong>所有点</strong>任意移动1步或0步</p><p>在某一轮，当A的点碰到B的点时游戏结束</p><p>A希望尽量迟结束，B希望尽量早结束</p><p>给定B的初始点集$a_j$，对于A的每个初始点$i$判断多少轮结束</p><p><br></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>由于B的操作显然是不停向A收缩直到碰到</p><p>那么可以广搜求出每个点原地不动时被B干掉的时间$F_i$</p><p>那么考虑A的移动过程，每一步可以到达一个点$u$</p><p>必须满足在第$i$步所在的点$u$，$F_u&gt;i$，否则结束游戏</p><p>对于初始节点$u$，不妨设最终结束的节点为$t$，我们希望一路跑到$t$然后站住不动，此时答案就是$F_t$</p><p>而实际上，任何一个点$u$能够跑到$t$，等价于$dis(u,t)&lt;F_t$</p><p>Proof:</p><p>由最短路三角不等式可知</p><p>$\forall (u,v)\in Tree, dis_{v}-1\leq dis_u\leq dis_{v}+1$</p><p>即$dis_e$在树的路径上连续变化，不妨设移动路径为$p_i,i\in[1,k],p_k=t,k\leq F_t$</p><p>若能在$F_t-1$的时间内到达$p_k$，那么必然能在$F_t-2$的时间内到达$p_{k-1}$</p><p>进而归纳得到</p><p><br></p><p>那么问题变成了，对于每个点$u$，向周围$F_u-1$范围内的点对于$F_u$取$\max$</p><p>容易点分治处理，复杂度为$O(n\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,INF=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,F[N],A[N];</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line">queue &lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mi,rt,sz[N],vis[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindRt</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ma=<span class="number">0</span>; sz[u]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v:G[u]) <span class="keyword">if</span>(!vis[v] &amp;&amp; v!=f) &#123;</span><br><span class="line"><span class="built_in">FindRt</span>(n,v,u),sz[u]+=sz[v];</span><br><span class="line"><span class="built_in">cmax</span>(ma,sz[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cmax</span>(ma,n-sz[u]);</span><br><span class="line"><span class="keyword">if</span>(mi&gt;ma) mi=ma,rt=u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dep[N],id[N],c,s[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">id[++c]=u;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v:G[u]) <span class="keyword">if</span>(v!=f &amp;&amp; !vis[v]) &#123;</span><br><span class="line">dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">dfs</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Div</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">mi=<span class="number">1e9</span>,<span class="built_in">FindRt</span>(n,u,<span class="number">0</span>),u=rt,vis[u]=<span class="number">1</span>;</span><br><span class="line">c=<span class="number">0</span>,dep[u]=<span class="number">0</span>,<span class="built_in">dfs</span>(u,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,c) s[i]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,c) &#123;</span><br><span class="line"><span class="keyword">int</span> u=id[i];</span><br><span class="line"><span class="keyword">if</span>(F[u]&gt;dep[u]) <span class="built_in">cmax</span>(s[<span class="built_in">min</span>(c,F[u]<span class="number">-1</span>-dep[u])],F[u]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">drep</span>(i,c<span class="number">-1</span>,<span class="number">0</span>) <span class="built_in">cmax</span>(s[i],s[i+<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,c) <span class="built_in">cmax</span>(A[id[i]],s[dep[id[i]]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v:G[u]) <span class="keyword">if</span>(!vis[v]) &#123;</span><br><span class="line"><span class="keyword">if</span>(sz[v]&gt;sz[u]) sz[v]=n-sz[u];</span><br><span class="line"><span class="built_in">Div</span>(sz[v],v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">2</span>,n=<span class="built_in">rd</span>())&#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="built_in">rd</span>(),v=<span class="built_in">rd</span>();</span><br><span class="line">G[u].<span class="built_in">pb</span>(v),G[v].<span class="built_in">pb</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) F[i]=<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,<span class="built_in">rd</span>()) &#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">rd</span>();</span><br><span class="line">F[x]=<span class="number">0</span>,que.<span class="built_in">push</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="keyword">int</span> u=que.<span class="built_in">front</span>(); que.<span class="built_in">pop</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v:G[u]) <span class="keyword">if</span>(F[v]==<span class="number">-1</span>) </span><br><span class="line">F[v]=F[u]+<span class="number">1</span>,que.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Div</span>(n,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,A[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CF1452G-Game-On-Tree&quot;&gt;&lt;a href=&quot;#CF1452G-Game-On-Tree&quot; class=&quot;headerlink&quot; title=&quot;CF1452G - Game On Tree&quot;&gt;&lt;/a&gt;CF1452G - Game On Tree&lt;/</summary>
      
    
    
    
    <category term="题解" scheme="http://chasingdeath.github.io/categories/solutions/"/>
    
    
    <category term="Codeforces" scheme="http://chasingdeath.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>CF1051G - Distinctification</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/18/30c61159.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/18/30c61159.html</id>
    <published>2021-05-18T13:46:22.000Z</published>
    <updated>2021-05-22T03:54:10.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CF1051G-Distinctification"><a href="#CF1051G-Distinctification" class="headerlink" title="CF1051G - Distinctification"></a>CF1051G - Distinctification</h1><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>对于一个二元组集合$\{(a_i,b_i)\}$</p><p>每次可以进行操作</p><p>1.如果存在$a_i=a_j$，可以花费$b_i$代价$a_i$增加1</p><p>2.如果存在$a_i=a_{j}+1$，可以花费$-b_i$代价使$a_i$减少1</p><p>现在依次向集合插入$n$个二元组，求在所有时刻，对于当前的集合进行操作</p><p>最终使得不存在$a_i=a_j$时的最小花费（可以为负）</p><p><br></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>容易发现对于给定的$a_i$集合，最终$a_i$的集合唯一固定</p><p>具体的，每次插入一个数值$x$，如果出现重复就会不停将$x$向后推推推</p><p>而事实上答案为$\sum b_i\cdot (a’_i-a_i)$，那么只需要最小化$\sum b_ia’_i$</p><p>容易发现在任意时刻，如果$[L,R]$内所有$a_i$都出现，就可以任意交换他们的$b_i$</p><p>那么最终状态中每一个$a_i$连通块内，按照$b_i$从大到小排序即可</p><p>每次插入一个元素维护连通块之间的合并以及求出$\sum b_ia’_i$即可</p><p>可以用启发式合并/线段树合并维护</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e5</span>+<span class="number">10</span>,M=N*<span class="number">19</span>,INF=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> ls[M],rs[M],c[M],cnt;</span><br><span class="line">ll s[M],ans[M];</span><br><span class="line">ll Ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> F[N],rt[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">return</span> F[x]==x?x:F[x]=<span class="built_in">Find</span>(F[x]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Up</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">c[x]=c[ls[x]]+c[rs[x]],s[x]=s[ls[x]]+s[rs[x]];</span><br><span class="line">ans[x]=ans[ls[x]]+ans[rs[x]]+c[rs[x]]*s[ls[x]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Upd</span><span class="params">(<span class="keyword">int</span> &amp;p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!p) p=++cnt;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123; c[p]=<span class="number">1</span>,s[p]=x; <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">x&lt;=mid?<span class="built_in">Upd</span>(ls[p],l,mid,x):<span class="built_in">Upd</span>(rs[p],mid+<span class="number">1</span>,r,x);</span><br><span class="line"><span class="built_in">Up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> l=<span class="number">1</span>,<span class="keyword">int</span> r=n)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x||!y) <span class="keyword">return</span> x|y;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">ls[x]=<span class="built_in">Union</span>(ls[x],ls[y],l,mid),rs[x]=<span class="built_in">Union</span>(rs[x],rs[y],mid+<span class="number">1</span>,r);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Up</span>(x),x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">x=<span class="built_in">Find</span>(x);</span><br><span class="line">Ans+=k*(x*s[rt[x]]+ans[rt[x]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n)&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">rd</span>(),y=<span class="built_in">rd</span>();</span><br><span class="line">Ans-=<span class="number">1ll</span>*x*y;</span><br><span class="line"><span class="keyword">int</span> f=<span class="built_in">Find</span>(x);</span><br><span class="line"><span class="keyword">if</span>(!f) f=F[x]=x;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">Add</span>(f,<span class="number">-1</span>),F[f+c[rt[f]]]=f;</span><br><span class="line"><span class="built_in">Upd</span>(rt[f],<span class="number">1</span>,n,y);</span><br><span class="line"><span class="keyword">while</span>(x=<span class="built_in">Find</span>(x),y=<span class="built_in">Find</span>(x<span class="number">-1</span>)) &#123;</span><br><span class="line"><span class="built_in">Add</span>(y,<span class="number">-1</span>);</span><br><span class="line">F[x]=x<span class="number">-1</span>;</span><br><span class="line">rt[y]=<span class="built_in">Union</span>(rt[y],rt[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(x=<span class="built_in">Find</span>(x),y=<span class="built_in">Find</span>(x+c[rt[x]])) &#123;</span><br><span class="line"><span class="built_in">Add</span>(y,<span class="number">-1</span>);</span><br><span class="line">F[x+c[rt[x]]]=x;</span><br><span class="line">rt[x]=<span class="built_in">Union</span>(rt[x],rt[y]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Add</span>(x,<span class="number">1</span>),<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,Ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CF1051G-Distinctification&quot;&gt;&lt;a href=&quot;#CF1051G-Distinctification&quot; class=&quot;headerlink&quot; title=&quot;CF1051G - Distinctification&quot;&gt;&lt;/a&gt;CF1051G -</summary>
      
    
    
    
    <category term="题解" scheme="http://chasingdeath.github.io/categories/solutions/"/>
    
    
    <category term="Atcoder" scheme="http://chasingdeath.github.io/tags/Atcoder/"/>
    
    <category term="Codeforces" scheme="http://chasingdeath.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>PKUSC2021游记</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/17/a8924e44.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/17/a8924e44.html</id>
    <published>2021-05-17T06:01:56.000Z</published>
    <updated>2021-05-22T03:54:10.987Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PKUSC2021游记"><a href="#PKUSC2021游记" class="headerlink" title="PKUSC2021游记"></a>PKUSC2021游记</h1><h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p><del>上次PKUWC体验</del></p><p><del>结果今年没有WC</del></p><p><br></p><h3 id="Day-0"><a href="#Day-0" class="headerlink" title="Day 0"></a>Day 0</h3><p>余姚还是比较近的嘛，5个小时<del>就</del>到了</p><p><del>在车上吃了一个榴莲千层有点饱啊</del></p><p>入住mj酒店，然鹅机房队伍人数是奇数，于是乎…</p><p>（qy是不是也在这个酒店里）</p><p><del>为毛这个浴室正对着床，还是非全遮挡的玻璃设计</del></p><p><del>诶什么时候酒店都禁止发放洗漱用品了</del></p><p><del>不管了不管了先滑</del></p><p><br></p><h3 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h3><h4 id="凌晨"><a href="#凌晨" class="headerlink" title="凌晨"></a>凌晨</h4><p>诶天好像亮了…</p><p><del>…这么大个人连睡觉拉窗帘都不会…</del></p><p>诶怎么才5点，再睡一会~~~</p><p>6点：f**k睡不着起来high！！</p><p>7点：进食时间</p><h4 id="上午"><a href="#上午" class="headerlink" title="上午"></a>上午</h4><p>这个酒店最近很忙啊。。</p><p>一个房间都不能连着住还得更替一下吗。。。</p><p>三人入住套间~~~</p><p>分离的 1大床 + 2小床 + 2空调 + 2 洗手台！！</p><p>这样的房间给我来一打！！</p><p><br></p><p><del>进入正题</del></p><p>报道+试机。。。。</p><p>完了昨晚+今早打了<del>一小会儿</del>音游，脖子居然有<del>一点点</del>受不了</p><p>徒步到达余姚中学…</p><p>唉，这个校门咋了个这么nb</p><p>排队登记…..名单上怎么半天找不到我自己….</p><p><del>哦！原来那张不是浙江的</del></p><p>上手先让我们来看一看机子的配置</p><p>i3-8700U 嗯.</p><p>Win10 64bit 嗯.</p><p>Dev-cpp 嗯.</p><p>Visual Basic,UltraEdit,Photoshop 嗯？</p><p>嗯？没别的了？？？？</p><p>woc 我上次用Dev-Cpp什么时候的事了</p><p><img src="https://i.loli.net/2021/05/16/kwjg51WMiltUohf.jpg" alt="土拨鼠100x.jpg"></p><p>……龟速码板子中…..</p><p>哇试机还有两道题目,开openjudge.cn！</p><p>T1 嗯….</p><p>T2 嗯….</p><p><del>完了试机题目看起来好难啊，我是不是完蛋了</del></p><p><br></p><h4 id="下午"><a href="#下午" class="headerlink" title="下午"></a>下午</h4><p><del>这怎么没有午休时间的</del></p><p><del>还是好晕</del></p><h4 id="30-min"><a href="#30-min" class="headerlink" title="-30+min"></a>-30+min</h4><p>贴座位表啦</p><p><del>一万只健壮神仙堵着看，我咋办</del></p><h4 id="10min"><a href="#10min" class="headerlink" title="-10min"></a>-10min</h4><p>……Dev-Cpp板子板子板子……</p><p><del>痛苦啊！！</del></p><p>敲到一半，发现同桌的”板子”似乎特别长？</p><p><del>旁边似乎是一个神仙，感觉很熟悉但是我并不认识的神仙</del></p><p>然后我看到一行这样的代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br></pre></td></tr></table></figure><p>ok ，明白，那我也敲一下</p><p>NTTNTTNTT</p><h4 id="0-min"><a href="#0-min" class="headerlink" title="0+++min"></a>0+++min</h4><p><del>九条可怜九条可怜九条可怜九条可怜九条可怜九条可怜九条可怜九条可怜</del></p><p>T1</p><p>嗯，看起来可能是签到题？</p><p>矩阵矩阵</p><p><br></p><p>T2</p><p><del>逛gai</del></p><p>画图画图！！分析分析！！</p><p>我的草稿纸在跳舞！！</p><p><img src="https://i.loli.net/2021/05/16/eIUV59ngDqRfO8a.jpg" alt="IMG_4237.JPG"></p><p>算了先开T3</p><p><br></p><p>T3 </p><p>德 州 扑 克 儿</p><p>德 州 扑 克 儿</p><p>德 州 扑 克 儿</p><p>啊 啊 啊 啊 啊</p><p><img src="https://i.loli.net/2021/05/16/kwjg51WMiltUohf.jpg" alt="土拨鼠100x.jpg"></p><p>仔细分析，看起来$s=2,s=3$就是大模拟</p><p><del>真棒！！！！</del></p><p>line 30: hash(int *a){</p><p>line 50:}</p><p>line 60: calc(int *a){</p><p>line 120: }</p><p>line 130: Solves3(){</p><p>line 170:}</p><p>….</p><p>终于写完第一档分了！！</p><p>样例: ok ok</p><p>提交: wa ？？</p><p>仔细观察，修改：wa ？？？</p><p>仔细观察，修改×2：wa ？？？</p><p>仔细读题：</p><p>还是好奇怪为什么poker会有一个按照字典序比较大小的阶段，真是怪了</p><p>要不改成数值试一下</p><p>提交：pass subtask1</p><p>？？？？？？？？？？</p><p>暴力修改。。。</p><p>提交： TLE Subtask2</p><p><img src="https://i.loli.net/2021/05/16/kwjg51WMiltUohf.jpg" alt="土拨鼠100x.jpg"></p><p>稍加优化:79pts get</p><p><del>下面这21分不要也罢！！</del></p><p><br></p><p>T2 again</p><p>一样的草稿纸，一样的折线图</p><p>每次操作好像会删除若干个谷，把若个峰复制一份？</p><p>均摊均摊</p><p>数据结构数据结构</p><p><strong>封装封装</strong>！！</p><p>debugging………………….</p><h4 id="17-00"><a href="#17-00" class="headerlink" title="17:00"></a>17:00</h4><p><del>啊妈妈我终于过了</del></p><p><del>让我们荡起双桨，小船儿推</del> 停停停</p><p>认真思考T3…</p><p>认真思考T3…</p><p>认真思考T3…</p><p>可以，感性理解一波这个状压代码写不完，那不如</p><p><del>让我们荡起双桨，小船儿推</del> 停停停</p><p>诶某张纸上好像说D:\ \software里面有点东西，不知道是什么</p><p>gviminstaller.exe</p><p><img src="https://i.loli.net/2021/05/16/CnRJTkK3xgMNXhp.jpg" alt="蜂蜜浏览器_吐血.jpg"></p><p>测试新配置……….</p><p><br></p><h4 id="出考场"><a href="#出考场" class="headerlink" title="出考场"></a>出考场</h4><p>同桌：为毛我T3过不了第二档分！！</p><p>我：？？？？</p><p>机房同志：我T2 两个log 交满了过不去</p><p>机房同志：我T2 根号log 交满了过不去</p><p>机房同志：我 Splay T了</p><p>我：？？？？ 是我运气好？？？？</p><p><del>看来我用Dev-Cpp打的分数居然非常非常高？？</del></p><p>下面是自行进食时间。。。。</p><p>三人正在前往KFC。。。</p><p>订购2个汉堡，两个鸡块桶…. <del>（被大佬请客了</del></p><p><del>诶三个人吃两个全家桶吗</del></p><p><del>看来事实验证了人的胃可以自由扩张5倍</del></p><p><br></p><h3 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h3><p><del>这nm吃得太饱了</del></p><p>电视：正在播放夺宝奇兵2</p><p>我们：这什么邪教仪式我去  <del>邪教蛊惑人心</del></p><h4 id="time"><a href="#time" class="headerlink" title="time ????"></a>time ????</h4><p>旁边：快帮我看看这个笔记本电源线怎么插不进去</p><p>我：？？插？？？怎么线头软绵绵的</p><p>旁边：完了怎么有一股烧焦的味道</p><p>…</p><p><br></p><p>奇了怪了，今天怎么一整晚教练没来查房？？</p><p><br></p><h3 id="Day2"><a href="#Day2" class="headerlink" title="Day2"></a>Day2</h3><p>7:00 醒，真棒！</p><p>7:30吃饭，真棒！</p><p>8:00集合，7:50才出宾馆，真棒！</p><p>飞奔</p><h4 id="早上"><a href="#早上" class="headerlink" title="早上"></a>早上</h4><p>合影+参观？？</p><p>进校门看到一个巨大的<del>铁架台</del>，转头已经是密匝匝的人群，看来来对时候了</p><p>组织人员：</p><p>180+的最后一排！</p><p>175+的倒数第二排！</p><p>…..</p><p>各位领导第一排！</p><p>我们：为什么我们教练没在第一排？</p><p>前面：哦你们教练昨天喝高了还没醒</p><p>纳尼！！</p><p>组织人员：</p><p>人到齐了吗！！！</p><p><del>怎么还多空了一排</del></p><p>所有人前进一排！！！</p><p>（场外又走来一个人）同学你去第三排</p><p>大家看镜头！！再来一次！！</p><p>好的，接下来我们坐公交车去梦麟校区！</p><p><br></p><h4 id="抵达梦麟校区"><a href="#抵达梦麟校区" class="headerlink" title="抵达梦麟校区"></a>抵达梦麟校区</h4><p>参观大厅+领导讲话</p><p><img src="https://i.loli.net/2021/05/16/j8JDOQyBAkeKmz2.jpg" alt="IMG_4238.JPG"></p><p>参观NOI试场</p><p><img src="https://i.loli.net/2021/05/16/y1xFzgKn5o2LjYN.jpg" alt="IMG_4239.JPG"></p><p>参观寝室？？？？？？？？？？</p><p><img src="https://i.loli.net/2021/05/16/Mqx3ZyL6KP98Qdb.jpg" alt="IMG_4240.JPG"></p><p>带队老师：同学们上二楼！！没关系看一下看一下</p><p>我们：？<del>s</del>？<del>s</del>？<del>狂</del>？<del>喜</del>？</p><p><br></p><p>公交车返回…… 北京时间10:10 </p><p>老师：同学们食堂在这里！！自己打啊</p><p>我：？？</p><p>别人：gogogo！！</p><p>同行的人：太早了去买点饮料吧</p><p>于是出校买饮料</p><p><img src="https://i.loli.net/2021/05/16/jJqQlRhY8KMtBby.jpg" alt="e253a74bd11373f0537b8e73a90f4bfbfaed04a2.jpg"></p><p><del>成功绕过一整条街</del></p><p>我们 。。回来了。。。</p><h4 id="中午"><a href="#中午" class="headerlink" title="中午"></a>中午</h4><p>11:50了，怎么楼下还空的</p><p>诶好像座位表贴出来了，今天没有堵门神仙了</p><h4 id="20min"><a href="#20min" class="headerlink" title="20min"></a>20min</h4><p>目睹qy坐在考场门口的台阶上看qq</p><p><del>谁去问一下他昨天AK了没有</del></p><h4 id="15min"><a href="#15min" class="headerlink" title="-15min"></a>-15min</h4><p>这次知道要可以用gvim了….</p><p>看向前面：VSCode？？帅啊！！</p><h4 id="0-min-1"><a href="#0-min-1" class="headerlink" title="0+++min"></a>0+++min</h4><p>T1</p><p>删边加边删边加边删边加边删边加边</p><p>dp换根dp换根dp换根dp换根</p><p>…..</p><p>1h later….我终于过了。。</p><p>T2</p><p>这是什么奇怪的贪心+数据结构题</p><p>不管了先贪心</p><p>尝试1….. <del>样例好强</del></p><p>尝试2….. <del>第一个数据好强</del></p><p>值域dp….. 喜提11分</p><p>尝试3…..</p><p>…..</p><p>尝试x….</p><p><del>算了先看看T3</del></p><p>T3</p><p>昨天都打牌了，今天总是一个常规一点的防AK题吧（<del>反正都不会写</del></p><p>哇$n\leq 50,m,k\leq 150$难道这是签到题</p><p>嗯Day2 T3怎么可能是签到题？</p><p>仔细观察。。。</p><blockquote><p>[0,m]内随机的<strong>实数</strong></p></blockquote><p>连续型概率dp耶！</p><p>连续型概率dp耶！</p><p>连续型概率dp耶！</p><p><img src="https://i.loli.net/2021/05/16/CnRJTkK3xgMNXhp.jpg" alt="蜂蜜浏览器_吐血.jpg"></p><p>容斥尝试….</p><p>dp尝试….</p><p>二元函数积分…</p><p>…..</p><p>$n=3$手动积分中。。。喜提10pts</p><p>$n=4$手动积分中。。。喜提20pts</p><p>痛苦草稿$\downarrow $</p><p><img src="https://i.loli.net/2021/05/17/UnZ6A5QSlqbNOud.jpg" alt="IMG_4245.JPG"></p><p><br></p><p>T2 again</p><p>我不行了，试了一堆垃圾贪心<del>（后来发现似乎有一个是对的，但是我写挂了）</del></p><p>不如试一下倒着贪心吧。。。</p><p>40pts get…</p><p>溜了溜了</p><p>T3 again</p><p>尝试2元分段函数积分中…..</p><p>交换元。。</p><p>平移元。。</p><p>积分。。</p><p>居然还要考虑两个元的大小关系！！</p><p><del>好的我放弃了</del></p><p><del>gvim无法拯救我，要不下次挑战一下别的</del></p><p><br></p><h4 id="出考场-1"><a href="#出考场-1" class="headerlink" title="出考场"></a>出考场</h4><p>160我没了…</p><p><del>教练终于又出现了!!</del></p><p>教练坚持要合影一下</p><p><del>结果直接赶走了其他教练</del></p><p>成就达成：在科技楼前面合影</p><p>昨天是KFC，今天是金拱门！</p><p>然鹅同行三人有一个已经坐上动车溜了</p><p>订购麦旋风，汉堡，鸡块桶….<del>（又被大佬请客了</del></p><p><br></p><h4 id="晚上-1"><a href="#晚上-1" class="headerlink" title="晚上"></a>晚上</h4><p>明天只有面试和颁奖，那 <del>今夜不眠不休！</del></p><p><del>能卡在一个画面整整4小时，宾馆的电视真是惊人</del></p><p><del>笔记本太la什么干不得，居然开始推gal了</del></p><p>1:30am…..我不行了我不行了……</p><p><br></p><h3 id="Day3"><a href="#Day3" class="headerlink" title="Day3"></a>Day3</h3><p>8:00公布面试名单，但是8:30才开始….<del>那不如多滑一会儿</del></p><p>8:00出发，突然开始下小雨 ，然鹅有伞的同志已经溜了…… <del>冲冲冲</del></p><p>8:10抵达，为什么门口看起来也不是很热闹…</p><p>嗯，似乎发生了什么奇怪的事</p><p><img src="https://i.loli.net/2021/05/17/iKHXJe6uT9pjZCv.jpg" alt="蜂蜜浏览器_IMG_4242.jpg"></p><p><del>这都可以，居然白来了</del></p><p>出校门，大雨….. <del>撒腿就跑</del></p><p>嗯有人叫我？哇学弟offer了free打的ride</p><h4 id="10mins-later…"><a href="#10mins-later…" class="headerlink" title="10mins later…"></a>10mins later…</h4><p>教练on QQ: 四楼机房</p><p>我：？？？？</p><p><del>中途下车飞回去</del></p><h4 id="10-20"><a href="#10-20" class="headerlink" title="10:20"></a>10:20</h4><p>我终于回来了…. 小滑一会儿</p><h4 id="11-20"><a href="#11-20" class="headerlink" title="11:20"></a>11:20</h4><p>为什么他们还没回来</p><p><del>有点撑不住，躺下再睡一会儿</del></p><p>门铃适时响起…..</p><h4 id="11-40"><a href="#11-40" class="headerlink" title="11:40"></a>11:40</h4><p>这总到饭点了吧</p><p><del>前天KFC，昨天金拱门，那今天是不是必胜客/华莱士什么的</del></p><p>于是我们吃外卖</p><p>于是我们吃…黄焖鸡</p><p><img src="https://i.loli.net/2021/05/17/FzkJsHPuhUv6qri.jpg" alt="蜂蜜浏览器_IMG_4244.jpg"></p><p><br></p><h4 id="2-00p-m"><a href="#2-00p-m" class="headerlink" title="2:00p.m."></a>2:00p.m.</h4><p><del>原来酒店还可以这么迟退房</del></p><h4 id="2-10p-m"><a href="#2-10p-m" class="headerlink" title="2:10p.m."></a>2:10p.m.</h4><p>提前进入会场，看到zyy来拷课件</p><p><del>表示几乎没见过神仙，所以基本都不认识</del></p><h4 id="3-20-p-m"><a href="#3-20-p-m" class="headerlink" title="3:20++p.m."></a>3:20++p.m.</h4><p>领导发话结束，zyy上场：</p><p>“不是所有题都是我出的，不要都找我喷”</p><p><img src="https://i.loli.net/2021/05/06/zQSNb6mCwdJqFs3.jpg" alt="QQ图片20210506190147.jpg"></p><p>D1T1  … <del>1e9 tlog t您确定能过吗</del></p><p>D1T2  … <del>好多神奇算法</del></p><p>zyy: 两个log 应该当场是可能过的</p><p>D1T3  …</p><p>zyy: 这题不是我出的</p><p><del>果然不是人写的</del></p><p>zyy: 复杂度，复杂度玄学，但是出题人说能过。为什么能过，我也不知道。</p><p>？？</p><p>D2T1 <del>您把换根dp讲的好轻巧</del></p><p>D2T2 … <del>结论说太快了没听懂</del></p><p>D2T3 … </p><p><del>果然有积分做法</del></p><p>还可以按照小数部分的顺序dp啊</p><p>zyy: 考场上有人写了这个暴力，然后clock()sleep()把数据骗出来，是唯一一个过了的人</p><p>zyy: 我觉得他真的很强</p><p>tql tql orz orz</p><p><br></p><h4 id="颁奖"><a href="#颁奖" class="headerlink" title="颁奖"></a>颁奖</h4><p>老师：人有点多，分机房发吧</p><p>2号机房…3号机房…4号机房…5号机房…</p><p>剩下的去我的左手边…</p><p><del>楼下机房：为什么楼上都发好了下面这么慢</del></p><h4 id="4-20p-m"><a href="#4-20p-m" class="headerlink" title="4:20p.m."></a>4:20p.m.</h4><p><del>提前开溜</del></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;PKUSC2021游记&quot;&gt;&lt;a href=&quot;#PKUSC2021游记&quot; class=&quot;headerlink&quot; title=&quot;PKUSC2021游记&quot;&gt;&lt;/a&gt;PKUSC2021游记&lt;/h1&gt;&lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;head</summary>
      
    
    
    
    <category term="游记" scheme="http://chasingdeath.github.io/categories/travel/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>个人简介&amp;博客阅览帮助&amp;?</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/17/2c66e6d.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/17/2c66e6d.html</id>
    <published>2021-05-17T04:55:07.000Z</published>
    <updated>2021-05-22T03:54:11.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="个人简介-amp-博客阅览帮助-amp"><a href="#个人简介-amp-博客阅览帮助-amp" class="headerlink" title="个人简介&amp;博客阅览帮助&amp;?"></a>个人简介&amp;博客阅览帮助&amp;?</h1><p>这是一个悲惨的蒟蒻ZJOIer的博客，目前正在打Cu的边缘努力挣扎</p><p>不善口胡，<del>擅长套简</del>单的模板题~~</p><p>写过一点点多项式板板题，然鹅并没有任何用处</p><p>没看过concrete 数学</p><p>没有语文功底</p><p>很少打<a href="https://codeforces.com/profile/chasedeath">CodeForces</a>，<a href="https://www.codechef.com/users/chasedeath">CodeChef</a>，<a href="https://www.topcoder.com/members/chasedeath">Topcoder</a>，<a href="https://atcoder.jp/users/chasedeath">AtCoder</a></p><h4 id="代码环境："><a href="#代码环境：" class="headerlink" title="代码环境："></a>代码环境：</h4><p>Dev-Cpp ×     Emacs ×         VSCode ×</p><p>vim √              gvim √</p><p>Windows √    Linux √</p><p><del>文章书写的时间跨度非常长，所以前面的可能不像是一个人写的</del></p><p>如果有出现很sb的错误，请@评论区 or qq 2946316707 </p><h4 id="板子问题"><a href="#板子问题" class="headerlink" title="板子问题:"></a>板子问题:</h4><p>rep/drep是两端闭区间的循环,reg是register,erep是前向星遍历</p><p>ll:long long</p><p>ull:unsigned long long</p><p>u64:uint64_t=unsigned long long</p><p>u32:uint32_t=unsigned</p><p>i64:int64_t=long long</p><p>i32:int32_t=int</p><p>Pii: pair <int,int></p><p>Mod1,Mod2是加减法取模</p><p>cmin,cmax=checkmin,checkmax</p><p>由于本人变量名比较随意，经常出现::，这个是访问主函数外(也就是空命名空间)的变量</p><p>代码中可能出现的$\text{<a href="..">..</a>{ } }$是C++11+的lambda语句</p><p>代码中可能出现的模板在这里</p><p>for(.. : ..)是容器完全遍历，需要C++11</p><p>模板用到了default template，以及可能出现别的问题，因此编译需要C++11</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod1(x) ((x&gt;=P)&amp;&amp;(x-=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod2(x) ((x&lt;0)&amp;&amp;(x+=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&gt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&lt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>=</span><span class="keyword">int</span>&gt; <span class="function">T <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line">T s=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>())) <span class="keyword">if</span>(IO==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(IO^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>()));</span><br><span class="line"><span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="阅读帮助"><a href="#阅读帮助" class="headerlink" title="阅读帮助"></a>阅读帮助</h1><p>常用的，阅读帮助</p><p>$\forall,\exists$任意，存在</p><p>$\oplus$ oplus 异或</p><p>$[\text{Logical Expression}]$艾弗森括号，根据其中逻辑表达式的真伪，值为1/0</p><p>$\overline{x}\underline{x}$上升幂下降幂</p><p>$\lfloor x\rfloor$ 向下取整</p><p>$\lceil x\rceil$ 向上取整</p><p>$|S|$ 集合大小，或者是矩阵行列式</p><p>$[x^i]f(x)$ 多项式$f(x)$的$x^i$一项的系数</p><p>$f^{(i)}(x)$ 对$f(x)$求$i$阶导</p><p>组合数的几种形式$\begin{aligned}C(n,m),C_n^m,\binom{n} {m}\end{aligned}$</p><p>第一类斯特林数$\begin{bmatrix}n\\m\end{bmatrix}$</p><p>第二类斯特林数$\begin{Bmatrix}n\\m\end{Bmatrix}$</p><script type="math/tex; mode=display">\</script><script type="math/tex; mode=display">\</script><script type="math/tex; mode=display">\</script><script type="math/tex; mode=display">\</script><p>下面是给自己写Markdown/LaTex用的</p><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><p>$\alpha$ alpha </p><p>$\beta$ beta </p><p>$\theta$ theta</p><p>$\Theta$ Theta (这个才是时间复杂度的标准符号)</p><p>$\varphi$ varphi (常表示欧拉函数)</p><p>$\phi$ phi</p><p>$\Phi$ phi (磁通量?)</p><p>$\lambda$ lambda</p><p>$\mu$ mu</p><p>$\omega$ omega (常表示单位根)</p><p>$\Omega$ </p><p>$\zeta$ zeta (常表示黎曼函数)</p><h2 id="表达情形"><a href="#表达情形" class="headerlink" title="表达情形"></a>表达情形</h2><p>表示推导关系</p><p>$\leftarrow$ leftarrow </p><p>$\Leftarrow$ Leftarrow </p><p>$\longleftarrow$ longleftarrow </p><p>$\Longleftarrow$ Longleftarrow </p><p>右箭头同理，双向改为leftright即可</p><p>$\Leftrightarrow$ Leftrightarrow 常表示等价</p><p>$\not\ $ 非 not 这个符号是加在下一个字符上面的</p><p>$\forall$ forall 任意</p><p>$\exists\nexists$  exists,nexists 存在</p><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><p>$\and$ and 与</p><p>$\or$ or 或</p><p>$\oplus$ oplus 异或</p><p>$\overline x$ 非(较少见)</p><p>$[x]$ 艾弗森括号，其中$x$为一个逻辑表达式，其值为true:1 , false:0</p><p>$\ne$ ne </p><p>$\le \ge$ le,ge </p><h2 id="显示与简单运算"><a href="#显示与简单运算" class="headerlink" title="显示与简单运算"></a>显示与简单运算</h2><blockquote><p>A 引用，在行首直接加’&gt;’即可</p></blockquote><p><strong>加粗</strong> <strong> … </strong></p><p><del>删除线</del> ~~ .. ~~ </p><p>$\sim \tilde {AB} \widetilde{AB}$ \sim , \tilde {AB} ,\widetilde{AB} 波浪线</p><p>$\underline{AB}$ underline</p><p>$\overline{AB}$ overline</p><p>$\hat {AB}$ hat </p><p>$\widehat{AB}$ widehat </p><p>$\dot {A}$ dot</p><p>$\ddot A$ ddot</p><p>$\dddot A$ dddot</p><p>$a^b$ a^{b} 上标</p><p>$a_b$ a_{b} 下标</p><p>$\frac{a} {b}$  frac{ } { }  分数 cfrac{ } { }打开分数</p><p>$\sum_{i=a}^b$ sum_{ }^{ } 求和</p><p>$\prod_{i=a}^{b}$ prod_{ }^{ } 求积</p><p>$\int$ int 积分</p><p>$\iint$ iint</p><p>这几个可以通过双美刀<script type="math/tex"> </script> </p><p>或者设置环境调节解析程度$\text{\begin{aligned}..\end{aligned} }$ (这个是对齐环境)</p><p>或者\displaystyle 来完成打开的显示模式</p><p>分段函数</p>$f(x)=\left\lbrace\begin{aligned} 1 && b\\ 123 && d\end{aligned}\right.$$\text{f(x)\left \lbrace\begin{aligned} 1 && b \\ 123 && d \end{aligned}\right.}$<p>$\cdot$ cdot 点乘</p><p>$\cdots$ cdots省略号</p><p>$\times$ times 乘</p><p>$\lfloor x\rfloor$ lfloor ,rfloor 向下取整</p><p>$\lceil x\rceil$ lceil,rceil 向上取整</p><p>$x^{\overline n}$ overline {n} 上升幂</p><p>$x^{\underline{n} }$ underline{n} 下降幂</p><h2 id="集合关系"><a href="#集合关系" class="headerlink" title="集合关系"></a>集合关系</h2><p>$\in$ in 元素属于集合</p><p>$\notin$ notin 不属于</p><p>$\subset$ sub/subset 子集</p><p>$\sube$ sube 子集或相等</p><p>$\subseteqq$ subseteqq子集或相等</p><p>$\subsetneq$ subneq 真子集</p><p>$\subsetneqq$ subneqq 真子集</p><p>$\supset$ supset 父集</p><p>$\supe$ supe父集或相等</p><p>$\supseteqq$ supseteqq 父集或相等</p><p>$\supsetneq$ supsetneq 真父集</p><p>$\supsetneqq$ supsetneqq 真父集</p><h2 id="集合运算"><a href="#集合运算" class="headerlink" title="集合运算"></a>集合运算</h2><p>$\empty$ empty 空集</p><p>$\{ \}\lbrace\rbrace$ 反斜杠+{ }或\lbrace\rbrace 大括号</p><p>$|S|$ 集合大小</p><p>$\cup$ cup 并</p><p>$\cap$ cap 交</p><p>$\bigcup$ bigcup</p><p>$\bigcap$ bigcap</p><p>$A \setminus B$ setminus A-B，集合减操作</p><p>$\mathbb{ABCDE}$ mathbb{ABCDE} </p><p>$\Delta \bigoplus $ Delta bigoplus 对称差(?)，通常直接用异或代替</p><h2 id="函数-多项式"><a href="#函数-多项式" class="headerlink" title="函数/多项式"></a>函数/多项式</h2><p>$f’(x)$ 求导</p><p>$f^{(i)}(x)$求i阶导</p><p>$[x^i]f(x)$第$i$项</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;个人简介-amp-博客阅览帮助-amp&quot;&gt;&lt;a href=&quot;#个人简介-amp-博客阅览帮助-amp&quot; class=&quot;headerlink&quot; title=&quot;个人简介&amp;amp;博客阅览帮助&amp;amp;?&quot;&gt;&lt;/a&gt;个人简介&amp;amp;博客阅览帮助&amp;amp;?&lt;/h1&gt;&lt;</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>「USACO 2021 US Open Platinum」Routing Schemes</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/13/4dfec51.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/13/4dfec51.html</id>
    <published>2021-05-13T05:23:58.000Z</published>
    <updated>2021-05-22T03:54:11.265Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「USACO-2021-US-Open-Platinum」Routing-Schemes"><a href="#「USACO-2021-US-Open-Platinum」Routing-Schemes" class="headerlink" title="「USACO 2021 US Open Platinum」Routing Schemes"></a>「USACO 2021 US Open Platinum」Routing Schemes</h1><h2 id="K-0"><a href="#K-0" class="headerlink" title="$K=0$"></a>$K=0$</h2><p>此时，我们只需要求合法的匹配路径数量，并且一个路径是从小到大的</p><p>由于题目保证一定存在合法路径，从$1$到$n$考虑每一条$(u,v),(v&gt;u)$</p><p>我们可以看成是很多个$S$在路径上被从$1-n$不断地推过去</p><p>设一个点的入度为</p><p>$ind_v=\sum_{(u,v)} 1+[v为S]$</p><p>$outd_u=\sum_{(u,v)} 1+[u为R]$</p><p>每次到达一个点，必然有其$ind_u=outd_u$，即推进来的$S$个数恰好等于出边个数</p><p>此时合法的分配这$outd_u$个$S$的方案数就是$outd_u!$</p><p>直接求$\prod outd_i!$即可</p><p><br></p><h2 id="K-1"><a href="#K-1" class="headerlink" title="$K=1$"></a>$K=1$</h2><p>存在反边的图看起来十分难处理，不妨直接把反边断掉</p><p>假设断掉前包含环的路径为 $S_1\rightarrow a\rightarrow b\rightarrow R_1 (a&gt;b)$</p><p>则断掉后的路径变成$S_1\rightarrow a$，$b\rightarrow R$</p><p>不妨将在$a$上额外添加一个$R$，在$b$上额外添加一个$S$</p><p>此时，新的问题又只包含$(u,v)(u&lt;v)$，同$K=0$求解</p><p>理想情况下，新问题中的所有方案均可以通过将$a,b$相接还原</p><p>但是显然如果最终方案上$b\rightarrow a$相接就会成环</p><p>所以需要额外$dp$出包含$b\rightarrow a$的非法方案</p><p>考虑用类似$K=0$的办法，我们扫描每个$i$将$S$向后推</p><p>令$dp_i$表示当前$dp$的路径最后一个点是$i$的方案数</p><p>我们希望结束点是$a$，开始点是$b$</p><p>此时依次推过去$i$，此时只有$dp_{j},j\ge i$的情况是合法的</p><p>考虑$j=i$时，需要为$j$找一个归宿$k$，或者判定$j=a$时结束路径</p><p>此时，相当于在原图上使$outd_i$减少了$1$</p><p>得到转移$dp_k\leftarrow dp_j\cdot (outd_i-1)!$</p><p>当$j&gt;i$时，不需要考虑$j$的变化</p><p>得到转移$dp_j\leftarrow dp_j\cdot outd_i!$</p><p><br></p><h2 id="K-2"><a href="#K-2" class="headerlink" title="$K=2$"></a>$K=2$</h2><p>有了$K=1$的铺垫，想必这里十分简单</p><p>设反边为$(a,b),(c,d)$，显然加入两组$S,R$</p><p>考虑新图上什么样的情况是不合法的</p><p>1.$b\rightarrow a$</p><p>2.$d\rightarrow c$</p><p>注意1,2是有交的</p><p>3.$b\rightarrow c\rightarrow d\rightarrow a$</p><p>环交错扭在一起，这种情况比较容易漏掉</p><p>稍微容斥一下即可</p><p>复杂度分析：</p><p>扫描每个$i$时，$dp_{x,y}$中满足$x=i$或$y=i$的有$O(n)$个，转移每个需要$O(n)$时间</p><p>扫描每个$i$时，$dp_{x,y}$中满足$x=i$且$y=i$的有$O(1)$个，转移每个需要$O(n^2)$时间</p><p>因此复杂度为$O(n^3)$，常数不算太大</p><p><br></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">110</span>,P=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,J[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> G[N][N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> pt1&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) ans=<span class="number">1ll</span>*ans*J[deg[i]]%P;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> deg[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Calc1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dp[N];</span><br><span class="line"><span class="comment">// calculate stategies that contain b-&gt;a</span></span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line">dp[b]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="built_in">drep</span>(j,n+<span class="number">1</span>,i) <span class="keyword">if</span>(dp[j]) &#123;</span><br><span class="line"><span class="keyword">if</span>(j==i) &#123;</span><br><span class="line"><span class="keyword">if</span>(i==a) dp[n+<span class="number">1</span>]=(dp[n+<span class="number">1</span>]+<span class="number">1ll</span>*J[deg[i]<span class="number">-1</span>]*dp[j])%P;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">rep</span>(k,i+<span class="number">1</span>,n) <span class="keyword">if</span>(G[i][k]) dp[k]=(dp[k]+<span class="number">1ll</span>*J[deg[i]<span class="number">-1</span>]*dp[j])%P;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> dp[j]=<span class="number">1ll</span>*dp[j]*J[deg[i]]%P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Calc2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> c,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="comment">// calculate strategies that contain both b-&gt;a,d-&gt;c</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dp[N][N];</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp),dp[b][d]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="built_in">drep</span>(x,n+<span class="number">1</span>,i) <span class="built_in">drep</span>(y,n+<span class="number">1</span>,i) <span class="keyword">if</span>(dp[x][y]) &#123;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">1ll</span>*dp[x][y]*J[deg[i]-(x==i)-(y==i)]%P;</span><br><span class="line"><span class="keyword">if</span>(x!=i &amp;&amp; y!=i) &#123; dp[x][y]=t; <span class="keyword">continue</span>; &#125;</span><br><span class="line"><span class="keyword">if</span>(x!=i) &#123;</span><br><span class="line"><span class="keyword">if</span>(y==c) dp[x][n+<span class="number">1</span>]+=t,<span class="built_in">Mod1</span>(dp[x][n+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">rep</span>(j,i+<span class="number">1</span>,n) <span class="keyword">if</span>(G[i][j]) dp[x][j]+=t,<span class="built_in">Mod1</span>(dp[x][j]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y!=i) &#123;</span><br><span class="line"><span class="keyword">if</span>(x==a) dp[n+<span class="number">1</span>][y]+=t,<span class="built_in">Mod1</span>(dp[n+<span class="number">1</span>][y]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">rep</span>(j,i+<span class="number">1</span>,n) <span class="keyword">if</span>(G[i][j]) dp[j][y]+=t,<span class="built_in">Mod1</span>(dp[j][y]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(x==a) &#123;</span><br><span class="line"><span class="keyword">if</span>(y==c) dp[n+<span class="number">1</span>][n+<span class="number">1</span>]+=t,<span class="built_in">Mod1</span>(dp[n+<span class="number">1</span>][n+<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">rep</span>(j,i+<span class="number">1</span>,n) <span class="keyword">if</span>(G[i][j]) dp[n+<span class="number">1</span>][j]+=t,<span class="built_in">Mod1</span>(dp[n+<span class="number">1</span>][j]);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(y==c) &#123;</span><br><span class="line"><span class="built_in">rep</span>(j,i+<span class="number">1</span>,n) <span class="keyword">if</span>(G[i][j]) dp[j][n+<span class="number">1</span>]+=t,<span class="built_in">Mod1</span>(dp[j][n+<span class="number">1</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">rep</span>(j,i+<span class="number">1</span>,n) <span class="keyword">if</span>(G[i][j]) <span class="built_in">rep</span>(k,i+<span class="number">1</span>,n) <span class="keyword">if</span>(G[i][k] &amp;&amp; j!=k) dp[j][k]+=t,<span class="built_in">Mod1</span>(dp[j][k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dp[n+<span class="number">1</span>][n+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> pt2&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">-1</span>,b=<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">rep</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) <span class="keyword">if</span>(G[i][j]) a=i,b=j;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) ans=<span class="number">1ll</span>*ans*J[deg[i]]%P;</span><br><span class="line">ans-=<span class="built_in">Calc1</span>(a,b),<span class="built_in">Mod2</span>(ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> pt3&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">-1</span>,b=<span class="number">-1</span>,c=<span class="number">-1</span>,d=<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">rep</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) <span class="keyword">if</span>(G[i][j]) &#123;</span><br><span class="line"><span class="keyword">if</span>(a==<span class="number">-1</span>) a=i,b=j;</span><br><span class="line"><span class="keyword">else</span> c=i,d=j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) ans=<span class="number">1ll</span>*ans*J[deg[i]]%P;</span><br><span class="line">ans-=<span class="built_in">Calc1</span>(a,b),<span class="built_in">Mod2</span>(ans);</span><br><span class="line">ans-=<span class="built_in">Calc1</span>(c,d),<span class="built_in">Mod2</span>(ans);</span><br><span class="line">ans+=<span class="built_in">Calc2</span>(a,b,c,d),<span class="built_in">Mod1</span>(ans);</span><br><span class="line">ans-=<span class="built_in">Calc2</span>(c,b,a,d),<span class="built_in">Mod2</span>(ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">rep</span>(i,*J=<span class="number">1</span>,N<span class="number">-1</span>) J[i]=<span class="number">1ll</span>*J[i<span class="number">-1</span>]*i%P;</span><br><span class="line"><span class="built_in">rep</span>(_,<span class="number">1</span>,<span class="built_in">rd</span>()) &#123;</span><br><span class="line">n=<span class="built_in">rd</span>(),k=<span class="built_in">rd</span>(),<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">rep</span>(j,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">&quot;%1d&quot;</span>,G[i]+j);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">deg[i]=s[i]==<span class="string">&#x27;R&#x27;</span>;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,n) deg[i]+=G[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">0</span>) pt1::<span class="built_in">Solve</span>();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(k==<span class="number">1</span>) pt2::<span class="built_in">Solve</span>();</span><br><span class="line"><span class="keyword">else</span> pt3::<span class="built_in">Solve</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;「USACO-2021-US-Open-Platinum」Routing-Schemes&quot;&gt;&lt;a href=&quot;#「USACO-2021-US-Open-Platinum」Routing-Schemes&quot; class=&quot;headerlink&quot; title=&quot;「USA</summary>
      
    
    
    
    <category term="题解" scheme="http://chasingdeath.github.io/categories/solutions/"/>
    
    
    <category term="Atcoder" scheme="http://chasingdeath.github.io/tags/Atcoder/"/>
    
    <category term="USACO" scheme="http://chasingdeath.github.io/tags/USACO/"/>
    
  </entry>
  
  <entry>
    <title>「USACO 2021 US Open Platinum」Balanced Subsets</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/13/2d2aef2a.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/13/2d2aef2a.html</id>
    <published>2021-05-13T05:11:11.000Z</published>
    <updated>2021-05-22T03:54:11.263Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「USACO-2021-US-Open-Platinum」Balanced-Subsets"><a href="#「USACO-2021-US-Open-Platinum」Balanced-Subsets" class="headerlink" title="「USACO 2021 US Open Platinum」Balanced Subsets"></a>「USACO 2021 US Open Platinum」Balanced Subsets</h1><p>考虑题目给出的定义对应怎样的图形，显然是一个凸的封闭图形</p><p>不妨通过左右边线描述，从上到下</p><p>1.左边线先左移再右移</p><p>2.右边线先右移再左移</p><p>不妨直接令$dp_{i,l,r,f1,f2}$表示当前第$i$行，当前左右边线为$l,r(l\leq r,\forall j\in[l,r],a_{i,j}=G)$</p><p>$f1,f2$表示当前左右边线处于左移还是右移状态</p><p>以左边线为例，定义右移开始的时刻为第一个$l&gt;l’$的时刻</p><p>容易得到转移，是一个前/后缀和的形式</p><p>那么对于$[l,r]$两维分别做前缀和，然后$O(n^3)$转移即可</p><p>注意转移过程中要确保$[l’,r’],[l,r]$有交</p><p><del>以下是暴力二维前缀和+手艹9种转移的代码</del><img src="https://i.loli.net/2021/05/06/zQSNb6mCwdJqFs3.jpg" alt="QQ图片20210506190147.jpg"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">170</span>,P=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> c[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> dp[N][N][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> F[N][N][<span class="number">2</span>][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">S</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> x1,<span class="keyword">int</span> x2,<span class="keyword">int</span> y1,<span class="keyword">int</span> y2)</span></span>&#123;</span><br><span class="line">x1--,y1--;</span><br><span class="line"><span class="keyword">return</span> (<span class="number">0ll</span>+F[x2][y2][a][b]-F[x1][y2][a][b]-F[x2][y1][a][b]+F[x1][y1][a][b])%P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">rd</span>();</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,n) c[j]=c[j<span class="number">-1</span>]+(s[j]==<span class="string">&#x27;G&#x27;</span>);</span><br><span class="line"><span class="built_in">memset</span>(F,<span class="number">0</span>,<span class="keyword">sizeof</span> F);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">rep</span>(j,<span class="number">1</span>,n) <span class="built_in">rep</span>(a,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">rep</span>(b,<span class="number">0</span>,<span class="number">1</span>) &#123;</span><br><span class="line">F[i][j][a][b]=(<span class="number">0ll</span>+F[i<span class="number">-1</span>][j][a][b]+F[i][j<span class="number">-1</span>][a][b]-F[i<span class="number">-1</span>][j<span class="number">-1</span>][a][b]+dp[i][j][a][b])%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span> dp);</span><br><span class="line"><span class="built_in">rep</span>(l,<span class="number">1</span>,n) <span class="built_in">rep</span>(r,l,n) <span class="keyword">if</span>(c[r]-c[l<span class="number">-1</span>]==r-l+<span class="number">1</span>) &#123;</span><br><span class="line">(dp[l][r][<span class="number">0</span>][<span class="number">0</span>]+=<span class="built_in">S</span>(<span class="number">0</span>,<span class="number">0</span>,l,r,l,r))%=P;</span><br><span class="line">(dp[l][r][<span class="number">1</span>][<span class="number">0</span>]+=<span class="built_in">S</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,l<span class="number">-1</span>,l,r))%=P;</span><br><span class="line">(dp[l][r][<span class="number">0</span>][<span class="number">1</span>]+=<span class="built_in">S</span>(<span class="number">0</span>,<span class="number">0</span>,l,r,r+<span class="number">1</span>,n))%=P;</span><br><span class="line">(dp[l][r][<span class="number">1</span>][<span class="number">1</span>]+=<span class="built_in">S</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,l<span class="number">-1</span>,r+<span class="number">1</span>,n))%=P;</span><br><span class="line"></span><br><span class="line">(dp[l][r][<span class="number">0</span>][<span class="number">1</span>]+=<span class="built_in">S</span>(<span class="number">0</span>,<span class="number">1</span>,l,r,r,n))%=P;</span><br><span class="line">(dp[l][r][<span class="number">1</span>][<span class="number">1</span>]+=<span class="built_in">S</span>(<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,l<span class="number">-1</span>,r,n))%=P;</span><br><span class="line"></span><br><span class="line">(dp[l][r][<span class="number">1</span>][<span class="number">0</span>]+=<span class="built_in">S</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,l,l,r))%=P;</span><br><span class="line">(dp[l][r][<span class="number">1</span>][<span class="number">1</span>]+=<span class="built_in">S</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,l,r+<span class="number">1</span>,n))%=P;</span><br><span class="line"></span><br><span class="line">(dp[l][r][<span class="number">1</span>][<span class="number">1</span>]+=<span class="built_in">S</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,l,r,n))%=P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(l,<span class="number">1</span>,n) <span class="built_in">rep</span>(r,l,n) <span class="keyword">if</span>(c[r]-c[l<span class="number">-1</span>]==r-l+<span class="number">1</span>) dp[l][r][<span class="number">0</span>][<span class="number">0</span>]++;</span><br><span class="line"><span class="built_in">rep</span>(l,<span class="number">1</span>,n) <span class="built_in">rep</span>(r,l,n) <span class="built_in">rep</span>(a,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">rep</span>(b,<span class="number">0</span>,<span class="number">1</span>) <span class="keyword">if</span>(dp[l][r][a][b]) </span><br><span class="line">ans=(ans+dp[l][r][a][b])%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Mod2</span>(ans),<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;「USACO-2021-US-Open-Platinum」Balanced-Subsets&quot;&gt;&lt;a href=&quot;#「USACO-2021-US-Open-Platinum」Balanced-Subsets&quot; class=&quot;headerlink&quot; title=&quot;「U</summary>
      
    
    
    
    <category term="题解" scheme="http://chasingdeath.github.io/categories/solutions/"/>
    
    
    <category term="Atcoder" scheme="http://chasingdeath.github.io/tags/Atcoder/"/>
    
    <category term="USACO" scheme="http://chasingdeath.github.io/tags/USACO/"/>
    
  </entry>
  
  <entry>
    <title>「USACO 2021 US Open Platinum」United Cows of Farmer John</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/13/13490733.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/13/13490733.html</id>
    <published>2021-05-13T03:47:16.000Z</published>
    <updated>2021-05-22T03:54:11.267Z</updated>
    
    <content type="html"><![CDATA[<h1 id="「USACO-2021-US-Open-Platinum」United-Cows-of-Farmer-John"><a href="#「USACO-2021-US-Open-Platinum」United-Cows-of-Farmer-John" class="headerlink" title="「USACO 2021 US Open Platinum」United Cows of Farmer John"></a>「USACO 2021 US Open Platinum」United Cows of Farmer John</h1><p>考虑依次枚举右端点$i$，计算左边合法的方案数，设一个数$x$上次出现的位置为$lst_x$</p><p>则$i$能够作为右端点的区间就是$[lst_{a_i}+1,i-2]$</p><p>考虑什么样的位置可以作为左端点，显然这个点在$[1,i]$中是最后一次出现</p><p>我们将不妨这样的点权值设为$w_i=1$</p><p>考虑一个点作为中间点贡献怎样的区间，同样的，这个点在$[1,i]$中是最后一次出现</p><p>并且，能够贡献的区间$&gt;$上一次出现的位置$lst_x$</p><p>这个中间点能够匹配的左端点个数就是$\displaystyle \sum_{k=lst_{a_j}+1}^{j-1} w_k$</p><p>现在我们要用数据结构动态修改某一个位置的$w_i$，增减$[lst_{a_j}+1,j-1]$的区间，查询$[lst_{a_i}+1,i-2]$</p><p>不妨再为一个点增加点权$t_i$，此时我们要维护的操作</p><p>1.单点修改$w_i$</p><p>2.区间修改$t_i$</p><p>3.求$w_it_i$区间和</p><p>在线段树上每个节点维护$w_i$之和，$w_it_i$之和，可以标记永久化$t_i$</p><p>具体实现参考代码<del>（实际写得很丑）</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,INF=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> lst[N],lst2[N],cnt;</span><br><span class="line">ll s1[N&lt;&lt;<span class="number">2</span>],s2[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="keyword">int</span> t[N&lt;&lt;<span class="number">2</span>];</span><br><span class="line"><span class="comment">// s1表示w之和，s2表示区间内部t[i]*w[i]之和，t[i]现在是永久化的标记</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Up</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">s2[p]=s2[p&lt;&lt;<span class="number">1</span>]+s2[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>];</span><br><span class="line">s1[p]=s1[p&lt;&lt;<span class="number">1</span>]+s1[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]+s2[p]*t[p];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Upd</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">s2[p]^=<span class="number">1</span>,s1[p]=t[p]*s2[p];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">x&lt;=mid?<span class="built_in">Upd</span>(p&lt;&lt;<span class="number">1</span>,l,mid,x):<span class="built_in">Upd</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,x);</span><br><span class="line"><span class="built_in">Up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Upd</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ql&gt;qr) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=l &amp;&amp; r&lt;=qr) &#123;</span><br><span class="line">t[p]+=x,s1[p]+=x*s2[p];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=mid) <span class="built_in">Upd</span>(p&lt;&lt;<span class="number">1</span>,l,mid,ql,qr,x);</span><br><span class="line"><span class="keyword">if</span>(qr&gt;mid) <span class="built_in">Upd</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr,x);</span><br><span class="line"><span class="built_in">Up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">ll x,y;</span><br><span class="line"><span class="built_in">Node</span>(ll x=<span class="number">0</span>,ll y=<span class="number">0</span>):<span class="built_in">x</span>(x),<span class="built_in">y</span>(y)&#123;  &#125;</span><br><span class="line">Node <span class="keyword">operator</span> + (<span class="keyword">const</span> Node __) &#123; <span class="keyword">return</span> <span class="built_in">Node</span>(x+__.x,y+__.y); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function">Node <span class="title">Que</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ql&gt;qr) <span class="keyword">return</span> <span class="built_in">Node</span>();</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=l &amp;&amp; r&lt;=qr) <span class="keyword">return</span> <span class="built_in">Node</span>(s1[p],s2[p]);</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>; Node res;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=mid) res=res+<span class="built_in">Que</span>(p&lt;&lt;<span class="number">1</span>,l,mid,ql,qr);</span><br><span class="line"><span class="keyword">if</span>(qr&gt;mid) res=res+<span class="built_in">Que</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">res.x+=res.y*t[p];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">rd</span>();</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">rd</span>();</span><br><span class="line"><span class="keyword">if</span>(lst[x]) &#123;</span><br><span class="line"><span class="built_in">Upd</span>(<span class="number">1</span>,<span class="number">1</span>,n,lst[x]),cnt--;</span><br><span class="line"><span class="built_in">Upd</span>(<span class="number">1</span>,<span class="number">1</span>,n,lst2[x]+<span class="number">1</span>,lst[x],<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">Node t=<span class="built_in">Que</span>(<span class="number">1</span>,<span class="number">1</span>,n,lst[x]+<span class="number">1</span>,i<span class="number">-2</span>);</span><br><span class="line">ans+=t.x;</span><br><span class="line"><span class="built_in">Upd</span>(<span class="number">1</span>,<span class="number">1</span>,n,i),cnt++,<span class="built_in">Upd</span>(<span class="number">1</span>,<span class="number">1</span>,n,lst[x]+<span class="number">1</span>,i<span class="number">-1</span>,<span class="number">1</span>);</span><br><span class="line">lst2[x]=lst[x],lst[x]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;「USACO-2021-US-Open-Platinum」United-Cows-of-Farmer-John&quot;&gt;&lt;a href=&quot;#「USACO-2021-US-Open-Platinum」United-Cows-of-Farmer-John&quot; class=&quot;h</summary>
      
    
    
    
    <category term="题解" scheme="http://chasingdeath.github.io/categories/solutions/"/>
    
    
    <category term="Atcoder" scheme="http://chasingdeath.github.io/tags/Atcoder/"/>
    
    <category term="USACO" scheme="http://chasingdeath.github.io/tags/USACO/"/>
    
  </entry>
  
  <entry>
    <title>CF715E - Complete the Permutations</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/12/268c9698.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/12/268c9698.html</id>
    <published>2021-05-12T13:07:19.000Z</published>
    <updated>2021-05-22T03:54:10.865Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CF715E-Complete-the-Permutations"><a href="#CF715E-Complete-the-Permutations" class="headerlink" title="CF715E - Complete the Permutations"></a>CF715E - Complete the Permutations</h1><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>对于两个排列$p,q$，令$p\rightarrow q$代价为通过交换使得$p$变成$q$的最小步数</p><p>现在部分给定了$p$和$q$，求所有情况下，$p\rightarrow q=i,i\in[0,n-1]$的排列组数目</p><p><br></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>排列变换显然要放到置换环上考虑，考虑两个排列之间的变换有多种等价的方式</p><p>不妨认为连的边就是$p_i\rightarrow q_i$，最终操作步数就是$n-$置换环的个数</p><p>对于已经确定的部分，能够确定的边可以直接连，能够确定的链可以缩成点</p><p>那么最终，图上只剩下三种待定的边</p><p>$0\rightarrow 0,0\rightarrow x,x\rightarrow 0$，其中$0\rightarrow x,x\rightarrow 0$表示一条出现了一半的边</p><p>ps: 如果有$0\rightarrow x\rightarrow 0$，那么直接缩成一个$0\rightarrow 0$看待</p><p>不妨设这三种边个数分别为$A,B,C$，已经确定的环可以数出是$D$最后加入答案</p><p>由于一个$A$由两边确定，实际上确定一个边组之后，排列$0\rightarrow 0$的位置得到$A!$种方案，也可以最后加入答案</p><p>考虑什么样的边可以接成环</p><p>仅A:$0\rightarrow 0,0\rightarrow 0\cdots$</p><p>仅B: $0\rightarrow x,0\rightarrow x\cdots$</p><p>仅C: $x\rightarrow 0,x\rightarrow 0,\cdots$</p><p>A+B=A,$0\rightarrow x+0\rightarrow 0=0\rightarrow 0$</p><p>C+A=A,$0\rightarrow 0+x\rightarrow 0=0\rightarrow 0$</p><p>实际上，组合环的情况</p><p>B前面要么是B要么是A，最终将A后面跟着的小弟B都缩在一起看待</p><p>C后面要么是C要么是A，最终将A前面跟着的大哥C都缩在一起看待</p><p>实际上B,C计算类似，我们能够得到一个计算思路</p><p>将每个B,C加入组合环对于组合环缩点之后的点数无影响，那么可以将A,B,C分离计算</p><p>那么考虑一个B要么在单纯的B环上要么在组合环上</p><p>枚举有$i$个$B$在单纯B环上，构成$j$个环的方案数（当然要先组合数将$j$个点选出）</p><p>这就是第一类斯特林数$\begin{bmatrix}i\\j\end{bmatrix}$，<a href="https://www.cnblogs.com/chasedeath/p/14049870.html">参考</a></p><p>剩下的加入组合环中，考虑依次加入每个B，每个B可以接在B后面也可以接在A后面</p><p>方案数即$A^{\overline{B-i} }$，最终计算得到$G_i$表示B构成了i个单纯B环的方案数，复杂度为$O(n^2)$</p><p><br></p><p>A的贡献不需要将组合环和单纯A环分开考虑，直接就是$F_i=\begin{bmatrix}A\\i\end{bmatrix}$</p><p>最后将三种点背包合并，加入前面提到的常量即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span>&#123;</span>N=<span class="number">300</span>,P=<span class="number">998244353</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> p[N],q[N],pre[N],nxt[N],A,B,E,D;</span><br><span class="line"><span class="keyword">int</span> F[N],G[N],H[N],V[N];</span><br><span class="line"><span class="keyword">int</span> S[N][N],T[N][N],C[N][N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) pre[i]=nxt[i]=<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,**S=<span class="number">1</span>,n) <span class="built_in">rep</span>(j,<span class="number">1</span>,i) S[i][j]=(S[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1ll</span>*(i<span class="number">-1</span>)*S[i<span class="number">-1</span>][j])%P;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n) <span class="built_in">rep</span>(j,*T[i]=<span class="number">1</span>,n) T[i][j]=<span class="number">1ll</span>*T[i][j<span class="number">-1</span>]*(i+j<span class="number">-1</span>)%P;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n) <span class="built_in">rep</span>(j,*C[i]=<span class="number">1</span>,i) C[i][j]=(C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>])%P;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,p+i);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,q+i);</span><br><span class="line"><span class="keyword">if</span>(p[i] &amp;&amp; q[i]) nxt[p[i]]=q[i],pre[q[i]]=p[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(p[i]) nxt[p[i]]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(q[i]) pre[q[i]]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(pre[i]&lt;=<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> j=i;</span><br><span class="line"><span class="keyword">for</span>(;nxt[j]&gt;<span class="number">0</span>;j=nxt[j]) V[j]=<span class="number">1</span>;</span><br><span class="line">V[j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(pre[i]==nxt[j]) A+=pre[i]==<span class="number">-1</span>; <span class="comment">// ==0 || ==-1 ,but we can&#x27;t count 0 in </span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(~pre[i]) B++;</span><br><span class="line"><span class="keyword">else</span> E++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(!V[i]) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;!V[j];j=nxt[j]) V[j]=<span class="number">1</span>;</span><br><span class="line">D++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> c=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,A) c=<span class="number">1ll</span>*c*i%P;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,A) F[i]=<span class="number">1ll</span>*c*S[A][i]%P;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,B) <span class="built_in">rep</span>(j,<span class="number">0</span>,i) G[j]=(G[j]+<span class="number">1ll</span>*S[i][j]*T[A][B-i]%P*C[B][i])%P;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,E) <span class="built_in">rep</span>(j,<span class="number">0</span>,i) H[j]=(H[j]+<span class="number">1ll</span>*S[i][j]*T[A][E-i]%P*C[E][i])%P;</span><br><span class="line"></span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n) V[i]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,A) <span class="built_in">rep</span>(j,<span class="number">0</span>,B) V[i+j+D]=(V[i+j+D]+<span class="number">1ll</span>*F[i]*G[j])%P;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n) F[i]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,A+B+D) <span class="built_in">rep</span>(j,<span class="number">0</span>,E) F[n-i-j]=(F[n-i-j]+<span class="number">1ll</span>*V[i]*H[j])%P;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,F[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="进一步的优化？"><a href="#进一步的优化？" class="headerlink" title="进一步的优化？"></a>进一步的优化？</h3><p>$F_i$的计算时标准的第一类斯特林数行，用倍增法求上升幂即可</p><p>$\displaystyle G(x)=\sum_{i=0}^B A^{\overline{B-i} }\binom{B} {i} x^{\overline{i} }$</p><p>把系数拿出来，可以直接做一个上升幂多项式转普通多项式</p><p>复杂度为$O(n\log ^2n)$</p><p>（听说可以$O(n\log n)$<del>但是我没有脑子只会套板子哈哈哈哈</del>）</p><p><br></p><p>以下未上传！！！如果看到说明我在搞笑！！！看到叫我</p><p>$\displaystyle G_i=\sum_{j=i}^B \binom{B} {j}A^{\overline{B-j} }\cdot [x^j]\frac{1} {i!}(-1)^i\ln^i(1-x)$</p><p>$\displaystyle G_i=\sum_{j=i}^B \frac{B!} {j!(B-j)!}\frac{(A+B-j-1)!} {(A-1)!}\cdot [x^j]\frac{1} {i!}(-1)^i\ln^i(1-x)$</p><p>$\displaystyle G_i=\frac{(-1)^iB!} {(A-1)!i!} \sum_{j=i}^B \frac{(A+B-j-1)!} {j!(B-j)!}\cdot [x^j]\ln^i(1-x)$</p><p>由于对于每个$i$，$\displaystyle \sum_{j=i}^B \frac{(A+B-j-1)!} {j!(B-j)!}$是常量，设</p><p>$\displaystyle \varphi(x)=\sum_{j=0}^B x^{-1-j} \frac{(A+B-j-1)!} {j!(B-j)!}$(为什么是是$-1-j$会在下面出现)</p><p>$\displaystyle G_i=\frac{(-1)^iB!} {(A-1)!i!} [x^{-1}] \varphi(x)\ln^i(1-x)$</p><p>对比扩展拉格朗日反演的形式</p><p>$\displaystyle [x^n]H(G(x))=\frac{1} {n}[x^{-1}]H’(x)(\frac{1} {F(x)})^n$，其中$G(x)$为$F(x)$的复合逆</p><p>得到$\displaystyle H(x)=\int \varphi(x),F(x)=\frac{1} {\ln(1-x)}$</p><p>从而得到$F(x)$的复合逆为$\displaystyle 1-e^{x^{-1} }$</p><p>现在要算$H(1-e^{x^{-1} })=\sum$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CF715E-Complete-the-Permutations&quot;&gt;&lt;a href=&quot;#CF715E-Complete-the-Permutations&quot; class=&quot;headerlink&quot; title=&quot;CF715E - Complete the Permut</summary>
      
    
    
    
    <category term="题解" scheme="http://chasingdeath.github.io/categories/solutions/"/>
    
    
    <category term="Atcoder" scheme="http://chasingdeath.github.io/tags/Atcoder/"/>
    
    <category term="Codeforces" scheme="http://chasingdeath.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>CF1503E - 2-Coloring</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/12/4187466f.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/12/4187466f.html</id>
    <published>2021-05-12T09:57:01.000Z</published>
    <updated>2021-05-22T03:54:10.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CF1503E-2-Coloring"><a href="#CF1503E-2-Coloring" class="headerlink" title="CF1503E - 2-Coloring"></a>CF1503E - 2-Coloring</h1><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个$n\times m$网格图，给每个格子黑白染色，使得最终</p><p>每行恰好只有一条黑色线段，每列恰好只有一条白色线段</p><p>求方案数</p><p><br></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><del>这种东西当然是分析好情况就ok了</del></p><p>大概分几种情况</p><p>1.<img src="https://i.loli.net/2021/05/12/qATsLMa4jZ8yveI.png" alt="QQ截图20210512171601.png"></p><p>2.<img src="https://i.loli.net/2021/05/12/crd4g5uHYIFAtye.png" alt="QQ截图20210512171647.png"></p><p>3.<img src="https://i.loli.net/2021/05/12/Bud7vkfERjlGDzN.png" alt="QQ截图20210512175626.png"></p><p>为什么要把第三种拿出来说呢，实际上第三种是1和2的交（黑白都是梯形，确信）</p><p>那么枚举中间的分界线，根据中间相距最近的两个点的位置就能用组合数确定答案</p><p>（虽然代码里不是组合数）</p><p>前缀和优化即可$O(nm)$，注意两个梯形可以对称，所以最后答案*2</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2030</span>,INF=<span class="number">1e9</span>+<span class="number">10</span>,P=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> dp[N][N],ans;</span><br><span class="line"><span class="comment">// dp[i][j]是i个，每个&gt;=0且递增，最后一个&lt;=j的方案数</span></span><br><span class="line"><span class="function">ll <span class="title">F</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(m&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> m==<span class="number">0</span>?<span class="number">1</span>:(dp[n][m]-dp[n][m<span class="number">-1</span>]+P)%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> S[N],T[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Calc</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,m<span class="number">-1</span>) &#123;</span><br><span class="line">s=(s+<span class="number">1ll</span>*<span class="built_in">F</span>(j,i)*dp[m-j][i<span class="number">-1</span>])%P;</span><br><span class="line">ans=(ans+<span class="number">1ll</span>*s*<span class="built_in">F</span>(m-j,n-i)%P*dp[j][n-i<span class="number">-1</span>])%P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,N<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,N<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(j) dp[i<span class="number">-1</span>][j]+=dp[i<span class="number">-1</span>][j<span class="number">-1</span>],<span class="built_in">Mod1</span>(dp[i<span class="number">-1</span>][j]);</span><br><span class="line">dp[i][j]=dp[i<span class="number">-1</span>][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">n=<span class="built_in">rd</span>(),m=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">Calc</span>(),<span class="built_in">swap</span>(n,m),<span class="built_in">Calc</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,m<span class="number">-1</span>) &#123;</span><br><span class="line">s=<span class="number">1ll</span>*<span class="built_in">F</span>(j,i)*dp[m-j][i<span class="number">-1</span>]%P;</span><br><span class="line">ans=(ans<span class="number">-1ll</span>*s*<span class="built_in">F</span>(m-j,n-i)%P*dp[j][n-i<span class="number">-1</span>])%P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Mod2</span>(ans);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans*<span class="number">2</span>%P);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CF1503E-2-Coloring&quot;&gt;&lt;a href=&quot;#CF1503E-2-Coloring&quot; class=&quot;headerlink&quot; title=&quot;CF1503E - 2-Coloring&quot;&gt;&lt;/a&gt;CF1503E - 2-Coloring&lt;/h1&gt;&lt;h3 i</summary>
      
    
    
    
    <category term="题解" scheme="http://chasingdeath.github.io/categories/solutions/"/>
    
    
    <category term="Codeforces" scheme="http://chasingdeath.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>CF1392H - ZS Shuffles Cards</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/12/49ee0c99.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/12/49ee0c99.html</id>
    <published>2021-05-12T04:14:04.000Z</published>
    <updated>2021-05-22T03:54:10.801Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CF1392H-ZS-Shuffles-Cards"><a href="#CF1392H-ZS-Shuffles-Cards" class="headerlink" title="CF1392H - ZS Shuffles Cards"></a>CF1392H - ZS Shuffles Cards</h1><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定$n$张卡和$m$个终止符，初始时随机打乱成排列，每次操作选出最前面的卡$x$拿走</p><p>1.如果$x$不是终止符，将$x$放入集合</p><p>2.如果$x$是终止符，那么重新打乱$n+m$张卡</p><p>求期望多少步$S$变成全集</p><p><br></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>令$dp_i$表示当前手上有$i$张不同卡时期望多少步结束</p><p>按轮考虑，一轮期望操作次数固定，即</p><p>$\displaystyle \frac{\displaystyle \sum _{i=0}^n \binom{n+m-i-1} {m-1}(i+1)} {\displaystyle \binom{n+m} {m} }$</p><p>现在考虑从$dp_{i+j}$转移过来，当前的牌可以分为三类</p><p>1.手里有的</p><p>2.手里没有的</p><p>3.终止牌</p><p>我们计算$dp_{i+j}$向$dp_i$转移时的概率，并不需要管1类卡，只需要考虑2,3类卡的相对顺序</p><p>不妨直接忽略手里的$i$张卡，得到转移系数</p><p>$dp_{i+j}\rightarrow dp_i: \cfrac{\displaystyle \binom{n-i-j-1} {m-1} } {\displaystyle \binom{n-i+m} {m} }$</p><p>容易发现可以将$\displaystyle dp_{i+j}\binom{n-i-j-1} {m-1}$累和完成</p><p>注意$dp_i$有向$dp_{i}$自己的转移，需要解一次方程，因此需要求逆元</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e6</span>+<span class="number">10</span>,P=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> I[N],J[N];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll k=P<span class="number">-2</span>)</span> </span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,x=x*x%P) <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res=res*x%P;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> F[N];</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123; <span class="keyword">return</span> <span class="number">1ll</span>*J[n]*I[m]%P*I[n-m]%P; &#125;</span><br><span class="line"><span class="function">ll <span class="title">IC</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123; <span class="keyword">return</span> <span class="number">1ll</span>*I[n]*J[m]%P*J[n-m]%P; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">rep</span>(i,*J=<span class="number">1</span>,N<span class="number">-1</span>) J[i]=<span class="number">1ll</span>*J[i<span class="number">-1</span>]*i%P;</span><br><span class="line">I[N<span class="number">-1</span>]=<span class="built_in">qpow</span>(J[N<span class="number">-1</span>]);</span><br><span class="line"><span class="built_in">drep</span>(i,N<span class="number">-1</span>,<span class="number">1</span>) I[i<span class="number">-1</span>]=<span class="number">1ll</span>*I[i]*i%P; </span><br><span class="line">n=<span class="built_in">rd</span>(),m=<span class="built_in">rd</span>();</span><br><span class="line">ll s=<span class="number">0</span>,inv=<span class="built_in">IC</span>(n+m,m),coef=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n) coef=(coef+<span class="built_in">C</span>(n+m-i<span class="number">-1</span>,m<span class="number">-1</span>)*(i+<span class="number">1</span>))%P;</span><br><span class="line">coef=coef*inv%P;</span><br><span class="line"></span><br><span class="line"><span class="built_in">drep</span>(i,n<span class="number">-1</span>,<span class="number">0</span>) &#123;</span><br><span class="line">ll p=<span class="built_in">C</span>(n+m-i<span class="number">-1</span>,m<span class="number">-1</span>),t=<span class="built_in">IC</span>(n-i+m,m);</span><br><span class="line">F[i]=(s*t%P+coef)%P*<span class="built_in">qpow</span>(P+<span class="number">1</span>-p*t%P)%P;</span><br><span class="line">s=(s+<span class="number">1ll</span>*p*F[i])%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,F[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CF1392H-ZS-Shuffles-Cards&quot;&gt;&lt;a href=&quot;#CF1392H-ZS-Shuffles-Cards&quot; class=&quot;headerlink&quot; title=&quot;CF1392H - ZS Shuffles Cards&quot;&gt;&lt;/a&gt;CF1392H -</summary>
      
    
    
    
    <category term="题解" scheme="http://chasingdeath.github.io/categories/solutions/"/>
    
    
    <category term="Codeforces" scheme="http://chasingdeath.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>多项式与点值式</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/12/a8fd8b80.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/12/a8fd8b80.html</id>
    <published>2021-05-12T01:04:01.000Z</published>
    <updated>2021-05-22T03:54:11.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多项式与点值式"><a href="#多项式与点值式" class="headerlink" title="多项式与点值式"></a>多项式与点值式</h1><p>正常$\text{DFT/IDFT}$是构造一个特殊的点值式，即$x_i=\omega_{n}^i$</p><p>如果能通过题目条件构造出来这样的点值，就可以直接$\text{DFT/IDFT}$</p><p>那如果不能的话。。。。。</p><h2 id="多项式多点求值"><a href="#多项式多点求值" class="headerlink" title="多项式多点求值"></a>多项式多点求值</h2><p>一个多项式$F(x)$我们求它在$x_0,x_0,\cdots x_{m-1}$上的点值</p><p>核心是分治+多项式取模，因此常数很大</p><p>对于当前分治区间$[l,r]\in[0,m-1]$</p><p>需要快速构造一个长度为$\frac{r-l+1} {2}$的等价多项式进入分治区间</p><p>令$G_{l,r}(x)=\prod_l^r(1-x_i)$</p><p>由于$G_{l,r(x_l)}=\cdots=G_{l,r}(x_r)=0$</p><p>所以可以将$F(x)$对于$G_{l,mid}(x)$和$G_{mid+1,r}(x)$分别取模之后得到两个等价式</p><p>递归到$[l=r]$时，$F(x)$只剩下常数项</p><p>需要被访问的$G(x)$可以预先跑一遍分治NTT求出</p><p>那么复杂度就是$O(n\log ^2n)$</p><p>这种做法代码实现困难，而且常数非常大</p><script type="math/tex; mode=display">\</script><hr><h2 id="多项式快速插值"><a href="#多项式快速插值" class="headerlink" title="多项式快速插值"></a>多项式快速插值</h2><p>对于点对$(x_i,y_i)$</p><p>多项式拉格朗日插值的式子是</p>$$\begin{aligned}F(x) = \sum_{i=0}^{n-1} y_i \prod_{i\ne j} \frac{x-x_j} {x_i-x_j}\end{aligned}$$<p>那么需要快速求出$\prod \frac{1} {x_i-x_j}$</p><p>构造多项式$G(x)=\prod (x-x_i)$</p><p>那么$\prod (x_i-x_j)=\frac{G} {x-x_i}(x_i)$</p><p>由于$G(x),x-x_i$在$x_i$上的点值均为$0$</p><p>我们要求的多项式就是$\begin{aligned} \prod_{i\ne j} (x_i-x_j) \end{aligned}=\frac{G(x)} {x-x_i}$</p><p>即求出$\frac{G} {x-x_i}(x_i)$</p><p>分母分子均为$0$，所以带入洛必达法则$\begin{aligned}\frac{G} {x-x_i}(x_i)=\frac{G'} {(x-x_i)'}(x_i)=G'(x_i)\end{aligned}$</p><p>那么求出$G’(x)$，然后多项式多点求值即可</p><p>剩下那一部分的答案，可以简单地分治合并上来，$[l=r]$时，多项式是一个常数</p><p>合并上来时</p><p>$[l,mid]$的答案补上$\prod_{mid+1}^r (x-x_i)$</p><p>$[mid+1,r]$的答案补上$\prod_{l}^{mid} (x-x_i)$</p><p>即复杂度为$O(n\log ^2n)$</p><p><del>垃圾模板题卡常</del></p><script type="math/tex; mode=display">\</script><script type="math/tex; mode=display">\</script><h2 id="应用转置原理对于多点求值的优化"><a href="#应用转置原理对于多点求值的优化" class="headerlink" title="应用转置原理对于多点求值的优化"></a>应用转置原理对于多点求值的优化</h2><p>由于这个东西实在是太新了，所以没有什么文献可以看</p><h3 id="关于转置原理的前置定义"><a href="#关于转置原理的前置定义" class="headerlink" title="关于转置原理的前置定义"></a>关于转置原理的前置定义</h3><p>矩阵的转置:</p><p>对于$n\cdot m$的矩阵$M$，它的转置$M^{T}$为交换行列坐标后得到的$m\cdot n$的矩阵</p><p>其满足运算性质:</p><p>1.逆: ${(A^T)}^T=A$</p><p>2.和:$(A+B)^T=A^T+B^T$</p><p>3.<strong>反积</strong>:$(AB)^T=B^TA^T$</p><p>初等矩阵:</p><p>初等矩阵是指单位矩阵通过初等变换(交换行列，某一行(列)乘上$k$加到另一行(列)上，类似高斯消元)得到的矩阵</p><p>对于计算$b=A\cdot a$，其中$A$为矩阵，$a,b$为列向量</p><p>考虑先计算$b’=A^T\cdot a$</p><p>出计算$b’$的过程，这可以分解成若干步操作（或说是初等矩阵）$E_1,E_2,\cdots E_k$</p><p>即$b’=E_1\cdot E_2\cdot E_3\cdots E_k\cdot a$</p><p>将$E_i$倒序执行，并且每一步都换成原先操作的转置$E_i^T$，就能得到$A\cdot a$</p><p>即$b=E^T_k\cdot E^T_{k-1}\cdots E^T_1\cdot a$</p><p><br></p><h3 id="应用转置原理的优化核心"><a href="#应用转置原理的优化核心" class="headerlink" title="应用转置原理的优化核心"></a>应用转置原理的优化核心</h3><p>如果把多项式系数视为列向量$F$，则可以把多项式多点求值的过程视为一个矩阵运算$M$</p><p>为了便于描述，设要求的点值和多项式项数均为$n$</p><p>设要求的点横坐标为$x_i$，则$M$是范德蒙德矩阵</p><div class="table-container"><table><thead><tr><th>$1$</th><th>$x_0^1$</th><th>$x_0^2$</th><th>…</th></tr></thead><tbody><tr><td>1</td><td>$x_1^1$</td><td>$x_1^2$</td><td>…</td></tr><tr><td>1</td><td>$x_2^1$</td><td>$x_2^2$</td><td>…</td></tr><tr><td>…</td><td></td><td></td></tr></tbody></table></div><p>分析会发现我们要求的实际上是$b=M\cdot F$（到底是谁对矩阵乘法有误解？）</p><p>现在来将问题转置，先假装求$b’=M^T\cdot F$</p><div class="table-container"><table><thead><tr><th>$1$</th><th>1</th><th>1</th><th>…</th></tr></thead><tbody><tr><td>$x_0^1$</td><td>$x_1^1$</td><td>$x_2^1$</td><td>…</td></tr><tr><td>$x_0^2$</td><td>$x_1^2$</td><td>$x_2^2$</td><td>…</td></tr><tr><td>…</td><td></td><td></td></tr></tbody></table></div><p>实际$M^T\cdot F$得到的结果用形式幂级数表示是</p><p>$\displaystyle\sum F_i\sum_{j=0}^{n-1}x_i^j\equiv \sum \frac{F_i} {1-x_ix}\pmod {x^n}$</p><p>求$\displaystyle M^T\cdot F= \sum \frac{F_i} {1-x_ix}\pmod {x^n}$</p><p>可以用两次分治 $\text{NTT}$ 解决，大致过程可以描述为</p><p>1.将问题转化为求$\begin{aligned} \frac{\sum F_i\prod _{i\ne j} {(1-x_jx)} } {\prod (1-x_ix)}\end{aligned} $</p><p>2.对于分治节点$[L,R]$，求得$T(L,R)=\prod_{i=L}^R{(1-x_i)}$</p><p>3.从下往上合并，每次合并答案为$A(L,R)=A(L,mid)\cdot T(mid+1,R)+A(mid+1,R)\cdot T(L,mid)$</p><p>4.最后将答案$A(0,n-1)$除以$\prod(1-x_ix)$</p><script type="math/tex; mode=display">\</script><p>然后我们考虑把所有的操作都反过来并且换成转置，求得$M\cdot F$</p><p>因为过程中涉及到多项式卷积，设其转置运算为$\oplus$</p><p>我们知道普通的多项式卷积为$F(x)\cdot  G(x)=\sum_i\sum_j [x^i]F(x)[x^j]G(x)x^{i+j}$</p><p>则其转置为$mul^T(F(x),G(x))=F(x)\oplus G(x)=\sum_i\sum_{j\leq i} [x^i]F(x)[x^j]G(x)x^{i-j}$</p><p>可以看到这个操作会导致多项式项数降低，若原先$F(x),G(x)$最高项为$n,m$，则转置卷积后最高项为$n-m$</p><script type="math/tex; mode=display">\</script><p>那么给出整个转置后的过程为</p><p>1.在$F(x)$后面加上若干个$0$，求出$\displaystyle A(0,n-1)=F(x) \oplus \frac{1} {\prod(1-x_ix)}$的前$n$项</p><p>2.对于每个分治节点，依然预处理$\displaystyle T(L,R)=\prod_{i=L}^R{(1-x_ix)}$</p><p>3.从顶向下递归，向子节点下传</p><p>$A(L,mid)= A(L,R)\oplus T(mid+1,R)$</p><p>$A(mid+1,R)= A(L,R)\oplus T(L,mid)$</p><p>递归到子节点时，只剩一项，即是每一个点值</p><script type="math/tex; mode=display">\</script><p>关于这个优化的效果:</p><p>1.不需要写多项式除法和取模了!</p><p>2.第二次分治的过程中调用的$mul^T$长度短一倍</p><p>下面这份代码是优化过的版本，能快一倍左右，但关键还是代码短<del>听说可以被卡常卡到1s跑1e6</del></p><p><a href="https://www.luogu.com.cn/record/50577764">Luogu Submission</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&gt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&lt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>=</span><span class="keyword">int</span>&gt; <span class="function">T <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line">T s=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>())) <span class="keyword">if</span>(IO==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(IO^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>()));</span><br><span class="line"><span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1</span>&lt;&lt;<span class="number">17</span>,P=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">typedef</span> vector &lt;<span class="keyword">int</span>&gt; V;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll k=P<span class="number">-2</span>)</span> </span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,x=x*x%P) <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res=res*x%P;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> w[N],Inv[N+<span class="number">1</span>],rev[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line">w[N/<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="built_in">qpow</span>(<span class="number">3</span>,(P<span class="number">-1</span>)/N),i=N/<span class="number">2</span>+<span class="number">1</span>;i&lt;N;++i) w[i]=<span class="number">1ll</span>*w[i<span class="number">-1</span>]*t%P;</span><br><span class="line"><span class="built_in">drep</span>(i,N/<span class="number">2</span><span class="number">-1</span>,<span class="number">1</span>) w[i]=w[i&lt;&lt;<span class="number">1</span>];</span><br><span class="line">Inv[<span class="number">0</span>]=Inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">2</span>,N) Inv[i]=<span class="number">1ll</span>*(P-P/i)*Inv[P%i]%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> R=<span class="number">1</span>,cc=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(R&lt;n) R&lt;&lt;=<span class="number">1</span>,cc++;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,R<span class="number">-1</span>) rev[i]=(rev[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>)|((i&amp;<span class="number">1</span>)&lt;&lt;cc);</span><br><span class="line"><span class="keyword">return</span> R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">NTT</span><span class="params">(<span class="keyword">int</span> n,V &amp;A,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line">    ull a[N];</span><br><span class="line"><span class="keyword">if</span>((<span class="keyword">int</span>)A.<span class="built_in">size</span>()&lt;n) A.<span class="built_in">resize</span>(n);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) a[i]=A[rev[i]];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i&lt;&lt;=<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> *e=w+i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;n;l+=i*<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=l;j&lt;l+i;++j) &#123;</span><br><span class="line"><span class="keyword">int</span> t=a[j+i]*e[j-l]%P;</span><br><span class="line">a[j+i]=a[j]+P-t;</span><br><span class="line">a[j]+=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) A[i]=a[i]%P;</span><br><span class="line"><span class="keyword">if</span>(f==<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">reverse</span>(A.<span class="built_in">begin</span>()+<span class="number">1</span>,A.<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) A[i]=<span class="number">1ll</span>*A[i]*Inv[n]%P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V <span class="keyword">operator</span> ~ (V F) &#123;</span><br><span class="line"><span class="keyword">int</span> n=F.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">if</span>(n==<span class="number">1</span>) <span class="keyword">return</span> V&#123;(<span class="keyword">int</span>)<span class="built_in">qpow</span>(F[<span class="number">0</span>])&#125;;</span><br><span class="line">V G=F; G.<span class="built_in">resize</span>((n+<span class="number">1</span>)/<span class="number">2</span>),G=~G;</span><br><span class="line"><span class="keyword">int</span> R=<span class="built_in">Init</span>(n*<span class="number">2</span>);</span><br><span class="line"><span class="built_in">NTT</span>(R,F,<span class="number">1</span>),<span class="built_in">NTT</span>(R,G,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,R<span class="number">-1</span>) F[i]=(<span class="number">2</span><span class="number">-1ll</span>*F[i]*G[i]%P+P)*G[i]%P;</span><br><span class="line"><span class="built_in">NTT</span>(R,F,<span class="number">-1</span>),F.<span class="built_in">resize</span>(n);</span><br><span class="line"><span class="keyword">return</span> F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">V <span class="keyword">operator</span> * (V A,V B) &#123;</span><br><span class="line"><span class="keyword">int</span> n=A.<span class="built_in">size</span>()+B.<span class="built_in">size</span>()<span class="number">-1</span>,R=<span class="built_in">Init</span>(n);</span><br><span class="line"><span class="built_in">NTT</span>(R,A,<span class="number">1</span>),<span class="built_in">NTT</span>(R,B,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,R<span class="number">-1</span>) A[i]=<span class="number">1ll</span>*A[i]*B[i]%P;</span><br><span class="line"><span class="built_in">NTT</span>(R,A,<span class="number">-1</span>),A.<span class="built_in">resize</span>(n);</span><br><span class="line"><span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">V <span class="title">Evaluate</span><span class="params">(V F,V X)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> ls[N&lt;&lt;<span class="number">1</span>],rs[N&lt;&lt;<span class="number">1</span>],cnt;</span><br><span class="line"><span class="keyword">static</span> V T[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">auto</span> TMul=[&amp;](V F,V G)&#123;</span><br><span class="line"><span class="built_in">reverse</span>(G.<span class="built_in">begin</span>(),G.<span class="built_in">end</span>());</span><br><span class="line"><span class="keyword">int</span> n=F.<span class="built_in">size</span>(),m=G.<span class="built_in">size</span>(),R=<span class="built_in">Init</span>(n);</span><br><span class="line"><span class="built_in">NTT</span>(R,F,<span class="number">1</span>),<span class="built_in">NTT</span>(R,G,<span class="number">1</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,R<span class="number">-1</span>) F[i]=<span class="number">1ll</span>*F[i]*G[i]%P;</span><br><span class="line"><span class="built_in">NTT</span>(R,F,<span class="number">-1</span>); <span class="function">V <span class="title">T</span><span class="params">(n-m+<span class="number">1</span>)</span></span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n-m) T[i]=F[i+m<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">static</span> function &lt;<span class="built_in"><span class="keyword">int</span></span>(<span class="keyword">int</span>,<span class="keyword">int</span>)&gt; Build=[&amp;](<span class="keyword">int</span> l,<span class="keyword">int</span> r) &#123;</span><br><span class="line"><span class="keyword">int</span> u=++cnt; ls[u]=rs[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l==r) &#123;</span><br><span class="line">T[u]=V&#123;<span class="number">1</span>,P-X[l]&#125;;</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">ls[u]=<span class="built_in">Build</span>(l,mid),rs[u]=<span class="built_in">Build</span>(mid+<span class="number">1</span>,r);</span><br><span class="line">T[u]=T[ls[u]]*T[rs[u]];</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n=F.<span class="built_in">size</span>(),m=X.<span class="built_in">size</span>();</span><br><span class="line"><span class="built_in">cmax</span>(n,m),F.<span class="built_in">resize</span>(n),X.<span class="built_in">resize</span>(n);</span><br><span class="line">cnt=<span class="number">0</span>,<span class="built_in">Build</span>(<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">F.<span class="built_in">resize</span>(n*<span class="number">2</span>+<span class="number">1</span>),T[<span class="number">1</span>]=<span class="built_in">TMul</span>(F,~T[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,cnt) <span class="keyword">if</span>(ls[i]) &#123;</span><br><span class="line"><span class="built_in">swap</span>(T[ls[i]],T[rs[i]]);</span><br><span class="line"><span class="keyword">int</span> R=<span class="built_in">Init</span>(T[i].<span class="built_in">size</span>()),n=T[i].<span class="built_in">size</span>(),m1=T[ls[i]].<span class="built_in">size</span>(),m2=T[rs[i]].<span class="built_in">size</span>();</span><br><span class="line"><span class="built_in">NTT</span>(R,T[i],<span class="number">1</span>);</span><br><span class="line"><span class="built_in">reverse</span>(T[ls[i]].<span class="built_in">begin</span>(),T[ls[i]].<span class="built_in">end</span>()); <span class="built_in">reverse</span>(T[rs[i]].<span class="built_in">begin</span>(),T[rs[i]].<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">NTT</span>(R,T[ls[i]],<span class="number">1</span>); <span class="built_in">NTT</span>(R,T[rs[i]],<span class="number">1</span>);</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,R<span class="number">-1</span>) &#123;</span><br><span class="line">T[ls[i]][j]=<span class="number">1ll</span>*T[ls[i]][j]*T[i][j]%P;</span><br><span class="line">T[rs[i]][j]=<span class="number">1ll</span>*T[rs[i]][j]*T[i][j]%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">NTT</span>(R,T[ls[i]],<span class="number">-1</span>); <span class="built_in">NTT</span>(R,T[rs[i]],<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,n-m1) T[ls[i]][j]=T[ls[i]][j+m1<span class="number">-1</span>];</span><br><span class="line">T[ls[i]].<span class="built_in">resize</span>(n-m1+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,n-m2) T[rs[i]][j]=T[rs[i]][j+m2<span class="number">-1</span>];</span><br><span class="line">T[rs[i]].<span class="built_in">resize</span>(n-m2+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//T[ls[i]]=TMul(T[i],T[ls[i]]); T[rs[i]]=TMul(T[i],T[rs[i]]);</span></span><br><span class="line">&#125; <span class="keyword">else</span> X[p++]=T[i][<span class="number">0</span>];</span><br><span class="line">X.<span class="built_in">resize</span>(m);</span><br><span class="line"><span class="keyword">return</span> X;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">Init</span>(),n=<span class="built_in">rd</span>(),m=<span class="built_in">rd</span>();</span><br><span class="line"><span class="function">V <span class="title">F</span><span class="params">(n+<span class="number">1</span>)</span>,<span class="title">X</span><span class="params">(m)</span></span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n) F[i]=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,m<span class="number">-1</span>) X[i]=<span class="built_in">rd</span>();</span><br><span class="line">V Res=<span class="built_in">Evaluate</span>(F,X);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i:Res) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多项式与点值式&quot;&gt;&lt;a href=&quot;#多项式与点值式&quot; class=&quot;headerlink&quot; title=&quot;多项式与点值式&quot;&gt;&lt;/a&gt;多项式与点值式&lt;/h1&gt;&lt;p&gt;正常$\text{DFT/IDFT}$是构造一个特殊的点值式，即$x_i=\omega_{n}^i$</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>CF1499G - Graph Coloring</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/11/24cd28ff.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/11/24cd28ff.html</id>
    <published>2021-05-11T12:31:07.000Z</published>
    <updated>2021-05-22T03:54:10.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CF1499G-Graph-Coloring"><a href="#CF1499G-Graph-Coloring" class="headerlink" title="CF1499G - Graph Coloring"></a>CF1499G - Graph Coloring</h1><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>有一个二分图，$m$条边，每条边可以选择为+1或者-1，表示两端的点权值$a_u,a_v\pm 1$</p><p>最终的权值总和是$\sum |a_u|$</p><p>现在要维护一个动态加边操作</p><p>每次加边之后动态维护一个最优的方案最小化权值和，输出其$\text{Hash}$和</p><p><br></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>容易发现在最优中方案$|a_u|\leq 1$</p><p>且一个点$a_u=\pm 1$当且仅当$deg_u \mod 2=1$</p><p>在依次加入每条边的过程中，一旦出现环，显然环上的边经交错染色之后贡献可以忽略</p><p>且奇点总是成对地出现，两个成对的奇点能够确定一条路径</p><p>我们只需要在动态加边的过程中，维护对于这样奇点的路径以及环的交替染色即可</p><p>注意：</p><p>一个点可以被多条路径经过，但是在奇点成对地过程中</p><p>我们只认为其中一条的端点是它</p><p><br></p><p>那么我们在路径两端记录这条路径，每次加入一条边之后，可能产生多条路径的合并</p><p>而在实际实现的过程中，并没有必要把环从路径上删除</p><p>假设当前得到路径$x\rightarrow y$，加入一条边$y,z$且$z$在$x\rightarrow y$上</p><p>此时，我们直接认为新的路径端点就是$(x,z)$即可</p><p>环的部分依然可以保留在路径上，跟随路径进行交替染色而不影响答案</p><p>此时操作被简化为了合并两段交替路径（实际上就是在合并欧拉路径）</p><p>可以用带权并查集维护</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">4e5</span>+<span class="number">10</span>,P=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n1,n2,m,w=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> S[N][<span class="number">2</span>],F[N],K[N],D[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(F[x]==x) <span class="keyword">return</span> F[x];</span><br><span class="line"><span class="keyword">int</span> f=F[x]; F[x]=<span class="built_in">Find</span>(F[x]);</span><br><span class="line">D[x]^=D[f];</span><br><span class="line"><span class="keyword">return</span> F[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Uni</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> fx=<span class="built_in">Find</span>(x),fy=<span class="built_in">Find</span>(y),d=D[x]^D[y]^<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(fx==fy) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(d) &#123;</span><br><span class="line">ans-=S[fx][<span class="number">1</span>],<span class="built_in">Mod2</span>(ans);</span><br><span class="line"><span class="built_in">swap</span>(S[fx][<span class="number">0</span>],S[fx][<span class="number">1</span>]);</span><br><span class="line">ans+=S[fx][<span class="number">1</span>],<span class="built_in">Mod1</span>(ans);</span><br><span class="line">D[fx]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">F[fx]=fy; </span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,<span class="number">1</span>) S[fy][i]+=S[fx][i],<span class="built_in">Mod1</span>(S[fy][i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">rd</span>(),y=<span class="built_in">rd</span>()+n1;</span><br><span class="line">w*=<span class="number">2</span>,<span class="built_in">Mod1</span>(w),S[++m][<span class="number">0</span>]=w,F[m]=m;</span><br><span class="line"><span class="keyword">if</span>(K[x]&lt;K[y]) <span class="built_in">swap</span>(x,y);</span><br><span class="line"><span class="keyword">if</span>(!K[x]&amp;&amp;!K[y]) K[x]=K[y]=m;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(!K[y]) <span class="built_in">Uni</span>(K[x],m),K[x]=<span class="number">0</span>,K[y]=m;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">Uni</span>(K[x],m),<span class="built_in">Uni</span>(K[y],m),K[x]=K[y]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A[N],C;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n1=<span class="built_in">rd</span>(),n2=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(_,<span class="number">1</span>,<span class="built_in">rd</span>()) <span class="built_in">Add</span>();</span><br><span class="line"><span class="built_in">rep</span>(_,<span class="number">1</span>,<span class="built_in">rd</span>()) &#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">rd</span>()==<span class="number">1</span>) <span class="built_in">Add</span>(),<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans),<span class="built_in">fflush</span>(stdout);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">C=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m) <span class="keyword">if</span>(<span class="built_in">Find</span>(i),D[i]==<span class="number">1</span>) A[++C]=i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,C);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,C) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,A[i]);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>),<span class="built_in">fflush</span>(stdout);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CF1499G-Graph-Coloring&quot;&gt;&lt;a href=&quot;#CF1499G-Graph-Coloring&quot; class=&quot;headerlink&quot; title=&quot;CF1499G - Graph Coloring&quot;&gt;&lt;/a&gt;CF1499G - Graph Co</summary>
      
    
    
    
    <category term="题解" scheme="http://chasingdeath.github.io/categories/solutions/"/>
    
    
    <category term="Codeforces" scheme="http://chasingdeath.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>CF1288F - Red-Blue Graph</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/11/cb068eec.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/11/cb068eec.html</id>
    <published>2021-05-11T10:38:09.000Z</published>
    <updated>2021-05-22T03:54:10.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CF1288F-Red-Blue-Graph"><a href="#CF1288F-Red-Blue-Graph" class="headerlink" title="CF1288F - Red-Blue Graph"></a>CF1288F - Red-Blue Graph</h1><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一个二部图，每条边可以为红色/蓝色/无色，且一条边为红色需要付出$r$的代价，为蓝色需要$b$的代价</p><p>每个点可以为红色/蓝色/无色</p><p>1.如果该点为红色，则其所连的边中红色边边数 <strong>严格大于</strong> 蓝色边边数</p><p>2.如果该点为蓝色，则其所连的边中蓝色边边数 <strong>严格大于</strong> 红色边边数</p><p>求最小化代价满足上述限制</p><p><br></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><del>二分图果然和网络流密不可分</del></p><p>考虑从奇怪的题目中归纳一个费用流模型</p><p>用一个点的流量表示红色边-蓝色边的数量，将问题描述为</p><p>1.一条边如果为红色，那么所关联的点从$S$强制得到$1$的流量</p><p>2.一个边如果选蓝色，那么所关联的点强制向$T$流$1$的流量</p><p>3.如果一个点为红色，那么它最终应该仍然有流量多</p><p>那么强制这个点必须还能向$T$流$1$的流量，剩余随意</p><p>4.如果一个点为蓝色，那么它最终应该仍然流量不足</p><p>那么强制这个点必须从$S$得到$1$的流量，剩余随意</p><p>然而这个模型无法解决一条边对于其两端点的决策</p><p><br></p><p>常见的处理二分图思路：考虑将右半边图红蓝反着建立</p><p>此时令一条边对应的中继节点从$S$得到$2$的流量</p><p>这个节点向左边的点流0，表示这条边选择蓝色</p><p>这个节点向左边的点流1，表示这条边选择白色</p><p>这个节点向左边的点流2，表示这条边选择红色</p><p>同时将代价加入即可</p><p>这样给每个点额外增加了一个基准偏移的流量，需要简单处理一下</p><p>用代价为$-\infty$的边表示这条边强制选择</p><p>注意最终求出的是最小费用，而不是最大流</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,INF=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n1,n2,S,T,V,m,r,b;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,nxt,w,c;</span><br><span class="line">&#125; e[N];</span><br><span class="line"><span class="keyword">int</span> head[N],ecnt=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">e[++ecnt]=(Edge)&#123;v,head[u],w,c&#125;;</span><br><span class="line">head[u]=ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Link</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">int</span> c)</span></span>&#123; <span class="built_in">AddEdge</span>(u,v,w,c),<span class="built_in">AddEdge</span>(v,u,<span class="number">0</span>,-c); &#125;</span><br><span class="line"></span><br><span class="line">ll ans,dis[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> inq[N],pre[N],w[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n1=<span class="built_in">rd</span>(),n2=<span class="built_in">rd</span>(),m=<span class="built_in">rd</span>(),r=<span class="built_in">rd</span>(),b=<span class="built_in">rd</span>(),S=n1+n2+<span class="number">1</span>,T=S+<span class="number">1</span>,V=T;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n1) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;R&#x27;</span>) <span class="built_in">Link</span>(i,T,<span class="number">1</span>,-INF),ans+=INF,<span class="built_in">Link</span>(i,T,INF,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;B&#x27;</span>) <span class="built_in">Link</span>(S,i,<span class="number">1</span>,-INF),ans+=INF,<span class="built_in">Link</span>(S,i,INF,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;U&#x27;</span>) <span class="built_in">Link</span>(S,i,INF,<span class="number">0</span>),<span class="built_in">Link</span>(i,T,INF,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n2) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;B&#x27;</span>) <span class="built_in">Link</span>(i+n1,T,<span class="number">1</span>,-INF),ans+=INF,<span class="built_in">Link</span>(i+n1,T,INF,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;R&#x27;</span>) <span class="built_in">Link</span>(S,i+n1,<span class="number">1</span>,-INF),ans+=INF,<span class="built_in">Link</span>(S,i+n1,INF,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;U&#x27;</span>) <span class="built_in">Link</span>(S,i+n1,INF,<span class="number">0</span>),<span class="built_in">Link</span>(i+n1,T,INF,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m) &#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="built_in">rd</span>(),v=<span class="built_in">rd</span>()+n1;</span><br><span class="line"><span class="built_in">Link</span>(S,++V,<span class="number">2</span>,-INF),ans+=<span class="number">2</span>*INF;</span><br><span class="line"><span class="built_in">Link</span>(V,u,<span class="number">1</span>,<span class="number">0</span>),<span class="built_in">Link</span>(V,v,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">Link</span>(V,u,<span class="number">1</span>,r),<span class="built_in">Link</span>(V,v,<span class="number">1</span>,b);</span><br><span class="line"><span class="built_in">Link</span>(u,T,<span class="number">1</span>,-INF),ans+=INF;</span><br><span class="line"><span class="built_in">Link</span>(v,T,<span class="number">1</span>,-INF),ans+=INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">static</span> queue &lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,V) dis[i]=<span class="number">1e18</span>;</span><br><span class="line">dis[S]=<span class="number">0</span>,que.<span class="built_in">push</span>(S),w[S]=INF;</span><br><span class="line"><span class="keyword">while</span>(!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="keyword">int</span> u=que.<span class="built_in">front</span>(); que.<span class="built_in">pop</span>();</span><br><span class="line">inq[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].nxt) &#123;</span><br><span class="line"><span class="keyword">int</span> v=e[i].to,c=e[i].c;</span><br><span class="line"><span class="keyword">if</span>(!e[i].w || dis[v]&lt;=dis[u]+c) <span class="keyword">continue</span>;</span><br><span class="line">dis[v]=dis[u]+c,w[v]=<span class="built_in">min</span>(e[i].w,w[u]),pre[v]=i;</span><br><span class="line"><span class="keyword">if</span>(!inq[v]) que.<span class="built_in">push</span>(v),inq[v]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dis[T]&gt;<span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> c=w[T]; ans+=dis[T]*c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u=T;u!=S;u=e[pre[u]^<span class="number">1</span>].to) &#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;u&lt;&lt;endl;</span></span><br><span class="line">e[pre[u]].w-=c,e[pre[u]^<span class="number">1</span>].w+=c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ans&gt;INF) <span class="built_in">puts</span>(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line"><span class="built_in">rep</span>(u,T+<span class="number">1</span>,T+m) &#123;</span><br><span class="line"><span class="keyword">int</span> c=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].nxt) <span class="keyword">if</span>(e[i].to&lt;=n1) c+=e[i^<span class="number">1</span>].w;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&quot;BUR&quot;</span>[c]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CF1288F-Red-Blue-Graph&quot;&gt;&lt;a href=&quot;#CF1288F-Red-Blue-Graph&quot; class=&quot;headerlink&quot; title=&quot;CF1288F - Red-Blue Graph&quot;&gt;&lt;/a&gt;CF1288F - Red-Blue</summary>
      
    
    
    
    <category term="题解" scheme="http://chasingdeath.github.io/categories/solutions/"/>
    
    
    <category term="Codeforces" scheme="http://chasingdeath.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>CF1491G - Switch and Flip</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/11/25b7427f.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/11/25b7427f.html</id>
    <published>2021-05-11T10:19:55.000Z</published>
    <updated>2021-05-22T03:54:10.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CF1491G-Switch-and-Flip"><a href="#CF1491G-Switch-and-Flip" class="headerlink" title="CF1491G - Switch and Flip"></a>CF1491G - Switch and Flip</h1><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>有$n$个硬币，编号$1-n$，第$i$个位置上当前放了编号$a_i$的硬币</p><p>每次交换$(a_i,a_j)i\ne j$，且将硬币$a_i,a_j$翻转</p><p>求方案使得最终使得$a_i=i$且每个硬币恰好为原先方向</p><p>$n\ge 3$，方案步数$\leq n+1$</p><p><br></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>显然要先对于$a_i$求出置换环，步数$\leq n+1$说明</p><p>1.general的情况可以用$n$步解决$n$个点</p><p>2.存在至多一个特殊情况要$n+1$步</p><p>手玩发现我们无法$n$步解决一个大小为$n$的环</p><p>但是如果环上恰好已经有两个硬币被翻过，那么可以</p><p><img src="https://i.loli.net/2021/05/11/sn6JEZuYdHgbl3D.png" alt="QQ截图20210511180918.png"></p><p>图上点表示硬币编号，箭头所指是这个硬币应该在的位置</p><p>我们从一个已经翻转的点开始，不断交换$i,a_i$上的硬币，会将$a_i$移动到到应该在的位置上</p><p>同时下一个位置被翻转</p><p>不断进行这个操作，直到这个点消去了半边环，遇到了下一个点也是被翻过的点</p><p>此时再从下一个点开始将环的另外半边消去</p><p><br></p><p>那么考虑如何让一个环有两个已经翻转的点</p><p>假设提取出了$c$个环，我们可以先尽量成对匹配两个环</p><p>通过一次跨过环的交换操作合并两个大小$x,y$的环，同时生成两个翻转点</p><p>然后进项上面的操作，需要$x+y-1$次，恰好一共$x+y$次</p><p><br></p><p>那么对于最后剩下的一个环</p><p>1.如果前面已经有环被匹配过</p><p>那么随便选择一个当前$a_i=i$的自环与其合并即可</p><p><br></p><p>2.整个图为一个大环</p><p>先通过交换$1,a_1$将$a_1$弹出，然后$a_1$再和环上另外一个元素交换</p><p>此时$a_1$变成未翻转状态，环又并成一个环+2个翻转点</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,INF=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> a[N],vis[N],b[N],c;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> X[N],Y[N],C,col[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">X[++C]=x,Y[C]=y;</span><br><span class="line"><span class="built_in">swap</span>(a[x],a[y]),col[a[x]]^=<span class="number">1</span>,col[a[y]]^=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123; </span><br><span class="line"><span class="keyword">while</span>(!col[a[i]]) i=a[i];</span><br><span class="line"><span class="keyword">while</span>(!col[a[a[i]]]) <span class="built_in">Swap</span>(i,a[i]);</span><br><span class="line">i=a[i];</span><br><span class="line"><span class="keyword">while</span>(i!=a[i]) <span class="built_in">Swap</span>(i,a[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i;!vis[j];j=a[j]) vis[j]=<span class="number">1</span>;</span><br><span class="line">b[++c]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;c;i+=<span class="number">2</span>) &#123;</span><br><span class="line"><span class="built_in">Swap</span>(b[i],b[i+<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">Solve</span>(b[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(c&amp;<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> t=a[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">Swap</span>(<span class="number">1</span>,a[<span class="number">1</span>]),<span class="built_in">Swap</span>(t,a[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">Solve</span>(i);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(a[i]==i) &#123;</span><br><span class="line"><span class="built_in">Swap</span>(i,b[c]);</span><br><span class="line"><span class="built_in">Solve</span>(i);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,C);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,C) <span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,X[i],Y[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CF1491G-Switch-and-Flip&quot;&gt;&lt;a href=&quot;#CF1491G-Switch-and-Flip&quot; class=&quot;headerlink&quot; title=&quot;CF1491G - Switch and Flip&quot;&gt;&lt;/a&gt;CF1491G - Switc</summary>
      
    
    
    
    <category term="题解" scheme="http://chasingdeath.github.io/categories/solutions/"/>
    
    
    <category term="Codeforces" scheme="http://chasingdeath.github.io/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>CF1264E - Beautiful League</title>
    <link href="http://chasingdeath.github.io/articles/2021/05/11/46af0e1d.html"/>
    <id>http://chasingdeath.github.io/articles/2021/05/11/46af0e1d.html</id>
    <published>2021-05-11T09:53:03.000Z</published>
    <updated>2021-05-22T03:54:10.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CF1264E-Beautiful-League"><a href="#CF1264E-Beautiful-League" class="headerlink" title="CF1264E - Beautiful League"></a>CF1264E - Beautiful League</h1><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>给定一张竞赛图，其中一些边已经确定</p><p>现在求确定剩余边的方向，使得最终图上三元环个数最大</p><p><br></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p><del>三元问题着实难以处理</del></p><p>考虑什么样的三个点$(x,y,z)$无法构成一个环：</p><p>三个点恰好存在一个点$x$得到两条入边，即$x\leftarrow y,x\leftarrow z$</p><p>此时无法构成环</p><p><br></p><p>于是问题转化为统计$x$的入度$ind_x$，减少的三元环个数就是$\sum \binom{ind_i} {2}$</p><p>考虑用网络流计算答案，每一条边$(u,v)$可以选择从$S$流向$u$或者$v$</p><p>一个点得到$i$的流量付出$\binom{i} {2}$的代价流出$T$</p><p>因此每个点向$T$连$n-1$条流量为$1$，代价分别为为$\binom{j} {2}-\binom{j-1} {2}$的边</p><p>求满流最小费用即可，输出方案容易根据流量情况判断</p><p>复杂度为$O(\text{MCMF}(n^2,n^2))$ 或者$O(\text{MCMF}(n,n^2))$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,INF=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,S,T,V;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,nxt,w,c;</span><br><span class="line">&#125; e[N];</span><br><span class="line"><span class="keyword">int</span> head[N],ecnt=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">int</span> c)</span></span>&#123;</span><br><span class="line">e[++ecnt]=(Edge)&#123;v,head[u],w,c&#125;;</span><br><span class="line">head[u]=ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Link</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w,<span class="keyword">int</span> c)</span></span>&#123; <span class="built_in">AddEdge</span>(u,v,w,c),<span class="built_in">AddEdge</span>(v,u,<span class="number">0</span>,-c); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans,dis[N];</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> inq[N],pre[N],w[N];</span><br><span class="line"><span class="keyword">int</span> mk[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">rd</span>(),m=<span class="built_in">rd</span>(),S=n+<span class="number">1</span>,T=V=S+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">rep</span>(j,<span class="number">1</span>,n<span class="number">-1</span>) <span class="built_in">Link</span>(i,T,<span class="number">1</span>,j*(j<span class="number">-1</span>)/<span class="number">2</span>-(j<span class="number">-1</span>)*(j<span class="number">-2</span>)/<span class="number">2</span>);</span><br><span class="line"><span class="built_in">memset</span>(mk,<span class="number">-1</span>,<span class="keyword">sizeof</span> mk);</span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="built_in">rd</span>(),v=<span class="built_in">rd</span>();</span><br><span class="line"><span class="keyword">if</span>(u&lt;v) mk[u][v]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> mk[v][u]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">rep</span>(j,i+<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="built_in">Link</span>(S,++V,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(mk[i][j]!=<span class="number">0</span>) <span class="built_in">Link</span>(V,j,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(mk[i][j]!=<span class="number">1</span>) <span class="built_in">Link</span>(V,i,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">static</span> queue &lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,V) dis[i]=INF;</span><br><span class="line">dis[S]=<span class="number">0</span>,que.<span class="built_in">push</span>(S),w[S]=INF;</span><br><span class="line"><span class="keyword">while</span>(!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="keyword">int</span> u=que.<span class="built_in">front</span>(); que.<span class="built_in">pop</span>();</span><br><span class="line">inq[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].nxt) &#123;</span><br><span class="line"><span class="keyword">int</span> v=e[i].to,c=e[i].c;</span><br><span class="line"><span class="keyword">if</span>(!e[i].w || dis[v]&lt;=dis[u]+c) <span class="keyword">continue</span>;</span><br><span class="line">dis[v]=dis[u]+c,w[v]=<span class="built_in">min</span>(e[i].w,w[u]),pre[v]=i;</span><br><span class="line"><span class="keyword">if</span>(!inq[v]) que.<span class="built_in">push</span>(v),inq[v]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dis[T]==INF) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> c=w[T]; ans+=dis[T]*c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> u=T;u!=S;u=e[pre[u]^<span class="number">1</span>].to) e[pre[u]].w-=c,e[pre[u]^<span class="number">1</span>].w+=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">memset</span>(mk,<span class="number">0</span>,<span class="keyword">sizeof</span> mk);</span><br><span class="line"><span class="built_in">rep</span>(a,<span class="number">1</span>,n) <span class="built_in">rep</span>(b,a+<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="keyword">int</span> u=++T;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=head[u];i;i=e[i].nxt) <span class="keyword">if</span>(e[i].to&lt;=n &amp;&amp; !e[i].w) &#123;</span><br><span class="line"><span class="keyword">if</span>(e[i].to==b) mk[a][b]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> mk[b][a]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,n) <span class="built_in">putchar</span>(mk[i][j]+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CF1264E-Beautiful-League&quot;&gt;&lt;a href=&quot;#CF1264E-Beautiful-League&quot; class=&quot;headerlink&quot; title=&quot;CF1264E - Beautiful League&quot;&gt;&lt;/a&gt;CF1264E - Be</summary>
      
    
    
    
    <category term="题解" scheme="http://chasingdeath.github.io/categories/solutions/"/>
    
    
    <category term="Codeforces" scheme="http://chasingdeath.github.io/tags/Codeforces/"/>
    
  </entry>
  
</feed>
