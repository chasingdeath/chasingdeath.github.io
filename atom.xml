<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>orangejuice&#39;s Blog</title>
  
  <subtitle>平凡的博客</subtitle>
  <link href="http://chasingdeath.github.io/atom.xml" rel="self"/>
  
  <link href="http://chasingdeath.github.io/"/>
  <updated>2021-05-21T05:11:18.350Z</updated>
  <id>http://chasingdeath.github.io/</id>
  
  <author>
    <name>orangejuice</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CF1477E - Nezzar and Tournaments</title>
    <link href="http://chasingdeath.github.io/%E9%A2%98%E8%A7%A3/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/%E9%A2%98%E8%A7%A3/undefined-undefined.html</id>
    <published>2021-05-21T05:07:11.000Z</published>
    <updated>2021-05-21T05:11:18.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CF1477E-Nezzar-and-Tournaments"><a href="#CF1477E-Nezzar-and-Tournaments" class="headerlink" title="CF1477E - Nezzar and Tournaments"></a>CF1477E - Nezzar and Tournaments</h1><h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>有两队人$a_i,i\in[1,n],b_j,j\in[1,m]$，现在把他们放在一起排成一行$c_i$</p><p>顺次给每个人计分，初始$s_0=k$</p>$s_i=\max\{0,s_{i-1}+c_i-c_{\max\{i-1,0\}}\}$}<p>现在要最大化每个$a_i$所在位置的$s_i$之和 与 $b_i$所在$s_i$之和 的差</p><p>支持修改和对于不同$k$查询</p><p><br></p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>考虑$k=0$简单情况</p><p>1.若$s_i$不清零，则$s_i=c_i-lst$，其中$lst$表示上一个被清零位置的$c_j$</p><p>2.$s_i$清零，则$c_i&lt;lst$</p><p>容易发现，$\displaystyle s_i=c_i-\min_{j\leq i}\{ c_j\}$</p><p><br></p><p>那么对于含$k$的情况，类似可以得到</p>$\displaystyle s_i=k-c_1+c_i+\max\{0,c_1-k-\min_{j\leq i}\{c_j\}\}$<p>假设我们固定了一个$c_1$，现在考虑对于剩下的$a_i,b_j$排出一个最优的排列</p><p>容易发现，$k-c_1+c_i$的贡献时固定的，只有前缀最小值会影响答案</p><p>我们希望对于$b_i$，前缀最小值较大，$a_i$反之</p><p>那么容易发现可以先降序排列$b_j$，再正序排列$a_i$</p><p>此时$b_{\min}$可以贡献给$a_i$的前缀最小值，同时$b_j$的前缀最小值能够取到最大</p><p><br></p><p>此时，不妨设$c_1=t$，$\min{a_i,b_i}=Min$</p><p>在$\min{c_j}=c_1$时，$\max$里的东西没有贡献，故可以得到</p><p>1.对于每个$a_i$，若它没有被放在$c_1$，则贡献$k-t+a_i+\max{0,t-k-Min}$</p><p>2.对于每个$b_i$（不特殊考虑第一个），则贡献$-(k-t+b_i+\max{0,t-k-b_i})$（忽略最小值为$t$的情况）</p><p>则最终式子为</p><p>$\displaystyle f(t)=(n-[t\in a_i])\cdot  \max{0,t-k-Min}-\sum \max{0,t-k-b_i}+(m-n)t+C$</p><p>其中$C=(n-m)k+\sum a_i-\sum b_i$</p><p>容易发现$f(t)$是关于$t$的分段一次函数，根据斜率变化情况分析，极值位置仅$O(1)$个</p><p>那么对于$a_i$作为$t$和$b_j$作为$t$的情况，分别计算$f(t)$的极值位置</p><p>极值位置需要一个$k$大查询和$\text{lower_bound}$</p><p>计算$f(t)$需要一个前缀查询</p><p>我用$\text{BIT}$充当平衡树来维护，复杂度为$O((n+m+q)\log 10^6)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e6</span>+<span class="number">10</span>,INF=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,q;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span>&#123;</span></span><br><span class="line">ll s[N];</span><br><span class="line"><span class="keyword">int</span> c[N],n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> m)</span></span>&#123; n=m; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">p++;</span><br><span class="line"><span class="keyword">while</span>(p&lt;N) s[p]+=x,c[p]+=y,p+=p&amp;-p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">Que</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line">p++;</span><br><span class="line"><span class="keyword">if</span>(p&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">ll sum=<span class="number">0</span>,cnt=<span class="number">0</span>,t=p<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">while</span>(p) sum+=s[p],cnt+=c[p],p-=p&amp;-p;</span><br><span class="line"><span class="keyword">return</span> t*cnt-sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Rank</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 一些奇怪的边界特判 ，防止查询越界</span></span><br><span class="line">p++,<span class="built_in">cmin</span>(p,N<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p) res+=c[p],p-=p&amp;-p;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Kth</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123; <span class="comment">// 注意一定要避免找到并不存在的数值</span></span><br><span class="line"><span class="built_in">cmin</span>(k,n),<span class="built_in">cmax</span>(k,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">drep</span>(i,<span class="number">19</span>,<span class="number">0</span>) <span class="keyword">if</span>(p+(<span class="number">1</span>&lt;&lt;i)&lt;N &amp;&amp; c[p+(<span class="number">1</span>&lt;&lt;i)]&lt;k) k-=c[p+=<span class="number">1</span>&lt;&lt;i];</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Prev</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">Kth</span>(<span class="built_in">Rank</span>(x)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Next</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">Kth</span>(<span class="built_in">min</span>(n,<span class="built_in">Rank</span>(x)+<span class="number">1</span>)); &#125;</span><br><span class="line">&#125; A,B;</span><br><span class="line"></span><br><span class="line">ll delta;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddA</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">delta+=x*k;</span><br><span class="line">A.<span class="built_in">Add</span>(x,x*k,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddB</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">delta-=x*k;</span><br><span class="line">B.<span class="built_in">Add</span>(x,x*k,k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">QueA</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line">ll Min=<span class="built_in">min</span>(A.<span class="built_in">Kth</span>(<span class="number">1</span>),B.<span class="built_in">Kth</span>(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">auto</span> F=[&amp;](ll t)&#123; <span class="built_in"><span class="keyword">return</span></span> (n<span class="number">-1</span>)*<span class="built_in">max</span>(<span class="number">0ll</span>,t-k-Min)-B.<span class="built_in">Que</span>(t-k)+(m-n)*t; &#125;;</span><br><span class="line">ll ans=<span class="built_in">max</span>(<span class="built_in">F</span>(A.<span class="built_in">Kth</span>(<span class="number">1</span>)),<span class="built_in">F</span>(A.<span class="built_in">Kth</span>(n)));</span><br><span class="line"><span class="keyword">int</span> p=B.<span class="built_in">Kth</span>(m<span class="number">-1</span>)+k;</span><br><span class="line"><span class="built_in">cmax</span>(ans,<span class="built_in">F</span>(A.<span class="built_in">Prev</span>(p))),<span class="built_in">cmax</span>(ans,<span class="built_in">F</span>(A.<span class="built_in">Next</span>(p)));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">QueB</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line">ll Min=<span class="built_in">min</span>(A.<span class="built_in">Kth</span>(<span class="number">1</span>),B.<span class="built_in">Kth</span>(<span class="number">1</span>));</span><br><span class="line"><span class="keyword">auto</span> F=[&amp;](ll t)&#123; <span class="keyword">return</span> n*<span class="built_in">max</span>(<span class="number">0ll</span>,t-k-Min)-B.<span class="built_in">Que</span>(t-k)+(m-n)*t; &#125;;</span><br><span class="line">ll ans=<span class="built_in">max</span>(<span class="built_in">F</span>(B.<span class="built_in">Kth</span>(<span class="number">1</span>)),<span class="built_in">F</span>(B.<span class="built_in">Kth</span>(m)));</span><br><span class="line"><span class="keyword">int</span> p=B.<span class="built_in">Kth</span>(m)+k;</span><br><span class="line"><span class="built_in">cmax</span>(ans,<span class="built_in">F</span>(B.<span class="built_in">Prev</span>(p))),<span class="built_in">cmax</span>(ans,<span class="built_in">F</span>(B.<span class="built_in">Next</span>(p)));</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Que</span><span class="params">(ll k)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">QueA</span>(k),<span class="built_in">QueB</span>(k))+delta+(n-m)*k;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">rd</span>(),m=<span class="built_in">rd</span>(),q=<span class="built_in">rd</span>(),A.<span class="built_in">Init</span>(n),B.<span class="built_in">Init</span>(m);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">AddA</span>(a[i]=<span class="built_in">rd</span>(),<span class="number">1</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m) <span class="built_in">AddB</span>(b[i]=<span class="built_in">rd</span>(),<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(q--) &#123;</span><br><span class="line"><span class="keyword">int</span> opt=<span class="built_in">rd</span>();</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">rd</span>(),y=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">AddA</span>(a[x],<span class="number">-1</span>),<span class="built_in">AddA</span>(a[x]=y,<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">rd</span>(),y=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">AddB</span>(b[x],<span class="number">-1</span>),<span class="built_in">AddB</span>(b[x]=y,<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">Que</span>(<span class="built_in">rd</span>()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CF1477E-Nezzar-and-Tournaments&quot;&gt;&lt;a href=&quot;#CF1477E-Nezzar-and-Tournaments&quot; class=&quot;headerlink&quot; title=&quot;CF1477E - Nezzar and Tournaments</summary>
      
    
    
    
    <category term="题解" scheme="http://chasingdeath.github.io/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
    <category term="贪心" scheme="http://chasingdeath.github.io/tags/%E8%B4%AA%E5%BF%83/"/>
    
    <category term="数据结构" scheme="http://chasingdeath.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>[AtCoder Regular Contest 115]  D</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AtCoder-Regular-Contest-115-D"><a href="#AtCoder-Regular-Contest-115-D" class="headerlink" title="AtCoder Regular Contest 115 #D"></a><a href="https://atcoder.jp/contests/arc115">AtCoder Regular Contest 115</a> #D</h1><h3 id="Solution1"><a href="#Solution1" class="headerlink" title="Solution1"></a>Solution1</h3><p>考虑用$\text{FWT}$来理解这个式子，容易发现$\text{FWT}$之后求积的式子，满足</p><p>对于任意$(u_i,v_i)$</p><p>如果$u_i,v_i$中有一者被选择，答案为0，否则权值$\times 2$</p><p>那么显然对于一个连通块，设其大小为$c$，放在一起考虑</p><p>在$\text{FWT}$的式子里它们同时出现或者同时不出现</p><p>枚举最后$\text{FWT}$回来时的项与在这$c$个位置中出现$i$个</p><p>对于选择这个连通块的情况，贡献为$(-1)^i$</p><p>对于不选的情况，贡献为$1$</p><p>显然只有$2|i$时贡献为2，乘上组合数完成转移，连通块之间背包合并</p><p>就能得到最终计算答案的项中出现了几个1，然后与$\text{FWT}$的系数合并即可</p><script type="math/tex; mode=display">\</script><h3 id="Solution2"><a href="#Solution2" class="headerlink" title="Solution2"></a>Solution2</h3><p>对于一个连通块，考虑取出一个生成树</p><p>容易发现，仅使用这个生成树上的边，就能构成任何一个包含$2k$个奇点的情况</p><p>对于多余的边，类似异或线性基，它们都是可选可不选的</p><p>于是直接统计答案即可</p><p>Sol1 和 Sol2 的式子是一样的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5010</span>,P=<span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,dp[N];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll k=P<span class="number">-2</span>)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,x=x*x%P) <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res=res*x%P;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="keyword">int</span> c,vis[N],C[N][N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[u]) <span class="keyword">return</span>;</span><br><span class="line">vis[u]=<span class="number">1</span>,c++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v:G[u]) <span class="built_in">dfs</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">rd</span>(),m=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n) <span class="built_in">rep</span>(j,*C[i]=<span class="number">1</span>,i) C[i][j]=C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>],<span class="built_in">Mod1</span>(C[i][j]);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m) &#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="built_in">rd</span>(),v=<span class="built_in">rd</span>();</span><br><span class="line">G[u].<span class="built_in">pb</span>(v),G[v].<span class="built_in">pb</span>(u);</span><br><span class="line">&#125;</span><br><span class="line">dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(u,<span class="number">1</span>,n) <span class="keyword">if</span>(!vis[u]) &#123;</span><br><span class="line">c=<span class="number">0</span>,<span class="built_in">dfs</span>(u);</span><br><span class="line"><span class="built_in">drep</span>(i,n,<span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,<span class="built_in">min</span>(i,c)) <span class="keyword">if</span>(~j&amp;<span class="number">1</span>) &#123;</span><br><span class="line">s=(s+<span class="number">2ll</span>*dp[i-j]*C[c][j])%P;</span><br><span class="line">&#125;</span><br><span class="line">dp[i]=s;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> d=<span class="built_in">qpow</span>(<span class="number">2</span>,P<span class="number">-1</span>-n+m);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n) <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,<span class="built_in"><span class="keyword">int</span></span>(<span class="number">1ll</span>*dp[i]*d%P));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AtCoder-Regular-Contest-115-D&quot;&gt;&lt;a href=&quot;#AtCoder-Regular-Contest-115-D&quot; class=&quot;headerlink&quot; title=&quot;AtCoder Regular Contest 115 #D&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[BJ United Round  3] 押韵</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BJ-United-Round-3-押韵"><a href="#BJ-United-Round-3-押韵" class="headerlink" title="[BJ United Round #3] 押韵"></a>[BJ United Round #3] 押韵</h1><p>先%%%%%%%%%%%%%%%%% EI</p><script type="math/tex; mode=display">\</script><script type="math/tex; mode=display">\</script><p>下文默认模数为$P$</p><p>简要题意：求：用$k$种元素，每种元素使用$d$的倍数次，排成一个长度为$nd$的序列 的方案数</p><p>这个题目的设定就让人想到两个离不开的元素 ： <del>(模数暗示了？)</del></p><p>指数型生成函数 + 单位根反演</p><p>显然可以得到每一种元素的指数型生成函数为</p><p>$\begin{aligned} \text{EGF(Element)}=F(x)=\sum_{d|i} \frac{x^i}{i!}\end{aligned}$</p><p>带入单位根反演$\begin{aligned}\ [d|n]=\frac{\sum_0^{d-1} \omega_d^{in}}{d}\end{aligned}$</p><p>即$F(x)=\begin{aligned}\frac{1}{d}\cdot \sum_{i=0}^{d-1}e^{\omega_d^ix}\end{aligned}$</p><p>而总的生成函数就是 $G(x)=F^k(x)$</p><p>即$\begin{aligned} G(x)=\frac{1}{d^k}\cdot (\sum_{i=0}^{d-1}e^{\omega_d^ix})^k\end{aligned}$</p><p>其中的和式幂次展开会得到一个$k^d$项的多项式，我们要求$[x^n]G(x)$，就需要展开得到每一项的幂系数</p><p>所以显然我们需要先合并同类项一下。。。</p><p>而幂系数是一个单位根之和的形式，这就需要我们寻找单位根之间的关系</p><p>这里得到一个思路：用$d$次单位根中的$\varphi(d)$个作为基底，以简单的 有理数/整系数 表示出所有的$\omega_d^i$</p><script type="math/tex; mode=display">\</script><p>对于$d=4$的情况比较简单，$\varphi(d)=2$，可以得到四个单位根分别为$1,\omega,-1,-\omega$</p><p>可以枚举得到的和为$x+y\omega$，然后求系数</p><p>优先考虑组合意义，可以发现就是在平面上每次可以走四个方向，$k$步之后最终到达$(x,y)$的方案数</p><p>两个维度分立的情况，还需要枚举每个维度走了几步，所以用一种巧妙的转化两个维度联系在一起</p><p>将平面旋转$\frac{\pi}{8}$，并且扩大$\sqrt 2$倍，得到新的坐标为$(x-y,x+y)$，新的行走方向是$(+1,+1),(-1,-1),(-1,+1),(+1,-1)$</p><p>这样以来，每次每个维度都有行走，可以确定每个维度$+1$和$-1$的次数，直接组合数排列即可得到答案</p><script type="math/tex; mode=display">\</script><script type="math/tex; mode=display">\</script><p>对于$d=6$，甚至是更一般的情况的情况</p><p>只在代数层面来看单位根似乎十分抽象，不如从复平面单位根上找一找灵感</p><p>下面是$d=6$的情形</p><p><img src="https://i.loli.net/2021/01/30/Bb3vJq1TGPgtfs2.png" alt="planeomega.png"></p><p>$\varphi(6)=2$，假设以$\overrightarrow{OA},\overrightarrow{OB}$作为基底，可以直观地得到基底表达</p><div class="table-container"><table><thead><tr><th></th><th>$\overrightarrow{OA}=1$</th><th>$\overrightarrow{OB}=\omega$</th></tr></thead><tbody><tr><td>$\overrightarrow{OA}=\omega_6^0$</td><td>1</td><td>0</td></tr><tr><td>$\overrightarrow{OB}=\omega_6^1$</td><td>0</td><td>1</td></tr><tr><td>$\overrightarrow{OC}=\omega_6^2$</td><td>-1</td><td>1</td></tr><tr><td>$\overrightarrow{OD}=\omega_6^3$</td><td>-1</td><td>0</td></tr><tr><td>$\overrightarrow{OE}=\omega_6^4$</td><td>0</td><td>-1</td></tr><tr><td>$\overrightarrow{OF}=\omega_6^5$</td><td>1</td><td>-1</td></tr></tbody></table></div><p>由此我们得到了一个$\varphi(d)$维数的表达方法</p><p>把每一维看做不同元，也就是说，得到了一个$\varphi(d)$维，$O(1)$次的多项式，需要我们求高维多项式幂次</p><p>令$N=k^{\varphi(d)}$</p><p>直接压位暴力多项式复杂度为$O(N\log N-N\log^2N)$，而且面临着模数难以处理，常数大的问题</p><p>所以$\text{EI}$又用出了一个巧妙的暴力方法解决这个问题，以$d=6$为例，先做一下处理，得到要求的多项式</p><p><del>似乎每次$k$次幂总是求导+递推？</del></p><p>$f(x,y)=x^2y+xy^2+y^2+y+x+x^2,g(x,y)=f^k(x,y)$</p><p>$g(x,y)$对于$x$求偏导，得到$g’(x,y)=kf^{k-1}(x,y)f’(x,y)$</p><p>即$g’(x,y)f(x,y)=kg(x,y)f’(x,y)$</p><p>$f’(x,y)=2xy+2x+y^2+1$</p><p>然后我们要解这个方程，考虑乘积为$[x^ny^m]$一项两边的系数</p><p>左边$=[x^{n-2}y^{m-1}]+[x^{n-1}y^{m-2}]+[x^{n}y^{m-2}]+[x^{n}y^{m-1}]+[x^{n-1}y^{m}]+[x^{n-2}y^{m}]$</p><p>换成$g(x,y)$的系数应该是</p><p>左边$=(n-1)[x^{n-1}y^{m-1}]+n[x^{n}y^{m-2}]+(n+1)[x^{n+1}y^{m-2}]+(n+1)[x^{n+1}y^{m-1}]+n[x^{n}y^{m}]+(n-1)[x^{n-1}y^{m}]$</p><p>右边$=2k[x^{n-1}y^{m-1}]+2k[x^{n-1}y^m]+k[x^ny^{m-2}]+k[x^ny^m]$</p><p>其中$[x^{n+1}y^{m-1}]$只出现了一次，按照先$n$递增再$m$递增的顺序进行递推，即</p><p>$\begin{aligned}\ [x^ny^m]=\frac{2k[x^{n-2}y^{m}]+2k[x^{n-2}y^{m+1}]+k[x^{n-1}y^{m-1}]+k[x^{n-1}y^{m+1}]}{n}\end{aligned}$</p><p>$\begin{aligned}-\frac{(n-2)[x^{n-2}y^{m}]+(n-1)[x^{n-1}y^{m-1}]+n[x^{n}y^{m-1}]+(n-1)[x^{n-1}y^{m+1}]+(n-2)[x^{n-2}y^{m+1}]}{n}\end{aligned}$</p><p>边界条件是 $\begin{aligned}\ [x^i]=<a href="i\ge k">y^i</a>=\binom{k}{i-k}\end{aligned}$ (由系数$x,x^2$或$y,y^2$得到)</p><p>由此带入递推即可</p><p>综上，得到的每项的系数的复杂度为$O(d\cdot k^{\varphi(d)})$ ，其中$d$为递推每项需要的时间</p><p>由系数得到答案仍然需要一次快速幂，因此依然带一个$\log P$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod1(x) ((x&gt;=P)&amp;&amp;(x-=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod2(x) ((x&lt;0)&amp;&amp;(x+=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;a,T b)</span></span>&#123; a=<span class="built_in">min</span>(a,b); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; a=<span class="built_in">max</span>(a,b); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">0</span>,f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>())) <span class="keyword">if</span>(IO==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(IO^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>()));</span><br><span class="line">    <span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e3</span>+<span class="number">10</span>,P=<span class="number">1049874433</span>,G=<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,d;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll k=P<span class="number">-2</span>)</span> </span>&#123;</span><br><span class="line">    k%=P<span class="number">-1</span>;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,x=x*x%P) <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res=res*x%P;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> w[<span class="number">100</span>],C[N][N],I[N*<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n=<span class="built_in">rd</span>(),k=<span class="built_in">rd</span>(),d=<span class="built_in">rd</span>();</span><br><span class="line">    w[<span class="number">0</span>]=<span class="number">1</span>,w[<span class="number">1</span>]=<span class="built_in">qpow</span>(G,(P<span class="number">-1</span>)/d);</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">2</span>,<span class="number">90</span>) w[i]=<span class="number">1ll</span>*w[i<span class="number">-1</span>]*w[<span class="number">1</span>]%P;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">0</span>,k) <span class="built_in">rep</span>(j,C[i][<span class="number">0</span>]=<span class="number">1</span>,i) C[i][j]=C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>],<span class="built_in">Mod1</span>(C[i][j]);</span><br><span class="line">    I[<span class="number">0</span>]=I[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">2</span>,k*<span class="number">2</span>) I[i]=<span class="number">1ll</span>*(P-P/i)*I[P%i]%P;</span><br><span class="line">    <span class="keyword">if</span>(d==<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="built_in">qpow</span>(k,<span class="number">1ll</span>*d*n);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(d==<span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i,<span class="number">0</span>,k) ans=(ans+<span class="built_in">qpow</span>((<span class="number">1ll</span>*w[<span class="number">0</span>]*i+<span class="number">1ll</span>*w[<span class="number">1</span>]*(k-i))%P,<span class="number">1ll</span>*d*n)*C[k][i])%P;</span><br><span class="line">        ans=ans*<span class="built_in">qpow</span>(<span class="built_in">qpow</span>(d,k))%P;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(d==<span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i,<span class="number">0</span>,k) <span class="built_in">rep</span>(j,<span class="number">0</span>,k-i) </span><br><span class="line">            ans=(ans+<span class="built_in">qpow</span>((<span class="number">1ll</span>*w[<span class="number">0</span>]*i+<span class="number">1ll</span>*w[<span class="number">1</span>]*j+<span class="number">1ll</span>*w[<span class="number">2</span>]*(k-i-j))%P,<span class="number">1ll</span>*d*n)*C[i+j][i]%P*C[k][i+j])%P;</span><br><span class="line">        ans=ans*<span class="built_in">qpow</span>(<span class="built_in">qpow</span>(d,k))%P;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(d==<span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i,-k,k) <span class="built_in">rep</span>(j,-k,k) <span class="keyword">if</span>(<span class="built_in">abs</span>(i)+<span class="built_in">abs</span>(j)&lt;=k &amp;&amp; (k-i-j)%<span class="number">2</span>==<span class="number">0</span>) &#123;</span><br><span class="line">            ll x=<span class="built_in">qpow</span>((<span class="number">1ll</span>*w[<span class="number">0</span>]*i+<span class="number">1ll</span>*w[<span class="number">1</span>]*j)%P,<span class="number">1ll</span>*d*n);</span><br><span class="line">            ll y=<span class="number">1ll</span>*C[k][(<span class="built_in">abs</span>(i-j)+k)/<span class="number">2</span>]*C[k][(k+<span class="built_in">abs</span>(i+j))/<span class="number">2</span>]%P;</span><br><span class="line">            ans=(ans+x*y)%P;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=(ans+P)*<span class="built_in">qpow</span>(<span class="built_in">qpow</span>(d,k))%P;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">int</span> F[N*<span class="number">2</span>][N*<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i,<span class="number">0</span>,k*<span class="number">2</span>) <span class="built_in">rep</span>(j,<span class="built_in">max</span>(k-i,<span class="number">0</span>),<span class="built_in">min</span>(<span class="number">2</span>*k,<span class="number">3</span>*k-i)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">0</span>) F[i][j]=C[k][j-k];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j==<span class="number">0</span>) F[i][j]=C[k][i-k];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">int</span> s=(<span class="number">2ll</span>*k*(i&gt;<span class="number">1</span>?F[i<span class="number">-2</span>][j]+F[i<span class="number">-2</span>][j+<span class="number">1</span>]:<span class="number">0</span>)+<span class="number">1ll</span>*k*(F[i<span class="number">-1</span>][j<span class="number">-1</span>]+F[i<span class="number">-1</span>][j+<span class="number">1</span>]))%P;</span><br><span class="line">                <span class="keyword">int</span> t=((i&gt;<span class="number">1</span>?<span class="number">1ll</span>*(i<span class="number">-2</span>)*(F[i<span class="number">-2</span>][j]+F[i<span class="number">-2</span>][j+<span class="number">1</span>]):<span class="number">0</span>)+</span><br><span class="line">                    <span class="number">1ll</span>*(i<span class="number">-1</span>)*F[i<span class="number">-1</span>][j<span class="number">-1</span>]+<span class="number">1ll</span>*i*F[i][j<span class="number">-1</span>]+<span class="number">1ll</span>*(i<span class="number">-1</span>)*F[i<span class="number">-1</span>][j+<span class="number">1</span>])%P;</span><br><span class="line">                F[i][j]=<span class="number">1ll</span>*(s-t+P)*I[i]%P;</span><br><span class="line">            &#125;</span><br><span class="line">            ans=(ans+<span class="built_in">qpow</span>((<span class="number">1ll</span>*w[<span class="number">0</span>]*(i-k)+<span class="number">1ll</span>*w[<span class="number">1</span>]*(j-k))%P,<span class="number">1ll</span>*d*n)*F[i][j])%P;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=(ans+P)*<span class="built_in">qpow</span>(<span class="built_in">qpow</span>(d,k))%P;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BJ-United-Round-3-押韵&quot;&gt;&lt;a href=&quot;#BJ-United-Round-3-押韵&quot; class=&quot;headerlink&quot; title=&quot;[BJ United Round #3] 押韵&quot;&gt;&lt;/a&gt;[BJ United Round #3] 押韵</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[BZOJ1852] [MexicoOI06]最长不下降序列(贪心)</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BZOJ1852-MexicoOI06-最长不下降序列-贪心"><a href="#BZOJ1852-MexicoOI06-最长不下降序列-贪心" class="headerlink" title="[BZOJ1852] [MexicoOI06]最长不下降序列(贪心)"></a>[BZOJ1852] [MexicoOI06]最长不下降序列(贪心)</h1><p>考虑如下贪心</p><p>（我将问题反过来考虑，也就是要满足$A<em>i &gt; \max</em>{j=1}^{j &lt; i}{B_j}$）</p><p>首先对于读入的$(A,B)$，按照$B$的值递增排序</p><p><strong>(选出的答案序列不一定是其中一个有序的子序列)</strong></p><p>答案序列存在若干个$B$递增的位置，设它们是${a<em>i},a</em>{i-1}&lt;a_i$</p><p>合法的递增序列需要满足的限制是$A<em>{a_i}&gt;B</em>{a_{i-1}}$</p><p>考虑剩下的部分即$j\in[a<em>{i-1}+1,a_i-1]$，那么这些点放在$a_i$后面一定是最优的(因为此时不会改变最大的$B$)，此时限制它们的$B$就是$B</em>{a_i}$</p><p>即这一部分中满足$A<em>j&gt;B</em>{a_i}$的$j$均可以选出来</p><p>为了便于表示，设$C(l,r)=|{i|i\in[l,r],A<em>i&gt;B</em>{r+1}}|$，可以通过一个主席树维护</p><hr><p>定义$dp_i$表示当前以$i$为最大的$B$的答案，特别的，$dp_0$表示序列为空$A_0=B_0=-\infty$</p><p>枚举每个$i$进行转移</p><p>朴素的转移就是可以枚举上一个位置$j$，$O(n^2)$转移</p><p>需要找到前面第一个能把$i$接上去的$j$即可，即第一个$B_r&lt;A_i(j\ge 0)$的位置，那么合法的决策位置就是$[0,r]$</p><p>则$dp_i=\max_0^r{dp_j+1+C(j+1,i-1)}$</p><p>设最优决策点为$k\in[0,r]$，影响最优决策点位置的有两个方面</p><p>从$[j+1,i-1]$这一段点考虑，$j$越小时，就会有越多的点对被$B_i$限制，也就是说$j$越大，对于中间这一段来说越优</p><p>但是从$dp_j$的角度考虑，并不是$j$越大越好，因为可能存在一个$A_j$特别小限制了前面递增点列的选择</p><blockquote><p> 推论：如果前面存在一个$A_j&gt;B_i$，那么$k\ge j$</p></blockquote><p>事实上应该说成$dp_j+C(j+1,i-1)\ge\forall d\in[0,j-1],dp_d+C(d+1,i-1)$</p><p>综合上面两条来看，如果$A_j&gt;B_i$意味着把它放进递增序列里绝对是优的，因为不会对前面的点产生不良限制</p><p>消除了不良限制之后，就满足最优性了</p><p>所以发现最优决策点的范围缩小到了$[l=max{k|A_k&gt;B_i},r]$</p><p>发现决策范围内的$C(l+1,i-1)=C(l+2,i-1)=\cdots=C(r+1,i-1)$</p><p>所以$dp_i=\max_l^r{dp_j}+C(r+1,i-1)=max_0^r{dp_j}+C(r+1,i-1)$</p><p>所以可以直接维护一个前缀最大值，每次二分找到那个$r$，求出$C(r+1,i-1)$即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,K=<span class="number">15</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node __) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> b&lt;__.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;A[N];</span><br><span class="line"><span class="keyword">int</span> h[N],hc;</span><br><span class="line"><span class="keyword">int</span> dp[N];</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> rt[N*K],s[N*K],ls[N*K],rs[N*K],cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> pre,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    s[p]=s[pre]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(l==r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    ls[p]=ls[pre],rs[p]=rs[pre];</span><br><span class="line">    x&lt;=mid?<span class="built_in">Add</span>(ls[p]=++cnt,ls[pre],l,mid,x):<span class="built_in">Add</span>(rs[p]=++cnt,rs[pre],mid+<span class="number">1</span>,r,x);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Que</span><span class="params">(<span class="keyword">int</span> pl,<span class="keyword">int</span> pr,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql&gt;qr) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql==l&amp;&amp;qr==r) <span class="keyword">return</span> s[pr]-s[pl];</span><br><span class="line">    <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(qr&lt;=mid) <span class="keyword">return</span> <span class="built_in">Que</span>(ls[pl],ls[pr],l,mid,ql,qr);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ql&gt;mid) <span class="keyword">return</span> <span class="built_in">Que</span>(rs[pl],rs[pr],mid+<span class="number">1</span>,r,ql,qr);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">Que</span>(ls[pl],ls[pr],l,mid,ql,mid)+<span class="built_in">Que</span>(rs[pl],rs[pr],mid+<span class="number">1</span>,r,mid+<span class="number">1</span>,qr);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n=<span class="built_in">rd</span>()) &#123;</span><br><span class="line">        A[i].a=<span class="built_in">rd</span>(),A[i].b=<span class="built_in">rd</span>();</span><br><span class="line">        h[++hc]=A[i].a,h[++hc]=A[i].b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sort</span>(h+<span class="number">1</span>,h+hc+<span class="number">1</span>),hc=<span class="built_in">unique</span>(h+<span class="number">1</span>,h+hc+<span class="number">1</span>)-h<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">sort</span>(A+<span class="number">1</span>,A+n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">        A[i].a=<span class="built_in">lower_bound</span>(h+<span class="number">1</span>,h+hc+<span class="number">1</span>,A[i].a)-h;</span><br><span class="line">        A[i].b=<span class="built_in">lower_bound</span>(h+<span class="number">1</span>,h+hc+<span class="number">1</span>,A[i].b)-h;</span><br><span class="line">        <span class="built_in">Add</span>(rt[i]=++cnt,rt[i<span class="number">-1</span>],<span class="number">1</span>,hc,A[i].a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">1</span>,r=i<span class="number">-1</span>,res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;=r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(A[mid].b&lt;A[i].a) l=mid+<span class="number">1</span>,res=mid;</span><br><span class="line">            <span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>],dp[res]+<span class="number">1</span>+<span class="built_in">Que</span>(rt[res],rt[i<span class="number">-1</span>],<span class="number">1</span>,hc,A[i].b+<span class="number">1</span>,hc));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ans=dp[n];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>附：离线做法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(reg int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(reg int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>,f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>())) f|=(IO==<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line"><span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(IO^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>()));</span><br><span class="line"><span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,K=<span class="number">15</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a,b;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node __)<span class="keyword">const</span>&#123; <span class="keyword">return</span> b&lt;__.b; &#125;</span><br><span class="line">&#125;A[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> x,p,id,k;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Query __)<span class="keyword">const</span>&#123; <span class="keyword">return</span> p&lt;__.p; &#125;</span><br><span class="line">&#125;Q[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> qc,h[N],hc,dp[N];</span><br><span class="line"><span class="keyword">int</span> L[N],Ans[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> s[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span></span>&#123; <span class="keyword">while</span>(p) s[p]+=x,p-=p&amp;-p; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Que</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p&lt;=hc) res+=s[p],p+=p&amp;-p;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n=<span class="built_in">rd</span>()) &#123;</span><br><span class="line">A[i].a=<span class="built_in">rd</span>(),A[i].b=<span class="built_in">rd</span>();</span><br><span class="line">h[++hc]=A[i].a,h[++hc]=A[i].b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(h+<span class="number">1</span>,h+hc+<span class="number">1</span>),hc=<span class="built_in">unique</span>(h+<span class="number">1</span>,h+hc+<span class="number">1</span>)-h<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">sort</span>(A+<span class="number">1</span>,A+n+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">A[i].a=<span class="built_in">lower_bound</span>(h+<span class="number">1</span>,h+hc+<span class="number">1</span>,A[i].a)-h;</span><br><span class="line">A[i].b=<span class="built_in">lower_bound</span>(h+<span class="number">1</span>,h+hc+<span class="number">1</span>,A[i].b)-h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="number">1</span>,r=i<span class="number">-1</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(l&lt;=r) &#123;</span><br><span class="line"><span class="keyword">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(A[mid].b&lt;A[i].a) l=mid+<span class="number">1</span>,res=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">L[i]=res;</span><br><span class="line"><span class="keyword">if</span>(i<span class="number">-1</span>&gt;L[i]) Q[++qc]=(Query)&#123;A[i].b+<span class="number">1</span>,i<span class="number">-1</span>,i,<span class="number">1</span>&#125;,Q[++qc]=(Query)&#123;A[i].b+<span class="number">1</span>,L[i],i,<span class="number">-1</span>&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">sort</span>(Q+<span class="number">1</span>,Q+qc+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n) &#123;</span><br><span class="line"><span class="keyword">if</span>(i) <span class="built_in">Add</span>(A[i].a,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(p&lt;=qc &amp;&amp; Q[p].p&lt;=i) Ans[Q[p].id]+=Q[p].k*<span class="built_in">Que</span>(Q[p].x),p++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) dp[i]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>],dp[L[i]]+<span class="number">1</span>+Ans[i]);</span><br><span class="line"><span class="keyword">int</span> ans=dp[n];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BZOJ1852-MexicoOI06-最长不下降序列-贪心&quot;&gt;&lt;a href=&quot;#BZOJ1852-MexicoOI06-最长不下降序列-贪心&quot; class=&quot;headerlink&quot; title=&quot;[BZOJ1852] [MexicoOI06]最长不下降序列(贪</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[BZOJ2688]Green Hackenbush</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.433Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BZOJ2688-Green-Hackenbush"><a href="#BZOJ2688-Green-Hackenbush" class="headerlink" title="[BZOJ2688]Green Hackenbush"></a>[BZOJ2688]Green Hackenbush</h1><p>题意: 有$n$棵随机的二叉树，每棵只知道大小为$a_i$</p><p>博弈:每次选取一个子树删掉，只剩根不能操作，求先手获胜概率</p><p>考虑这个博弈，求出一棵树的$\text{SG}$值</p><p>显然有:</p><p>1.只有一个点的树的$\text{SG}$值为0</p><p>2.多个树组合的问题为$\text{SG}$值异或</p><p>暴力$dp$，对于树$T$求答案，设$T$所有可行的后继状态集合为$N(T)$，则得到$\text{SG}$值的表达式为</p><p>$\text{SG}(T)=\text{mex}_{R\in N(T)}\lbrace\text{SG(R)}\rbrace $</p><p>直接求解复杂度过高，考虑归纳性质</p><p>性质:</p><p>1.一棵根节点只有一个儿子的树，其$\text{SG}$值为儿子的$\text{SG}$值+1</p><p>考虑归纳证明:</p><p>设子树为$T$，令$T+u$表示$T$子树上面接上自己作为根，问题变为求证$\text{SG}(T+u)=\text{SG}(T)+1$</p><p>设已经归纳证明所有$T$的子联通块成立</p><p>我们要求$\text{SG}(T+u)$</p><p>$\text{SG}(T+u)=\text{mex}{\text{SG}(u),\forall _{R\in N(T)}\text{SG}(R+u)}$</p><p>由归纳的性质有</p><p>$\forall _{R\subsetneq T}\text{SG}(R+T)=\text{SG}(R)+1$</p><p>又因为$\text{SG}(u)=0$，看做把所有儿子的情况平移了1，0的位置由自己占据，因而上式成立</p><p>2.多叉树的问题可以归纳为 <strong>根分别接上每个儿子得到的树</strong> 的问题的组合</p><p>因为儿子之间实际互不干扰，比较容易理解</p><p>由此得到，一棵树的$\text{SG}$值为其所有儿子的$\text{SG}$值+1的异或和</p><p>令$dp_{n,i}$为一棵$n$个节点的二叉树$\text{SG}$值为$i$的概率，为了便于转移，设空树的$\text{SG}$值为-1</p><p>考虑直接枚举两棵子树的大小和$\text{SG}$值</p><p>考虑对于$n$个节点的二叉树，设其左儿子为$i$时的总概率为$F_i$</p><p>得到的$\text{dp}$转移是</p><p>$dp<em>{n,(a+1)\oplus (b+1)}\leftarrow {dp</em>{i,a}\cdot dp_{n-i-1,b}\cdot F_i}$</p><p>我们知道$n$个节点的二叉树方案数为$Catalan(n)=\frac{(2n)!}{n!(n+1)!}$</p><p>由此得到$\begin{aligned} F_i=\frac{Catalan(i)Catalan(n-i-1)}{Catalan(n)}\end{aligned} $</p><p>此题范围可以直接带入$Catalan(i)$求解，但是依然要提一下递推的做法（似乎精度更有保障?）</p><p>$\begin{aligned} F_i=\frac{\frac{(2i)!}{i!(i+1)!}\cdot \frac{(2n-i-2)!}{(n-i-1)!(n-i)!}}{\frac{(2n)}{n!(n+1)!}}\end{aligned} $</p><p>递推求解$F<em>i$，每次$i$改变一阶乘只会改变1或者2，因此由$F</em>{i-1}$得到$F_i$的递推式为</p><p>$F<em>i=\left{ \begin{aligned}\frac{n(n+1)}{2n(2n-1)}&amp;&amp; i=0\ F</em>{i-1}\cdot \frac{2i(2i-1)}{(i+1)i}\frac{(n-i+1)(n-i)}{2(n-i)(2n-2i-1)} &amp;&amp; i\in[1,n-1]\end{aligned}\right.$</p><p>化简之后应该是</p><p>$F<em>i=\left{ \begin{aligned}\frac{(n+1)}{2(2n-1)}&amp;&amp; i=0\ F</em>{i-1}\cdot \frac{(2i-1)}{(i+1)}\frac{(n-i+1)}{(2n-2i-1)} &amp;&amp; i\in[1,n-1]\end{aligned}\right.$</p><p>至此得到一个朴素的$O(n^4)$预处理，由于是异或，可以用$\text{FWT}_{\oplus}$求解，复杂度为$O(n^3)$</p><p>对于输入的每棵树，类似背包地叠加概率即可，复杂度为$O(n^3)$</p><p>以下是朴素dp代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(reg int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(reg int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>=</span><span class="keyword">int</span>&gt; <span class="function">T <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line">T s=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>())) <span class="keyword">if</span>(IO==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(IO^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>()));</span><br><span class="line"><span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">128</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">db dp[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FWT</span><span class="params">(db *a,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;n;l+=i*<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=l;j&lt;l+i;j++)&#123;</span><br><span class="line">db t=a[j+i];</span><br><span class="line">a[j+i]=a[j]-t;</span><br><span class="line">a[j]+=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f==<span class="number">-1</span>) <span class="built_in">rep</span>(i,<span class="number">0</span>,N<span class="number">-1</span>) a[i]/=N;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db F[N],G[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>,dp[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">2</span>,<span class="number">100</span>) &#123;</span><br><span class="line">F[<span class="number">0</span>]=<span class="number">1.0</span>/(<span class="number">2</span>*i)/(<span class="number">2</span>*i<span class="number">-1</span>)*(i+<span class="number">1</span>)*i;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) &#123;</span><br><span class="line">F[j]=F[j<span class="number">-1</span>] *  (<span class="number">2</span>*j)*(<span class="number">2</span>*j<span class="number">-1</span>)/(j+<span class="number">1</span>)/j   * <span class="number">1.0</span>/(<span class="number">2</span>*(i-j))/(<span class="number">2</span>*(i-j)<span class="number">-1</span>)*(i-j+<span class="number">1</span>)*(i-j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(a,<span class="number">0</span>,i<span class="number">-1</span>) <span class="built_in">rep</span>(h1,<span class="number">0</span>,N<span class="number">-1</span>) <span class="keyword">if</span>(dp[a][h1]&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">rep</span>(h2,<span class="number">0</span>,N<span class="number">-1</span>) <span class="keyword">if</span>(dp[i-a<span class="number">-1</span>][h2]) &#123;</span><br><span class="line"><span class="keyword">int</span> nxt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(a&gt;<span class="number">0</span>) nxt^=h1+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i<span class="number">-1</span>-a&gt;<span class="number">0</span>) nxt^=h2+<span class="number">1</span>;</span><br><span class="line">dp[i][nxt]+=dp[a][h1]*dp[i-a<span class="number">-1</span>][h2]*F[a];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">n=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,N<span class="number">-1</span>) F[i]=<span class="number">0</span>;</span><br><span class="line">F[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,N<span class="number">-1</span>) G[j]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,N<span class="number">-1</span>) <span class="keyword">if</span>(F[j]) <span class="built_in">rep</span>(k,<span class="number">0</span>,N<span class="number">-1</span>) G[j^k]+=F[j]*dp[x][k];</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,N<span class="number">-1</span>) F[j]=G[j];</span><br><span class="line">&#125;</span><br><span class="line">db ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,N<span class="number">-1</span>) ans+=F[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以下是FWT优化代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(reg int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(reg int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>=</span><span class="keyword">int</span>&gt; <span class="function">T <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line">T s=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>())) <span class="keyword">if</span>(IO==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(IO^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>()));</span><br><span class="line"><span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">128</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">db dp[N][N],T[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FWT</span><span class="params">(db *a,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i&lt;&lt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;N;l+=i*<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=l;j&lt;l+i;j++)&#123;</span><br><span class="line">db t=a[j+i];</span><br><span class="line">a[j+i]=a[j]-t;</span><br><span class="line">a[j]+=t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(f==<span class="number">-1</span>) <span class="built_in">rep</span>(i,<span class="number">0</span>,N<span class="number">-1</span>) a[i]/=N;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">db F[N],G[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>,dp[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">T[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>,T[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">FWT</span>(T[<span class="number">0</span>],<span class="number">1</span>),<span class="built_in">FWT</span>(T[<span class="number">1</span>],<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">2</span>,<span class="number">100</span>) &#123;</span><br><span class="line">F[<span class="number">0</span>]=<span class="number">1.0</span>/(<span class="number">2</span>*i)/(<span class="number">2</span>*i<span class="number">-1</span>)*(i+<span class="number">1</span>)*i;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,i<span class="number">-1</span>) &#123;</span><br><span class="line">F[j]=F[j<span class="number">-1</span>] *  (<span class="number">2</span>*j)*(<span class="number">2</span>*j<span class="number">-1</span>)/(j+<span class="number">1</span>)/j   * <span class="number">1.0</span>/(<span class="number">2</span>*(i-j))/(<span class="number">2</span>*(i-j)<span class="number">-1</span>)*(i-j+<span class="number">1</span>)*(i-j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,i<span class="number">-1</span>) <span class="built_in">rep</span>(k,<span class="number">0</span>,N<span class="number">-1</span>) dp[i][k]+=T[j][k]*T[i-j<span class="number">-1</span>][k]*F[j];</span><br><span class="line"><span class="built_in">FWT</span>(dp[i],<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,N<span class="number">-2</span>) T[i][j+<span class="number">1</span>]=dp[i][j];</span><br><span class="line"><span class="built_in">FWT</span>(T[i],<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">n=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,N<span class="number">-1</span>) F[i]=<span class="number">0</span>;</span><br><span class="line">F[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,N<span class="number">-1</span>) G[j]=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,N<span class="number">-1</span>) <span class="keyword">if</span>(F[j]) <span class="built_in">rep</span>(k,<span class="number">0</span>,N<span class="number">-1</span>) G[j^k]+=F[j]*dp[x][k];</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,N<span class="number">-1</span>) F[j]=G[j];</span><br><span class="line">&#125;</span><br><span class="line">db ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,N<span class="number">-1</span>) ans+=F[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.6lf\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BZOJ2688-Green-Hackenbush&quot;&gt;&lt;a href=&quot;#BZOJ2688-Green-Hackenbush&quot; class=&quot;headerlink&quot; title=&quot;[BZOJ2688]Green Hackenbush&quot;&gt;&lt;/a&gt;[BZOJ2688]</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[BZOJ4331] [JSOI2012]越狱老虎桥</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.314Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BZOJ4331-JSOI2012-越狱老虎桥"><a href="#BZOJ4331-JSOI2012-越狱老虎桥" class="headerlink" title="[BZOJ4331] [JSOI2012]越狱老虎桥"></a>[BZOJ4331] [JSOI2012]越狱老虎桥</h1><p>题意: 在任意加入一条边的情况下，求 割一条边使图不从1联通的最小割边的 最大值</p><p>首先根据题目的意思，可以下对这个无向图中 进行<strong>边双联通分量</strong> 缩点</p><p>建出一棵边双生成树，树边即为原图的割边，树边带权</p><p>割掉双联通分量内部的边显然没有意义，所以忽略掉他们，下文所提的均是树上节点和边</p><p>在不额外加边的情况下，而割掉树边会使子树内部的点断开</p><p>在加入边的情况下，若加入一条$1-u$的边，则形成了一个$1-u$的环，环是无法通过割开一条边断开的</p><p>而连接树上两个节点$(u,v)$的情况，把图展开后，就会发现，就是把$u,v$路径上所有的点都缩进了同一个环</p><p>此时断掉环上的边显然不合法，而不在环上的边，只需要随便断掉一条，就能让一个点不连通</p><p>也就是说，答案是 (去掉某个点对$(u,v)$路径上的所有边，剩下的边中最小值) 的最大值</p><p>设答案为$ans$</p><p>这个问题实际上等价于所有的$e\in E,w(e)\leq ans$的边无法被一条路径完全覆盖</p><p>做法1:</p><p>考虑二分答案，把每条$e\in E,w(e)\leq ans$的边的权值设为1，求出直径长度判断是否可以用一条路径完全覆盖即可</p><p>复杂度为$O(n\log n)$</p><p>做法2:</p><p>实际上这个问题就是 (选择了合法的3条边中边权的最大值) 的最小值</p><p>对于当前节点$u$，实际合法情况有</p><p>1.选择了一条祖先的边，和2条儿子岔开的边</p><p>2.选择了3条垂下的岔开的边，这个合并时比较诡异可以看代码</p><p>$\text{dp}$维护即可，复杂度为$O(n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;a,<span class="keyword">const</span> T &amp;b)</span></span>&#123; ((a&gt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>=</span><span class="keyword">int</span>&gt; <span class="function">T <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line">T s=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>())) <span class="keyword">if</span>(IO==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(IO^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>()));</span><br><span class="line"><span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">10</span>,INF=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,nxt,w;</span><br><span class="line">&#125; e[N*<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> head[N],ecnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">e[++ecnt]=(Edge)&#123;v,head[u],w&#125;;</span><br><span class="line">head[u]=ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(u,i) for(int i=head[u],v=e[i].to;i;i=e[i].nxt,v=e[i].to)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> low[N],t[N],id[N],scc,dfn;</span><br><span class="line"><span class="keyword">int</span> stk[N],top;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">low[u]=t[u]=++dfn;</span><br><span class="line">stk[++top]=u;</span><br><span class="line"><span class="built_in">erep</span>(u,i) <span class="keyword">if</span>(v!=f) &#123;</span><br><span class="line"><span class="keyword">if</span>(!t[v]) <span class="built_in">dfs</span>(v,u),<span class="built_in">cmin</span>(low[u],low[v]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cmin</span>(low[u],t[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(low[u]==t[u])&#123;</span><br><span class="line"><span class="keyword">int</span> v; ++scc;</span><br><span class="line"><span class="keyword">do</span> v=stk[top--],id[v]=scc;</span><br><span class="line"><span class="keyword">while</span>(v!=u);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> head2[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge2</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">e[++ecnt]=(Edge)&#123;v,head2[u],w&#125;;</span><br><span class="line">head2[u]=ecnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> erep2(u,i) for(int i=head2[u],v=e[i].to,w=e[i].w;i;i=e[i].nxt,v=e[i].to,w=e[i].w)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ans=INF;</span><br><span class="line"><span class="keyword">int</span> dp[N][<span class="number">4</span>],tmp[<span class="number">4</span>],g[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span> </span>&#123;</span><br><span class="line">dp[u][<span class="number">0</span>]=<span class="number">0</span>,dp[u][<span class="number">1</span>]=dp[u][<span class="number">2</span>]=dp[u][<span class="number">3</span>]=INF;</span><br><span class="line"><span class="built_in">erep2</span>(u,i) <span class="keyword">if</span>(v!=f) &#123;</span><br><span class="line">g[v]=<span class="built_in">min</span>(g[u],w),<span class="built_in">dfs1</span>(v,u);</span><br><span class="line"><span class="built_in">memset</span>(tmp,<span class="number">63</span>,<span class="keyword">sizeof</span> tmp);</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,<span class="number">3</span>) &#123;</span><br><span class="line"><span class="built_in">cmin</span>(tmp[j],dp[u][j]);</span><br><span class="line"><span class="keyword">if</span>(j&lt;<span class="number">3</span>) <span class="built_in">cmin</span>(tmp[j+<span class="number">1</span>],<span class="built_in">max</span>(dp[u][j],w));</span><br><span class="line"><span class="built_in">rep</span>(k,<span class="number">0</span>,<span class="number">3</span>-j) <span class="built_in">cmin</span>(tmp[j+k],<span class="built_in">max</span>(dp[u][j],dp[v][k]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,<span class="number">3</span>) dp[u][j]=tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cmin</span>(ans,dp[u][<span class="number">3</span>]);</span><br><span class="line"><span class="built_in">cmin</span>(ans,<span class="built_in">max</span>(g[u],dp[u][<span class="number">2</span>]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">rd</span>(),m=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m) &#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="built_in">rd</span>(),v=<span class="built_in">rd</span>(),w=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">AddEdge</span>(u,v,w),<span class="built_in">AddEdge</span>(v,u,w);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dfs</span>(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">rep</span>(u,<span class="number">1</span>,n) <span class="built_in">erep</span>(u,i) <span class="keyword">if</span>(id[u]!=id[v]) <span class="built_in">AddEdge2</span>(id[u],id[v],e[i].w);</span><br><span class="line">g[id[<span class="number">1</span>]]=INF,<span class="built_in">dfs1</span>(id[<span class="number">1</span>],<span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans==INF?<span class="number">-1</span>:ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BZOJ4331-JSOI2012-越狱老虎桥&quot;&gt;&lt;a href=&quot;#BZOJ4331-JSOI2012-越狱老虎桥&quot; class=&quot;headerlink&quot; title=&quot;[BZOJ4331] [JSOI2012]越狱老虎桥&quot;&gt;&lt;/a&gt;[BZOJ4331] [JS</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[BoundedOptimization TopCoder - 12294]</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.389Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BoundedOptimization-TopCoder-12294"><a href="#BoundedOptimization-TopCoder-12294" class="headerlink" title="BoundedOptimization TopCoder - 12294"></a><a href="https://vjudge.net/problem/TopCoder-12294">BoundedOptimization TopCoder - 12294</a></h1><p>考虑在最优情况下，某一些数在$\text{lowerbound}$,某一些在$\text{upperbound}$</p><p>确定了这些数之后，对于那些处于$(\text{lowerbound,upperbound})$之间的数，它们的值其实是在<strong>忽略了上下界的情况下能取到的最优情况</strong></p><p>否则只要上下移动一点就可能达到一个更优的情况</p><p>那么考虑枚举每个数的状态在$\text{lowerbound,upperbound,(lowerbound,uppperbound)}$</p><p>推论：在中间的数之间必然存在互相关系</p><p>假设存在两个数$x_i,x_j$之间没有互相关系，令其他数不变，</p><p>则答案式子可以表示为$ax_i+bx_j+c$的形式，改变两个数的值总能得到更优的情况</p><script type="math/tex; mode=display">\</script><p>设处在中间位置的数为$x_1,\cdots,x_m$，其他数为$y_1,\cdots ,y_k$，每个数连到外面的权值总和为$s_i$</p><p>发现在最优情况下，$\sum x_i+\sum y_i =MaxSum$，那么就确定了$\sum x_i$的值，设为$Sum$</p><p>那么答案就可以表示为$\begin{aligned}\frac{\sum_ix_i\cdot(Sum-x_i+2\cdot s_i)}{2}\end{aligned}+c$</p><p>其中常数$c$是外面的数之间的总和</p><p>不考虑限制的情况下，最优情况是$x_i=\frac{Sum+s_i}{2}$</p><p>此时，若$\sum x_i\ne Sum$，是不合法的，需要调整</p><p>而让每个数改变$d$，减少的答案都是$d^2$(因为原来是在二次函数的最高点)</p><p>所以每个数都改变$\begin{aligned}\frac{\sum \frac{Sum+x_i}{2}-Sum}{m}\end{aligned}$是最优的</p><p>注意这里计算时都是<strong>忽略了</strong>$x_1,\cdots,x_m$的$\text{lowerbound,upperbound}$，求出的值不一定合法</p><p>如果不合法说明至少有某个值该到上下界之后答案会更优，所以这次的答案不用考虑</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&gt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&lt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> db eps=<span class="number">1e-7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> G[N][N];</span><br><span class="line"><span class="keyword">int</span> A[N],w[N];</span><br><span class="line">db val[N];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BoundedOptimization</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">maxValue</span><span class="params">(vector &lt;string&gt; Expr, vector &lt;<span class="keyword">int</span>&gt; L, vector &lt;<span class="keyword">int</span>&gt; R, <span class="keyword">int</span> Max)</span> </span>&#123;</span><br><span class="line">string E=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(string t:Expr) E+=t;</span><br><span class="line"><span class="built_in">memset</span>(G,<span class="number">0</span>,<span class="keyword">sizeof</span> G);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,E.<span class="built_in">size</span>()<span class="number">-1</span>) <span class="keyword">if</span>(<span class="built_in">isalpha</span>(E[i])) &#123;</span><br><span class="line">G[E[i]-<span class="string">&#x27;a&#x27;</span>][E[i+<span class="number">1</span>]-<span class="string">&#x27;a&#x27;</span>]=G[E[i+<span class="number">1</span>]-<span class="string">&#x27;a&#x27;</span>][E[i]-<span class="string">&#x27;a&#x27;</span>]=<span class="number">1</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n=L.<span class="built_in">size</span>();</span><br><span class="line">db ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(S,<span class="number">0</span>,<span class="built_in">pow</span>(<span class="number">3</span>,n)<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> T=S,m=<span class="number">0</span>;</span><br><span class="line">db res=<span class="number">0</span>,sum=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) &#123;</span><br><span class="line">w[i]=T%<span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(!w[i]) A[++m]=i;</span><br><span class="line"><span class="keyword">else</span> val[i]=(w[i]==<span class="number">1</span>?L[i]:R[i]),sum+=val[i];</span><br><span class="line">T/=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fl=sum&lt;=Max;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m) <span class="built_in">rep</span>(j,i+<span class="number">1</span>,m) <span class="keyword">if</span>(!G[A[i]][A[j]]) fl=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!fl) <span class="keyword">continue</span>;</span><br><span class="line">db left=Max-sum; </span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">db c=left;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,n<span class="number">-1</span>) <span class="keyword">if</span>(w[j] &amp;&amp; G[A[i]][j]) c+=val[j]*<span class="number">2</span>;</span><br><span class="line">val[A[i]]=c/<span class="number">2</span>;</span><br><span class="line">sum+=val[A[i]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m)&#123;</span><br><span class="line">db t=(sum-Max)/m;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m) val[A[i]]-=t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) <span class="keyword">if</span>(val[i]&lt;L[i]-eps || val[i]&gt;R[i]+eps) fl=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(!fl) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) <span class="built_in">rep</span>(j,i+<span class="number">1</span>,n<span class="number">-1</span>) <span class="keyword">if</span>(G[i][j]) res+=val[i]*val[j];</span><br><span class="line"><span class="built_in">cmax</span>(ans,res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BoundedOptimization-TopCoder-12294&quot;&gt;&lt;a href=&quot;#BoundedOptimization-TopCoder-12294&quot; class=&quot;headerlink&quot; title=&quot;BoundedOptimization TopC</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[COCI2010-2011 2] CRNI(单调栈)</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.210Z</updated>
    
    <content type="html"><![CDATA[<h1 id="COCI2010-2011-2-CRNI-单调栈"><a href="#COCI2010-2011-2-CRNI-单调栈" class="headerlink" title="[COCI2010-2011#2] CRNI(单调栈)"></a>[COCI2010-2011#2] CRNI(单调栈)</h1><h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>首先考虑两个不相交的矩形可能存在的位置关系，我将其分成</p><p>1.左右</p><p>2.上下</p><p>3.左上右下</p><p>4.左下右上</p><p>发现1,2,3,4之间有相交,考虑四种情况的答案应该是1+2-3-4</p><h2 id="统计方法"><a href="#统计方法" class="headerlink" title="统计方法"></a>统计方法</h2><p>核心: 统计以一个点作为顶点的矩形数量</p><p>以统计$i,j$为右下角的矩形为例，先不考虑矩形大小&gt;1的限制</p><p>显然可以在线性时间内处理得到每个$i,j$向上连续延伸的连续1长度，设其为$U_{i,j}$</p><p>假设枚举了$i$，从左到右依次扫描$j$，则得到$i,j$位置的答案应该是</p><script type="math/tex; mode=display">\begin{aligned} \sum_{k=1}^{j} \min_{d=k}^j\lbrace U_{i,d}\rbrace\end{aligned}</script><p>这条式子中，相当于枚举了$i,(k,j)$为底，统计向上延伸的最长长度</p><p>这个式子可以用<strong>单调栈</strong>在线性时间内求解，其过程可以描述为</p><p>1.每次插入元素$U_{i,j}$，得到它的影响区间$k\in [L,j]$</p><p>2.将原先单调栈内$k\in [L,j]$这段区间的答案减掉，改为$U_{i,j}\cdot (j-L+1)$</p><p>类似的，可以通过改变循环顺序和额外记录向下延伸的长度$D_{i,j}$来统计四种顶点的答案(详细见代码)</p><p>然后可以用前缀和帮助统计以上4种答案，枚举一个端点，另一个查询前缀和即可</p><p>tips: 注意累和顺序，<del>前缀和要开long long</del></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>=</span><span class="keyword">int</span>&gt; <span class="function">T <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line">T s=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>())) <span class="keyword">if</span>(IO==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(IO^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>()));</span><br><span class="line"><span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e3</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> a[N][N];</span><br><span class="line"><span class="keyword">int</span> D[N][N],U[N][N]; <span class="comment">//i,j向下/上延伸的最长长度</span></span><br><span class="line"><span class="keyword">int</span> stk[N],c[N],top;</span><br><span class="line"><span class="keyword">int</span> CRR[N][N]; <span class="comment">// 以i,j为右下角的矩形个数</span></span><br><span class="line"><span class="keyword">int</span> CLL[N][N]; <span class="comment">// 以i,j为左上角的矩形个数</span></span><br><span class="line"><span class="keyword">int</span> CLR[N][N]; <span class="comment">// 以i,j为右上角的矩形个数</span></span><br><span class="line"><span class="keyword">int</span> CRL[N][N]; <span class="comment">// 以i,j为左下角的矩形个数</span></span><br><span class="line">ll SLL[N][N],SRL[N][N]; <span class="comment">// 前缀和</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,a[i]+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">rep</span>(j,<span class="number">1</span>,n) <span class="keyword">if</span>(a[i][j]==<span class="string">&#x27;C&#x27;</span>) U[i][j]=U[i<span class="number">-1</span>][j]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">drep</span>(i,n,<span class="number">1</span>) <span class="built_in">rep</span>(j,<span class="number">1</span>,n) <span class="keyword">if</span>(a[i][j]==<span class="string">&#x27;C&#x27;</span>) D[i][j]=D[i+<span class="number">1</span>][j]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="comment">// 统计四种端点的情况</span></span><br><span class="line">top=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> now=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="keyword">int</span> x=U[i][j],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(top &amp;&amp; stk[top]&gt;=x) cnt+=c[top],now-=c[top]*stk[top],top--;</span><br><span class="line">stk[++top]=x,c[top]=cnt; now+=x*cnt;</span><br><span class="line">CRR[i][j]=<span class="built_in">max</span>(now<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">now=top=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="keyword">int</span> x=D[i][j],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(top &amp;&amp; stk[top]&gt;=x) cnt+=c[top],now-=c[top]*stk[top],top--;</span><br><span class="line">stk[++top]=x,c[top]=cnt; now+=x*cnt;</span><br><span class="line">CLR[i][j]=<span class="built_in">max</span>(now<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">now=top=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">drep</span>(j,n,<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> x=U[i][j],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(top &amp;&amp; stk[top]&gt;=x) cnt+=c[top],now-=c[top]*stk[top],top--;</span><br><span class="line">stk[++top]=x,c[top]=cnt; now+=x*cnt;</span><br><span class="line">CRL[i][j]=<span class="built_in">max</span>(now<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">now=top=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">drep</span>(j,n,<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> x=D[i][j],cnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(top &amp;&amp; stk[top]&gt;=x) cnt+=c[top],now-=c[top]*stk[top],top--;</span><br><span class="line">stk[++top]=x,c[top]=cnt; now+=x*cnt;</span><br><span class="line">CLL[i][j]=<span class="built_in">max</span>(now<span class="number">-1</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">drep</span>(i,n,<span class="number">1</span>) <span class="built_in">drep</span>(j,n,<span class="number">1</span>) SLL[i][j]=SLL[i+<span class="number">1</span>][j]+SLL[i][j+<span class="number">1</span>]-SLL[i+<span class="number">1</span>][j+<span class="number">1</span>]+CLL[i][j];</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">drep</span>(j,n,<span class="number">1</span>) SRL[i][j]=SRL[i<span class="number">-1</span>][j]+SRL[i][j+<span class="number">1</span>]-SRL[i<span class="number">-1</span>][j+<span class="number">1</span>]+CRL[i][j];</span><br><span class="line"><span class="comment">// 前缀和</span></span><br><span class="line"></span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">rep</span>(j,<span class="number">1</span>,n) <span class="keyword">if</span>(CRR[i][j]) ans+=CRR[i][j]*(SLL[i+<span class="number">1</span>][<span class="number">1</span>]+SLL[<span class="number">1</span>][j+<span class="number">1</span>]-SLL[i+<span class="number">1</span>][j+<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">rep</span>(j,<span class="number">1</span>,n) ans-=CLR[i][j]*SRL[i<span class="number">-1</span>][j+<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 统计4种情况</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans%<span class="number">10007</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;COCI2010-2011-2-CRNI-单调栈&quot;&gt;&lt;a href=&quot;#COCI2010-2011-2-CRNI-单调栈&quot; class=&quot;headerlink&quot; title=&quot;[COCI2010-2011#2] CRNI(单调栈)&quot;&gt;&lt;/a&gt;[COCI2010-2</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[COCI2010-2011 7] UPIT</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.211Z</updated>
    
    <content type="html"><![CDATA[<h1 id="COCI2010-2011-7-UPIT"><a href="#COCI2010-2011-7-UPIT" class="headerlink" title="[COCI2010-2011#7] UPIT"></a>[COCI2010-2011#7] UPIT</h1><p>约定:视$n,q$同阶</p><p>看一下题目的操作</p><p>1.区间赋值</p><p>2.区间差分加</p><p>3.插入元素</p><p>4.区间查询</p><p>我们知道1,2操作都是可以用懒标记维护的，具体过程可能有一点细节</p><p>1.记录区间差分加的过程，要记录等差数列首项和公差，两个等差数列相加直接首项和公差都相加即可</p><p>2.区间赋值的优先级要高于加法，即打上赋值标记就要清空加法标记，标记下传时注意先下传赋值标记</p><p>然后具体问题落到如何实现插入元素这个操作上</p><h3 id="块状链表"><a href="#块状链表" class="headerlink" title="块状链表"></a>块状链表</h3><p>对于静态的数组，可以直接静态分块来做</p><p>而要动态插入时，找到对应块，插入即可，但是涉及到编号问题</p><p>所以需要每个块维护一个$Size$，块内每个元素维护一个标号$id_i$</p><p>同时需要对于块的$Size$累前缀和$SumSize$，则块$i$内编号为$j$的元素在数组中的实际编号为$SumSize_{i-1}+j$</p><p>插入时把整个块内的元素取出重新标号即可</p><p>但是这样插入后，一个块的$Size$会变大，再实现分块的操作时复杂度没有保证</p><p>因此需要加入一个操作:当$Size_i&gt;2\sqrt n$时,$O(n)$重构整个序列，这样每$\sqrt n$次插入操作会导致一次重构，复杂度为均摊的$O(n\sqrt n)$</p><p>然后可以用类似分块的方法来直接维护</p><script type="math/tex; mode=display">\</script><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3><p>静态的操作线段树可以直接维护</p><p>在线段树上额外维护一个01，表示这个元素是否出现</p><p>将插入操作转化为在让对应位置的0变为1，但是由于不知道插入后的位置，所以不能直接操作</p><p>于是有两种解决办法</p><h4 id="暴力值域"><a href="#暴力值域" class="headerlink" title="暴力值域"></a>暴力值域</h4><p>静态情况下我们对于$[1,n]$建树，但是动态可以对于$[1,n\cdot q]$建函数式线段树</p><h3 id="离线"><a href="#离线" class="headerlink" title="离线"></a>离线</h3><p>离线维护，预处理出插入的位置</p><script type="math/tex; mode=display">\</script><h3 id="平衡树"><a href="#平衡树" class="headerlink" title="平衡树"></a>平衡树</h3><p><del>下面是安利时间</del></p><p>来学Treap吧</p><p>它可以 </p><p>1.查询k大</p><p>2.插入元素</p><p>3.区间修改</p><p>4.区间翻转</p><p>5.可持久化!!</p><p><del>6.吊打Splay</del></p><p>Treap 即树堆，意思是在满足二叉查找树的性质同时满足二叉堆的性质</p><p>给定每个节点一个额外的随机权值，让二叉查找树对于这个权值满足堆的性质即可</p><p>这样构造的二叉查找树，树高是$O(\log n)$的</p><h4 id="带旋Treap"><a href="#带旋Treap" class="headerlink" title="带旋Treap"></a>带旋Treap</h4><p>像普通二叉查找树一样每次插入节点到叶子位置后，可能不满足二叉堆的性质，因此需要不断向上zig/zag来调整满足</p><p>区间操作可以尝试像写线段树一样写</p><p>但是它不可持久化</p><h4 id="非旋Treap"><a href="#非旋Treap" class="headerlink" title="非旋Treap"></a>非旋Treap</h4><p>维护两个基础操作</p><p>1.平衡树合并，操作需要满足两棵树的大小顺序确定，返回新的根</p><p>2.平衡树分裂为$[1,d],[d+1,n]$的两部分，返回两棵树的根</p><p>1.合并操作$x,y$</p><p>按照节点的权值比较谁是平衡树的根，然后将根的左/右子树与另一棵树合并作为新的子树，递归实现</p><p>2.分裂$x,d$</p><p>维护$Size$判断是要分裂左子树还是右子树，将子树分裂得到的部分作为$x$新的子树，递归实现即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> pair &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x|y;</span><br><span class="line"><span class="built_in">Down</span>(x),<span class="built_in">Down</span>(y);</span><br><span class="line"><span class="keyword">if</span>(key[x]&lt;key[y]) <span class="keyword">return</span> rs[x]=<span class="built_in">Union</span>(rs[x],y),<span class="built_in">Up</span>(x),x;</span><br><span class="line"><span class="keyword">return</span> ls[y]=<span class="built_in">Union</span>(x,ls[y]),<span class="built_in">Up</span>(y),y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Pii <span class="title">Split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!x) <span class="keyword">return</span> <span class="built_in">mp</span>(x,x);</span><br><span class="line"><span class="keyword">if</span>(sz[x]&lt;=d) <span class="keyword">return</span> <span class="built_in">mp</span>(x,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(d==<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">mp</span>(<span class="number">0</span>,x);</span><br><span class="line"><span class="built_in">Down</span>(x);</span><br><span class="line"><span class="keyword">if</span>(sz[ls[x]]+<span class="number">1</span>&lt;=d) &#123;</span><br><span class="line">Pii y=<span class="built_in">Split</span>(rs[x],d-sz[ls[x]]<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> rs[x]=y.first,<span class="built_in">Up</span>(x),<span class="built_in">mp</span>(x,y.second);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Pii y=<span class="built_in">Split</span>(ls[x],d);</span><br><span class="line"><span class="keyword">return</span> ls[x]=y.second,<span class="built_in">Up</span>(x),<span class="built_in">mp</span>(y.first,x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入操作可以分裂前$k$个，将新节点和得到的两棵树按次合并</p><p>区间更新可以分裂两次，将对应区间的子树操作即可</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>块状链表</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(2)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ldb;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod1(x) ((x&gt;=P)&amp;&amp;(x-=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod2(x) ((x&lt;0)&amp;&amp;(x+=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&gt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&lt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>=</span><span class="keyword">int</span>&gt; <span class="function">T <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    T s=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>())) <span class="keyword">if</span>(IO==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(IO^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>()));</span><br><span class="line">    <span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n,m,cnt;</span><br><span class="line"><span class="keyword">int</span> head[N],nxt[N],sz[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span> <span class="keyword">int</span> rk,id; &#125; E[N];</span><br><span class="line">ll s[N],st[N],t[N],d[N],a[N]; </span><br><span class="line"><span class="keyword">int</span> ssz[N];</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">Get</span><span class="params">(ll l,ll r)</span></span>&#123; <span class="keyword">return</span> (r-l+<span class="number">1</span>)*(l+r)/<span class="number">2</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Down</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    s[p]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[p];i;i=nxt[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(~st[p]) a[E[i].id]=st[p];</span><br><span class="line">        a[E[i].id]+=<span class="number">1ll</span>*(E[i].rk<span class="number">-1</span>)*d[p]+t[p];</span><br><span class="line">        s[p]+=a[E[i].id];</span><br><span class="line">    &#125;</span><br><span class="line">    st[p]=<span class="number">-1</span>,t[p]=d[p]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Up</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    s[p]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[p];i;i=nxt[i]) s[p]+=a[E[i].id];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">sort</span>(E+<span class="number">1</span>,E+n+<span class="number">1</span>,[&amp;](Node x,Node y)&#123; <span class="keyword">return</span> x.rk&lt;y.rk; &#125;);</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">0</span>,cnt) sz[i]=head[i]=<span class="number">0</span>,st[i]=<span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line">        <span class="keyword">int</span> p=i/cnt+<span class="number">1</span>;</span><br><span class="line">        nxt[i]=head[p],E[i].rk=++sz[p];</span><br><span class="line">        head[p]=i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,cnt) ssz[i]=ssz[i<span class="number">-1</span>]+sz[i],<span class="built_in">Up</span>(i);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Break</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,cnt) &#123;</span><br><span class="line">        sz[i]+=sz[i<span class="number">-1</span>],<span class="built_in">Down</span>(i);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=head[i];j;j=nxt[j]) E[j].rk+=sz[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Build</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    x--;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(sz[l]&lt;=x) x-=sz[l++];</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l=p&lt;=n?<span class="built_in">Get</span>(p):cnt;</span><br><span class="line">    <span class="built_in">Down</span>(l),p-=ssz[l<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[l];i;i=nxt[i]) <span class="keyword">if</span>(E[i].rk&gt;=p) E[i].rk++;</span><br><span class="line">    a[++n]=x,E[n]=(Node)&#123;p,n&#125;,nxt[n]=head[l],head[l]=n;</span><br><span class="line">    sz[l]++,s[l]+=x;</span><br><span class="line">    <span class="keyword">if</span>(sz[l]&gt;cnt*<span class="number">2.4</span>) <span class="built_in">Break</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,cnt) ssz[i]=ssz[i<span class="number">-1</span>]+sz[i];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p1=<span class="built_in">Get</span>(l),p2=<span class="built_in">Get</span>(r);</span><br><span class="line">    <span class="keyword">if</span>(p1==p2) &#123;</span><br><span class="line">        <span class="built_in">Down</span>(p1);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[p1];i;i=nxt[i]) <span class="keyword">if</span>(ssz[p1<span class="number">-1</span>]+E[i].rk&gt;=l &amp;&amp; ssz[p1<span class="number">-1</span>]+E[i].rk&lt;=r) a[E[i].id]=x;</span><br><span class="line">        <span class="built_in">Up</span>(p1);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Down</span>(p1),<span class="built_in">Down</span>(p2);</span><br><span class="line">    s[p1]=s[p2]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[p1];i;i=nxt[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ssz[p1<span class="number">-1</span>]+E[i].rk&gt;=l) a[E[i].id]=x;</span><br><span class="line">        s[p1]+=a[E[i].id];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[p2];i;i=nxt[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ssz[p2<span class="number">-1</span>]+E[i].rk&lt;=r) a[E[i].id]=x;</span><br><span class="line">        s[p2]+=a[E[i].id];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i,p1+<span class="number">1</span>,p2<span class="number">-1</span>) st[i]=x,d[i]=t[i]=<span class="number">0</span>,s[i]=<span class="number">1ll</span>*x*sz[i];</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p1=<span class="built_in">Get</span>(l),p2=<span class="built_in">Get</span>(r);</span><br><span class="line">    <span class="keyword">if</span>(p1==p2) &#123;</span><br><span class="line">        <span class="built_in">Down</span>(p1);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[p1];i;i=nxt[i]) <span class="keyword">if</span>(ssz[p1<span class="number">-1</span>]+E[i].rk&gt;=l &amp;&amp; ssz[p1<span class="number">-1</span>]+E[i].rk&lt;=r) a[E[i].id]+=<span class="number">1ll</span>*(ssz[p1<span class="number">-1</span>]+E[i].rk-l+<span class="number">1</span>)*x;</span><br><span class="line">        <span class="built_in">Up</span>(p1);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Down</span>(p1),<span class="built_in">Down</span>(p2);</span><br><span class="line">    s[p1]=s[p2]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[p1];i;i=nxt[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ssz[p1<span class="number">-1</span>]+E[i].rk&gt;=l) a[E[i].id]+=<span class="number">1ll</span>*(ssz[p1<span class="number">-1</span>]+E[i].rk-l+<span class="number">1</span>)*x;</span><br><span class="line">        s[p1]+=a[E[i].id];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[p2];i;i=nxt[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ssz[p2<span class="number">-1</span>]+E[i].rk&lt;=r) a[E[i].id]+=<span class="number">1ll</span>*(ssz[p2<span class="number">-1</span>]+E[i].rk-l+<span class="number">1</span>)*x;</span><br><span class="line">        s[p2]+=a[E[i].id];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(i,p1+<span class="number">1</span>,p2<span class="number">-1</span>) &#123;</span><br><span class="line">        t[i]+=<span class="number">1ll</span>*(ssz[i<span class="number">-1</span>]-l+<span class="number">2</span>)*x,d[i]+=x;</span><br><span class="line">        s[i]+=<span class="built_in">Get</span>(ssz[i<span class="number">-1</span>]-l+<span class="number">2</span>,ssz[i]-l+<span class="number">1</span>)*x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function">ll <span class="title">Que</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p1=<span class="built_in">Get</span>(l),p2=<span class="built_in">Get</span>(r);</span><br><span class="line">    ll ans=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">Down</span>(p1),<span class="built_in">Down</span>(p2);</span><br><span class="line">    <span class="keyword">if</span>(p1==p2) &#123;</span><br><span class="line">        <span class="built_in">Down</span>(p1);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[p1];i;i=nxt[i]) <span class="keyword">if</span>(ssz[p1<span class="number">-1</span>]+E[i].rk&gt;=l &amp;&amp; ssz[p1<span class="number">-1</span>]+E[i].rk&lt;=r) ans+=a[E[i].id];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Down</span>(p1),<span class="built_in">Down</span>(p2);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[p1];i;i=nxt[i]) <span class="keyword">if</span>(ssz[p1<span class="number">-1</span>]+E[i].rk&gt;=l) ans+=a[E[i].id];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=head[p2];i;i=nxt[i]) <span class="keyword">if</span>(ssz[p2<span class="number">-1</span>]+E[i].rk&lt;=r) ans+=a[E[i].id];</span><br><span class="line">    <span class="built_in">rep</span>(i,p1+<span class="number">1</span>,p2<span class="number">-1</span>) ans+=s[i];</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=<span class="built_in">rd</span>(),m=<span class="built_in">rd</span>();</span><br><span class="line">    cnt=<span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(n+m));</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">rd</span>(),E[i]=(Node)&#123;i,i&#125;;</span><br><span class="line">    <span class="built_in">Build</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">        <span class="keyword">int</span> opt=<span class="built_in">rd</span>();</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l=<span class="built_in">rd</span>(),r=<span class="built_in">rd</span>(),x=<span class="built_in">rd</span>();</span><br><span class="line">            <span class="built_in">Set</span>(l,r,x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l=<span class="built_in">rd</span>(),r=<span class="built_in">rd</span>(),x=<span class="built_in">rd</span>();</span><br><span class="line">            <span class="built_in">Add</span>(l,r,x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> p=<span class="built_in">rd</span>(),x=<span class="built_in">rd</span>();</span><br><span class="line">            <span class="built_in">Insert</span>(p,x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> l=<span class="built_in">rd</span>(),r=<span class="built_in">rd</span>();</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">Que</span>(l,r));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>旋Treap:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//#pragma GCC optimize(2)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">double</span> ldb;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> pair &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod1(x) ((x&gt;=P)&amp;&amp;(x-=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod2(x) ((x&lt;0)&amp;&amp;(x+=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&gt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&lt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>=</span><span class="keyword">int</span>&gt; <span class="function">T <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line">T s=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>())) <span class="keyword">if</span>(IO==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(IO^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>()));</span><br><span class="line"><span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> rt,son[N][<span class="number">2</span>],fa[N];</span><br><span class="line">ll s[N],t[N],d[N],st[N],val[N];</span><br><span class="line">ll sz[N],key[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Up</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">s[p]=s[son[p][<span class="number">0</span>]]+s[son[p][<span class="number">1</span>]]+val[p];</span><br><span class="line">sz[p]=sz[son[p][<span class="number">0</span>]]+sz[son[p][<span class="number">1</span>]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">(<span class="keyword">int</span> p,ll x)</span></span>&#123;</span><br><span class="line">t[p]=d[p]=<span class="number">0</span>,st[p]=val[p]=x,s[p]=sz[p]*x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> p,ll x,ll d)</span> </span>&#123;</span><br><span class="line">val[p]+=x+d*sz[son[p][<span class="number">0</span>]];</span><br><span class="line">s[p]+=sz[p]*(sz[p]<span class="number">-1</span>)/<span class="number">2</span>*d+x*sz[p];</span><br><span class="line">t[p]+=x,::d[p]+=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Down</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(~st[p]) <span class="built_in">Set</span>(son[p][<span class="number">0</span>],st[p]),<span class="built_in">Set</span>(son[p][<span class="number">1</span>],st[p]),st[p]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">if</span>(t[p] || d[p]) <span class="built_in">Add</span>(son[p][<span class="number">0</span>],t[p],d[p]),<span class="built_in">Add</span>(son[p][<span class="number">1</span>],t[p]+(sz[son[p][<span class="number">0</span>]]+<span class="number">1</span>)*d[p],d[p]),t[p]=d[p]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> f=fa[u],ff=fa[f],d=son[f][<span class="number">1</span>]==u;</span><br><span class="line">fa[u]=ff; <span class="keyword">if</span>(ff) son[ff][son[ff][<span class="number">1</span>]==f]=u;</span><br><span class="line">son[f][d]=son[u][!d]; <span class="keyword">if</span>(son[u][!d]) fa[son[u][!d]]=f;</span><br><span class="line">son[u][!d]=f,fa[f]=u;</span><br><span class="line"><span class="built_in">Up</span>(f),<span class="built_in">Up</span>(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> v=++n;</span><br><span class="line">val[v]=s[v]=x,sz[v]=<span class="number">1</span>,st[v]=<span class="number">-1</span>,key[v]=<span class="built_in">rand</span>();</span><br><span class="line"><span class="keyword">if</span>(!rt)&#123; rt=v; <span class="keyword">return</span>; &#125;</span><br><span class="line"><span class="keyword">int</span> u=rt;</span><br><span class="line"><span class="keyword">while</span>(u) &#123;</span><br><span class="line"><span class="built_in">Down</span>(u);</span><br><span class="line"><span class="keyword">if</span>(sz[son[u][<span class="number">0</span>]]&gt;=p) &#123;</span><br><span class="line"><span class="keyword">if</span>(!son[u][<span class="number">0</span>]) &#123; son[fa[v]=u][<span class="number">0</span>]=v; <span class="keyword">break</span>; &#125;</span><br><span class="line">u=son[u][<span class="number">0</span>]; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">p-=sz[son[u][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!son[u][<span class="number">1</span>]) &#123; son[fa[v]=u][<span class="number">1</span>]=v; <span class="keyword">break</span>; &#125;</span><br><span class="line">u=son[u][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(fa[v] &amp;&amp; key[v]&lt;key[fa[v]]) <span class="built_in">rotate</span>(v);</span><br><span class="line"><span class="keyword">if</span>(!fa[v]) rt=v;</span><br><span class="line"><span class="keyword">while</span>(fa[v]) <span class="built_in">Up</span>(v=fa[v]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Set</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!p || r&lt;=<span class="number">0</span> || l&gt;sz[p]) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=<span class="number">1</span> &amp;&amp; r&gt;=sz[p]) <span class="keyword">return</span> <span class="built_in">Set</span>(p,x);</span><br><span class="line"><span class="keyword">int</span> t=sz[son[p][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">Down</span>(p),<span class="built_in">Set</span>(son[p][<span class="number">0</span>],l,r,x),<span class="built_in">Set</span>(son[p][<span class="number">1</span>],l-t,r-t,x);</span><br><span class="line"><span class="keyword">if</span>(t&gt;=l &amp;&amp; t&lt;=r) val[p]=x;</span><br><span class="line"><span class="built_in">Up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r,ll x,ll d)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!p || r&lt;=<span class="number">0</span> || l&gt;sz[p]) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=<span class="number">1</span> &amp;&amp; r&gt;=sz[p]) <span class="keyword">return</span> <span class="built_in">Add</span>(p,x,d);</span><br><span class="line"><span class="keyword">int</span> t=sz[son[p][<span class="number">0</span>]]+<span class="number">1</span>;</span><br><span class="line"><span class="built_in">Down</span>(p),<span class="built_in">Add</span>(son[p][<span class="number">0</span>],l,r,x,d),<span class="built_in">Add</span>(son[p][<span class="number">1</span>],l-t,r-t,x+d*t,d);</span><br><span class="line"><span class="keyword">if</span>(t&gt;=l &amp;&amp; t&lt;=r) val[p]+=(t<span class="number">-1</span>)*d+x;</span><br><span class="line"><span class="built_in">Up</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">Que</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!p || r&lt;=<span class="number">0</span> || l&gt;sz[p]) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(l&lt;=<span class="number">1</span> &amp;&amp; r&gt;=sz[p]) <span class="keyword">return</span> s[p];</span><br><span class="line">ll t=sz[son[p][<span class="number">0</span>]]+<span class="number">1</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">Down</span>(p),res+=<span class="built_in">Que</span>(son[p][<span class="number">0</span>],l,r),res+=<span class="built_in">Que</span>(son[p][<span class="number">1</span>],l-t,r-t);</span><br><span class="line"><span class="keyword">if</span>(t&gt;=l &amp;&amp; t&lt;=r) res+=val[p];</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n=<span class="built_in">rd</span>(),m=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) <span class="built_in">Insert</span>(i,<span class="built_in">rd</span>());</span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="keyword">int</span> opt=<span class="built_in">rd</span>();</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">rd</span>(),r=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">Set</span>(rt,l,r,<span class="built_in">rd</span>());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">rd</span>(),r=<span class="built_in">rd</span>(),x=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">Add</span>(rt,l,r,x<span class="number">-1ll</span>*(l<span class="number">-1</span>)*x,x);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">rd</span>(),y=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">Insert</span>(x<span class="number">-1</span>,y);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> l=<span class="built_in">rd</span>(),r=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">Que</span>(rt,l,r));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>非旋Treap:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> c;<span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&lt;<span class="number">48</span>);</span><br><span class="line">    <span class="keyword">do</span> s=s*<span class="number">10</span>+c<span class="number">-48</span>;</span><br><span class="line">    <span class="keyword">while</span>((c=<span class="built_in">getchar</span>())&gt;<span class="number">47</span>);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">enum</span>&#123;</span>N=<span class="number">200010</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,rt,ls[N],rs[N],key[N];</span><br><span class="line">ll s[N],t[N],d[N],st[N],val[N],sz[N];</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Up</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    s[p]=s[ls[p]]+s[rs[p]]+val[p];</span><br><span class="line">    sz[p]=sz[ls[p]]+sz[rs[p]]+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Set</span><span class="params">(<span class="keyword">int</span> p,ll x)</span></span>&#123; t[p]=d[p]=<span class="number">0</span>,st[p]=val[p]=x,s[p]=sz[p]*x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> p,ll x,ll d)</span> </span>&#123;</span><br><span class="line">    val[p]+=x+d*sz[ls[p]];</span><br><span class="line">    s[p]+=sz[p]*(sz[p]<span class="number">-1</span>)/<span class="number">2</span>*d+x*sz[p];</span><br><span class="line">    t[p]+=x,::d[p]+=d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Down</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">    ~st[p] &amp;&amp; (<span class="built_in">Set</span>(ls[p],st[p]),<span class="built_in">Set</span>(rs[p],st[p]),st[p]=<span class="number">-1</span>);</span><br><span class="line">    (t[p] || d[p]) &amp;&amp; (<span class="built_in">Add</span>(ls[p],t[p],d[p]),<span class="built_in">Add</span>(rs[p],t[p]+(sz[ls[p]]+<span class="number">1</span>)*d[p],d[p]),t[p]=d[p]=<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Union</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!x || !y) <span class="keyword">return</span> x|y;</span><br><span class="line">    <span class="keyword">return</span> key[x]&lt;key[y]?(<span class="built_in">Down</span>(x),rs[x]=<span class="built_in">Union</span>(rs[x],y),<span class="built_in">Up</span>(x),x):(<span class="built_in">Down</span>(y),ls[y]=<span class="built_in">Union</span>(x,ls[y]),<span class="built_in">Up</span>(y),y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Pii <span class="title">Split</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(sz[x]&lt;=d) <span class="keyword">return</span> <span class="built_in">mp</span>(x,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(d==<span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">mp</span>(<span class="number">0</span>,x);</span><br><span class="line">    <span class="built_in">Down</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(sz[ls[x]]+<span class="number">1</span>&lt;=d) &#123;</span><br><span class="line">        Pii y=<span class="built_in">Split</span>(rs[x],d-sz[ls[x]]<span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> rs[x]=y.first,<span class="built_in">Up</span>(x),<span class="built_in">mp</span>(x,y.second);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Pii y=<span class="built_in">Split</span>(ls[x],d);</span><br><span class="line">        <span class="keyword">return</span> ls[x]=y.second,<span class="built_in">Up</span>(x),<span class="built_in">mp</span>(y.first,x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    n=<span class="built_in">rd</span>(),m=<span class="built_in">rd</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n+m;++i) key[i]=<span class="built_in">rand</span>(),st[i]=<span class="number">-1</span>,sz[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) val[i]=s[i]=<span class="built_in">rd</span>(),rt=<span class="built_in">Union</span>(rt,i);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="keyword">int</span> opt=<span class="built_in">rd</span>();</span><br><span class="line">        <span class="keyword">if</span>(opt==<span class="number">3</span>) &#123;</span><br><span class="line">            Pii t=<span class="built_in">Split</span>(rt,<span class="built_in">rd</span>()<span class="number">-1</span>); ++n,val[n]=s[n]=<span class="built_in">rd</span>();</span><br><span class="line">            rt=<span class="built_in">Union</span>(<span class="built_in">Union</span>(t.first,n),t.second);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> l=<span class="built_in">rd</span>(),r=<span class="built_in">rd</span>();</span><br><span class="line">            Pii a=<span class="built_in">Split</span>(rt,l<span class="number">-1</span>),b=<span class="built_in">Split</span>(a.second,r-l+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(opt==<span class="number">1</span>) <span class="built_in">Set</span>(b.first,<span class="built_in">rd</span>());</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">2</span>) &#123;<span class="keyword">int</span> x=<span class="built_in">rd</span>(); <span class="built_in">Add</span>(b.first,x,x); &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(opt==<span class="number">4</span>) <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,s[b.first]);</span><br><span class="line">            rt=<span class="built_in">Union</span>(<span class="built_in">Union</span>(a.first,b.first),b.second);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;COCI2010-2011-7-UPIT&quot;&gt;&lt;a href=&quot;#COCI2010-2011-7-UPIT&quot; class=&quot;headerlink&quot; title=&quot;[COCI2010-2011#7] UPIT&quot;&gt;&lt;/a&gt;[COCI2010-2011#7] UPIT&lt;/</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[CSP-S 2020 T3] 动物园 (拓扑排序)</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSP-S-2020-T3-动物园-拓扑排序"><a href="#CSP-S-2020-T3-动物园-拓扑排序" class="headerlink" title="[CSP-S 2020 T3] 动物园 (拓扑排序)"></a>[CSP-S 2020 T3] 动物园 (拓扑排序)</h1><p>很难考虑每个操作的顺序，但由于操作比较简单，可以直接考虑每个操作贡献的权值</p><p>一个操作的权值可以定义为：每次这个操作执行之后后，后面所有的乘法操作的积</p><p>如果没有递归，只需要倒序枚举一次调用情况，就能知道所有的权值</p><p>对于递归的情况，显然函数之间的递归关系构成一张拓扑图，可以考虑预处理出每个操作的乘法操作之积</p><p>对于所有的函数，同样能得到一个权值，接下来的操作只需要把每个存在递归的函数不断将权值向下传给子函数</p><p>如果把最终的调用序列看做一个主函数，那么对于这个操作实际也是一样的做法</p><p>即：倒序枚举一次累积，然后乘上自己的权值下传即可</p><p>Tips: 最后加入贡献时，注意先将所有数的权值乘上全局乘法倍数，然后再依次处理每个加法操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span>&#123; </span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>,f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>())) <span class="keyword">if</span>(IO==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(IO^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>()));</span><br><span class="line"><span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>,P=<span class="number">998244353</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> A[N],T[N],H[N]; </span><br><span class="line"><span class="comment">// A为原数组，T为乘法积，H为函数调用权值</span></span><br><span class="line"><span class="keyword">int</span> O[N],X[N],Y[N];</span><br><span class="line"><span class="keyword">int</span> B[N*<span class="number">11</span>],C,L[N],R[N],ind[N];</span><br><span class="line"><span class="keyword">int</span> Q[N],QL,QR;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//freopen(&quot;call.in&quot;,&quot;r&quot;,stdin),freopen(&quot;call.out&quot;,&quot;w&quot;,stdout);</span></span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n=<span class="built_in">rd</span>()) A[i]=<span class="built_in">rd</span>();</span><br><span class="line">m=<span class="built_in">rd</span>()+<span class="number">1</span>; <span class="comment">// 令m+1号为主函数</span></span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m) &#123;</span><br><span class="line">O[i]=i&lt;m?<span class="built_in">rd</span>():<span class="number">3</span>,T[i]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(O[i]==<span class="number">1</span>) X[i]=<span class="built_in">rd</span>(),Y[i]=<span class="built_in">rd</span>();</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(O[i]==<span class="number">2</span>) T[i]=<span class="built_in">rd</span>();</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">L[i]=C+<span class="number">1</span>,R[i]=C+=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(j,L[i],R[i]) ind[B[j]=<span class="built_in">rd</span>()]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,QL=<span class="number">1</span>,m) <span class="keyword">if</span>(!ind[i]) Q[++QR]=i;</span><br><span class="line"><span class="keyword">while</span>(QL&lt;=QR) &#123;</span><br><span class="line"><span class="keyword">int</span> u=Q[QL++];</span><br><span class="line"><span class="keyword">if</span>(O[u]==<span class="number">3</span>) <span class="built_in">rep</span>(j,L[u],R[u]) <span class="keyword">if</span>(--ind[B[j]]==<span class="number">0</span>) Q[++QR]=B[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">drep</span>(k,m,<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> u=Q[k];</span><br><span class="line"><span class="keyword">if</span>(O[u]==<span class="number">3</span>) <span class="built_in">rep</span>(j,L[u],R[u]) T[u]=<span class="number">1ll</span>*T[u]*T[B[j]]%P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">rep</span>(i,H[m]=<span class="number">1</span>,n) A[i]=<span class="number">1ll</span>*A[i]*T[m]%P;</span><br><span class="line"><span class="built_in">rep</span>(k,<span class="number">1</span>,m) &#123;</span><br><span class="line"><span class="keyword">int</span> u=Q[k],x=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">drep</span>(j,R[u],L[u])&#123;</span><br><span class="line"><span class="keyword">int</span> v=B[j];</span><br><span class="line">H[v]=(H[v]+<span class="number">1ll</span>*x*H[u])%P;</span><br><span class="line">x=<span class="number">1ll</span>*x*T[v]%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(O[u]==<span class="number">1</span>) A[X[u]]=(A[X[u]]+<span class="number">1ll</span>*H[u]*Y[u])%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,A[i]); <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CSP-S-2020-T3-动物园-拓扑排序&quot;&gt;&lt;a href=&quot;#CSP-S-2020-T3-动物园-拓扑排序&quot; class=&quot;headerlink&quot; title=&quot;[CSP-S 2020 T3] 动物园 (拓扑排序)&quot;&gt;&lt;/a&gt;[CSP-S 2020 T3] </summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[CosmicBlocks - TopCoder- 12034] (网络流)</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.390Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CosmicBlocks-TopCoder-12034-网络流"><a href="#CosmicBlocks-TopCoder-12034-网络流" class="headerlink" title="CosmicBlocks - TopCoder- 12034 (网络流)"></a><a href="https://vjudge.net/problem/TopCoder-12034">CosmicBlocks - TopCoder- 12034</a> (网络流)</h1><p>注意题目定义的同构是存在不同的颜色覆盖关系，而不是存在不同的排列顺序</p><p>所以先枚举每一层放了那些颜色，再枚举那些颜色之间有覆盖</p><p>每一层的颜色划分数很少，最多可能同时存在的覆盖关系是$9$种，枚举复杂度最多是$2^9$，然后可以$2^n\cdot n\ \text{dp}$出拓扑序列的个数</p><p>问题在于如何快速又方便地判断对于<strong>当前情况是否存在方案</strong></p><p>一种方法是<strong>上下界网络流</strong></p><p>按照层之间的关系，覆盖关系就连$[1,+\infty)$的边，同时源点向$1$层的点连$[0,+\infty)$的边，每个点都向汇点连$[0,\infty)$的边</p><p>注意由于要限制流过每个点的流量，每个点要拆成两个点中间连$[num_i,num_i]$的边</p><p>最后判断一下<strong>有源汇可行流</strong>即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod1(x) ((x&gt;=P)&amp;&amp;(x-=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod2(x) ((x&lt;0)&amp;&amp;(x+=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&gt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&lt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>())) <span class="keyword">if</span>(IO==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(IO^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>()));</span><br><span class="line"><span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">20</span>,INF=<span class="number">1e8</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,ans,L,R;</span><br><span class="line"><span class="keyword">int</span> cnt[N],id[N];</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="keyword">int</span> GS[N];</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; Layer[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Calc_DAG</span><span class="params">()</span> </span>&#123; <span class="comment">// 计算拓扑序列的个数</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> dp[<span class="number">1</span>&lt;&lt;<span class="number">6</span>];</span><br><span class="line"><span class="keyword">int</span> A=(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,A) dp[i]=<span class="number">0</span>;</span><br><span class="line">dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(S,<span class="number">0</span>,A<span class="number">-1</span>) <span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) <span class="keyword">if</span>((~S&amp;(<span class="number">1</span>&lt;&lt;i)) &amp;&amp; (S&amp;GS[i+<span class="number">1</span>])==GS[i+<span class="number">1</span>]) dp[S|(<span class="number">1</span>&lt;&lt;i)]+=dp[S];</span><br><span class="line"><span class="keyword">return</span> dp[A];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ind[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Limited_Flow</span>&#123;</span> <span class="comment">// 有源汇可行流</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> M=<span class="number">300</span>;</span><br><span class="line"><span class="keyword">int</span> S,T;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,nxt,w;</span><br><span class="line">&#125; e[M];</span><br><span class="line"><span class="keyword">int</span> head[N],ecnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n*<span class="number">2</span>+<span class="number">4</span>) head[i]=<span class="number">0</span>;</span><br><span class="line">ecnt=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(u,i) for(int i=head[u];i;i=e[i].nxt)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123; e[ecnt]=(Edge)&#123;v,head[u],w&#125;,head[u]=ecnt++; &#125; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Link</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span></span>&#123; <span class="built_in">AddEdge</span>(u,v,w),<span class="built_in">AddEdge</span>(v,u,<span class="number">0</span>); &#125;</span><br><span class="line"><span class="keyword">int</span> dis[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> queue &lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,T) dis[i]=INF; dis[S]=<span class="number">0</span>,que.<span class="built_in">push</span>(S);</span><br><span class="line"><span class="keyword">while</span>(!que.<span class="built_in">empty</span>()) &#123;</span><br><span class="line"><span class="keyword">int</span> u=que.<span class="built_in">front</span>(); que.<span class="built_in">pop</span>();</span><br><span class="line"><span class="built_in">erep</span>(u,i) &#123;</span><br><span class="line"><span class="keyword">int</span> v=e[i].to,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(!w || dis[v]&lt;=dis[u]+<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">dis[v]=dis[u]+<span class="number">1</span>,que.<span class="built_in">push</span>(v);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dis[T]&lt;INF;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> flowin)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(u==T) <span class="keyword">return</span> flowin;</span><br><span class="line"><span class="keyword">int</span> flowout=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">erep</span>(u,i) &#123;</span><br><span class="line"><span class="keyword">int</span> v=e[i].to,w=e[i].w;</span><br><span class="line"><span class="keyword">if</span>(!w || dis[v]!=dis[u]+<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> t=<span class="built_in">Dfs</span>(v,<span class="built_in">min</span>(flowin-flowout,w));</span><br><span class="line">e[i].w-=t,e[i^<span class="number">1</span>].w+=t,flowout+=t;</span><br><span class="line"><span class="keyword">if</span>(flowin==flowout) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!flowout) dis[u]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> flowout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Dinic</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">Bfs</span>()) ans+=<span class="built_in">Dfs</span>(S,INF);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">erep</span>(S,i) <span class="keyword">if</span>(e[i].w) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="built_in">erep</span>(T,i) <span class="keyword">if</span>(e[i^<span class="number">1</span>].w) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; Flow;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Extend_Edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> L,<span class="keyword">int</span> R)</span></span>&#123;</span><br><span class="line">ind[u]-=L,ind[v]+=L;</span><br><span class="line">Flow.<span class="built_in">Link</span>(u,v,R-L);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Check</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n*<span class="number">2</span>+<span class="number">4</span>) ind[i]=<span class="number">0</span>;</span><br><span class="line">Flow.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">Extend_Edge</span>(i*<span class="number">2</span><span class="number">-1</span>,i*<span class="number">2</span>,cnt[i],cnt[i]);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="keyword">if</span>(id[i]==<span class="number">1</span>) <span class="built_in">Extend_Edge</span>(n*<span class="number">2</span>+<span class="number">1</span>,i*<span class="number">2</span><span class="number">-1</span>,cnt[i],cnt[i]);</span><br><span class="line"><span class="built_in">rep</span>(u,<span class="number">1</span>,n) <span class="keyword">for</span>(<span class="keyword">int</span> v:G[u]) <span class="built_in">Extend_Edge</span>(u*<span class="number">2</span>,v*<span class="number">2</span><span class="number">-1</span>,<span class="number">1</span>,INF);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">Extend_Edge</span>(i*<span class="number">2</span>,n*<span class="number">2</span>+<span class="number">2</span>,<span class="number">0</span>,INF);</span><br><span class="line"><span class="built_in">Extend_Edge</span>(n*<span class="number">2</span>+<span class="number">2</span>,n*<span class="number">2</span>+<span class="number">1</span>,<span class="number">0</span>,INF);</span><br><span class="line"></span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n*<span class="number">2</span>+<span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(ind[i]&gt;<span class="number">0</span>) Flow.<span class="built_in">Link</span>(n*<span class="number">2</span>+<span class="number">3</span>,i,ind[i]);</span><br><span class="line"><span class="keyword">if</span>(ind[i]&lt;<span class="number">0</span>) Flow.<span class="built_in">Link</span>(i,n*<span class="number">2</span>+<span class="number">4</span>,-ind[i]);</span><br><span class="line">&#125;</span><br><span class="line">Flow.S=n*<span class="number">2</span>+<span class="number">3</span>,Flow.T=n*<span class="number">2</span>+<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">Flow.<span class="built_in">Dinic</span>();</span><br><span class="line"><span class="keyword">return</span> Flow.<span class="built_in">Check</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs_GetDAG</span><span class="params">(<span class="keyword">int</span> p)</span> </span>&#123; <span class="comment">// dfs枚举覆盖关系</span></span><br><span class="line"><span class="keyword">if</span>(p==n+<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> Ways=<span class="built_in">Calc_DAG</span>();</span><br><span class="line"><span class="keyword">if</span>(Ways&lt;L || Ways&gt;R) <span class="keyword">return</span>;</span><br><span class="line">ans+=<span class="built_in">Check</span>();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(id[p]==m) <span class="keyword">return</span> <span class="built_in">Dfs_GetDAG</span>(p+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">int</span> n=Layer[id[p]+<span class="number">1</span>].<span class="built_in">size</span>();</span><br><span class="line"><span class="built_in">rep</span>(S,<span class="number">0</span>,(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) <span class="keyword">if</span>(S&amp;(<span class="number">1</span>&lt;&lt;i)) G[p].<span class="built_in">pb</span>(Layer[id[p]+<span class="number">1</span>][i]),GS[p]|=<span class="number">1</span>&lt;&lt;(Layer[id[p]+<span class="number">1</span>][i]<span class="number">-1</span>);</span><br><span class="line"><span class="built_in">Dfs_GetDAG</span>(p+<span class="number">1</span>);</span><br><span class="line">G[p].<span class="built_in">clear</span>(),GS[p]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dfs_Getlayer</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> fir,<span class="keyword">int</span> chosennumber)</span></span>&#123; <span class="comment">// dfs枚举层的情况</span></span><br><span class="line"><span class="keyword">if</span>(chosennumber==n) &#123;</span><br><span class="line">m=num;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,m) Layer[i].<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) Layer[id[i]].<span class="built_in">pb</span>(i);</span><br><span class="line"><span class="built_in">Dfs_GetDAG</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,fir,n) <span class="keyword">if</span>(!id[i]) &#123;</span><br><span class="line">id[i]=num;</span><br><span class="line"><span class="built_in">Dfs_Getlayer</span>(num,i+<span class="number">1</span>,chosennumber+<span class="number">1</span>);</span><br><span class="line">id[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(fir!=<span class="number">1</span>) <span class="built_in">Dfs_Getlayer</span>(num+<span class="number">1</span>,<span class="number">1</span>,chosennumber);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CosmicBlocks</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getNumOrders</span><span class="params">(vector &lt;<span class="keyword">int</span>&gt; a, <span class="keyword">int</span> Min, <span class="keyword">int</span> Max)</span> </span>&#123;</span><br><span class="line">L=Min,R=Max;</span><br><span class="line">n=a.<span class="built_in">size</span>(),ans=<span class="number">0</span>; <span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) cnt[i+<span class="number">1</span>]=a[i];</span><br><span class="line"><span class="built_in">Dfs_Getlayer</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;CosmicBlocks-TopCoder-12034-网络流&quot;&gt;&lt;a href=&quot;#CosmicBlocks-TopCoder-12034-网络流&quot; class=&quot;headerlink&quot; title=&quot;CosmicBlocks - TopCoder- 12034</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[Codechef March Challenge 2021 Random Walk Queries(RWALKS) (动态点分治) ]</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.220Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Codechef-March-Challenge-2021-Random-Walk-Queries-RWALKS-动态点分治"><a href="#Codechef-March-Challenge-2021-Random-Walk-Queries-RWALKS-动态点分治" class="headerlink" title="Codechef March Challenge 2021 Random Walk Queries(RWALKS) (动态点分治) "></a><a href="https://www.codechef.com/MARCH21B/problems/RWALKS">Codechef March Challenge 2021 Random Walk Queries(RWALKS) (动态点分治) </a></h1><p>题目大意：</p><p>对于给定的无根树$T$，要求强制在线维护两种操作</p><p>1.游走$(u,d)$，以$u$为根在树上游走，从$u$开始，最多走$d$步，每次随机从儿子中选择一个点</p><p>2.查询$u$，当前$u$被遍历的期望次数</p><script type="math/tex; mode=display">\</script><p><del>灵光一闪想到这么个憨批树上结构</del></p><p>对于更新$(u,d)$，考虑$u$ <strong>跨过当前点分根</strong> 到达其他点分子树里的贡献</p><p>一个点由当前点分根到达的概率是一个定值，可以预处理出来，并在查询时计算</p><p>因此更新贡献时，可以描述为$dep\leq d$的点接受到 以$x$的概率访问当前点分根</p><p>可以简单用树状数组维护</p><p>为了剔除对于自己所在子树的非法贡献，需要额外开一些树状数组来维护</p><p>一个节点有$\log n$个点分父节点，每次需要两次树状数组查询</p><p>因此查询部分复杂度为$O(m\log ^2n)$，预处理以及空间复杂度为$O(n\log n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,K=<span class="number">19</span>,P=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,I[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> to,nxt;</span><br><span class="line">&#125;e[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> head[N],ecnt,deg[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line">e[++ecnt]=(Edge)&#123;v,head[u]&#125;;</span><br><span class="line">head[u]=ecnt,deg[v]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> erep(u) for(int i=head[u],v=e[i].to;i;i=e[i].nxt,v=e[i].to)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="built_in">BIT</span>()&#123;&#125;;</span><br><span class="line"><span class="built_in">BIT</span>(<span class="keyword">int</span> n):<span class="built_in">n</span>(n)&#123; s.<span class="built_in">resize</span>(n+<span class="number">1</span>); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> x)</span></span>&#123; </span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">cmin</span>(p,n);p;p-=p&amp;-p) s[p]+=x,<span class="built_in">Mod1</span>(s[p]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Que</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(p&lt;=n) res+=s[p],<span class="built_in">Mod1</span>(res),p+=p&amp;-p;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125; T[N];</span><br><span class="line">vector &lt;BIT&gt; G[N];</span><br><span class="line"><span class="comment">//  Dep:点分树上的dep，id:节点在每层的编号， dep:节点在每层的dep，s:节点在每层由根到达的系数</span></span><br><span class="line"><span class="keyword">int</span> Dep[N],id[K][N],dep[K][N],s[K][N],vis[N],sz[N],fa[N],Root;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mi,rt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FindRt</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> u,<span class="keyword">int</span> f)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ma=<span class="number">0</span>; sz[u]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">erep</span>(u) <span class="keyword">if</span>(v!=f &amp;&amp; !vis[v]) &#123;</span><br><span class="line"><span class="built_in">FindRt</span>(n,v,u);</span><br><span class="line">sz[u]+=sz[v],<span class="built_in">cmax</span>(ma,sz[v]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cmax</span>(ma,n-sz[u]);</span><br><span class="line"><span class="keyword">if</span>(mi&gt;ma) mi=ma,rt=u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> D,maxd;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> f,<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"><span class="built_in">cmax</span>(maxd,dep[D][u]=dep[D][f]+<span class="number">1</span>),::id[D][u]=id;</span><br><span class="line"><span class="built_in">erep</span>(u) <span class="keyword">if</span>(v!=f &amp;&amp; !vis[v]) &#123;</span><br><span class="line">s[D][v]=<span class="number">1ll</span>*s[D][u]*I[deg[u]<span class="number">-1</span>]%P;</span><br><span class="line"><span class="built_in">dfs</span>(v,u,id);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 预处理点分治，开树状数组</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Divide</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">mi=<span class="number">1e9</span>,<span class="built_in">FindRt</span>(n,u,<span class="number">0</span>),u=rt;</span><br><span class="line"><span class="keyword">int</span> sonc=<span class="number">0</span>;</span><br><span class="line">vis[u]=s[Dep[u]=D][u]=<span class="number">1</span>,id[D][u]=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">erep</span>(u) <span class="keyword">if</span>(!vis[v]) &#123;</span><br><span class="line">maxd=<span class="number">0</span>;</span><br><span class="line">s[D][v]=<span class="number">1</span>,<span class="built_in">dfs</span>(v,u,sonc);</span><br><span class="line">G[u].<span class="built_in">pb</span>(<span class="built_in">BIT</span>(maxd));</span><br><span class="line">sonc++;</span><br><span class="line"><span class="built_in">cmax</span>(t,maxd);</span><br><span class="line">&#125;</span><br><span class="line">T[u]=<span class="built_in">BIT</span>(t);</span><br><span class="line"><span class="built_in">erep</span>(u) <span class="keyword">if</span>(!vis[v]) &#123;</span><br><span class="line"><span class="keyword">if</span>(sz[v]&gt;sz[u]) sz[v]=n-sz[u];</span><br><span class="line">D++,fa[<span class="built_in">Divide</span>(sz[v],v)]=u,D--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> u;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sum[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Que</span><span class="params">(<span class="keyword">int</span> u)</span></span>&#123;</span><br><span class="line">ll ans=sum[u];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=u,d=Dep[v];(d--,v=fa[v]);) </span><br><span class="line">ans=(ans+ <span class="number">1ll</span>* (T[v].<span class="built_in">Que</span>(dep[d][u])+G[v][id[d][u]].<span class="built_in">Que</span>(dep[d][u])) *s[d][u])%P;</span><br><span class="line"><span class="keyword">return</span> (ans%P+P)%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Upd</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> d)</span></span>&#123;</span><br><span class="line">sum[u]++,<span class="built_in">Mod1</span>(sum[u]),T[u].<span class="built_in">Add</span>(d,I[deg[u]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v=fa[u],D=Dep[u]<span class="number">-1</span>;v;v=fa[v],D--) &#123;</span><br><span class="line"><span class="keyword">if</span>(d&lt;dep[D][u]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">1ll</span>*I[deg[u]]*s[D][u]%P;</span><br><span class="line">sum[v]+=x,<span class="built_in">Mod1</span>(sum[v]);</span><br><span class="line">x=<span class="number">1ll</span>*x*I[deg[v]<span class="number">-1</span>]%P;</span><br><span class="line">T[v].<span class="built_in">Add</span>(d-dep[D][u],x),G[v][id[D][u]].<span class="built_in">Add</span>(d-dep[D][u],P-x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lst;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (<span class="built_in">rd</span>()+lst)%n+<span class="number">1</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">I[<span class="number">0</span>]=I[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">2</span>,N<span class="number">-1</span>) I[i]=<span class="number">1ll</span>*(P-P/i)*I[P%i]%P;</span><br><span class="line">n=<span class="built_in">rd</span>(),m=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">2</span>,n)&#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="built_in">rd</span>(),v=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">AddEdge</span>(u,v),<span class="built_in">AddEdge</span>(v,u);</span><br><span class="line">&#125;</span><br><span class="line">Root=<span class="built_in">Divide</span>(n,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">while</span>(m--) &#123;</span><br><span class="line"><span class="keyword">int</span> opt=<span class="built_in">rd</span>();</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="built_in">Get</span>(),d=<span class="built_in">Get</span>();</span><br><span class="line"><span class="built_in">Upd</span>(u,d);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,lst=<span class="built_in">Que</span>(<span class="built_in">Get</span>()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Codechef-March-Challenge-2021-Random-Walk-Queries-RWALKS-动态点分治&quot;&gt;&lt;a href=&quot;#Codechef-March-Challenge-2021-Random-Walk-Queries-RWALKS-动</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[HDU - 6833] a Very Easy Math Problem (莫比乌斯反演)</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.297Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HDU-6833-A-Very-Easy-Math-Problem-莫比乌斯反演"><a href="#HDU-6833-A-Very-Easy-Math-Problem-莫比乌斯反演" class="headerlink" title="[HDU - 6833] A Very Easy Math Problem (莫比乌斯反演)"></a>[HDU - 6833] A Very Easy Math Problem (莫比乌斯反演)</h1><p>与$\gcd$有关的问题，很容易想到莫比乌斯反演</p><p>设$G(a,n)=(\sum_{i=1}^{\lfloor \frac{n}{a} \rfloor } (ai)^k)^x$</p><p>$Ans=\sum<em>{g=1}^{n} g\cdot f(g)\cdot \sum </em>{d=1}^{\lfloor\frac{n}{g}\rfloor} \mu(d) G(gd,n)$</p><p>对于单组询问，显然可以$O(n\ln n)$求解</p><p>考虑优化</p><p>可以在$O(n\ln n)$的时间内，对于每个$i$，求出$F(i)=\sum_{d|i}\mu(d)\cdot \frac{i}{d} f(\frac{i}{d})$</p><p>对于$G(a,n)$的求解，参数分离后发现 $G(a,n)=a^{kx}(\sum_{i=1}^{\lfloor \frac{n}{a} \rfloor } i^k)^x$</p><p>可以预处理出$S(n)=\sum<em>{i=1}^n i^{kx}\cdot F(i)$前缀和以及$A(n)=(\sum</em>{i=1}^{n}i^k)^x$，对于每个$\lfloor \frac{n}{a}\rfloor $考虑即可</p><p>数论分段的复杂度为单组查询$O(\sqrt n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>=</span><span class="keyword">int</span>&gt; <span class="function">T <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line">    T s=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>())) <span class="keyword">if</span>(IO==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(IO^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>()));</span><br><span class="line">    <span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>,P=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> T,n,k,x;</span><br><span class="line"><span class="keyword">int</span> mk[N],notpri[N],pri[N],pc,w[N];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll k=P<span class="number">-2</span>)</span> </span>&#123;</span><br><span class="line">    ll res=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,x=x*x%P) <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res=res*x%P;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> s[N],F[N],S[N],A[N];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    w[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">2</span>,N<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!notpri[i]) pri[++pc]=i,w[i]=<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=pc &amp;&amp; <span class="number">1ll</span>*i*pri[j]&lt;N;++j) &#123;</span><br><span class="line">            notpri[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) &#123;</span><br><span class="line">                w[i*pri[j]]=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            w[i*pri[j]]=-w[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i*i&lt;N;++i) <span class="keyword">for</span>(<span class="keyword">int</span> j=i*i;j&lt;N;j+=i*i) mk[j]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,N<span class="number">-1</span>) <span class="keyword">if</span>(!mk[i]) <span class="built_in">rep</span>(j,<span class="number">1</span>,(N<span class="number">-1</span>)/i) F[i*j]=(F[i*j]+i*w[j]+P)%P;</span><br><span class="line">    T=<span class="built_in">rd</span>(),k=<span class="built_in">rd</span>(),x=<span class="built_in">rd</span>();</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,N<span class="number">-1</span>) S[i]=(S[i<span class="number">-1</span>]+F[i]*<span class="built_in">qpow</span>(i,<span class="number">1ll</span>*k*x))%P;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,N<span class="number">-1</span>) A[i]=(A[i<span class="number">-1</span>]+<span class="built_in">qpow</span>(i,k))%P;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,N<span class="number">-1</span>) A[i]=<span class="built_in">qpow</span>(A[i],x);</span><br><span class="line">    <span class="built_in">rep</span>(kase,<span class="number">1</span>,T) &#123;</span><br><span class="line">        n=<span class="built_in">rd</span>();</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>,j;i&lt;=n;i=j+<span class="number">1</span>) &#123;</span><br><span class="line">            j=n/(n/i);</span><br><span class="line">            ans=(ans+<span class="number">1ll</span>*(S[j]-S[i<span class="number">-1</span>])*A[n/i])%P;</span><br><span class="line">        &#125;</span><br><span class="line">        ans=(ans%P+P)%P;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HDU-6833-A-Very-Easy-Math-Problem-莫比乌斯反演&quot;&gt;&lt;a href=&quot;#HDU-6833-A-Very-Easy-Math-Problem-莫比乌斯反演&quot; class=&quot;headerlink&quot; title=&quot;[HDU - 6833]</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[HDU-6834] Yukikaze and Smooth Numbers</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.298Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HDU-6834-Yukikaze-and-Smooth-numbers"><a href="#HDU-6834-Yukikaze-and-Smooth-numbers" class="headerlink" title="[HDU-6834] Yukikaze and Smooth numbers"></a>[HDU-6834] Yukikaze and Smooth numbers</h1><p>题意：计算$[1,n]$中只包含$[1,k]$的质因数的数个数</p><p>让人联想到Min25筛的$dp$模型</p><p>设$m=\sqrt n$，可以对于$k &gt; m$和$k\leq m$讨论</p><h2 id="Case1-k-leq-m"><a href="#Case1-k-leq-m" class="headerlink" title="Case1:$k\leq m$"></a>Case1:$k\leq m$</h2><p>此时可以直接套用类似Min25筛的$dp$模型求解</p><p>令$dp_{i,j}$为$[1,j]$只包含$[1,i]$的质因数的数个数</p><p>则$dp<em>{i,j}=\sum_k dp</em>{i-1,\lfloor \frac{j}{prime_i^k}\rfloor }$</p><p>要求的是$dp_{k,n}$，第二维状态是$O(m)$级别的</p><p>直接写当然是近似于$O(m\cdot \pi(n))=O(\frac{n}{\log n})$级别的</p><p>加上Min25筛的优化，令$dp_i,j$不包含单质数和1的情况，以减少转移情况</p><p>如果从大到小考虑每个质数，那么只需要考虑$j\ge prime_i^2$的第二维状态，以减少很多的$dp$时间</p><p>沿用Min25筛复杂度证明，是$O(\frac{n^{\frac{3}{4}}}{\log n})$的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> id(x) (x&lt;=m?x:cnt-n/x+1)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[N],g[N],st[N],cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(k==<span class="number">1</span>)&#123; <span class="built_in">puts</span>(<span class="string">&quot;1&quot;</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">m=<span class="built_in">sqrt</span>(n),cnt=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) st[++cnt]=i=n/(n/i),dp[cnt]=<span class="number">0</span>; <span class="comment">// 不包括质数本身和1</span></span><br><span class="line"><span class="keyword">int</span> sz=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(pri[sz+<span class="number">1</span>]&lt;=k) sz++;</span><br><span class="line"><span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,cnt)&#123;</span><br><span class="line">    <span class="keyword">while</span>(p&lt;sz &amp;&amp; pri[p+<span class="number">1</span>]&lt;=st[i]) p++;</span><br><span class="line">    g[i]=p;</span><br><span class="line">&#125;    </span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,cnt) <span class="keyword">for</span>(ll x=pri[sz]*pri[sz];x&lt;=st[i];x*=pri[sz]) dp[i]++;</span><br><span class="line"><span class="keyword">for</span>(reg <span class="keyword">int</span> i=sz<span class="number">-1</span>;i;--i) &#123;</span><br><span class="line">    <span class="keyword">for</span>(reg <span class="keyword">int</span> j=cnt,tmp=pri[i]*pri[i];st[j]&gt;=tmp;--j) &#123;</span><br><span class="line">        reg <span class="keyword">int</span> x=st[j];</span><br><span class="line">        <span class="keyword">while</span>(x&gt;=tmp) &#123;</span><br><span class="line">            x/=pri[i];</span><br><span class="line">            dp[j]+=dp[<span class="built_in">id</span>(x)]+g[<span class="built_in">id</span>(x)]-i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,dp[cnt]+sz+<span class="number">1</span>);</span><br></pre></td></tr></table></figure><script type="math/tex; mode=display">\</script><h2 id="Case2-k-gt-m"><a href="#Case2-k-gt-m" class="headerlink" title="Case2 : $k&gt; m$"></a>Case2 : $k&gt; m$</h2><p>可以把问题转化为求不合法部分，即$\sum_{prime_i&gt;k}\lfloor \frac{n}{prime_i}\rfloor $</p><p>采用数论分段计算$\lfloor \frac{n}{i}\rfloor $，那么剩下的问题就是要求一段区间内的质数个数</p><p>同样采用类似上面的模型，</p><p>令$dp_{i,j}$为$[1,j]$内与前$[1,i]$内质数互质的个数以及这些质数本身，不包括1 </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> dp[N],g[N],st[N],cnt;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> id(x) (x&lt;=m?x:cnt-n/x+1)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Count</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;N) <span class="keyword">return</span> pcount[n];</span><br><span class="line">    ::n=n,m=<span class="built_in">sqrt</span>(n),cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">rep</span>(i,<span class="number">1</span>,n) st[++cnt]=i=n/(n/i),dp[cnt]=i<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(reg <span class="keyword">int</span> i=<span class="number">1</span>;pri[i]&lt;=m;++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(reg <span class="keyword">int</span> j=cnt,tmp=pri[i]*pri[i];st[j]&gt;=tmp;--j) &#123;</span><br><span class="line">            reg <span class="keyword">int</span> k=st[j]/pri[i];</span><br><span class="line">            dp[j]-=dp[<span class="built_in">id</span>(k)]-(i<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[cnt];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体复杂度没有算过，应该不会太高</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HDU-6834-Yukikaze-and-Smooth-numbers&quot;&gt;&lt;a href=&quot;#HDU-6834-Yukikaze-and-Smooth-numbers&quot; class=&quot;headerlink&quot; title=&quot;[HDU-6834] Yukikaze </summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[HDU-6883] Coin Game(2020HDU多校第十场T7)</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.295Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HDU-6883-Coin-Game-2020HDU多校第十场T7"><a href="#HDU-6883-Coin-Game-2020HDU多校第十场T7" class="headerlink" title="[HDU-6883] Coin Game(2020HDU多校第十场T7)"></a>[HDU-6883] Coin Game(2020HDU多校第十场T7)</h1><p>题目给出的模型看起来比较奇怪，但是简单推理后，发现可以转化为一个简单的01背包问题</p><p>对于题目给定的权值$a_i,b_i$，分为$a_i,a_i+b_i$两个物品，发现可以得到这个机器的所有合法贡献情况</p><p>也就是说，有两种大小分别为$1,2$的物品，要做01背包</p><p>这个刚刚在<a href="https://www.cnblogs.com/chasedeath/p/13460468.html">WC2020</a>考过。。。</p><p>设两类转化后的权值分别为$a_i,b_i$，则转移过程可以简单描述为</p><p>1.将两类权值分别从大到小排序</p><p>2.将dp值转化为在两个序列中分别选取一段前缀和</p><p>3.转移时枚举下一次决策的选取是那种物品，选取最优一个，记录指针转移即可</p><p>主要复杂度可能还在于排序，Trick:有一点卡内存</p><p>但是实测桶排和直接sort好像差距不大。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e6</span>+<span class="number">10</span>,INF=<span class="number">1e9</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> a[N],b[N];</span><br><span class="line">ull k1,k2;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Shift</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ull k3=k1,k4=k2;</span><br><span class="line">    k1=k4;</span><br><span class="line">    k3^=k3&lt;&lt;<span class="number">23</span>;</span><br><span class="line">    k2=k3^k4^(k3&gt;&gt;<span class="number">17</span>)^(k4&gt;&gt;<span class="number">26</span>);</span><br><span class="line">    <span class="keyword">return</span> (k2+k4)%<span class="number">10000000</span>+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> A[N*<span class="number">3</span>],B[N*<span class="number">3</span>]; <span class="comment">// 记录在两个序列中的指针</span></span><br><span class="line">ll dp[<span class="number">3</span>]; <span class="comment">// dp数组滚动了一下</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">&quot;%d%d%llu%llu&quot;</span>,&amp;n,&amp;m,&amp;k1,&amp;k2)) &#123;</span><br><span class="line">        <span class="built_in">rep</span>(i,<span class="number">1</span>,n) a[i]=<span class="built_in">Shift</span>(),b[i]=<span class="built_in">Shift</span>()+a[i];</span><br><span class="line">        <span class="built_in">sort</span>(a+<span class="number">1</span>,a+n+<span class="number">1</span>,greater&lt;<span class="keyword">int</span>&gt;()),<span class="built_in">sort</span>(b+<span class="number">1</span>,b+n+<span class="number">1</span>,greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line"></span><br><span class="line">        A[<span class="number">0</span>]=B[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i,<span class="number">0</span>,<span class="number">2</span>) dp[i]=<span class="number">0</span>;</span><br><span class="line">        ll ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> cur=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i,<span class="number">0</span>,m) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">1</span>&lt;=m &amp;&amp; A[i]&lt;=n) &#123;</span><br><span class="line">                <span class="keyword">int</span> nxt=(cur+<span class="number">1</span>)%<span class="number">3</span>;</span><br><span class="line">                <span class="keyword">if</span>(dp[cur]+a[A[i]]&gt;dp[nxt]) dp[nxt]=dp[cur]+a[A[i]],A[i+<span class="number">1</span>]=A[i]+<span class="number">1</span>,B[i+<span class="number">1</span>]=B[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i+<span class="number">2</span>&lt;=m &amp;&amp; B[i]&lt;=n) &#123;</span><br><span class="line">                <span class="keyword">int</span> nxt=(cur+<span class="number">2</span>)%<span class="number">3</span>;</span><br><span class="line">                <span class="keyword">if</span>(dp[cur]+b[B[i]]&gt;dp[nxt]) dp[nxt]=dp[cur]+b[B[i]],A[i+<span class="number">2</span>]=A[i],B[i+<span class="number">2</span>]=B[i]+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ans^=dp[cur];</span><br><span class="line">            cur=(cur+<span class="number">1</span>)%<span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HDU-6883-Coin-Game-2020HDU多校第十场T7&quot;&gt;&lt;a href=&quot;#HDU-6883-Coin-Game-2020HDU多校第十场T7&quot; class=&quot;headerlink&quot; title=&quot;[HDU-6883] Coin Game(2020H</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[NOI Online  3 提高组] 优秀子序列</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.320Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NOI-Online-3-提高组-优秀子序列"><a href="#NOI-Online-3-提高组-优秀子序列" class="headerlink" title="[NOI Online #3 提高组] 优秀子序列"></a>[NOI Online #3 提高组] 优秀子序列</h1><p>这个题怎么不直接取名</p><p><a href="https://www.cnblogs.com/chasedeath/p/13891189.html">集合幂级数$\text{exp}$</a>呢</p><p>优秀的子序列中任意两个元素01位无交，这是一个标准的子集卷积形式</p><p>$\varphi$的计算显然与$a_i$的卷积独立，可以线性筛/埃氏筛</p><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><p>可以暴力$3^{18}$过，枚举时为了避免重复可以通过强制枚举的数包含最高位的1</p><p>注意$a_i=0$要特殊处理</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> Mbe;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1</span>&lt;&lt;<span class="number">18</span>,P=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,cnt0=<span class="number">1</span>;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll k=P<span class="number">-2</span>)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,x=x*x%P) <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res=res*x%P;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Phi[N+<span class="number">1</span>],notpri[N+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> F[N],C[N],cnt[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">2</span>,N) <span class="keyword">if</span>(!notpri[i]) &#123;</span><br><span class="line">Phi[i]=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=i+i;j&lt;=N;j+=i) &#123;</span><br><span class="line">notpri[j]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(!Phi[j]) Phi[j]=j;</span><br><span class="line">Phi[j]=Phi[j]/i*(i<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">n=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,N<span class="number">-1</span>) cnt[i]=cnt[i&amp;(i<span class="number">-1</span>)]+<span class="number">1</span>;</span><br><span class="line">F[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">rd</span>();</span><br><span class="line"><span class="keyword">if</span>(!x) F[<span class="number">0</span>]*=<span class="number">2</span>,<span class="built_in">Mod1</span>(F[<span class="number">0</span>]);</span><br><span class="line"><span class="keyword">else</span> C[x]++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(S,<span class="number">0</span>,N<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(S) <span class="keyword">for</span>(<span class="keyword">int</span> T=S;_builtin_clz(S)==__builtin_clz(T);T=(T<span class="number">-1</span>)&amp;S) F[S]=(F[S]+<span class="number">1ll</span>*F[S^T]*C[T])%P;</span><br><span class="line">ans=(ans+<span class="number">1ll</span>*F[S]*Phi[S+<span class="number">1</span>])%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="集合幂级数"><a href="#集合幂级数" class="headerlink" title="集合幂级数"></a>集合幂级数</h3><p>就是直接套集合幂计数的$\text{exp}$</p><p>同样要特殊处理$a_i=0$的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">1</span>&lt;&lt;<span class="number">18</span>,P=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> F[N][<span class="number">19</span>],Inv[<span class="number">20</span>];</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod1(x) ((x&gt;=P)&amp;&amp;(x-=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod2(x) ((x&lt;0)&amp;&amp;(x+=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&gt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&lt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">200000</span>],*p1,*p2;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> getchar() (((p1==p2)&amp;&amp;(p2=(p1=buf)+fread(buf,1,200000,stdin))),*p1++)</span></span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>; <span class="keyword">static</span> <span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span>(c=<span class="built_in">getchar</span>(),c&lt;<span class="number">48</span>);</span><br><span class="line"><span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(c^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(c=<span class="built_in">getchar</span>(),c&gt;<span class="number">47</span>);</span><br><span class="line"><span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> Mbe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,cnt0=<span class="number">1</span>,U;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll k=P<span class="number">-2</span>)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,x=x*x%P) <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res=res*x%P;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> Phi[N+<span class="number">1</span>],notpri[N+<span class="number">1</span>],pri[N/<span class="number">4</span>],pc;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Exp</span><span class="params">(<span class="keyword">int</span> *a)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> b[N];</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) b[i<span class="number">-1</span>]=<span class="number">1ll</span>*a[i]*i%P;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> s=b[i];</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,i) s=(s+<span class="number">1ll</span>*a[j]*b[i-j])%P;</span><br><span class="line">a[i+<span class="number">1</span>]=<span class="number">1ll</span>*s*Inv[i+<span class="number">1</span>]%P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">Inv[<span class="number">0</span>]=Inv[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">2</span>,<span class="number">18</span>) Inv[i]=<span class="number">1ll</span>*(P-P/i)*Inv[P%i]%P;</span><br><span class="line">n=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">rd</span>(); <span class="built_in">cmax</span>(U,x);</span><br><span class="line"><span class="keyword">if</span>(!x) cnt0*=<span class="number">2</span>,<span class="built_in">Mod1</span>(cnt0);</span><br><span class="line"><span class="keyword">else</span> F[x][__builtin_popcount(x)]++;</span><br><span class="line">&#125;</span><br><span class="line">Phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(n=<span class="number">1</span>;(<span class="number">1</span>&lt;&lt;n)&lt;=U;)n++;</span><br><span class="line">m=<span class="number">1</span>&lt;&lt;n;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">2</span>,m) &#123;</span><br><span class="line"><span class="keyword">if</span>(!notpri[i]) pri[++pc]=i,Phi[i]=i<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=pc &amp;&amp; <span class="number">1ll</span>*i*pri[j]&lt;=m;++j)&#123;</span><br><span class="line">notpri[i*pri[j]]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(i%pri[j]==<span class="number">0</span>) &#123;</span><br><span class="line">Phi[i*pri[j]]=Phi[i]*pri[j];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">Phi[i*pri[j]]=Phi[i]*(pri[j]<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i&lt;&lt;=<span class="number">1</span>) <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;m;l+=i*<span class="number">2</span>) <span class="keyword">for</span>(<span class="keyword">int</span> j=l;j&lt;l+i;++j) <span class="built_in">rep</span>(k,<span class="number">1</span>,n) F[j+i][k]+=F[j][k],<span class="built_in">Mod1</span>(F[j+i][k]);</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,m<span class="number">-1</span>) <span class="built_in">Exp</span>(F[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;m;i&lt;&lt;=<span class="number">1</span>) <span class="keyword">for</span>(<span class="keyword">int</span> l=<span class="number">0</span>;l&lt;m;l+=i*<span class="number">2</span>) <span class="keyword">for</span>(<span class="keyword">int</span> j=l;j&lt;l+i;++j) <span class="built_in">rep</span>(k,<span class="number">1</span>,n) F[j+i][k]-=F[j][k],<span class="built_in">Mod2</span>(F[j+i][k]);</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(S,<span class="number">1</span>,m<span class="number">-1</span>) ans=(ans+<span class="number">1ll</span>*F[S][__builtin_popcount(S)]*Phi[S+<span class="number">1</span>])%P;</span><br><span class="line">ans=<span class="number">1ll</span>*(ans+<span class="number">1</span>)*cnt0%P;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NOI-Online-3-提高组-优秀子序列&quot;&gt;&lt;a href=&quot;#NOI-Online-3-提高组-优秀子序列&quot; class=&quot;headerlink&quot; title=&quot;[NOI Online #3 提高组] 优秀子序列&quot;&gt;&lt;/a&gt;[NOI Online #3 提高</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[NOI Online 2021 提高组] 愤怒的小N</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NOI-Online-2021-提高组-愤怒的小N"><a href="#NOI-Online-2021-提高组-愤怒的小N" class="headerlink" title="[NOI Online 2021 提高组] 愤怒的小N"></a>[NOI Online 2021 提高组] 愤怒的小N</h1><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><p>倍增维护$[x,x+2^d)$内部所有$b$的权值和 以及$a$的，用多项式表示</p><p>具体的，维护两个多项式$F_0(x),F_1(x)$，每次倍增的转移如下</p><p>$F_0(x)\leftarrow F_0(x)+F_1(x+d)$</p><p>$F_1(x)\leftarrow F_1(x)+F_0(x+d)$</p><p>因此暴力倍增复杂度为$O(nk^2)$，实现上需要记录每次倍增之后多项式与答案的前面部分相拼接需要额外的偏移</p><script type="math/tex; mode=display">\</script><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>如果你输出多项式，就会发现，倍增$k$次之后，所有$a,b$位置对应的多项式就完全相同了</p><p>形式化地理解这个过程</p><p>一开始，$F_0(x)=A(x),F_1(x)=0$，其中$A(x)$为读入的多项式</p><p>进行一次转移后，$F_0(x),F_1(x)$的第$k-1$项只受到对方的$k-1$项和自己的$k-1$项影响</p><p>因此一次转移后$[x^{k-1}]F_0(x)=[x^{k-1}]F_1(x)$</p><p>下一次转移，第$k-2$项值只受到对方的$k-2$项，已经已经确定相同的$k-1$项影响</p><p>这个过程不断进行，第$i$次倍增会使得$[k-i,k-1]$项相同</p><script type="math/tex; mode=display">\</script><p>对于$k$次倍增之后，后面多出来的部分，可以直接求一个多项式前缀和，然后除2得到答案</p><p>多项式前缀和容易通过拉格朗日插值解决，复杂度为$O(k^2)$</p><p>预处理前面的多项式复杂度为$O(k^3)$，求后面的式子为$O(k^2)$，预处理$n$的值复杂度为$O(\log n)$</p><p>因此复杂度为$O(\log n+k^3)$</p><script type="math/tex; mode=display">\</script><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod1(x) ((x&gt;=P)&amp;&amp;(x-=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod2(x) ((x&lt;0)&amp;&amp;(x+=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&gt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&lt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>=</span><span class="keyword">int</span>&gt; <span class="function">T <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line">T s=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>())) f|=IO==<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"><span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(IO^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>()));</span><br><span class="line"><span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">5e5</span>+<span class="number">10</span>,M=<span class="number">510</span>,INF=<span class="number">1e9</span>+<span class="number">10</span>,P=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> s[N];</span><br><span class="line"><span class="keyword">int</span> D[N],T[N];</span><br><span class="line"><span class="comment">// D[i]预处理倍增求出的每项对于答案贡献时存在的偏移</span></span><br><span class="line"><span class="comment">// T[i]预处理每个位后面1的个数</span></span><br><span class="line"><span class="keyword">int</span> A[N],F[<span class="number">2</span>][M],G[<span class="number">2</span>][M],C[M][M];</span><br><span class="line"><span class="keyword">int</span> Pow[N];</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll k=P<span class="number">-2</span>)</span></span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,x=x*x%P) <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res=res*x%P;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> X[M],Y[M];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Lagrange</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> n,<span class="keyword">int</span> *X,<span class="keyword">int</span> *Y)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n) &#123;</span><br><span class="line">ll s=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,n) <span class="keyword">if</span>(i!=j) s=s*(X[i]-X[j])%P;</span><br><span class="line">s=<span class="built_in">qpow</span>(s);</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,n) <span class="keyword">if</span>(i!=j) s=s*(x-X[j])%P;</span><br><span class="line">ans=(ans+s*Y[i])%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;angry.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),<span class="built_in">freopen</span>(<span class="string">&quot;angry.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s),n=<span class="built_in">strlen</span>(s),<span class="built_in">reverse</span>(s,s+n);</span><br><span class="line">m=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,m<span class="number">-1</span>) A[i]=F[<span class="number">0</span>][i]=<span class="built_in">rd</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,m) <span class="built_in">rep</span>(j,*C[i]=<span class="number">1</span>,i) C[i][j]=(C[i<span class="number">-1</span>][j]+C[i<span class="number">-1</span>][j<span class="number">-1</span>])%P;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,x=<span class="number">2</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n<span class="number">-1</span>) D[i<span class="number">-1</span>]=x*(s[i]==<span class="string">&#x27;1&#x27;</span>),x=x*<span class="number">2</span>%P,T[i<span class="number">-1</span>]=(s[i]==<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="built_in">drep</span>(i,n<span class="number">-1</span>,<span class="number">0</span>) D[i]+=D[i+<span class="number">1</span>],<span class="built_in">Mod1</span>(D[i]),T[i]^=T[i+<span class="number">1</span>];</span><br><span class="line">x=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,<span class="built_in">min</span>(m<span class="number">-1</span>,n<span class="number">-1</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> t=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,m<span class="number">-1</span>) &#123;</span><br><span class="line">ans=(ans+<span class="number">1ll</span>*t*F[!T[i]][j])%P;</span><br><span class="line">t=<span class="number">1ll</span>*t*D[i]%P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(d,<span class="number">0</span>,<span class="number">1</span>) <span class="built_in">rep</span>(j,<span class="number">0</span>,m<span class="number">-1</span>) G[d][j]=F[d][j];</span><br><span class="line"><span class="built_in">rep</span>(j,*Pow=<span class="number">1</span>,m<span class="number">-1</span>) Pow[j]=<span class="number">1ll</span>*Pow[j<span class="number">-1</span>]*x%P;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,m<span class="number">-1</span>) <span class="built_in">rep</span>(k,<span class="number">0</span>,j) &#123;</span><br><span class="line">F[<span class="number">0</span>][k]=(F[<span class="number">0</span>][k]+<span class="number">1ll</span>*C[j][k]*Pow[j-k]%P*G[<span class="number">1</span>][j])%P;</span><br><span class="line">F[<span class="number">1</span>][k]=(F[<span class="number">1</span>][k]+<span class="number">1ll</span>*C[j][k]*Pow[j-k]%P*G[<span class="number">0</span>][j])%P;</span><br><span class="line">&#125;</span><br><span class="line">x=x*<span class="number">2</span>%P;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 倍增到前k-1项</span></span><br><span class="line"><span class="keyword">if</span>(m&gt;=n) <span class="keyword">return</span> <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans),<span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 预处理拉格朗日插值</span></span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,m) &#123;</span><br><span class="line">X[i]=i,x=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,m<span class="number">-1</span>) &#123;</span><br><span class="line">Y[i]=(Y[i]+<span class="number">1ll</span>*A[j]*x)%P;</span><br><span class="line">x=<span class="number">1ll</span>*x*i%P;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i) Y[i]+=Y[i<span class="number">-1</span>],<span class="built_in">Mod1</span>(Y[i]);</span><br><span class="line">&#125;</span><br><span class="line">ans=(ans+<span class="number">1ll</span>*<span class="built_in">Lagrange</span>(D[m<span class="number">-1</span>]<span class="number">-1</span>,m,X,Y)*(P+<span class="number">1</span>)/<span class="number">2</span>)%P;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NOI-Online-2021-提高组-愤怒的小N&quot;&gt;&lt;a href=&quot;#NOI-Online-2021-提高组-愤怒的小N&quot; class=&quot;headerlink&quot; title=&quot;[NOI Online 2021 提高组] 愤怒的小N&quot;&gt;&lt;/a&gt;[NOI Onli</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[NOI Online 2021 提高组] 积木小赛</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NOI-Online-2021-提高组-积木小赛"><a href="#NOI-Online-2021-提高组-积木小赛" class="headerlink" title="[NOI Online 2021 提高组] 积木小赛"></a>[NOI Online 2021 提高组] 积木小赛</h1><p>题目大意：给定串$A$,$B$，求$B$中有多少本质不同的连续子段是$A$的子序列</p><p>$n\leq 3000$</p><p>暴力枚举$B$中的子段，同步维护与$A$的匹配指针$p$</p><p>每次插入一个字符$c$，找到$A$中$p+1$之后第一个字符$c$，令匹配指针跳过去</p><p>可以预处理出这样的下一个字符$nxt_{i,c}$，完成$O(1)$匹配</p><p>除此以外，我们还需要对于本质不同去重</p><p>如果用$\text{trie}$树去重，需要开一个$\frac{n^2}{2}\cdot 26$的数组，面临着内存不够的问题</p><p><del>你可以信仰不开这么大</del></p><p>也可以去学习一下$\text{DAT(Double Array Trie)}$算法</p><p>也可以用$\text{hash+set/map/hash table/sort unique}$</p><p>也可以用链表暴力存储trie树的情况，每次暴力for过去找儿子</p><p>这样内存均为$O(n^2)$</p><p>以下是链表trie树的版本</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"><span class="keyword">typedef</span> pair &lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; Pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod1(x) ((x&gt;=P)&amp;&amp;(x-=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod2(x) ((x&lt;0)&amp;&amp;(x+=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&gt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&lt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>=</span><span class="keyword">int</span>&gt; <span class="function">T <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line">T s=<span class="number">0</span>; <span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>())) f|=IO==<span class="string">&#x27;-&#x27;</span>;</span><br><span class="line"><span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(IO^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>()));</span><br><span class="line"><span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">3010</span>,M=N*N/<span class="number">2</span>,INF=<span class="number">1e9</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">bool</span> Mbe;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> nxt[N][<span class="number">26</span>];</span><br><span class="line"><span class="keyword">char</span> A[N],B[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span>&#123;</span> <span class="keyword">int</span> c,to,nxt; &#125; e[M];</span><br><span class="line"><span class="keyword">int</span> head[M],cnt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Med;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//fprintf(stderr,&quot;%.2lf\n&quot;,(&amp;Med-&amp;Mbe)/1024.0/1024.0);</span></span><br><span class="line"><span class="built_in">freopen</span>(<span class="string">&quot;block.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin),<span class="built_in">freopen</span>(<span class="string">&quot;block.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">n=<span class="built_in">rd</span>(),<span class="built_in">scanf</span>(<span class="string">&quot;%s%s&quot;</span>,A+<span class="number">1</span>,B+<span class="number">1</span>);</span><br><span class="line"><span class="built_in">drep</span>(i,n,<span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,<span class="number">25</span>) nxt[i][j]=nxt[i+<span class="number">1</span>][j];</span><br><span class="line">nxt[i][A[i]-<span class="string">&#x27;a&#x27;</span>]=i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="keyword">int</span> u=<span class="number">0</span>,p=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(j,i,n) &#123;</span><br><span class="line"><span class="keyword">int</span> c=B[j]-<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(!(p=nxt[p+<span class="number">1</span>][c])) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">int</span> v=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=head[u];k;k=e[k].nxt) <span class="keyword">if</span>(e[k].c==c) &#123; v=e[k].to; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">if</span>(~v) u=v;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">v=++cnt;</span><br><span class="line">e[v]=(Edge)&#123;c,v,head[u]&#125;;</span><br><span class="line">head[u]=v,u=v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,cnt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;NOI-Online-2021-提高组-积木小赛&quot;&gt;&lt;a href=&quot;#NOI-Online-2021-提高组-积木小赛&quot; class=&quot;headerlink&quot; title=&quot;[NOI Online 2021 提高组] 积木小赛&quot;&gt;&lt;/a&gt;[NOI Online </summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[MapGuessing TopCoder - 12152]</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MapGuessing-TopCoder-12152"><a href="#MapGuessing-TopCoder-12152" class="headerlink" title="MapGuessing TopCoder - 12152"></a><a href="https://vjudge.net/problem/TopCoder-12152">MapGuessing TopCoder - 12152</a></h2><p>做得我很迷</p><p>首先是可以把问题转化为，每次操作之后会让原序列的限制条件变为：不考虑某一些位置时合法</p><p>枚举每个开始位置，依次考虑每一个操作，如果有一个位置被改为不同，就是不合法的</p><p>对于每一个开始位置，能得到的的<strong>最优限制条件</strong>都是唯一的，因为只要是合法的，一定取最后一个合法的位置，才能尽可能多地覆盖一些位置</p><p>那么我们得到了$|goal|$个这样的限制条件$S_i$，设$n=|goal|$</p><p>直接计算肯定会算重，考虑一个简单的容斥</p><p>$\begin{aligned}Answer=\sum<em>{T\ne \empty}(-1)^{|T|+1}2^{|S</em>{T<em>1}\cap \cdots \cap S</em>{T_{|T|}}|}\end{aligned}$</p><p>就是枚举选择一个限制的集合，求出他们的并集</p><p>直接枚举复杂度当然是$O(2^{|n|})$，如果$\text{dfs}$枚举，当前状态为$0$时，可以直接返回答案</p><p>估计一下这个$\text{dfs}$的复杂度</p><p>设操作过程中指针左右移动的距离是$L$，那么最多存在$n-L$个合法的开始位置，每个状态最多包含$L$个$1$</p><p>很显然枚举的上限是$\min{2^{n-L},2^{L}}$，即受到<strong>开始位置的个数</strong>和<strong>可能出现的1个数</strong>的限制</p><p>当$n-L=L$时，复杂度达到上限是$O(2^{\frac{n}{2}})$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"></span><br><span class="line">set &lt;ll&gt; st;</span><br><span class="line">ll S[<span class="number">40</span>];</span><br><span class="line"><span class="keyword">int</span> now[<span class="number">40</span>],cnt;</span><br><span class="line"><span class="function">ll <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> p,ll State)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(p==cnt+<span class="number">1</span>) <span class="keyword">return</span> (<span class="number">1ll</span>&lt;&lt;__builtin_popcountll(State)); <span class="comment">// 枚举完毕</span></span><br><span class="line"><span class="keyword">if</span>(State==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 剪枝，注意因为是后面的所有1,-1相加，所以是return 0而不是1</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">dfs</span>(p+<span class="number">1</span>,State)-<span class="built_in">dfs</span>(p+<span class="number">1</span>,State&amp;S[p]);  <span class="comment">// 直接处理容斥系数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MapGuessing</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">long</span> <span class="title">countPatterns</span><span class="params">(string S, vector &lt;string&gt; code)</span> </span>&#123;</span><br><span class="line">string C=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(string t:code) C+=t;</span><br><span class="line"><span class="keyword">int</span> n=S.<span class="built_in">size</span>();</span><br><span class="line">st.<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> p=i,f=<span class="number">1</span>;</span><br><span class="line">ll lst=<span class="number">0</span>; <span class="comment">// 记录最后一个合法的即可</span></span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) now[i]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">char</span> c:C) &#123;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;&lt;&#x27;</span>) p--;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;&gt;&#x27;</span>) p++;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;0&#x27;</span>) now[p]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(c==<span class="string">&#x27;1&#x27;</span>) now[p]=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(p&lt;<span class="number">0</span> || p&gt;=n)&#123; f=<span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">int</span> fl=<span class="number">1</span>;</span><br><span class="line">ll T=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(!now[i]) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(now[i]<span class="number">-1</span>!=S[i]-<span class="string">&#x27;0&#x27;</span>)&#123; fl=<span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">else</span> T|=<span class="number">1ll</span>&lt;&lt;i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!fl) <span class="keyword">continue</span>;</span><br><span class="line">lst=T;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!f) <span class="keyword">continue</span>;</span><br><span class="line">st.<span class="built_in">insert</span>(-lst);</span><br><span class="line">&#125;</span><br><span class="line">cnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(ll x:st) &#123;</span><br><span class="line">ll y=-x;</span><br><span class="line"><span class="keyword">int</span> f=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,cnt) <span class="keyword">if</span>((::S[i]&amp;y)==y)&#123; f=<span class="number">0</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">if</span>(f) ::S[++cnt]=y;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//初始系数是-1</span></span><br><span class="line">ll ans=(<span class="number">1ll</span>&lt;&lt;n)-<span class="built_in">dfs</span>(<span class="number">1</span>,(<span class="number">1ll</span>&lt;&lt;n)<span class="number">-1</span>); <span class="comment">// 注意枚举出来会把T=emptyset的情况算进去，要去掉</span></span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;MapGuessing-TopCoder-12152&quot;&gt;&lt;a href=&quot;#MapGuessing-TopCoder-12152&quot; class=&quot;headerlink&quot; title=&quot;MapGuessing TopCoder - 12152&quot;&gt;&lt;/a&gt;&lt;a hre</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
  <entry>
    <title>[SweetFruits TopCoder - 12141](Matrix-Tree)</title>
    <link href="http://chasingdeath.github.io/none/undefined-undefined.html"/>
    <id>http://chasingdeath.github.io/none/undefined-undefined.html</id>
    <published>2021-05-21T01:22:27.000Z</published>
    <updated>2021-05-21T01:22:27.426Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SweetFruits-TopCoder-12141-Matrix-Tree"><a href="#SweetFruits-TopCoder-12141-Matrix-Tree" class="headerlink" title="SweetFruits TopCoder - 12141(Matrix-Tree)"></a><a href="https://vjudge.net/problem/TopCoder-12141">SweetFruits TopCoder - 12141</a>(Matrix-Tree)</h1><p>问题看起来很复杂，不可写，所以先考虑分解一下</p><p>假设最后生效的点集为$V$，那么答案只和$\sum sweetness[V_i]$和$|V|$有关</p><p>所以可以考虑对于每一种$|V|$，先预处理出方案数</p><p>得知每一种$|V|$的方案数之后，可以用$\text{meet in the middle}$法枚举得到$\sum sweetness[V_i]\leq maxsweetness$的方案数</p><p>方案数是有限制的生成树个数，所以考虑用$\text{Matrix-Tree}$求</p><p>限定有$a$个点生效，$b$个点不生效，$c$个点是$-1$</p><p>那么可能出现的边是$a-a,a-c,b-c$三种</p><p>但是我们无法保证$a$中的点一定生效，所以可以用容斥/二项式反演得到</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod1(x) ((x&gt;=P)&amp;&amp;(x-=P))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Mod2(x) ((x&lt;0)&amp;&amp;(x+=P))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> reg register</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i,a,b) for(reg int i=a,i##end=b;i&lt;=i##end;++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> drep(i,a,b) for(reg int i=a,i##end=b;i&gt;=i##end;--i)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmin</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&gt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span> <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">cmax</span><span class="params">(T &amp;a,T b)</span></span>&#123; ((a&lt;b)&amp;&amp;(a=b)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> IO;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rd</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> f=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>())) <span class="keyword">if</span>(IO==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> s=(s&lt;&lt;<span class="number">1</span>)+(s&lt;&lt;<span class="number">3</span>)+(IO^<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">isdigit</span>(IO=<span class="built_in">getchar</span>()));</span><br><span class="line"><span class="keyword">return</span> f?-s:s;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N=<span class="number">50</span>,P=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll x,ll k=P<span class="number">-2</span>)</span> </span>&#123;</span><br><span class="line">ll res=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(;k;k&gt;&gt;=<span class="number">1</span>,x=x*x%P) <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res=res*x%P;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"><span class="built_in">Mat</span>()&#123; <span class="built_in">memset</span>(a,<span class="number">0</span>,<span class="keyword">sizeof</span> a); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Det</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;  <span class="comment">// 用于Matrix-Tree的</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> G[N][N];</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) <span class="built_in">rep</span>(j,<span class="number">1</span>,n) G[i][j]=a[i][j];</span><br><span class="line"><span class="keyword">int</span> res=<span class="number">1</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) &#123;</span><br><span class="line"><span class="keyword">if</span>(!G[i][i]) <span class="built_in">rep</span>(j,i+<span class="number">1</span>,n) <span class="keyword">if</span>(G[j][i])&#123; res=P-res; <span class="built_in">swap</span>(G[i],G[j]); <span class="keyword">break</span>; &#125;</span><br><span class="line"><span class="keyword">if</span>(!G[i][i]) <span class="keyword">continue</span>;</span><br><span class="line">ll Inv=<span class="built_in">qpow</span>(a[i][i]);</span><br><span class="line"><span class="built_in">rep</span>(j,i+<span class="number">1</span>,n) &#123;</span><br><span class="line">ll t=a[j][i]*Inv%P;</span><br><span class="line"><span class="built_in">rep</span>(k,i,n) a[j][k]=(a[j][k]<span class="number">-1ll</span>*a[i][k]*t%P+P)%P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">1</span>,n) res=<span class="number">1ll</span>*res*a[i][i]%P;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> w[N],G[N][N],C[N][N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,N<span class="number">-1</span>) <span class="built_in">rep</span>(j,C[i][<span class="number">0</span>]=<span class="number">1</span>,i) C[i][j]=(C[i<span class="number">-1</span>][j<span class="number">-1</span>]+C[i<span class="number">-1</span>][j])%P;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n) &#123;</span><br><span class="line">Mat T;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">1</span>,m) &#123; <span class="comment">// -1</span></span><br><span class="line"><span class="built_in">rep</span>(k,<span class="number">1</span>,n+m) T.a[j][k]=<span class="number">-1</span>;</span><br><span class="line">T.a[j][j]=n+m<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(j,m+<span class="number">1</span>,m+i) &#123; <span class="comment">// 生效</span></span><br><span class="line"><span class="built_in">rep</span>(k,<span class="number">1</span>,m+i) <span class="keyword">if</span>(j!=k) T.a[j][k]=<span class="number">-1</span>;</span><br><span class="line">T.a[j][j]=m+i<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(j,m+i+<span class="number">1</span>,m+n) &#123; <span class="comment">// 不生效</span></span><br><span class="line"><span class="built_in">rep</span>(k,<span class="number">1</span>,m) T.a[j][k]=<span class="number">-1</span>;</span><br><span class="line">T.a[j][j]=m;</span><br><span class="line">&#125;</span><br><span class="line">w[i]=T.<span class="built_in">Det</span>(n+m<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n) <span class="built_in">rep</span>(j,<span class="number">0</span>,i<span class="number">-1</span>) w[i]=(w[i]<span class="number">-1ll</span>*C[i][j]*w[j]%P+P)%P; <span class="comment">// 容斥/二项式反演</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> val[N];</span><br><span class="line">vector &lt;<span class="keyword">int</span>&gt; st[N/<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Meet_In_The_Middle</span><span class="params">(<span class="keyword">int</span> Max)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ans=<span class="number">0</span>,mid=n/<span class="number">2</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,mid) st[i].<span class="built_in">clear</span>();</span><br><span class="line"><span class="built_in">rep</span>(S,<span class="number">0</span>,(<span class="number">1</span>&lt;&lt;mid)<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> c=<span class="number">0</span>,s=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,mid<span class="number">-1</span>) <span class="keyword">if</span>(S&amp;(<span class="number">1</span>&lt;&lt;i)) s+=val[i],c++;</span><br><span class="line"><span class="keyword">if</span>(s&lt;=Max) st[c].<span class="built_in">pb</span>(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,mid) <span class="built_in">sort</span>(st[i].<span class="built_in">begin</span>(),st[i].<span class="built_in">end</span>());</span><br><span class="line"><span class="built_in">rep</span>(S,<span class="number">0</span>,(<span class="number">1</span>&lt;&lt;(n-mid))<span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> c=<span class="number">0</span>,s=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n-mid<span class="number">-1</span>) <span class="keyword">if</span>(S&amp;(<span class="number">1</span>&lt;&lt;i)) s+=val[i+mid],c++;</span><br><span class="line"><span class="keyword">if</span>(s&gt;Max) <span class="keyword">continue</span>;</span><br><span class="line"><span class="built_in">rep</span>(j,<span class="number">0</span>,mid) &#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="built_in">upper_bound</span>(st[j].<span class="built_in">begin</span>(),st[j].<span class="built_in">end</span>(),Max-s)-st[j].<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">if</span>(x) ans=(ans+<span class="number">1ll</span>*x*w[c+j])%P;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SweetFruits</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countTrees</span><span class="params">(vector &lt;<span class="keyword">int</span>&gt; Val, <span class="keyword">int</span> Max)</span> </span>&#123;</span><br><span class="line"><span class="built_in">sort</span>(Val.<span class="built_in">begin</span>(),Val.<span class="built_in">end</span>(),greater &lt;<span class="keyword">int</span>&gt; ());</span><br><span class="line">m=<span class="number">0</span>; <span class="keyword">while</span>(Val.<span class="built_in">size</span>() &amp;&amp; *Val.<span class="built_in">rbegin</span>()==<span class="number">-1</span>) m++,Val.<span class="built_in">pop_back</span>();</span><br><span class="line">n=Val.<span class="built_in">size</span>();</span><br><span class="line"><span class="built_in">rep</span>(i,<span class="number">0</span>,n<span class="number">-1</span>) val[i]=Val[i];</span><br><span class="line"><span class="built_in">Init</span>();</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Meet_In_The_Middle</span>(Max);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SweetFruits-TopCoder-12141-Matrix-Tree&quot;&gt;&lt;a href=&quot;#SweetFruits-TopCoder-12141-Matrix-Tree&quot; class=&quot;headerlink&quot; title=&quot;SweetFruits TopC</summary>
      
    
    
    
    <category term="default category" scheme="http://chasingdeath.github.io/categories/none/"/>
    
    
    <category term="default tag" scheme="http://chasingdeath.github.io/tags/default-tag/"/>
    
  </entry>
  
</feed>
